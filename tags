!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	makefile	/^	-for f in $$(cat $(TMP1)); do echo $$(basename $$f); done  | sort | uniq -d > $(TMP2)$/;"	p	file:	signature:(TMP1)
$	makefile	/^	-for f in $$(cat $(TMP2)); do echo "$$f:"; find . -name $$f; echo ; done$/;"	p	file:	signature:(TMP2)
$	makefile	/^	@for f in $(FXTHDRS); do $(CXX) -DFXT_NO_WARN_HDR -MM -MT $${f} $(IFLAGS) $$f >> $(TMPDEPH) ;  done$/;"	p	file:	signature:(FXTHDRS)
$	makefile	/^	@for f in $(FXTHDRS); do $(CXX) -DFXT_NO_WARN_HDR -MM -MT $${f} $(IFLAGS) $$f >> $(TMPDEPH) ;  done$/;"	p	file:	signature:(TMPDEPH)
$	src/convolution/fftcnvl.o	/^º/;"	v
$	tags	/^$	makefile	\/^	@for f in $(FXTHDRS); do $(CXX) -DFXT_NO_WARN_HDR -MM -MT $${f} $(IFLAGS) $$f >> $(TMPDEPH) ;  done$\/;"	p	file:	signature:(TMPDEPH)$/;"	p	file:	signature:(FXTHDRS)
$	tags	/^$	makefile	\/^	@for f in $(FXTHDRS); do $(CXX) -DFXT_NO_WARN_HDR -MM -MT $${f} $(IFLAGS) $$f >> $(TMPDEPH) ;  done$\/;"	p	file:	signature:(TMPDEPH)$/;"	p	file:	signature:(TMPDEPH)
$	tags	/^$$	makefile	\/^	-for f in $$(cat $(TMP1)); do echo $$(basename $$f); done  | sort | uniq -d > $(TMP2)$\/;"	p	file:	signature:(basename $$f)$/;"	p	file:	signature:(TMP1)
$	tags	/^$h	scripts\/chkundoc.zsh	\/^for h in $(cat $TMP2); do grep $h $TMP1 >\\\/dev\\\/null || echo $h; done$\/;"	v$/;"	p	file:	signature:(cat $TMP2)
$$	makefile	/^	-for f in $$(cat $(TMP1)); do echo $$(basename $$f); done  | sort | uniq -d > $(TMP2)$/;"	p	file:	signature:(basename $$f)
$$	tags	/^$$	makefile	\/^	-for f in $$(cat $(TMP1)); do echo $$(basename $$f); done  | sort | uniq -d > $(TMP2)$\/;"	p	file:	signature:(basename $$f)$/;"	p	file:	signature:(basename $$f)
$0	scripts/replace	/^THIS='replace'; # `basename $0`;$/;"	v
$8t	src/dctdst/dctzapata.o	/^ELF/;"	v
$DDIRS	scripts/make-demo-main.sh	/^for d in $DDIRS; do$/;"	v
$E	scripts/eval-bench-log.pl	/^$E = 0; # to skip to first program, set to 1 to parse fxt-demos$/;"	v
$H	src/comb/binary-huffman.o	/^ELF/;"	v
$H	src/mod/sqrtmod.o	/^ELF/;"	v
$H	src/ntt/nttdif2.o	/^ELF/;"	v
$HDRS	scripts/make-demo-list.sh	/^        for h in $HDRS; do$/;"	v
$M	src/mod/sqrtmod.o	/^ELF/;"	v
$V	scripts/build-old.zsh	/^    echo $V;$/;"	v
$V	scripts/diff-old.zsh	/^    echo $V;$/;"	v
$c	scripts/attic/chklyndon.sh	/^    echo $c;$/;"	v
$commentsq	scripts/autodoc.pl	/^$commentsq = 1;   # whether comments before function body will be printed$/;"	v
$echoclass	scripts/autodoc.pl	/^$echoclass = 1;   # whether to echo class declarations$/;"	v
$echocolon	scripts/autodoc.pl	/^$echocolon = 1;   # whether to echo lines starting with '\/\/:'$/;"	v	typeref:class:declarations
$echoinline	scripts/autodoc.pl	/^$echoinline = 1;  # whether to echo inline funcs from srcfiles$/;"	v	file:
$echoregion	scripts/autodoc.pl	/^$echoregion = 1;  # whether to regions between '\/\/<<' and '\/\/>>'$/;"	v
$echostatic	scripts/autodoc.pl	/^$echostatic = 1;  # whether to echo static funcs$/;"	v
$echotune	scripts/autodoc.pl	/^$echotune = 1;    # whether to show tuning #defines in srcfiles$/;"	v
$funcnm	scripts/autodoc.pl	/^$funcnm = '';     # name of the function to be searched in $srcfile$/;"	v
$h	scripts/chkundoc.zsh	/^for h in $(cat $TMP2); do grep $h $TMP1 >\/dev\/null || echo $h; done$/;"	v
$h	tags	/^$h	scripts\/chkundoc.zsh	\/^for h in $(cat $TMP2); do grep $h $TMP1 >\\\/dev\\\/null || echo $h; done$\/;"	v$/;"	v
$hlinect	scripts/autodoc.pl	/^$hlinect = 0;     # count lines in header file$/;"	v
$idpat	scripts/autodoc.pl	/^$idpat   = '\\b[a-zA-Z_][a-zA-Z0-9_]*\\b';  # regex for C-identifier$/;"	v
$n	scripts/x.zsh	/^    echo $n;$/;"	v
$patall	scripts/autodoc.pl	/^$patall = '^';    # match-all pattern$/;"	v
$patq	scripts/autodoc.pl	/^$patq = 0;        # whether we have a pattern to match$/;"	v
$pdiscardedq	scripts/autodoc.pl	/^$pdiscardedq = 1; # whether to print discarded lines from header$/;"	v
$q	scripts/chk-bw-page.pl	/^exit $q;$/;"	v
$r	scripts/chksrc.pl	/^exit $r;$/;"	v
$ret	scripts/chkxfiles.sh	/^exit $ret;$/;"	v
$ret	scripts/chkxfiles.sh	/^if [ $ret != 0 ]; then$/;"	v
$showaux	scripts/autodoc.pl	/^$showaux = 1;     # whether to print funcs marked as auxil$/;"	v
$srcfile	scripts/autodoc.pl	/^$srcfile = '';    # source file name given in header$/;"	v
$srcfilepr	scripts/autodoc.pl	/^$srcfilepr = 0;   # whether source file name already printed$/;"	v
$srclinect	scripts/autodoc.pl	/^$srclinect = 0;   # line counter in srcfile$/;"	v
$srcopenq	scripts/autodoc.pl	/^$srcopenq = 0;    # whether srcfile is open$/;"	v
$u	src/fft/rowcnvls.o	/^ELF/;"	v
A	demo/comb/shift-subsets-demo.cc	/^void A(ulong x)  \/\/ shifts-order for subsets$/;"	f	signature:(ulong x)
A	doc/wfl-hilbert-doc.txt	/^generator morphism for  A  is found  A  again; retain the symbol  A , and$/;"	v
A	scripts/mgd.sh	/^    A=$A\/$(basename $2);$/;"	v
A	src/ds/centered-array2d.h	/^    array2d<Type> A;$/;"	m	class:centered_array2d	access:private
A	src/ds/centered-array3d.h	/^    array3d<Type> A;$/;"	m	class:centered_array3d	access:private
AAHS_STEP_4	test/test-bits.cc	778;"	d	file:
ALLOCA	src/fxtalloca.h	17;"	d
ALLOCA	src/fxtalloca.h	20;"	d
ALLOCA	src/fxtalloca.h	24;"	d
ALLOCA	src/fxtalloca.h	27;"	d
ALTALT	src/graph/lyndon-gray.h	29;"	d
ALT_ALGORITM	src/graph/lyndon-gray.h	25;"	d
ALT_ALGORITM	src/graph/lyndon-gray.h	260;"	d
ARRANGEMENT_RGS_FIXARRAYS	src/comb/arrangement-rgs.h	15;"	d
ARRAY2D_ASSERTS	src/ds/array2d.h	13;"	d
ARRAY2D_ASSERTS	src/ds/array3d.h	18;"	d
ARRAY3D_ASSERTS	src/ds/array3d.h	13;"	d
ARRAY_LEN	src/array-len.h	9;"	d
ASCENT_ALT_RGS_FIXARRAYS	src/comb/ascent-alt-rgs.h	14;"	d
ASCENT_RGS_FIXARRAYS	src/comb/ascent-rgs.h	16;"	d
ASCENT_RGS_SUBSET_LEX_FIXARRAYS	src/comb/ascent-rgs-subset-lex.h	17;"	d
AS_FXTBOOK	demo/bits/debruijn-lookup-demo.cc	15;"	d	file:
ATUH	src/graph/mk-debruijn-digraph.o	/^ELF/;"	v
AUL	src/chirpzt/slowfracft.o	/^ELF/;"	v
A_	src/comb/dyck-pref2.h	/^    ulong *A_;   \/\/ aux., length n-2$/;"	m	class:dyck_pref2	access:public
Abs	demo/seq/A187081-demo.cc	/^static inline Type Abs(const Type &x)$/;"	f	file:	signature:(const Type &x)
Abs	src/aux0/attic/sign.h	/^static inline Type Abs(const Type &x)$/;"	f	signature:(const Type &x)
Abs	src/mod/mod.cc	/^static inline Type Abs(const Type &x)$/;"	f	file:	signature:(const Type &x)
B	demo/arith/zero-divisors-demo.cc	/^bitarray *B;  \/\/ matrix$/;"	v
B	demo/comb/composition-nz-gray-rec-demo.cc	/^void B(ulong n, ulong m);$/;"	p	file:	signature:(ulong n, ulong m)
B	demo/comb/composition-nz-gray-rec-demo.cc	/^void B(ulong n, ulong m=0)$/;"	f	signature:(ulong n, ulong m=0)
B	demo/comb/shift-subsets-demo.cc	/^void B(ulong x)  \/\/ shifts-order for Fibonacci words$/;"	f	signature:(ulong x)
B	demo/graph/sta-graph-acgray-demo.cc	/^ulong B[MAX_N];  \/\/ tag array$/;"	v
B	demo/graph/sta-graph-macgray-demo.cc	/^ulong B[MAX_N];  \/\/ tag array$/;"	v
B	doc/wfl-hilbert-doc.txt	/^    ( B(j), B(j+1) )    if  j  =  0 ,$/;"	p	file:	signature:(j)
B	doc/wfl-hilbert-doc.txt	/^separate walks through  (l-1)-cells, consecutive along a Gray path  B(j) ,$/;"	p	file:	signature:(j)
B	doc/wfl-hilbert-doc.txt	/^which is completely determined by  B(j) : its entry is fixed by adjacency to$/;"	p	file:	signature:(j)
B	scripts/mgd.sh	/^    B=$B\/$(basename $1);$/;"	v
B	src/wavelet/daubechies.o	/^ELF/;"	v
BH	test/test-bits.cc	927;"	d	file:
BITSUBSET_GRAY_METHOD1	src/bits/bitsubset-gray.h	12;"	d
BITS_PER_LONG	demo/bits/debruijn-lookup-demo.cc	18;"	d	file:
BITS_PER_LONG	demo/bits/debruijn-lookup-demo.cc	19;"	d	file:
BITS_PER_LONG	src/bits/bitsperlong.h	14;"	d
BITS_PER_LONG	src/bits/bitsperlong.h	18;"	d
BITS_PER_LONG	src/bits/bitsperlong.h	21;"	d
BITS_PER_LONG_LONG	src/bits/bitsperlong.h	38;"	d
BITS_USE_ASM	src/bits/bitasm.h	18;"	d
BITS_USE_ASM	src/bits/bitasm.h	23;"	d
BITS_USE_ASM_AMD64	src/bits/bitasm.h	24;"	d
BITS_USE_ASM_I386	src/bits/bitasm.h	19;"	d
BITS_USE_ASM_SSE	src/bits/bitasm.h	26;"	d
BIT_BUTTERFLY_VER	src/bits/bitbutterfly.h	14;"	d
BIT_BUTTERFLY_VER	src/bits/bitbutterfly.h	177;"	d
BMI_OPT	src/bmat/bitmat-inverse.cc	17;"	d	file:
BPLH	src/bits/bitzip.h	197;"	d
BPLH	src/bits/bitzip.h	288;"	d
BYTES_PER_LONG	src/bits/bitsperlong.h	31;"	d
BYTES_PER_LONG_LONG	src/bits/bitsperlong.h	62;"	d
B_	src/comb/dyck-pref.h	/^    ulong *B_;   \/\/ Dyck word as delta set (length=k*n=len); one-based array!$/;"	m	class:dyck_pref	access:public
B_	src/comb/dyck-pref2.h	/^    ulong *B_;   \/\/ Dyck word as delta set (length=k*n=len); one-based array!$/;"	m	class:dyck_pref2	access:public
B_	src/comb/gray-cycle-leaders.h	/^    bit_subset B_;$/;"	m	class:gray_cycle_leaders	access:public
BigInt	scripts/poly2hex.pl	/^use Math::BigInt;$/;"	m	class:Math	file:
C	demo/bits/dragon-curve-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-hex-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r13-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r4-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r5-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r7-2-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r7-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon-r9-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	demo/bits/dragon3-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
C	src/bits/crc32.o	/^/;"	v
CASE	demo/comb/string-subst-hilbert3d-demo.cc	172;"	d	file:
CATALAN_RGS_SUBSET_LEX_SC	src/comb/catalan-rgs-subset-lex.h	20;"	d
CATALAN_STEP_RGS_SUBSET_LEXREV_FIXARRAYS	src/comb/catalan-step-rgs-subset-lexrev.h	16;"	d
CD_sign_it	doc/aux0-doc.txt	/^inline int CD_sign_it(ulong r, ulong c, ulong n);$/;"	p	file:	signature:(ulong r, ulong c, ulong n)
CD_sign_it	src/aux0/cayley-dickson-mult.h	/^inline int CD_sign_it(ulong r, ulong c, ulong n)$/;"	f	signature:(ulong r, ulong c, ulong n)
CD_sign_rec	doc/aux0-doc.txt	/^inline int CD_sign_rec(ulong r, ulong c, ulong n);$/;"	p	file:	signature:(ulong r, ulong c, ulong n)
CD_sign_rec	src/aux0/cayley-dickson-mult.h	/^inline int CD_sign_rec(ulong r, ulong c, ulong n)$/;"	f	signature:(ulong r, ulong c, ulong n)
CD_zerodiv_q	doc/aux0-doc.txt	/^inline bool CD_zerodiv_q(ulong r, ulong c);$/;"	p	file:	signature:(ulong r, ulong c)
CD_zerodiv_q	src/aux0/cayley-dickson-mult.h	/^inline bool CD_zerodiv_q(ulong r, ulong c)$/;"	f	signature:(ulong r, ulong c)
CF	demo/graph/graph-lyndon-gray-demo.cc	/^typedef int (*CF)(const ulong &, const ulong &);$/;"	t	file:
CHANGE_RGS_FIXARRAYS	src/comb/change-rgs.h	16;"	d
CHECK	demo/bits/bitsubset-demo.cc	32;"	d	file:
CHECK	demo/bits/bitsubset-gray-demo.cc	30;"	d	file:
CHECK	src/ds/bitarray.h	32;"	d
CHECK	src/ds/bitarray.h	355;"	d
CHECK	test/test.h	64;"	d
CHECK_IMAG	test/test.h	68;"	d
CHECK_REAL	test/test.h	72;"	d
CHECK_STACKS	src/ds/attic/coroutine.h	11;"	d
CHECK_STACKS	src/ds/attic/coroutine.h	83;"	d
CHECK_UNRANK	demo/comb/perm-rot-demo.cc	19;"	d	file:
CHK	src/matrix/attic/testmatrix.h	18;"	d
CHK	src/matrix/attic/testmatrix.h	25;"	d
CHK_GRAY	demo/comb/gexz-gray-demo.cc	14;"	d	file:
CHK_GRAY	demo/comb/ntz-gray-demo.cc	14;"	d	file:
CHK_GRAY	demo/comb/perm-dist1-gray-demo.cc	18;"	d	file:
CHK_GRAY	demo/comb/perm-l1r2-gray-demo.cc	18;"	d	file:
CHK_GRAY	demo/comb/perm-right1-gray-demo.cc	18;"	d	file:
CHOP	src/aux1/attic/auxprint.cc	14;"	d	file:
CHOP	src/aux1/attic/graph-print.cc	16;"	d	file:
CHOP	test/aux-test.cc	30;"	d	file:
CHOPX	src/aux1/attic/auxprint.cc	129;"	d	file:
CHOPX	src/aux1/attic/auxprint.cc	161;"	d	file:
CHOPX	src/aux1/attic/auxprint.cc	207;"	d	file:
CHOPX	src/aux1/attic/auxprint.cc	230;"	d	file:
CHOPX	test/aux-test.cc	145;"	d	file:
CHOPX	test/aux-test.cc	177;"	d	file:
CHOPX	test/aux-test.cc	223;"	d	file:
CHOPX	test/aux-test.cc	246;"	d	file:
CLEAR	src/perm/perminvert.cc	/^static inline void CLEAR(ulong *f, ulong k)  { f[k & s0] &= s0; }$/;"	f	file:	signature:(ulong *f, ulong k)
CLH	test/test-bits.cc	928;"	d	file:
CODE	demo/comb/necklaces-via-gray-leaders-demo.cc	21;"	d	file:
CODE	demo/graph/graph-fibrepgray-demo.cc	79;"	d	file:
CODE	demo/graph/graph-fibrepgray-demo.cc	86;"	d	file:
CODE	demo/graph/graph-gray-demo.cc	64;"	d	file:
CODE	demo/graph/graph-gray-demo.cc	66;"	d	file:
CODE	demo/graph/graph-gray-demo.cc	75;"	d	file:
CODE	demo/graph/graph-gray-demo.cc	77;"	d	file:
CODE	demo/graph/graph-lyndon-gray-demo.cc	138;"	d	file:
CODE	demo/graph/graph-lyndon-gray-demo.cc	143;"	d	file:
CODE	demo/graph/graph-mtl-demo.cc	72;"	d	file:
CODE	demo/graph/graph-mtl-demo.cc	74;"	d	file:
CODE	demo/graph/graph-mtl-demo.cc	88;"	d	file:
CODE	demo/graph/graph-mtl-demo.cc	94;"	d	file:
CODE	src/graph/lyndon-cmp.cc	101;"	d	file:
CODE	src/graph/lyndon-cmp.cc	109;"	d	file:
CODE	src/graph/lyndon-cmp.cc	112;"	d	file:
CODE	src/graph/lyndon-cmp.cc	130;"	d	file:
CODE	src/graph/lyndon-cmp.cc	133;"	d	file:
CODE	src/graph/lyndon-cmp.cc	52;"	d	file:
CODE	src/graph/lyndon-cmp.cc	55;"	d	file:
CODE	src/graph/lyndon-cmp.cc	63;"	d	file:
CODE	src/graph/lyndon-cmp.cc	66;"	d	file:
CODE	src/graph/lyndon-cmp.cc	74;"	d	file:
CODE	src/graph/lyndon-cmp.cc	77;"	d	file:
CODE	src/graph/lyndon-cmp.cc	87;"	d	file:
CODE	src/graph/lyndon-cmp.cc	90;"	d	file:
CODE	src/graph/lyndon-cmp.cc	98;"	d	file:
CODE	src/graph/lyndon-gray.h	169;"	d
CODE	src/graph/lyndon-gray.h	172;"	d
CODE	src/graph/lyndon-gray.h	178;"	d
CODE	src/graph/lyndon-gray.h	181;"	d
CODE	src/graph/lyndon-gray.h	187;"	d
CODE	src/graph/lyndon-gray.h	190;"	d
CODE	src/graph/lyndon-gray.h	196;"	d
CODE	src/graph/lyndon-gray.h	199;"	d
CODE	src/graph/lyndon-gray.h	205;"	d
CODE	src/graph/lyndon-gray.h	208;"	d
CODE	src/graph/lyndon-gray.h	217;"	d
CODE	src/graph/lyndon-gray.h	221;"	d
COLEX_COMB_VERSION	src/bits/bitcombcolex.h	120;"	d
COLEX_COMB_VERSION	src/bits/bitcombcolex.h	37;"	d
COLSEP	demo/arith/briggs-log-demo.cc	36;"	d	file:
COLSEP	demo/arith/briggs-log-demo.cc	39;"	d	file:
COLSEP	demo/arith/cordic-circ-demo.cc	33;"	d	file:
COLSEP	demo/arith/cordic-circ-demo.cc	36;"	d	file:
COLSEP	demo/arith/cordic-hyp-demo.cc	32;"	d	file:
COLSEP	demo/arith/cordic-hyp-demo.cc	35;"	d	file:
COLSEP	demo/arith/shiftadd-exp-demo.cc	36;"	d	file:
COLSEP	demo/arith/shiftadd-exp-demo.cc	39;"	d	file:
COLSEP	demo/arith/shiftadd-log-demo.cc	34;"	d	file:
COLSEP	demo/arith/shiftadd-log-demo.cc	37;"	d	file:
COMPLEX_REAL_FFT	src/realfft/skiprealfft.cc	17;"	d	file:
COMPOSITION_NZ_FIXARRAYS	src/comb/composition-nz.h	20;"	d
COMPOSITION_NZ_GRAY2_FIXARRAYS	src/comb/composition-nz-gray2.h	18;"	d
COMPOSITION_NZ_GRAY_FIXARRAYS	src/comb/composition-nz-gray.h	18;"	d
COMPOSITION_NZ_MAX_FIXARRAYS	src/comb/composition-nz-max.h	15;"	d
COMPOSITION_NZ_MIN_FIXARRAYS	src/comb/composition-nz-min.h	15;"	d
COMPOSITION_NZ_ODD_FIXARRAYS	src/comb/composition-nz-odd.h	16;"	d
COMPOSITION_NZ_ODD_SUBSET_LEX_FIXARRAYS	src/comb/composition-nz-odd-subset-lex.h	16;"	d
COMPOSITION_NZ_SORTS2_FIXARRAYS	src/comb/composition-nz-sorts2.h	17;"	d
COMPOSITION_NZ_SORTS2_PP_FIXARRAYS	src/comb/composition-nz-sorts2-pp.h	17;"	d
COMPOSITION_NZ_SORTS_FIXARRAYS	src/comb/composition-nz-sorts.h	17;"	d
COMPOSITION_NZ_SUBSET_LEX_FIXARRAYS	src/comb/composition-nz-subset-lex.h	19;"	d
COMPOSITION_NZ_SUBSET_LEX_NEXT_A	src/comb/composition-nz-subset-lex.h	22;"	d
COMPOSITION_NZ_SUBSET_LEX_PREV_A	src/comb/composition-nz-subset-lex.h	23;"	d
COND	src/comb/attic/all-compositions-minchange.cc	33;"	d	file:
COND	src/comb/attic/all-compositions-minchange.cc	62;"	d	file:
COND	test/test-bits.cc	1101;"	d	file:
CORO_CALL	src/ds/attic/coroutine-paren-demo.cc	55;"	d	file:
CORO_RETURN	src/ds/attic/coroutine-paren-demo.cc	59;"	d	file:
COS_1_PI_8	src/aux0/attic/constants.h	15;"	d
COS_1_PI_8	src/fht/cfht0.cc	18;"	d	file:
COS_1_PI_8	src/fht/cfhtdif.cc	18;"	d	file:
COS_1_PI_8	src/fht/cfhtdit.cc	17;"	d	file:
COS_1_PI_8	src/fht/fht0.cc	14;"	d	file:
COS_1_PI_8	src/fht/fhtdif.cc	14;"	d	file:
COS_1_PI_8	src/fht/fhtdit.cc	13;"	d	file:
CP_ROWS	doc/convolution-doc.txt	400;"	d	file:
CP_ROWS	doc/convolution-doc.txt	419;"	d	file:
CP_ROWS	src/convolution/matrixfftcnvl.cc	63;"	d	file:
CP_ROWS	src/convolution/matrixfftcnvla.cc	79;"	d	file:
CU1	src/fft/fft9.cc	13;"	d	file:
CU2	src/fft/fft9.cc	14;"	d	file:
CU3	src/fft/fft9.cc	15;"	d	file:
CXXFLAGS	scripts/run-tests.sh	/^CXXFLAGS="${CXXFLAGS} -DDISABLE_BIT_ASM";$/;"	v
Catalan	src/graph/mk-paren-gray-digraph.cc	/^static ulong Catalan[]=$/;"	v	file:
Comp	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
Complex	src/complextype.h	/^typedef  complex<double>  Complex;$/;"	t
Cplx	demo/bits/radix-2i-demo.cc	/^typedef complex<long> Cplx;$/;"	t	file:
Cplx	demo/bits/radix-2i-to-z-demo.cc	/^typedef complex<long> Cplx;$/;"	t	file:
Cplx	demo/bits/radix-m1pi-demo.cc	/^typedef complex<long> Cplx;$/;"	t	file:
Cplx	demo/bits/radix-m1pi-to-z-demo.cc	/^typedef complex<long> Cplx;$/;"	t	file:
Cstr	demo/sort/sort-string-demo.cc	/^typedef const char * Cstr;$/;"	t	file:
D	demo/seq/A005576-demo.cc	/^const bool D = false;  \/\/ for debug$/;"	v
D	src/comb/catalan.o	/^ELF/;"	v
DELTA	demo/graph/graph-mtl-demo.cc	27;"	d	file:
DESCENT_RGS_FIXARRAYS	src/comb/descent-rgs.h	16;"	d
DIFFFILENAME	scripts/replace	/^        D|+D) DIFFFILENAME=$OPTARG;$/;"	v
DIFFFILENAME	scripts/replace	/^        d|+d) DIFFFILENAME=$OPTARG;$/;"	v
DIFFONLY	scripts/replace	/^unset DIFFONLY;$/;"	v
DIFFOPT	scripts/replace	/^        c|+c) DIFFOPT='-C 2'$/;"	v
DIFFOPT	scripts/replace	/^unset DIFFOPT;$/;"	v
DIF_FFT_CORE	doc/convolution-doc.txt	13;"	d	file:
DIF_FFT_CORE	doc/convolution-doc.txt	17;"	d	file:
DIF_FFT_CORE	doc/convolution-doc.txt	67;"	d	file:
DIF_FFT_CORE	doc/convolution-doc.txt	71;"	d	file:
DIF_FFT_CORE	src/convolution/fftcocnvl.cc	24;"	d	file:
DIF_FFT_CORE	src/convolution/fftcocnvl.cc	28;"	d	file:
DIF_FFT_CORE	src/convolution/matrixfftcocnvla.cc	34;"	d	file:
DIF_FFT_CORE	src/convolution/matrixfftcocnvla.cc	38;"	d	file:
DIT_FFT_CORE	doc/convolution-doc.txt	12;"	d	file:
DIT_FFT_CORE	doc/convolution-doc.txt	16;"	d	file:
DIT_FFT_CORE	doc/convolution-doc.txt	66;"	d	file:
DIT_FFT_CORE	doc/convolution-doc.txt	70;"	d	file:
DIT_FFT_CORE	src/convolution/fftcocnvl.cc	23;"	d	file:
DIT_FFT_CORE	src/convolution/fftcocnvl.cc	27;"	d	file:
DIT_FFT_CORE	src/convolution/matrixfftcocnvla.cc	33;"	d	file:
DIT_FFT_CORE	src/convolution/matrixfftcocnvla.cc	37;"	d	file:
DIVMOD	src/ds/bitarray.h	20;"	d
DIVMOD	src/ds/bitarray.h	356;"	d
DIVMOD_TEST	src/ds/bitarray.h	24;"	d
DIVMOD_TEST	src/ds/bitarray.h	357;"	d
DO	demo/fft/fht-bench.cc	27;"	d	file:
DO	demo/fft/walsh-bench.cc	26;"	d	file:
DO_CHECK	test/test.h	21;"	d
DO_CHECK_EXACT	test/test.h	50;"	d
DO_CHECK_IMAG	test/test.h	31;"	d
DO_CHECK_REAL	test/test.h	40;"	d
DRAW_ZG_PARENS	demo/comb/perm-genus-demo.cc	35;"	d	file:
DSRC	INSTALL.txt	/^   make 1demo DSRC=demo\/comb\/composition-nz-demo.cc$/;"	v
DSRC	scripts/attic/chklyndon.sh	/^make 1demo DSRC=demo\/lyndongray-demo.cc$/;"	v
DST	src/aux2/transpose.h	125;"	d
DST	src/aux2/transpose2.h	64;"	d
DUMMY	scripts/replace	/^        n|+n) DUMMY=1;$/;"	v
DYCK_RGS_SUBSET_LEX_SC	src/comb/dyck-rgs-subset-lex.h	19;"	d
D_	src/comb/mset-perm-gray.h	/^    ulong *D_;   \/\/ direction$/;"	m	class:mset_perm_gray	access:public
Daub1	src/wavelet/daubechies.cc	/^static const double Daub1[] =$/;"	v	file:
Daub10	src/wavelet/daubechies.cc	/^static const double Daub10[] =$/;"	v	file:
Daub11	src/wavelet/daubechies.cc	/^static const double Daub11[] =$/;"	v	file:
Daub12	src/wavelet/daubechies.cc	/^static const double Daub12[] =$/;"	v	file:
Daub13	src/wavelet/daubechies.cc	/^static const double Daub13[] =$/;"	v	file:
Daub14	src/wavelet/daubechies.cc	/^static const double Daub14[] =$/;"	v	file:
Daub15	src/wavelet/daubechies.cc	/^static const double Daub15[] =$/;"	v	file:
Daub16	src/wavelet/daubechies.cc	/^static const double Daub16[] =$/;"	v	file:
Daub17	src/wavelet/daubechies.cc	/^static const double Daub17[] =$/;"	v	file:
Daub18	src/wavelet/daubechies.cc	/^static const double Daub18[] =$/;"	v	file:
Daub19	src/wavelet/daubechies.cc	/^static const double Daub19[] =$/;"	v	file:
Daub2	src/wavelet/daubechies.cc	/^static const double Daub2[] =$/;"	v	file:
Daub20	src/wavelet/daubechies.cc	/^static const double Daub20[] =$/;"	v	file:
Daub21	src/wavelet/daubechies.cc	/^static const double Daub21[] =$/;"	v	file:
Daub22	src/wavelet/daubechies.cc	/^static const double Daub22[] =$/;"	v	file:
Daub23	src/wavelet/daubechies.cc	/^static const double Daub23[] =$/;"	v	file:
Daub24	src/wavelet/daubechies.cc	/^static const double Daub24[] =$/;"	v	file:
Daub25	src/wavelet/daubechies.cc	/^static const double Daub25[] =$/;"	v	file:
Daub26	src/wavelet/daubechies.cc	/^static const double Daub26[] =$/;"	v	file:
Daub27	src/wavelet/daubechies.cc	/^static const double Daub27[] =$/;"	v	file:
Daub28	src/wavelet/daubechies.cc	/^static const double Daub28[] =$/;"	v	file:
Daub29	src/wavelet/daubechies.cc	/^static const double Daub29[] =$/;"	v	file:
Daub3	src/wavelet/daubechies.cc	/^static const double Daub3[] =$/;"	v	file:
Daub30	src/wavelet/daubechies.cc	/^static const double Daub30[] =$/;"	v	file:
Daub31	src/wavelet/daubechies.cc	/^static const double Daub31[] =$/;"	v	file:
Daub32	src/wavelet/daubechies.cc	/^static const double Daub32[] =$/;"	v	file:
Daub33	src/wavelet/daubechies.cc	/^static const double Daub33[] =$/;"	v	file:
Daub34	src/wavelet/daubechies.cc	/^static const double Daub34[] =$/;"	v	file:
Daub35	src/wavelet/daubechies.cc	/^static const double Daub35[] =$/;"	v	file:
Daub36	src/wavelet/daubechies.cc	/^static const double Daub36[] =$/;"	v	file:
Daub37	src/wavelet/daubechies.cc	/^static const double Daub37[] =$/;"	v	file:
Daub38	src/wavelet/daubechies.cc	/^static const double Daub38[] =$/;"	v	file:
Daub4	src/wavelet/daubechies.cc	/^static const double Daub4[] =$/;"	v	file:
Daub5	src/wavelet/daubechies.cc	/^static const double Daub5[] =$/;"	v	file:
Daub6	src/wavelet/daubechies.cc	/^static const double Daub6[] =$/;"	v	file:
Daub7	src/wavelet/daubechies.cc	/^static const double Daub7[] =$/;"	v	file:
Daub8	src/wavelet/daubechies.cc	/^static const double Daub8[] =$/;"	v	file:
Daub9	src/wavelet/daubechies.cc	/^static const double Daub9[] =$/;"	v	file:
E	doc/wfl-hilbert-doc.txt	/^Denote by  ( E(j), F(j) )  the  j-th such edge-pair --- relative to its base,$/;"	p	file:	signature:(j)
E	doc/wfl-hilbert-doc.txt	/^It becomes natural to regard the triplet of functions  B,E,F  as an enhanced$/;"	v
ECHO	test/test.h	60;"	d
EFFS_STEP_8	test/test-bits.cc	781;"	d	file:
EMU_CALL	src/comb/attic/combminchange.cc	15;"	d	file:
ENDL	demo/arith/briggs-log-demo.cc	37;"	d	file:
ENDL	demo/arith/briggs-log-demo.cc	40;"	d	file:
ENDL	demo/arith/cordic-circ-demo.cc	34;"	d	file:
ENDL	demo/arith/cordic-circ-demo.cc	37;"	d	file:
ENDL	demo/arith/cordic-hyp-demo.cc	33;"	d	file:
ENDL	demo/arith/cordic-hyp-demo.cc	36;"	d	file:
ENDL	demo/arith/power-costs-demo.cc	19;"	d	file:
ENDL	demo/arith/power-costs-demo.cc	22;"	d	file:
ENDL	demo/arith/shiftadd-exp-demo.cc	37;"	d	file:
ENDL	demo/arith/shiftadd-exp-demo.cc	40;"	d	file:
ENDL	demo/arith/shiftadd-log-demo.cc	35;"	d	file:
ENDL	demo/arith/shiftadd-log-demo.cc	38;"	d	file:
EQUIV	test/test.h	76;"	d
EQUIV_EXACT	test/test.h	82;"	d
EQUIV_REAL	test/test.h	79;"	d
ERRIFNOFILES	scripts/replace	/^        N|+N) ERRIFNOFILES=0;$/;"	v
ESCSET	scripts/replace	/^        e|+e) ESCSET=$OPTARG;$/;"	v
EXPR	scripts/whodep.sh	/^            EXPR="#include .*$1";$/;"	v
F	demo/comb/composition-nz-gray-rec-demo.cc	/^void F(ulong n, ulong m);$/;"	p	file:	signature:(ulong n, ulong m)
F	demo/comb/composition-nz-gray-rec-demo.cc	/^void F(ulong n, ulong m=0)$/;"	f	signature:(ulong n, ulong m=0)
F	demo/comb/composition-nz-subset-lex-rec-demo.cc	/^void F(ulong n, ulong m)$/;"	f	signature:(ulong n, ulong m)
F	demo/comb/shift-subsets-demo.cc	/^void F(ulong x)$/;"	f	signature:(ulong x)
F	demo/perm/perm-decomp-demo.cc	343;"	d	file:
FAST_REVBIN	src/perm/revbinpermute.h	113;"	d
FAST_REVBIN	src/perm/revbinpermute.h	18;"	d
FAST_REVBIN	src/perm/revbinpermute0.h	115;"	d
FAST_REVBIN	src/perm/revbinpermute0.h	18;"	d
FAST_TRIG	src/fht/fhtmayer.txt	290;"	d	file:
FFT	fxt.lsm	/^                correlation, spectrum, mass storage FFT,$/;"	v
FFT	src/convolution/fftcocnvl.cc	17;"	d	file:
FFT	src/convolution/weightedconv.cc	14;"	d	file:
FFT	src/correlation/fftcocorr.cc	15;"	d	file:
FFT	src/fft/attic/ndimfft.cc	24;"	d	file:
FFT	src/fft/columnffts.cc	16;"	d	file:
FFT	src/fft/skipfft.cc	14;"	d	file:
FFT	src/fft/twodimfft.cc	12;"	d	file:
FFT0	src/fft/columnffts.cc	17;"	d	file:
FFT0	src/fft/skipfft.cc	15;"	d	file:
FFT0C	src/fft/columnffts.cc	20;"	d	file:
FFTC	src/convolution/weightedconv.cc	16;"	d	file:
FFTC	src/fft/columnffts.cc	19;"	d	file:
FHT_FFT_VERSION	src/fft/fhtcfft.cc	15;"	d	file:
FHT_FFT_VERSION	src/fft/fhtfft.cc	12;"	d	file:
FHT_SWAP	src/fht/fhtmayer.txt	294;"	d	file:
FILES	scripts/autodoc.zsh	/^        FILES="$FILES $a";$/;"	v
FILES	scripts/upd-copyright.el	/^; for f in FILES ; do emacs-nox -batch -l upd-copyright.el; done$/;"	v
FINAL_RADIX_16	doc/fht-doc.txt	129;"	d	file:
FINAL_RADIX_16	doc/fht-doc.txt	71;"	d	file:
FINAL_RADIX_16	src/fht/cfhtdif.cc	33;"	d	file:
FINAL_RADIX_16	src/fht/fhtdif.cc	29;"	d	file:
FORCE_ALLOCA_H	src/fxtalloca.h	10;"	d
FORCE_ALLOCA_H	src/fxtalloca.h	13;"	d
FQUIET	scripts/replace	/^        Q|+Q) FQUIET=1;  QUIET=1;$/;"	v
FROM	scripts/mkcompl.sh	/^FROM=`basename $NAME`;$/;"	v
FXT_SILENT_NXARG	demo/comb/string-subst-demo.cc	16;"	d	file:
FXT_SILENT_NXARG	src/comb/attic/stringsubst-demo.cc	11;"	d	file:
Foundation	COPYING.txt	/^ Copyright (C) 2007 Free Software Foundation, Inc. <http:\/\/fsf.org\/>$/;"	v
G	demo/comb/shift-subsets-demo.cc	/^void G(ulong x)$/;"	f	signature:(ulong x)
G	demo/comb/shift-subsets-demo.cc	/^void G(ulong x);  \/\/ F() and G():  Gray shifts-order for subsets$/;"	p	file:	signature:(ulong x)
G	doc/wfl-hilbert-doc.txt	/^the canonical Gray code mapping  j -> G(j) , where$/;"	p	file:	signature:(j)
G	src/bits/bitsubset-gray.h	/^    ulong G;  \/\/ subsets in Gray code order$/;"	m	class:bit_subset_gray	access:protected
G	src/comb/perm-st-gray.h	/^    perm_gray_rot1 *G;  \/\/ underlying permutations$/;"	m	class:perm_st_gray	access:public
GC	demo/mod/modarithtables-demo.cc	29;"	d	file:
GEN	src/comb/attic/combminchange.cc	11;"	d	file:
GENX	demo/gf2n/gf2n-trace0-generators-demo.cc	18;"	d	file:
GF2n	src/bpol/gf2n.h	/^    \/*explicit*\/ GF2n(const GF2n &g) : v_(g.v_)  { ; }$/;"	f	class:GF2n	access:public	signature:(const GF2n &g)
GF2n	src/bpol/gf2n.h	/^    explicit GF2n() : v_(0)  { ; }$/;"	f	class:GF2n	access:public	signature:()
GF2n	src/bpol/gf2n.h	/^    explicit GF2n(const ulong i) : v_(i & mm_)  { ; }$/;"	f	class:GF2n	access:public	signature:(const ulong i)
GF2n	src/bpol/gf2n.h	/^class GF2n$/;"	c
GF2n::GF2n	src/bpol/gf2n.h	/^    \/*explicit*\/ GF2n(const GF2n &g) : v_(g.v_)  { ; }$/;"	f	class:GF2n	access:public	signature:(const GF2n &g)
GF2n::GF2n	src/bpol/gf2n.h	/^    explicit GF2n() : v_(0)  { ; }$/;"	f	class:GF2n	access:public	signature:()
GF2n::GF2n	src/bpol/gf2n.h	/^    explicit GF2n(const ulong i) : v_(i & mm_)  { ; }$/;"	f	class:GF2n	access:public	signature:(const ulong i)
GF2n::c_	src/bpol/gf2n.cc	/^ulong GF2n::c_ = 0;  \/\/ polynomial modulus$/;"	m	class:GF2n	file:
GF2n::c_	src/bpol/gf2n.h	/^    static ulong c_;  \/\/ polynomial modulus$/;"	m	class:GF2n	access:public
GF2n::check	src/bpol/gf2n.cc	/^GF2n::check()  \/\/ uses asserts$/;"	f	class:GF2n	signature:()
GF2n::check	src/bpol/gf2n.h	/^    static void check();  \/\/ uses asserts$/;"	p	class:GF2n	access:public	signature:()
GF2n::g_	src/bpol/gf2n.cc	/^ulong GF2n::g_ = 0;  \/\/ a generator$/;"	m	class:GF2n	file:
GF2n::g_	src/bpol/gf2n.h	/^    static ulong g_;  \/\/ a generator (element of maximal order)$/;"	m	class:GF2n	access:public
GF2n::get_normal	src/bpol/gf2n.h	/^    ulong get_normal()  const  { return p2n(v_); }$/;"	f	class:GF2n	access:public	signature:() const
GF2n::h_	src/bpol/gf2n.cc	/^ulong GF2n::h_ = 0;  \/\/ auxiliary bit-mask for computations$/;"	m	class:GF2n	file:
GF2n::h_	src/bpol/gf2n.h	/^    static ulong h_;  \/\/ auxiliary bit-mask for computations$/;"	m	class:GF2n	access:public
GF2n::half_trace	src/bpol/gf2n.h	/^    GF2n half_trace()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::init	src/bpol/gf2n.cc	/^GF2n::init(ulong n, ulong c\/*=0*\/, bool normalq\/*=0*\/, bool trustme\/*=0*\/)$/;"	f	class:GF2n	signature:(ulong n, ulong c , bool normalq , bool trustme )
GF2n::init	src/bpol/gf2n.h	/^    static bool init(ulong n, ulong c=0, bool normalq=0, bool trustme=0);$/;"	p	class:GF2n	access:public	signature:(ulong n, ulong c=0, bool normalq=0, bool trustme=0)
GF2n::inv	src/bpol/gf2n.h	/^    GF2n inv()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::is_generator	src/bpol/gf2n.h	/^    bool is_generator()  const { return order() == mm_; }$/;"	f	class:GF2n	access:public	signature:() const
GF2n::is_normal	src/bpol/gf2n.h	/^    static bool is_normal()  { return (bool)is_normal_; }$/;"	f	class:GF2n	access:public	signature:()
GF2n::is_normal_	src/bpol/gf2n.cc	/^ulong GF2n::is_normal_ = 0;  \/\/ whether field polynomial is normal$/;"	m	class:GF2n	file:
GF2n::is_normal_	src/bpol/gf2n.h	/^    static ulong is_normal_;  \/\/ whether field polynomial is normal$/;"	m	class:GF2n	access:public
GF2n::mfact_	src/bpol/gf2n.cc	/^factorization GF2n::mfact_;  \/\/ factorization of max order$/;"	m	class:GF2n	file:
GF2n::mfact_	src/bpol/gf2n.h	/^    static factorization mfact_;  \/\/ factorization of max order$/;"	m	class:GF2n	access:public
GF2n::minpoly	src/bpol/gf2n.h	/^    ulong minpoly()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::mm_	src/bpol/gf2n.cc	/^ulong GF2n::mm_ = 0;  \/\/ 2**n - 1 == max order$/;"	m	class:GF2n	file:
GF2n::mm_	src/bpol/gf2n.h	/^    static ulong mm_;  \/\/ 2**n - 1 == max order (a Mersenne number)$/;"	m	class:GF2n	access:public
GF2n::n2p	src/bpol/gf2n.cc	/^GF2n::n2p(ulong f)$/;"	f	class:GF2n	signature:(ulong f)
GF2n::n2p	src/bpol/gf2n.h	/^    static ulong n2p(ulong f);$/;"	p	class:GF2n	access:public	signature:(ulong f)
GF2n::n2p_tab	src/bpol/gf2n.cc	/^ulong GF2n::n2p_tab[BITS_PER_LONG];  \/\/ normal to polynomial$/;"	m	class:GF2n	file:
GF2n::n2p_tab	src/bpol/gf2n.h	/^    static ulong n2p_tab[BITS_PER_LONG];  \/\/ normal to polynomial$/;"	m	class:GF2n	access:public
GF2n::n_	src/bpol/gf2n.cc	/^ulong GF2n::n_ = 0;  \/\/ the 'n' in GF(2**n)$/;"	m	class:GF2n	file:
GF2n::n_	src/bpol/gf2n.h	/^    static ulong n_;  \/\/ the 'n' in GF(2**n)$/;"	m	class:GF2n	access:public
GF2n::one	src/bpol/gf2n.cc	/^GF2n GF2n::one;  \/\/ one (neutral element wrt. multiplication) in GF(2**n)$/;"	m	class:GF2n	file:
GF2n::one	src/bpol/gf2n.h	/^    static GF2n one;  \/\/ one (neutral element wrt. multiplication) in GF(2**n)$/;"	m	class:GF2n	access:public
GF2n::operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (const GF2n &f, ulong v)    { return  f.v_ != v; }$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f, ulong v)
GF2n::operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (ulong v, const GF2n &f)    { return  f.v_ != v; }$/;"	f	class:GF2n	access:friend	signature:(ulong v, const GF2n &f)
GF2n::operator *	src/bpol/gf2n.h	/^    friend inline const GF2n operator * (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator *=	src/bpol/gf2n.h	/^    friend inline GF2n & operator *= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
GF2n::operator +	src/bpol/gf2n.h	/^    friend inline const GF2n operator + (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator +=	src/bpol/gf2n.h	/^    friend inline GF2n & operator += (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
GF2n::operator -	src/bpol/gf2n.h	/^    friend inline const GF2n operator - (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator -=	src/bpol/gf2n.h	/^    friend inline GF2n & operator -= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
GF2n::operator /	src/bpol/gf2n.h	/^    friend inline const GF2n operator \/ (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator /=	src/bpol/gf2n.h	/^    friend inline GF2n & operator \/= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
GF2n::operator =	src/bpol/gf2n.h	/^    inline GF2n & operator = (const GF2n &f)  { v_ = f.v_;  return *this; }$/;"	f	class:GF2n	access:public	signature:(const GF2n &f)
GF2n::operator =	src/bpol/gf2n.h	/^    inline GF2n & operator = (ulong i)  { (*this) = GF2n(i);  return *this; }$/;"	f	class:GF2n	access:public	signature:(ulong i)
GF2n::operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (const GF2n &f, ulong v)    { return  f.v_ == v; }$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f, ulong v)
GF2n::operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
GF2n::operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (ulong v, const GF2n &f)    { return  f.v_ == v; }$/;"	f	class:GF2n	access:friend	signature:(ulong v, const GF2n &f)
GF2n::order	src/bpol/gf2n.h	/^    ulong order() const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::p2n	src/bpol/gf2n.cc	/^GF2n::p2n(ulong f)$/;"	f	class:GF2n	signature:(ulong f)
GF2n::p2n	src/bpol/gf2n.h	/^    static ulong p2n(ulong f);$/;"	p	class:GF2n	access:public	signature:(ulong f)
GF2n::p2n_tab	src/bpol/gf2n.cc	/^ulong GF2n::p2n_tab[BITS_PER_LONG];  \/\/ polynomial to normal$/;"	m	class:GF2n	file:
GF2n::p2n_tab	src/bpol/gf2n.h	/^    static ulong p2n_tab[BITS_PER_LONG];  \/\/ polynomial to normal$/;"	m	class:GF2n	access:public
GF2n::pc_	src/bpol/gf2n.cc	/^const char* GF2n::pc_ = 0;  \/\/ chars to print for zero and one: e.g.  "01" or ".1"$/;"	m	class:GF2n	file:
GF2n::pc_	src/bpol/gf2n.h	/^    static const char* pc_;  \/\/ chars to print zero and one: e.g.  "01" or ".1"$/;"	m	class:GF2n	access:public
GF2n::pow	src/bpol/gf2n.h	/^    GF2n pow(ulong e)  const$/;"	f	class:GF2n	access:public	signature:(ulong e) const
GF2n::print_info	src/bpol/gf2n.cc	/^GF2n::print_info(int level\/*=0*\/)$/;"	f	class:GF2n	signature:(int level )
GF2n::print_info	src/bpol/gf2n.h	/^    static void print_info(int level=0);$/;"	p	class:GF2n	access:public	signature:(int level=0)
GF2n::set_normal	src/bpol/gf2n.h	/^    ulong set_normal(ulong r)  { v_ = n2p(r);  return v_; }$/;"	f	class:GF2n	access:public	signature:(ulong r)
GF2n::sqr	src/bpol/gf2n.h	/^    GF2n sqr()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::sqr_tab	src/bpol/gf2n.cc	/^ulong GF2n::sqr_tab[BITS_PER_LONG];  \/\/ table for fast squaring$/;"	m	class:GF2n	file:
GF2n::sqr_tab	src/bpol/gf2n.h	/^    static ulong sqr_tab[BITS_PER_LONG];  \/\/ table for fast squaring$/;"	m	class:GF2n	access:public
GF2n::sqrt	src/bpol/gf2n.h	/^    GF2n sqrt()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::tr1e	src/bpol/gf2n.cc	/^GF2n GF2n::tr1e;  \/\/ an element with trace == 1$/;"	m	class:GF2n	file:
GF2n::tr1e	src/bpol/gf2n.h	/^    static GF2n tr1e;  \/\/ an element with trace == 1$/;"	m	class:GF2n	access:public
GF2n::trace	src/bpol/gf2n.h	/^    ulong trace()  const$/;"	f	class:GF2n	access:public	signature:() const
GF2n::tv_	src/bpol/gf2n.cc	/^ulong GF2n::tv_ = 0;  \/\/ trace vector$/;"	m	class:GF2n	file:
GF2n::tv_	src/bpol/gf2n.h	/^    static ulong tv_;  \/\/ trace vector$/;"	m	class:GF2n	access:public
GF2n::v_	src/bpol/gf2n.h	/^    ulong v_;$/;"	m	class:GF2n	access:public
GF2n::zero	src/bpol/gf2n.cc	/^GF2n GF2n::zero;  \/\/ zero (neutral element wrt. addition) in GF(2**n)$/;"	m	class:GF2n	file:
GF2n::zero	src/bpol/gf2n.h	/^    static GF2n zero;  \/\/ zero (neutral element wrt. addition) in GF(2**n)$/;"	m	class:GF2n	access:public
GF2n::~GF2n	src/bpol/gf2n.h	/^    ~GF2n()  { ; }$/;"	f	class:GF2n	access:public	signature:()
GOOD_TRIG	src/fht/fhtmayer.txt	53;"	d	file:
GP16	src/perm/shortgraypermute.h	112;"	d
GP16	src/perm/shortgraypermute.h	31;"	d
GP32	src/perm/shortgraypermute.h	113;"	d
GP32	src/perm/shortgraypermute.h	35;"	d
GP4	src/perm/shortgraypermute.h	110;"	d
GP4	src/perm/shortgraypermute.h	27;"	d
GP64	src/perm/shortgraypermute.h	114;"	d
GP64	src/perm/shortgraypermute.h	41;"	d
GP8	src/perm/shortgraypermute.h	111;"	d
GP8	src/perm/shortgraypermute.h	29;"	d
H	doc/wfl-hilbert-doc.txt	/^If A -> G,H,J,K then conjugates of 3-cycle.$/;"	v
H	src/bits/bitsubset-gray.h	/^    ulong H;  \/\/ highest bit in S.V;  needed for the prev() method$/;"	m	class:bit_subset_gray	access:protected
H	src/bmat/bitmat-inverse.o	/^/;"	v
H	src/bpol/gf2n.o	/^/;"	v
H	src/comb/big-fact2perm.o	/^ELF/;"	v
H	src/comb/print-zero-map-rgs.o	/^ELF/;"	v
H	src/comb/string-subst.o	/^ELF/;"	v
H	src/convolution/twodimfhtcnvl.o	/^ELF/;"	v
H	src/fft/fhtfft.o	/^ELF/;"	v
H	src/mod/chebyshev2.o	/^ELF/;"	v
H	src/mod/eratosthenes.o	/^ELF/;"	v
H	src/mod/modinit.o	/^ELF/;"	v
H	src/mod/sqrtmod.o	/^ELF/;"	v
H	src/ntt/slowntt.o	/^ELF/;"	v
H	src/perm/printcycles.o	/^ELF/;"	v
HAVE_ACGRAY_H__	src/comb/acgray.h	2;"	d
HAVE_ACYCLIC_MAP_H__	src/comb/acyclic-map.h	2;"	d
HAVE_ALLSETPARTITIONS_H__	src/comb/attic/allsetpartitions.h	2;"	d
HAVE_ALL_COMPOSITIONS_MINCHANGE_H__	src/comb/attic/all-compositions-minchange.h	2;"	d
HAVE_ALL_IRREDPOLY_H__	src/bpol/all-irredpoly.h	2;"	d
HAVE_AND_CONVOLUTION_H__	src/walsh/and-convolution.h	2;"	d
HAVE_APPLYFUNC2D_H__	src/aux2/attic/applyfunc2d.h	2;"	d
HAVE_APPLYFUNC_H__	src/aux1/attic/applyfunc.h	2;"	d
HAVE_ARITH1_H__	src/aux1/arith1.h	2;"	d
HAVE_ARITH2D_H__	src/aux2/attic/arith2d.h	2;"	d
HAVE_ARITHTRANSFORM_H__	src/walsh/arithtransform.h	2;"	d
HAVE_ARITH_3_PROGRESSION_H__	src/comb/arith-3-progression.h	2;"	d
HAVE_ARRANGEMENT_LEX_H__	src/comb/arrangement-lex.h	2;"	d
HAVE_ARRANGEMENT_RGS_H__	src/comb/arrangement-rgs.h	2;"	d
HAVE_ARRAY2D_H__	src/ds/array2d.h	2;"	d
HAVE_ARRAY3D_H__	src/ds/array3d.h	2;"	d
HAVE_ARRAY_H__	src/aux1/attic/array.h	2;"	d
HAVE_ARRAY_LEN_H__	src/array-len.h	2;"	d
HAVE_ASCENT_ALT_RGS_H__	src/comb/ascent-alt-rgs.h	2;"	d
HAVE_ASCENT_NONFLAT_RGS_H__	src/comb/ascent-nonflat-rgs.h	2;"	d
HAVE_ASCENT_RGS_H__	src/comb/ascent-rgs.h	2;"	d
HAVE_ASCENT_RGS_H__	src/comb/attic/ascent-rgs.h	2;"	d
HAVE_ASCENT_RGS_SUBSET_LEX_H__	src/comb/ascent-rgs-subset-lex.h	2;"	d
HAVE_AUX0DOUBLE_H__	src/aux0/attic/aux0double.h	2;"	d
HAVE_AUX0_ALL_H__	src/aux0-all.h	2;"	d
HAVE_AUX1DOUBLE_H__	src/aux1/attic/aux1double.h	2;"	d
HAVE_AUX1_ALL_H__	src/aux1-all.h	2;"	d
HAVE_AUX2_ALL_H__	src/aux2-all.h	2;"	d
HAVE_AUXPRINT_H__	src/aux1/attic/auxprint.h	2;"	d
HAVE_AVERAGE_H__	src/bits/average.h	2;"	d
HAVE_BALANCED_ORDERED_TREE_LEV_SEQ_H__	src/comb/balanced-ordered-tree-lev-seq.h	2;"	d
HAVE_BIG_FACT2PERM_H__	src/comb/big-fact2perm.h	2;"	d
HAVE_BIN2NAF_H__	src/bits/bin2naf.h	2;"	d
HAVE_BINARYDEBRUIJN_H__	src/comb/attic/binarydebruijn.h	2;"	d
HAVE_BINARY_DEBRUIJN_H__	src/comb/binary-debruijn.h	2;"	d
HAVE_BINARY_HUFFMAN_H__	src/comb/binary-huffman.h	2;"	d
HAVE_BINARY_NECKLACE_H__	src/comb/binary-necklace.h	2;"	d
HAVE_BINARY_SL_GRAY_H__	src/comb/binary-sl-gray.h	2;"	d
HAVE_BINOMIAL_H__	src/aux0/binomial.h	2;"	d
HAVE_BIN_TO_SL_GRAY_H__	src/bits/bin-to-sl-gray.h	2;"	d
HAVE_BIT2ADIC_H__	src/bits/bit2adic.h	2;"	d
HAVE_BIT2COMPOSITION_H__	src/bits/attic/bit2composition.h	2;"	d
HAVE_BIT2POW_H__	src/bits/bit2pow.h	2;"	d
HAVE_BITARRAY_H__	src/ds/bitarray.h	2;"	d
HAVE_BITASM_AMD64_H__	src/bits/bitasm-amd64.h	2;"	d
HAVE_BITASM_H__	src/bits/bitasm.h	2;"	d
HAVE_BITASM_I386_H__	src/bits/bitasm-i386.h	2;"	d
HAVE_BITASM_SSE_H__	src/bits/bitasm-sse.h	2;"	d
HAVE_BITBLOCK_H__	src/bits/bitblock.h	2;"	d
HAVE_BITBUTTERFLY_H__	src/bits/bitbutterfly.h	2;"	d
HAVE_BITCOMBCOLEX_H__	src/bits/bitcombcolex.h	2;"	d
HAVE_BITCOMBMINCHANGE_H__	src/bits/bitcombminchange.h	2;"	d
HAVE_BITCOMBSHIFTS_H__	src/bits/bitcombshifts.h	2;"	d
HAVE_BITCOPY_H__	src/bits/bitcopy.h	2;"	d
HAVE_BITCOUNT_H__	src/bits/bitcount.h	2;"	d
HAVE_BITCOUNT_WEIGHT_H__	src/walsh/bitcount-weight.h	2;"	d
HAVE_BITCYCLIC_DIST_H__	src/bits/bitcyclic-dist.h	2;"	d
HAVE_BITCYCLIC_MATCH_H__	src/bits/bitcyclic-match.h	2;"	d
HAVE_BITCYCLIC_MINMAX_H__	src/bits/bitcyclic-minmax.h	2;"	d
HAVE_BITCYCLIC_PERIOD_H__	src/bits/bitcyclic-period.h	2;"	d
HAVE_BITCYCLIC_XOR_H__	src/bits/bitcyclic-xor.h	2;"	d
HAVE_BITDEMOS_H__	demo/bits/bitdemos.h	2;"	d
HAVE_BITFIBGRAY_H__	src/bits/bitfibgray.h	2;"	d
HAVE_BITGATHER_H__	src/bits/bitgather.h	2;"	d
HAVE_BITGRAYPERMUTE_H__	src/bits/bitgraypermute.h	2;"	d
HAVE_BITHIGH_EDGE_H__	src/bits/bithigh-edge.h	2;"	d
HAVE_BITHIGH_H__	src/bits/bithigh.h	2;"	d
HAVE_BITLDEQ_H__	src/bits/bitldeq.h	2;"	d
HAVE_BITLEX_H__	src/bits/bitlex.h	2;"	d
HAVE_BITLOW_EDGE_H__	src/bits/bitlow-edge.h	2;"	d
HAVE_BITLOW_H__	src/bits/bitlow.h	2;"	d
HAVE_BITMAT_FUNCS_H__	src/bmat/bitmat-funcs.h	2;"	d
HAVE_BITMAT_INLINE_H__	src/bmat/bitmat-inline.h	2;"	d
HAVE_BITMROTATE_H__	src/bits/attic/bitmrotate.h	2;"	d
HAVE_BITPERIODIC_H__	src/bits/bitperiodic.h	2;"	d
HAVE_BITPOLMOD_ARITH_H__	src/bpol/bitpolmod-arith.h	2;"	d
HAVE_BITPOLMOD_MINPOLY_H__	src/bpol/bitpolmod-minpoly.h	2;"	d
HAVE_BITPOLMOD_MULTREV_H__	src/bpol/attic/bitpolmod-multrev.h	2;"	d
HAVE_BITPOLMOD_SOLVEQUADRATIC_H__	src/bpol/bitpolmod-solvequadratic.h	2;"	d
HAVE_BITPOL_ARITH_H__	src/bpol/bitpol-arith.h	2;"	d
HAVE_BITPOL_DEGREE_H__	src/bpol/bitpol-degree.h	2;"	d
HAVE_BITPOL_DERIV_H__	src/bpol/bitpol-deriv.h	2;"	d
HAVE_BITPOL_FACTOR_H__	src/bpol/bitpol-factor.h	2;"	d
HAVE_BITPOL_GCD_H__	src/bpol/bitpol-gcd.h	2;"	d
HAVE_BITPOL_IRRED_H__	src/bpol/bitpol-irred.h	2;"	d
HAVE_BITPOL_ORDER_H__	src/bpol/bitpol-order.h	2;"	d
HAVE_BITPOL_PRIMITIVE_H__	src/bpol/bitpol-primitive.h	2;"	d
HAVE_BITPOL_PRINT_H__	src/bpol/bitpol-print.h	2;"	d
HAVE_BITPOL_SQUAREFREE_H__	src/bpol/bitpol-squarefree.h	2;"	d
HAVE_BITPOL_SRP_H__	src/bpol/bitpol-srp.h	2;"	d
HAVE_BITROTATE_H__	src/bits/bitrotate.h	2;"	d
HAVE_BITSEPARATE_H__	src/bits/bitseparate.h	2;"	d
HAVE_BITSEQUENCY_H__	src/bits/bitsequency.h	2;"	d
HAVE_BITSET2SET_H__	src/bits/bitset2set.h	2;"	d
HAVE_BITSPERLONG_H__	src/bits/bitsperlong.h	2;"	d
HAVE_BITSUBSETQ_H__	src/bits/bitsubsetq.h	2;"	d
HAVE_BITSUBSET_GRAY_H__	src/bits/bitsubset-gray.h	2;"	d
HAVE_BITSUBSET_H__	src/bits/bitsubset.h	2;"	d
HAVE_BITSWAP_H__	src/bits/bitswap.h	2;"	d
HAVE_BITS_ALL_H__	src/bits-all.h	2;"	d
HAVE_BITTEST_H__	src/bits/bittest.h	2;"	d
HAVE_BITTRANSFORMS_H__	src/bits/bittransforms.h	2;"	d
HAVE_BITXTRANSFORMS_H__	src/bits/bitxtransforms.h	2;"	d
HAVE_BITZIP_H__	src/bits/bitzip.h	2;"	d
HAVE_BITZIP_PAIRS_H__	src/bits/bitzip-pairs.h	2;"	d
HAVE_BIT_DRAGON3_H__	src/bits/bit-dragon3.h	2;"	d
HAVE_BIT_DRAGON_R13_H__	src/bits/bit-dragon-r13.h	2;"	d
HAVE_BIT_DRAGON_R4_H__	src/bits/bit-dragon-r4.h	2;"	d
HAVE_BIT_DRAGON_R5_H__	src/bits/bit-dragon-r5.h	2;"	d
HAVE_BIT_DRAGON_R7_H__	src/bits/bit-dragon-r7.h	2;"	d
HAVE_BIT_DRAGON_R9_H__	src/bits/bit-dragon-r9.h	2;"	d
HAVE_BIT_ISOLATE_H__	src/bits/bit-isolate.h	2;"	d
HAVE_BIT_NECKLACE_H__	src/bits/bit-necklace.h	2;"	d
HAVE_BIT_PAPER_FOLD_H__	src/bits/bit-paper-fold.h	2;"	d
HAVE_BIT_RLL2_H__	src/bits/bit-rll2.h	2;"	d
HAVE_BIT_SL_GRAY_H__	src/bits/bit-sl-gray.h	2;"	d
HAVE_BLUE_FIXED_POINTS_H__	src/bits/blue-fixed-points.h	2;"	d
HAVE_BMAT_ALL_H__	src/bmat-all.h	2;"	d
HAVE_BOUNDING_BOX_H__	src/ds/bounding-box.h	2;"	d
HAVE_BPOL_ALL_H__	src/bpol-all.h	2;"	d
HAVE_BRANCHLESS_H__	src/bits/branchless.h	2;"	d
HAVE_BSEARCHAPPROX_H__	src/sort/bsearchapprox.h	2;"	d
HAVE_BSEARCHFUNC_H__	src/sort/bsearchfunc.h	2;"	d
HAVE_BSEARCHIDXFUNC_H__	src/sort/bsearchidxfunc.h	2;"	d
HAVE_BSEARCHIDX_H__	src/sort/bsearchidx.h	2;"	d
HAVE_BSEARCHPTRFUNC_H__	src/sort/bsearchptrfunc.h	2;"	d
HAVE_BSEARCHPTR_H__	src/sort/bsearchptr.h	2;"	d
HAVE_BSEARCH_H__	src/sort/bsearch.h	2;"	d
HAVE_BYTESCAN_H__	src/aux1/bytescan.h	2;"	d
HAVE_CATALAN_H__	src/comb/catalan.h	2;"	d
HAVE_CATALAN_PATH_LEX_H__	src/comb/catalan-path-lex.h	2;"	d
HAVE_CATALAN_RGS_GRAY_H__	src/comb/catalan-rgs-gray.h	2;"	d
HAVE_CATALAN_RGS_GSLEX_H__	src/comb/catalan-rgs-gslex.h	2;"	d
HAVE_CATALAN_RGS_H__	src/comb/catalan-rgs.h	2;"	d
HAVE_CATALAN_RGS_SUBSET_LEX_H__	src/comb/catalan-rgs-subset-lex.h	2;"	d
HAVE_CATALAN_RGS_TO_NONCROSSING_SETPART_RGS_H__	src/comb/catalan-rgs-to-noncrossing-setpart-rgs.h	2;"	d
HAVE_CATALAN_STEP_RGS_COLEX_H__	src/comb/catalan-step-rgs-colex.h	2;"	d
HAVE_CATALAN_STEP_RGS_LEX_H__	src/comb/catalan-step-rgs-lex.h	2;"	d
HAVE_CATALAN_STEP_RGS_SUBSET_LEXREV_H__	src/comb/catalan-step-rgs-subset-lexrev.h	2;"	d
HAVE_CATALAN_STEP_RGS_TO_PAREN_STRING_H__	src/comb/catalan-step-rgs-to-paren-string.h	2;"	d
HAVE_CAYLEY_DICKSON_MULT_H__	src/aux0/cayley-dickson-mult.h	2;"	d
HAVE_CAYLEY_PERM_H__	src/comb/cayley-perm.h	2;"	d
HAVE_CENTERED_ARRAY2D_H__	src/ds/centered-array2d.h	2;"	d
HAVE_CENTERED_ARRAY3D_H__	src/ds/centered-array3d.h	2;"	d
HAVE_CHANGE_RGS_H__	src/comb/change-rgs.h	2;"	d
HAVE_CHEBYSHEV_H__	src/mod/chebyshev.h	2;"	d
HAVE_CHECK_KPERMGEN_H__	src/comb/check-kpermgen.h	2;"	d
HAVE_CHECK_MIXEDRADIX_H__	src/comb/check-mixedradix.h	2;"	d
HAVE_CHECK_PERMGEN_H__	src/comb/check-permgen.h	2;"	d
HAVE_CHIRPZT_ALL_H__	src/chirpzt-all.h	2;"	d
HAVE_CHIRPZT_H__	src/chirpzt/chirpzt.h	2;"	d
HAVE_CHOLESKY_H__	src/matrix/attic/cholesky.h	2;"	d
HAVE_CLHCA_H__	src/bpol/clhca.h	2;"	d
HAVE_CMULT_H__	src/aux0/cmult.h	2;"	d
HAVE_COLORMIXP_H__	src/bits/colormixp.h	2;"	d
HAVE_COLORMIX_FL_H__	src/bits/colormix-fl.h	2;"	d
HAVE_COLORMIX_H__	src/bits/colormix.h	2;"	d
HAVE_COMBCOLEX_H__	src/comb/attic/combcolex.h	2;"	d
HAVE_COMBINATION_ALTMINCHANGE_H__	src/comb/attic/combination-altminchange.h	2;"	d
HAVE_COMBINATION_CHASE_H__	src/comb/combination-chase.h	2;"	d
HAVE_COMBINATION_COLEX_H__	src/comb/combination-colex.h	2;"	d
HAVE_COMBINATION_EMK_H__	src/comb/combination-emk.h	2;"	d
HAVE_COMBINATION_ENDO_H__	src/comb/combination-endo.h	2;"	d
HAVE_COMBINATION_ENUP_H__	src/comb/combination-enup.h	2;"	d
HAVE_COMBINATION_LEX_H__	src/comb/combination-lex.h	2;"	d
HAVE_COMBINATION_MINCHANGE_H__	src/comb/attic/combination-minchange.h	2;"	d
HAVE_COMBINATION_MOD_H__	src/comb/combination-mod.h	2;"	d
HAVE_COMBINATION_PREF_H__	src/comb/combination-pref.h	2;"	d
HAVE_COMBINATION_REC_H__	src/comb/combination-rec.h	2;"	d
HAVE_COMBINATION_REVDOOR_H__	src/comb/combination-revdoor.h	2;"	d
HAVE_COMBLEX_H__	src/comb/attic/comblex.h	2;"	d
HAVE_COMBMINCHANGE_H__	src/comb/attic/combminchange.h	2;"	d
HAVE_COMB_ALL_H__	src/comb-all.h	2;"	d
HAVE_COMB_PRINT_H__	src/comb/comb-print.h	2;"	d
HAVE_COMP2COMB_H__	src/comb/comp2comb.h	2;"	d
HAVE_COMPLEXCONVOLUTION_H__	src/convolution/complexconvolution.h	2;"	d
HAVE_COMPLEXTYPE_H__	src/complextype.h	2;"	d
HAVE_COMPOSITIONALT_H__	src/comb/attic/compositionalt.h	2;"	d
HAVE_COMPOSITION_CHASE_H__	src/comb/attic/composition-chase.h	2;"	d
HAVE_COMPOSITION_COLEX2_H__	src/comb/composition-colex2.h	2;"	d
HAVE_COMPOSITION_COLEX_H__	src/comb/composition-colex.h	2;"	d
HAVE_COMPOSITION_DIST_UNIMODAL_H__	src/comb/composition-dist-unimodal.h	2;"	d
HAVE_COMPOSITION_EX_COLEX_H__	src/comb/composition-ex-colex.h	2;"	d
HAVE_COMPOSITION_EX_LEX_H__	src/comb/composition-ex-lex.h	2;"	d
HAVE_COMPOSITION_NZ_BINARY_H__	src/comb/composition-nz-binary.h	2;"	d
HAVE_COMPOSITION_NZ_CARLITZ_H__	src/comb/composition-nz-carlitz.h	2;"	d
HAVE_COMPOSITION_NZ_CONJ_H__	src/comb/composition-nz-conj.h	2;"	d
HAVE_COMPOSITION_NZ_FIRST_MAX_H__	src/comb/composition-nz-first-max.h	2;"	d
HAVE_COMPOSITION_NZ_GRAY2_H__	src/comb/composition-nz-gray2.h	2;"	d
HAVE_COMPOSITION_NZ_GRAY_H__	src/comb/composition-nz-gray.h	2;"	d
HAVE_COMPOSITION_NZ_H__	src/comb/composition-nz.h	2;"	d
HAVE_COMPOSITION_NZ_I_SMOOTH_H__	src/comb/composition-nz-i-smooth.h	2;"	d
HAVE_COMPOSITION_NZ_LEFT_2SMOOTH_H__	src/comb/composition-nz-left-2smooth.h	2;"	d
HAVE_COMPOSITION_NZ_LEFT_SMOOTH_H__	src/comb/composition-nz-left-smooth.h	2;"	d
HAVE_COMPOSITION_NZ_MAX_H__	src/comb/composition-nz-max.h	2;"	d
HAVE_COMPOSITION_NZ_MINC_H__	src/comb/composition-nz-minc.h	2;"	d
HAVE_COMPOSITION_NZ_MIN_H__	src/comb/composition-nz-min.h	2;"	d
HAVE_COMPOSITION_NZ_NUMPARTS_H__	src/comb/composition-nz-numparts.h	2;"	d
HAVE_COMPOSITION_NZ_ODD_H__	src/comb/composition-nz-odd.h	2;"	d
HAVE_COMPOSITION_NZ_ODD_SUBSET_LEX_H__	src/comb/composition-nz-odd-subset-lex.h	2;"	d
HAVE_COMPOSITION_NZ_RANK_H__	src/comb/composition-nz-rank.h	2;"	d
HAVE_COMPOSITION_NZ_RESTRPREF_H__	src/comb/composition-nz-restrpref.h	2;"	d
HAVE_COMPOSITION_NZ_RL_H__	src/comb/composition-nz-rl.h	2;"	d
HAVE_COMPOSITION_NZ_SMOOTH_H__	src/comb/composition-nz-smooth.h	2;"	d
HAVE_COMPOSITION_NZ_SORTS2_H__	src/comb/composition-nz-sorts2.h	2;"	d
HAVE_COMPOSITION_NZ_SORTS2_PP_H__	src/comb/composition-nz-sorts2-pp.h	2;"	d
HAVE_COMPOSITION_NZ_SORTS_H__	src/comb/composition-nz-sorts.h	2;"	d
HAVE_COMPOSITION_NZ_SUBSET_LEX_H__	src/comb/composition-nz-subset-lex.h	2;"	d
HAVE_COMPOSITION_NZ_SUPERDIAGONAL_H__	src/comb/composition-nz-superdiagonal.h	2;"	d
HAVE_COMPOSITION_NZ_UPSTEP_H__	src/comb/composition-nz-upstep.h	2;"	d
HAVE_COMPOSITION_NZ_WEAKLY_UNIMODAL_H__	src/comb/composition-nz-weakly-unimodal.h	2;"	d
HAVE_COMPOSITION_RANK_H__	src/comb/composition-rank.h	2;"	d
HAVE_COMPOSITION_UNIMODAL_H__	src/comb/composition-unimodal.h	2;"	d
HAVE_CONSTANTS_H__	src/aux0/attic/constants.h	2;"	d
HAVE_CONVEX_H__	src/sort/convex.h	2;"	d
HAVE_CONVOLUTION_ALL_H__	src/convolution-all.h	2;"	d
HAVE_COPY2D_H__	src/aux2/attic/copy2d.h	2;"	d
HAVE_COPY_H__	src/aux1/copy.h	2;"	d
HAVE_COROUTINE_H__	src/ds/attic/coroutine.h	2;"	d
HAVE_CORRELATION_ALL_H__	src/correlation-all.h	2;"	d
HAVE_CORRELATION_H__	src/correlation/correlation.h	2;"	d
HAVE_CRC32_H__	src/bits/crc32.h	2;"	d
HAVE_CRC64_H__	src/bits/crc64.h	2;"	d
HAVE_CSINCOS_H__	src/aux0/csincos.h	2;"	d
HAVE_CSWAP_H__	src/bits/cswap.h	2;"	d
HAVE_CYCLES_H__	src/perm/attic/cycles.h	2;"	d
HAVE_CYCLIC_PERM_H__	src/comb/cyclic-perm.h	2;"	d
HAVE_CYCLIC_WORDS_H__	src/comb/cyclic-words.h	2;"	d
HAVE_DAUBECHIES_H__	src/wavelet/daubechies.h	2;"	d
HAVE_DCTDST_ALL_H__	src/dctdst-all.h	2;"	d
HAVE_DCTDST_H__	src/dctdst/dctdst.h	2;"	d
HAVE_DEBRUIJNGRAPH_H__	src/graph/attic/debruijngraph.h	2;"	d
HAVE_DEBRUIJN_H__	src/comb/debruijn.h	2;"	d
HAVE_DELTA2GRAY_H__	src/comb/delta2gray.h	2;"	d
HAVE_DELTA_H__	src/aux1/attic/delta.h	2;"	d
HAVE_DEQUE_H__	src/ds/deque.h	2;"	d
HAVE_DESCENT_RGS_H__	src/comb/descent-rgs.h	2;"	d
HAVE_DIFF_H__	src/aux1/attic/diff.h	2;"	d
HAVE_DIGRAPH_H__	src/graph/digraph.h	2;"	d
HAVE_DIGRAPH_PATHS_H__	src/graph/digraph-paths.h	2;"	d
HAVE_DIVISORS_H__	src/mod/divisors.h	2;"	d
HAVE_DS_ALL_H__	src/ds-all.h	2;"	d
HAVE_DYADICCNVL_H__	src/walsh/dyadiccnvl.h	2;"	d
HAVE_DYCK_GRAY2_H__	src/comb/dyck-gray2.h	2;"	d
HAVE_DYCK_GRAY_H__	src/comb/dyck-gray.h	2;"	d
HAVE_DYCK_PREF2_H__	src/comb/dyck-pref2.h	2;"	d
HAVE_DYCK_PREF_H__	src/comb/dyck-pref.h	2;"	d
HAVE_DYCK_RGS_H__	src/comb/dyck-rgs.h	2;"	d
HAVE_DYCK_RGS_SUBSET_LEX_H__	src/comb/dyck-rgs-subset-lex.h	2;"	d
HAVE_ENDO_ENUP_H__	src/comb/endo-enup.h	2;"	d
HAVE_EQUIVCLASSES_H__	src/sort/equivclasses.h	2;"	d
HAVE_EVEN2LOWER_H__	src/perm/even2lower.h	2;"	d
HAVE_EVENODD_H__	src/bits/evenodd.h	2;"	d
HAVE_FACT2NUM2PERM_H__	src/comb/fact2num2perm.h	2;"	d
HAVE_FACT2NUM_H__	src/comb/fact2num.h	2;"	d
HAVE_FACT2PERM_H__	src/comb/fact2perm.h	2;"	d
HAVE_FACT2PERM_SWP_APPLY_H__	src/perm/fact2perm-swp-apply.h	2;"	d
HAVE_FACTORIAL_H__	src/aux0/factorial.h	2;"	d
HAVE_FACTOR_H__	src/mod/factor.h	2;"	d
HAVE_FCSR_H__	src/bpol/fcsr.h	2;"	d
HAVE_FFT_ALL_H__	src/fft-all.h	2;"	d
HAVE_FFT_DEFAULT_H__	src/fft/fft-default.h	2;"	d
HAVE_FFT_H__	src/fft/fft.h	2;"	d
HAVE_FHT2D_H__	src/fht/fht2d.h	2;"	d
HAVE_FHTLOC2_H__	src/fht/fhtloc2.h	2;"	d
HAVE_FHTMULSQR_H__	src/convolution/fhtmulsqr.h	2;"	d
HAVE_FHT_ALL_H__	src/fht-all.h	2;"	d
HAVE_FHT_DEFAULT_H__	src/fht/fht-default.h	2;"	d
HAVE_FHT_H__	src/fht/fht.h	2;"	d
HAVE_FIBONACCI_H__	src/aux0/fibonacci.h	2;"	d
HAVE_FIBREP_H__	src/bits/fibrep.h	2;"	d
HAVE_FIBREP_SUBSET_LEXREV_H__	src/bits/fibrep-subset-lexrev.h	2;"	d
HAVE_FIB_HAAR_H__	src/haar/fib-haar.h	2;"	d
HAVE_FIB_WALSH_H__	src/walsh/fib-walsh.h	2;"	d
HAVE_FUNCEMU_H__	src/aux0/attic/funcemu.h	2;"	d
HAVE_FXTALLOCA_H__	src/fxtalloca.h	2;"	d
HAVE_FXTIO_H__	src/fxtio.h	2;"	d
HAVE_FXTTYPES_H__	src/fxttypes.h	2;"	d
HAVE_GCD_H__	src/aux0/gcd.h	2;"	d
HAVE_GF2N_H__	src/bpol/gf2n.h	2;"	d
HAVE_GF2N_TRACE_H__	src/bpol/gf2n-trace.h	2;"	d
HAVE_GRAPH_ALL_H__	src/graph-all.h	2;"	d
HAVE_GRAPH_PRINT_H__	src/aux1/attic/graph-print.h	2;"	d
HAVE_GRAYCODE_H__	src/bits/graycode.h	2;"	d
HAVE_GRAYPERMUTE_H__	src/perm/attic/graypermute.h	2;"	d
HAVE_GRAYPERMUTE_H__	src/perm/graypermute.h	2;"	d
HAVE_GRAYPOWER_H__	src/bits/graypower.h	2;"	d
HAVE_GRAYREVPERMUTE_H__	src/perm/grayrevpermute.h	2;"	d
HAVE_GRAY_COMPARE_H__	src/comb/gray-compare.h	2;"	d
HAVE_GRAY_CYCLE_LEADERS_H__	src/comb/gray-cycle-leaders.h	2;"	d
HAVE_GREENPERMUTE_H__	src/perm/attic/greenpermute.h	2;"	d
HAVE_GREENREVPERMUTE_H__	src/perm/attic/greenrevpermute.h	2;"	d
HAVE_GREP_H__	src/sort/attic/grep.h	2;"	d
HAVE_GRSNEGATE_H__	src/walsh/grsnegate.h	2;"	d
HAVE_GRSNEGATIVE_H__	src/bits/grsnegative.h	2;"	d
HAVE_HAARI2I_H__	src/haar/attic/haari2i.h	2;"	d
HAVE_HAARNN_H__	src/haar/haarnn.h	2;"	d
HAVE_HAARPERMUTE_H__	src/perm/haarpermute.h	2;"	d
HAVE_HAARREVNN_H__	src/haar/haarrevnn.h	2;"	d
HAVE_HAAR_ALL_H__	src/haar-all.h	2;"	d
HAVE_HAAR_H__	src/haar/haar.h	2;"	d
HAVE_HARMONIC_WAVELET_H__	src/wavelet/harmonic-wavelet.h	2;"	d
HAVE_HARTLEYSHIFT_H__	src/fht/hartleyshift.h	2;"	d
HAVE_HEAPSORT_H__	src/sort/heapsort.h	2;"	d
HAVE_HEAP_H__	src/ds/heap.h	2;"	d
HAVE_HILBERT_H__	src/bits/hilbert.h	2;"	d
HAVE_HILBERT_NDIM_H__	src/comb/hilbert-ndim.h	2;"	d
HAVE_HILBERT_NDIM_REC_H__	src/comb/hilbert-ndim-rec.h	2;"	d
HAVE_ID_TREE_LEV_SEQ_H__	src/comb/id-tree-lev-seq.h	2;"	d
HAVE_INVOLUTION_ZERO_MAP_RGS_H__	src/comb/involution-zero-map-rgs.h	2;"	d
HAVE_IPOW_H__	src/aux0/ipow.h	2;"	d
HAVE_ISOSCENT_RGS_H__	src/comb/isoscent-rgs.h	2;"	d
HAVE_ISQRT_H__	src/mod/isqrt.h	2;"	d
HAVE_IS_ARRANGEMENT_RGS_H__	src/comb/is-arrangement-rgs.h	2;"	d
HAVE_IS_ASCENT_RGS_H__	src/comb/is-ascent-rgs.h	2;"	d
HAVE_IS_CATALAN_PATH_H__	src/comb/is-catalan-path.h	2;"	d
HAVE_IS_CATALAN_RGS_H__	src/comb/is-catalan-rgs.h	2;"	d
HAVE_IS_CATALAN_STEP_RGS_H__	src/comb/is-catalan-step-rgs.h	2;"	d
HAVE_IS_CAYLEY_PERM_H__	src/comb/is-cayley-perm.h	2;"	d
HAVE_IS_CHANGE_RGS_H__	src/comb/is-change-rgs.h	2;"	d
HAVE_IS_COMPOSITION_NZ_H__	src/comb/is-composition-nz.h	2;"	d
HAVE_IS_DESCENT_RGS_H__	src/comb/is-descent-rgs.h	2;"	d
HAVE_IS_DYCK_RGS_H__	src/comb/is-dyck-rgs.h	2;"	d
HAVE_IS_ISOSCENT_RGS_H__	src/comb/is-isoscent-rgs.h	2;"	d
HAVE_IS_MIXEDRADIX_NUM_H__	src/comb/is-mixedradix-num.h	2;"	d
HAVE_IS_MOTZKIN_PATH_H__	src/comb/is-motzkin-path.h	2;"	d
HAVE_IS_MOTZKIN_RGS_H__	src/comb/is-motzkin-rgs.h	2;"	d
HAVE_IS_MOTZKIN_STEP_RGS_H__	src/comb/is-motzkin-step-rgs.h	2;"	d
HAVE_IS_NONCROSSING_SETPART_RGS_H__	src/comb/is-noncrossing-setpart-rgs.h	2;"	d
HAVE_IS_NONSQUASHING_H__	src/comb/is-nonsquashing.h	2;"	d
HAVE_IS_PAREN_POSITION_WORD_H__	src/comb/is-paren-position-word.h	2;"	d
HAVE_IS_PAREN_STRING_H__	src/comb/is-paren-string.h	2;"	d
HAVE_IS_PARTITION_ASC_H__	src/comb/is-partition-asc.h	2;"	d
HAVE_IS_PARTITION_DESC_H__	src/comb/is-partition-desc.h	2;"	d
HAVE_IS_PARTITION_RGS_H__	src/comb/is-partition-rgs.h	2;"	d
HAVE_IS_SCHROEDER_PATH_H__	src/comb/is-schroeder-path.h	2;"	d
HAVE_IS_SCHROEDER_RGS_H__	src/comb/is-schroeder-rgs.h	2;"	d
HAVE_IS_SETPART_CCF_PERM_H__	src/comb/is-setpart-ccf-perm.h	2;"	d
HAVE_IS_SETPART_RGS_H__	src/comb/is-setpart-rgs.h	2;"	d
HAVE_IS_SHIFTED_YOUNG_TAB_RGS_H__	src/comb/is-shifted-young-tab-rgs.h	2;"	d
HAVE_IS_SMOOTH_H__	src/comb/is-smooth.h	2;"	d
HAVE_IS_SORTS_IN_RUNS_SORTED_H__	src/comb/is-sorts-in-runs-sorted.h	2;"	d
HAVE_IS_STACK_SORTABLE_H__	src/comb/is-stack-sortable.h	2;"	d
HAVE_IS_SYMMETRIC_H__	src/comb/is-symmetric.h	2;"	d
HAVE_IS_UNIMODAL_H__	src/comb/is-unimodal.h	2;"	d
HAVE_IS_YOUNG_TAB_RGS_H__	src/comb/is-young-tab-rgs.h	2;"	d
HAVE_IS_ZERO_MAP_RGS_H__	src/comb/is-zero-map-rgs.h	2;"	d
HAVE_ITH_ONE_IDX_H__	src/bits/ith-one-idx.h	2;"	d
HAVE_JJASSERT_H__	src/jjassert.h	2;"	d
HAVE_KOLAKOSKI_SEQ_H__	src/bits/kolakoski-seq.h	2;"	d
HAVE_KPERM_GRAY_H__	src/comb/kperm-gray.h	2;"	d
HAVE_KPERM_LEX_H__	src/comb/kperm-lex.h	2;"	d
HAVE_KSUBSET_GRAY_H__	src/comb/ksubset-gray.h	2;"	d
HAVE_KSUBSET_LEX_H__	src/comb/ksubset-lex.h	2;"	d
HAVE_KSUBSET_REC_H__	src/comb/ksubset-rec.h	2;"	d
HAVE_KSUBSET_TWOCLOSE_H__	src/comb/ksubset-twoclose.h	2;"	d
HAVE_LDN2RC_H__	src/aux0/ldn2rc.h	2;"	d
HAVE_LEFT_RIGHT_ARRAY_H__	src/ds/left-right-array.h	2;"	d
HAVE_LEX_COMPARE_H__	src/comb/lex-compare.h	2;"	d
HAVE_LFSR64_H__	src/bpol/lfsr64.h	2;"	d
HAVE_LFSR_H__	src/bpol/lfsr.h	2;"	d
HAVE_LHCA_H__	src/bpol/lhca.h	2;"	d
HAVE_LINDENMAYER_SYSTEM_H__	src/comb/lindenmayer-system.h	2;"	d
HAVE_LYNDON_FACTORIZATION_H__	src/comb/lyndon-factorization.h	2;"	d
HAVE_LYNDON_GRAY_H__	src/graph/lyndon-gray.h	2;"	d
HAVE_LYNDON_WORDS_H__	src/comb/lyndon-words.h	2;"	d
HAVE_MAP23_RGS_H__	src/comb/map23-rgs.h	2;"	d
HAVE_MATRIXFFT_H__	src/fft/matrixfft.h	2;"	d
HAVE_MATRIXSYMMETRYQ_H__	src/matrix/attic/matrixsymmetryq.h	2;"	d
HAVE_MATRIX_ALL_H__	src/matrix-all.h	2;"	d
HAVE_MATRIX_H__	src/matrix/matrix.h	2;"	d
HAVE_MAX_CONVOLUTION_H__	src/walsh/max-convolution.h	2;"	d
HAVE_MERGE_SORT_H__	src/sort/merge-sort.h	2;"	d
HAVE_MERSENNE_COPRIME_H__	src/bpol/mersenne-coprime.h	2;"	d
HAVE_MERSENNE_H__	src/mod/mersenne.h	2;"	d
HAVE_MERS_HAAR_H__	src/haar/mers-haar.h	2;"	d
HAVE_MERS_WALSH_H__	src/walsh/mers-walsh.h	2;"	d
HAVE_MINMAX2D_H__	src/aux2/attic/minmax2d.h	2;"	d
HAVE_MINMAXFUNC_H__	src/sort/minmaxfunc.h	2;"	d
HAVE_MINMAXIDXFUNC_H__	src/sort/minmaxidxfunc.h	2;"	d
HAVE_MINMAXIDX_H__	src/sort/minmaxidx.h	2;"	d
HAVE_MINMAXMED23FUNC_H__	src/sort/minmaxmed23func.h	2;"	d
HAVE_MINMAXMED23IDX_H__	src/sort/minmaxmed23idx.h	2;"	d
HAVE_MINMAXMED23_H__	src/sort/minmaxmed23.h	2;"	d
HAVE_MINMAXPTRFUNC_H__	src/sort/minmaxptrfunc.h	2;"	d
HAVE_MINMAXPTR_H__	src/sort/minmaxptr.h	2;"	d
HAVE_MINMAX_H__	src/sort/minmax.h	2;"	d
HAVE_MISC_H__	src/aux1/attic/misc.h	2;"	d
HAVE_MIXEDRADIX_COLEX_H__	src/comb/mixedradix-colex.h	2;"	d
HAVE_MIXEDRADIX_ENDO_GRAY_H__	src/comb/mixedradix-endo-gray.h	2;"	d
HAVE_MIXEDRADIX_ENDO_H__	src/comb/mixedradix-endo.h	2;"	d
HAVE_MIXEDRADIX_GRAY2_H__	src/comb/mixedradix-gray2.h	2;"	d
HAVE_MIXEDRADIX_GRAY_H__	src/comb/mixedradix-gray.h	2;"	d
HAVE_MIXEDRADIX_GSLEX2_H__	src/comb/mixedradix-gslex2.h	2;"	d
HAVE_MIXEDRADIX_GSLEX_ALT2_H__	src/comb/mixedradix-gslex-alt2.h	2;"	d
HAVE_MIXEDRADIX_GSLEX_ALT_H__	src/comb/mixedradix-gslex-alt.h	2;"	d
HAVE_MIXEDRADIX_GSLEX_H__	src/comb/mixedradix-gslex.h	2;"	d
HAVE_MIXEDRADIX_H__	src/comb/mixedradix.h	2;"	d
HAVE_MIXEDRADIX_LEX_H__	src/comb/mixedradix-lex.h	2;"	d
HAVE_MIXEDRADIX_MODULAR_GRAY2_H__	src/comb/mixedradix-modular-gray2.h	2;"	d
HAVE_MIXEDRADIX_MODULAR_GRAY_H__	src/comb/mixedradix-modular-gray.h	2;"	d
HAVE_MIXEDRADIX_NAF_GRAY_H__	src/comb/mixedradix-naf-gray.h	2;"	d
HAVE_MIXEDRADIX_NAF_H__	src/comb/mixedradix-naf.h	2;"	d
HAVE_MIXEDRADIX_NAF_SUBSET_LEX_H__	src/comb/mixedradix-naf-subset-lex.h	2;"	d
HAVE_MIXEDRADIX_RESTRPREF_H__	src/comb/mixedradix-restrpref.h	2;"	d
HAVE_MIXEDRADIX_RFACT_H__	src/comb/mixedradix-rfact.h	2;"	d
HAVE_MIXEDRADIX_SL_GRAY_H__	src/comb/mixedradix-sl-gray.h	2;"	d
HAVE_MIXEDRADIX_SOD_LEX_H__	src/comb/mixedradix-sod-lex.h	2;"	d
HAVE_MIXEDRADIX_SUBSET_LEXREV_H__	src/comb/mixedradix-subset-lexrev.h	2;"	d
HAVE_MIXEDRADIX_SUBSET_LEX_H__	src/comb/mixedradix-subset-lex.h	2;"	d
HAVE_MK_SPECIAL_DIGRAPHS_H__	src/graph/mk-special-digraphs.h	2;"	d
HAVE_MMULT_H__	src/matrix/attic/mmult.h	2;"	d
HAVE_MODARITH_H__	src/mod/modarith.h	2;"	d
HAVE_MOD_ALL_H__	src/mod-all.h	2;"	d
HAVE_MOD_H__	src/mod/mod.h	2;"	d
HAVE_MONOTONE_H__	src/sort/attic/monotone.h	2;"	d
HAVE_MONOTONIC_GRAY_H__	src/comb/monotonic-gray.h	2;"	d
HAVE_MOTZKIN_NONFLAT_RGS_LEX_H__	src/comb/motzkin-nonflat-rgs-lex.h	2;"	d
HAVE_MOTZKIN_PATH_LEX_H__	src/comb/motzkin-path-lex.h	2;"	d
HAVE_MOTZKIN_RGS_LEX_H__	src/comb/motzkin-rgs-lex.h	2;"	d
HAVE_MOTZKIN_STEP_RGS_LEX_H__	src/comb/motzkin-step-rgs-lex.h	2;"	d
HAVE_MPARTITION2_H__	src/comb/mpartition2.h	2;"	d
HAVE_MPARTITION_H__	src/comb/mpartition.h	2;"	d
HAVE_MROTATE_H__	src/perm/attic/mrotate.h	2;"	d
HAVE_MSET_PERM_GRAY_H__	src/comb/mset-perm-gray.h	2;"	d
HAVE_MSET_PERM_INVTAB_H__	src/comb/attic/mset-perm-invtab.h	2;"	d
HAVE_MSET_PERM_LEX_H__	src/comb/mset-perm-lex.h	2;"	d
HAVE_MSET_PERM_LEX_REC_H__	src/comb/mset-perm-lex-rec.h	2;"	d
HAVE_MSET_PERM_PREF_H__	src/comb/mset-perm-pref.h	2;"	d
HAVE_MTYPES_H__	src/mod/mtypes.h	2;"	d
HAVE_NECKLACE2BITPOL_H__	src/bpol/necklace2bitpol.h	2;"	d
HAVE_NECKLACE_H__	src/comb/necklace.h	2;"	d
HAVE_NEGBIN_H__	src/bits/negbin.h	2;"	d
HAVE_NEXTARG_H__	src/nextarg.h	2;"	d
HAVE_NEXTGRAY_H__	src/bits/nextgray.h	2;"	d
HAVE_NORMALBASIS_H__	src/bpol/normalbasis.h	2;"	d
HAVE_NORMALPOLY_DUAL_H__	src/bpol/normalpoly-dual.h	2;"	d
HAVE_NORMAL_SOLVEQUADRATIC_H__	src/bpol/normal-solvequadratic.h	2;"	d
HAVE_NORM_H__	src/aux1/attic/norm.h	2;"	d
HAVE_NTT_ALL_H__	src/ntt-all.h	2;"	d
HAVE_NTT_H__	src/ntt/ntt.h	2;"	d
HAVE_NUM2MIXEDRADIX_H__	src/comb/attic/num2mixedradix.h	2;"	d
HAVE_NUM2PERM_H__	src/comb/num2perm.h	2;"	d
HAVE_NUM2STR_H__	src/aux1/num2str.h	2;"	d
HAVE_NUMTHEORY_H__	src/mod/numtheory.h	2;"	d
HAVE_NUM_BITPOL_H__	src/bpol/num-bitpol.h	2;"	d
HAVE_NUM_COMPOSITIONS_H__	src/comb/num-compositions.h	2;"	d
HAVE_NUM_NECKLACES_H__	src/comb/num-necklaces.h	2;"	d
HAVE_ORDEREDRARRAY_H__	src/ds/attic/orderedrarray.h	2;"	d
HAVE_ORDERED_TREE_BRANCHES_H__	src/comb/ordered-tree-branches.h	2;"	d
HAVE_ORDERED_TREE_BRANCHING_SEQ_H__	src/comb/ordered-tree-branching-seq.h	2;"	d
HAVE_ORDERED_TREE_LEV_SEQ_H__	src/comb/ordered-tree-lev-seq.h	2;"	d
HAVE_OR_CONVOLUTION_H__	src/walsh/or-convolution.h	2;"	d
HAVE_PARENWORDS_H__	src/bits/parenwords.h	2;"	d
HAVE_PAREN_GRAY_H__	src/comb/paren-gray.h	2;"	d
HAVE_PAREN_H__	src/comb/paren.h	2;"	d
HAVE_PAREN_LEX_H__	src/comb/paren-lex.h	2;"	d
HAVE_PAREN_PREF_H__	src/comb/paren-pref.h	2;"	d
HAVE_PAREN_STRING_TO_RGS_H__	src/comb/paren-string-to-rgs.h	2;"	d
HAVE_PARITY_H__	src/bits/parity.h	2;"	d
HAVE_PARITY_TRANSFORM_H__	src/walsh/attic/parity-transform.h	2;"	d
HAVE_PARTITION_2FALL_ASC_H__	src/comb/partition-2fall-asc.h	2;"	d
HAVE_PARTITION_2FALL_ASC_SUBSET_LEX_H__	src/comb/partition-2fall-asc-subset-lex.h	2;"	d
HAVE_PARTITION_2FALL_DESC_H__	src/comb/partition-2fall-desc.h	2;"	d
HAVE_PARTITION_ASC_2REP_H__	src/comb/partition-asc-2rep.h	2;"	d
HAVE_PARTITION_ASC_2REP_SUBSET_LEX_H__	src/comb/partition-asc-2rep-subset-lex.h	2;"	d
HAVE_PARTITION_ASC_H__	src/comb/partition-asc.h	2;"	d
HAVE_PARTITION_ASC_PERIM_H__	src/comb/partition-asc-perim.h	2;"	d
HAVE_PARTITION_ASC_SORTS2_H__	src/comb/partition-asc-sorts2.h	2;"	d
HAVE_PARTITION_ASC_SORTS2_PP_H__	src/comb/partition-asc-sorts2-pp.h	2;"	d
HAVE_PARTITION_ASC_SORTS_H__	src/comb/partition-asc-sorts.h	2;"	d
HAVE_PARTITION_ASC_SUBSET_LEX_CSH_H__	src/comb/partition-asc-subset-lex-csh.h	2;"	d
HAVE_PARTITION_ASC_SUBSET_LEX_H__	src/comb/partition-asc-subset-lex.h	2;"	d
HAVE_PARTITION_BINARY_ASC_H__	src/comb/partition-binary-asc.h	2;"	d
HAVE_PARTITION_BINARY_DESC_H__	src/comb/partition-binary-desc.h	2;"	d
HAVE_PARTITION_BOUNDARY_H__	src/comb/partition-boundary.h	2;"	d
HAVE_PARTITION_CONJ_H__	src/comb/partition-conj.h	2;"	d
HAVE_PARTITION_DESC_BB_H__	src/comb/partition-desc-bb.h	2;"	d
HAVE_PARTITION_DESC_H__	src/comb/partition-desc.h	2;"	d
HAVE_PARTITION_DIST_ASC_H__	src/comb/partition-dist-asc.h	2;"	d
HAVE_PARTITION_DIST_ASC_LEN_H__	src/comb/partition-dist-asc-len.h	2;"	d
HAVE_PARTITION_DIST_ASC_SUBSET_LEX_H__	src/comb/partition-dist-asc-subset-lex.h	2;"	d
HAVE_PARTITION_DIST_DESC_H__	src/comb/partition-dist-desc.h	2;"	d
HAVE_PARTITION_DIST_D_ASC_H__	src/comb/partition-dist-d-asc.h	2;"	d
HAVE_PARTITION_GEN_H__	src/comb/partition-gen.h	2;"	d
HAVE_PARTITION_HOOK_PROD_H__	src/comb/partition-hook-prod.h	2;"	d
HAVE_PARTITION_H__	src/comb/partition.h	2;"	d
HAVE_PARTITION_H__	src/perm/attic/partition.h	2;"	d
HAVE_PARTITION_NONSQUASHING_DESC_H__	src/comb/partition-nonsquashing-desc.h	2;"	d
HAVE_PARTITION_ODD_ASC_H__	src/comb/partition-odd-asc.h	2;"	d
HAVE_PARTITION_ODD_ASC_SUBSET_LEX_CSH_H__	src/comb/partition-odd-asc-subset-lex-csh.h	2;"	d
HAVE_PARTITION_ODD_ASC_SUBSET_LEX_H__	src/comb/partition-odd-asc-subset-lex.h	2;"	d
HAVE_PARTITION_ODD_DESC_H__	src/comb/partition-odd-desc.h	2;"	d
HAVE_PARTITION_ODD_NONSQUASHING_DESC_H__	src/comb/partition-odd-nonsquashing-desc.h	2;"	d
HAVE_PARTITION_ODD_TO_DIST_H__	src/comb/partition-odd-to-dist.h	2;"	d
HAVE_PARTITION_RGS_LEX_H__	src/comb/partition-rgs-lex.h	2;"	d
HAVE_PARTITION_STRONGLY_DECR_DESC_H__	src/comb/partition-strongly-decr-desc.h	2;"	d
HAVE_PARTITION_S_DESC_H__	src/comb/partition-s-desc.h	2;"	d
HAVE_PCRC64_H__	src/bits/pcrc64.h	2;"	d
HAVE_PERM2CCF_H__	src/perm/perm2ccf.h	2;"	d
HAVE_PERMAPPLYFUNC_H__	src/perm/permapplyfunc.h	2;"	d
HAVE_PERMAPPLY_H__	src/perm/permapply.h	2;"	d
HAVE_PERMCOMPLEMENT_H__	src/perm/permcomplement.h	2;"	d
HAVE_PERMCOMPOSE_H__	src/perm/permcompose.h	2;"	d
HAVE_PERMINVERT_H__	src/perm/perminvert.h	2;"	d
HAVE_PERMQ_H__	src/perm/permq.h	2;"	d
HAVE_PERMRAND_2CYCLES_H__	src/perm/permrand-2cycles.h	2;"	d
HAVE_PERMRAND_CONNECTED_H__	src/perm/permrand-connected.h	2;"	d
HAVE_PERMRAND_CYCLE_TYPE_H__	src/perm/permrand-cycle-type.h	2;"	d
HAVE_PERMRAND_CYCLIC_H__	src/perm/permrand-cyclic.h	2;"	d
HAVE_PERMRAND_DERANGE3_H__	src/perm/permrand-derange3.h	2;"	d
HAVE_PERMRAND_DERANGE_H__	src/perm/permrand-derange.h	2;"	d
HAVE_PERMRAND_H__	src/perm/permrand.h	2;"	d
HAVE_PERMRAND_INV_MOD_M_H__	src/perm/permrand-inv-mod-m.h	2;"	d
HAVE_PERMRAND_NCM2_H__	src/perm/permrand-ncm2.h	2;"	d
HAVE_PERMRAND_ORD_H__	src/perm/permrand-ord.h	2;"	d
HAVE_PERMRAND_PARITY_H__	src/perm/permrand-parity.h	2;"	d
HAVE_PERMRAND_PREF_H__	src/perm/permrand-pref.h	2;"	d
HAVE_PERMRAND_SDC_H__	src/perm/permrand-sdc.h	2;"	d
HAVE_PERMRAND_SELF_INVERSE_H__	src/perm/permrand-self-inverse.h	2;"	d
HAVE_PERMVISIT_H__	src/comb/attic/permvisit.h	2;"	d
HAVE_PERM_ALL_H__	src/perm-all.h	2;"	d
HAVE_PERM_COLEX_H__	src/comb/perm-colex.h	2;"	d
HAVE_PERM_DERANGE_H__	src/comb/perm-derange.h	2;"	d
HAVE_PERM_GENUS_H__	src/perm/perm-genus.h	2;"	d
HAVE_PERM_GRAY_FFACT2_H__	src/comb/perm-gray-ffact2.h	2;"	d
HAVE_PERM_GRAY_FFACT_H__	src/comb/perm-gray-ffact.h	2;"	d
HAVE_PERM_GRAY_LIPSKI_H__	src/comb/perm-gray-lipski.h	2;"	d
HAVE_PERM_GRAY_RFACT_H__	src/comb/perm-gray-rfact.h	2;"	d
HAVE_PERM_GRAY_ROT1_H__	src/comb/perm-gray-rot1.h	2;"	d
HAVE_PERM_GRAY_WELLS_H__	src/comb/perm-gray-wells.h	2;"	d
HAVE_PERM_HEAP2_H__	src/comb/perm-heap2.h	2;"	d
HAVE_PERM_HEAP2_SWAPS_H__	src/comb/perm-heap2-swaps.h	2;"	d
HAVE_PERM_HEAP_H__	src/comb/perm-heap.h	2;"	d
HAVE_PERM_INVOLUTION_H__	src/comb/perm-involution.h	2;"	d
HAVE_PERM_IVES_H__	src/comb/perm-ives.h	2;"	d
HAVE_PERM_LEX2_H__	src/comb/perm-lex2.h	2;"	d
HAVE_PERM_LEX_H__	src/comb/perm-lex.h	2;"	d
HAVE_PERM_LEX_INV_H__	src/comb/perm-lex-inv.h	2;"	d
HAVE_PERM_MINCHANGE_H__	src/comb/attic/perm-minchange.h	2;"	d
HAVE_PERM_MV0_H__	src/comb/perm-mv0.h	2;"	d
HAVE_PERM_PREF_H__	src/comb/perm-pref.h	2;"	d
HAVE_PERM_REC_H__	src/comb/perm-rec.h	2;"	d
HAVE_PERM_RESTRPREF_H__	src/comb/perm-restrpref.h	2;"	d
HAVE_PERM_REV2_H__	src/comb/perm-rev2.h	2;"	d
HAVE_PERM_REV_H__	src/comb/perm-rev.h	2;"	d
HAVE_PERM_ROT_H__	src/comb/perm-rot.h	2;"	d
HAVE_PERM_STAR_H__	src/comb/perm-star.h	2;"	d
HAVE_PERM_STAR_SWAPS_H__	src/comb/perm-star-swaps.h	2;"	d
HAVE_PERM_ST_GRAY_H__	src/comb/perm-st-gray.h	2;"	d
HAVE_PERM_ST_H__	src/comb/perm-st.h	2;"	d
HAVE_PERM_ST_PREF_H__	src/comb/perm-st-pref.h	2;"	d
HAVE_PERM_TROTTER_H__	src/comb/attic/perm-trotter.h	2;"	d
HAVE_PERM_TROTTER_H__	src/comb/perm-trotter.h	2;"	d
HAVE_PERM_TROTTER_LG_H__	src/comb/perm-trotter-lg.h	2;"	d
HAVE_POINT2D_H__	src/ds/point2d.h	2;"	d
HAVE_POINT3D_H__	src/ds/point3d.h	2;"	d
HAVE_POLY_TAB_H__	src/bpol/poly-tab.h	2;"	d
HAVE_PREFIX_TRANSFORM_H__	src/haar/prefix-transform.h	2;"	d
HAVE_PRIMES_H__	src/mod/primes.h	2;"	d
HAVE_PRINTCYCLES_H__	src/perm/printcycles.h	2;"	d
HAVE_PRINT_ARRANGEMENT_RGS_PERM_H__	src/comb/print-arrangement-rgs-perm.h	2;"	d
HAVE_PRINT_BIN_H__	src/bits/print-bin.h	2;"	d
HAVE_PRINT_CATALAN_PATH_AA_H__	src/comb/print-catalan-path-aa.h	2;"	d
HAVE_PRINT_CATALAN_STEP_RGS_AA_H__	src/comb/print-catalan-step-rgs-aa.h	2;"	d
HAVE_PRINT_COMPOSITION_AA_H__	src/comb/print-composition-aa.h	2;"	d
HAVE_PRINT_COMPOSITION_BY_SORTS_H__	src/comb/print-composition-by-sorts.h	2;"	d
HAVE_PRINT_COMPOSITION_UNIMODAL_H__	src/comb/print-composition-unimodal.h	2;"	d
HAVE_PRINT_FIXED_H__	src/aux0/print-fixed.h	2;"	d
HAVE_PRINT_PARTITION_AA_H__	src/comb/print-partition-aa.h	2;"	d
HAVE_PRINT_PARTITION_CONJ_H__	src/comb/print-partition-conj.h	2;"	d
HAVE_PRINT_PATH_H__	src/graph/print-path.h	2;"	d
HAVE_PRINT_YOUNG_TAB_RGS_AA_H__	src/comb/print-young-tab-rgs-aa.h	2;"	d
HAVE_PRINT_ZERO_MAP_RGS_H__	src/comb/print-zero-map-rgs.h	2;"	d
HAVE_PRIORITYQUEUE1_H__	src/ds/attic/priorityqueue1.h	2;"	d
HAVE_PRIORITYQUEUE_H__	src/ds/priorityqueue.h	2;"	d
HAVE_QUANTIZE_H__	src/sort/quantize.h	2;"	d
HAVE_QUEUE_H__	src/ds/queue.h	2;"	d
HAVE_RADIXPERMUTE_H__	src/perm/radixpermute.h	2;"	d
HAVE_RADIXSORT_H__	src/sort/radixsort.h	2;"	d
HAVE_RADIX_2I_H__	src/bits/radix-2i.h	2;"	d
HAVE_RADIX_M1PI_H__	src/bits/radix-m1pi.h	2;"	d
HAVE_RADIX_M4_H__	src/bits/radix-m4.h	2;"	d
HAVE_RANDF_H__	src/aux0/randf.h	2;"	d
HAVE_RAND_IDX_H__	src/aux0/rand-idx.h	2;"	d
HAVE_RANGE_H__	src/aux0/attic/range.h	2;"	d
HAVE_RARRAY_H__	src/ds/attic/rarray.h	2;"	d
HAVE_REALCONVOLUTION_H__	src/convolution/realconvolution.h	2;"	d
HAVE_REALFFT_ALL_H__	src/realfft-all.h	2;"	d
HAVE_REALFFT_H__	src/realfft/realfft.h	2;"	d
HAVE_REALLOC_H__	src/realloc.h	2;"	d
HAVE_REEDMULLER_H__	src/walsh/reedmuller.h	2;"	d
HAVE_REORTH_H__	src/matrix/attic/reorth.h	2;"	d
HAVE_RESAMPLE_H__	src/aux1/attic/resample.h	2;"	d
HAVE_RESTRICT_H__	src/restrict.h	2;"	d
HAVE_REVBINPERMUTE0_H__	src/perm/revbinpermute0.h	2;"	d
HAVE_REVBINPERMUTE_H__	src/perm/attic/revbinpermute.h	2;"	d
HAVE_REVBINPERMUTE_H__	src/perm/revbinpermute.h	2;"	d
HAVE_REVBIN_H__	src/bits/revbin.h	2;"	d
HAVE_REVBIN_UPD_H__	src/bits/revbin-upd.h	2;"	d
HAVE_REVERSE2D_H__	src/aux2/attic/reverse2d.h	2;"	d
HAVE_REVERSE_H__	src/perm/reverse.h	2;"	d
HAVE_REVERSE_PAREN_STRING_H__	src/comb/reverse-paren-string.h	2;"	d
HAVE_REVGRAYCODE_H__	src/bits/revgraycode.h	2;"	d
HAVE_RGS_FINCR_H__	src/comb/rgs-fincr.h	2;"	d
HAVE_RGS_KINCR_H__	src/comb/rgs-kincr.h	2;"	d
HAVE_RGS_MAXINCR_H__	src/comb/rgs-maxincr.h	2;"	d
HAVE_RINGBUFFER_H__	src/ds/ringbuffer.h	2;"	d
HAVE_ROTATE2D_H__	src/aux2/attic/rotate2d.h	2;"	d
HAVE_ROTATE_H__	src/perm/rotate.h	2;"	d
HAVE_RSET_H__	src/ds/attic/rset.h	2;"	d
HAVE_RULER_FUNC1_H__	src/comb/ruler-func1.h	2;"	d
HAVE_RULER_FUNC_H__	src/comb/ruler-func.h	2;"	d
HAVE_RULER_FUNC_S_H__	src/comb/ruler-func-s.h	2;"	d
HAVE_SCALE2D_H__	src/aux2/attic/scale2d.h	2;"	d
HAVE_SCALE_H__	src/aux1/attic/scale.h	2;"	d
HAVE_SCANBOX_H__	src/aux1/attic/scanbox.h	2;"	d
HAVE_SCHROEDER_PATH_LEX_H__	src/comb/schroeder-path-lex.h	2;"	d
HAVE_SCHROEDER_RGS_LEX_H__	src/comb/schroeder-rgs-lex.h	2;"	d
HAVE_SCORE_SEQUENCE_H__	src/comb/score-sequence.h	2;"	d
HAVE_SEARCHDOWN_H__	src/sort/attic/searchdown.h	2;"	d
HAVE_SEARCHUNSORTED_H__	src/sort/attic/searchunsorted.h	2;"	d
HAVE_SETPART_CCF_RGS_LEX_H__	src/comb/setpart-ccf-rgs-lex.h	2;"	d
HAVE_SETPART_CK_RGS_H__	src/comb/setpart-ck-rgs.h	2;"	d
HAVE_SETPART_H__	src/comb/setpart.h	2;"	d
HAVE_SETPART_P_RGS_LEX_H__	src/comb/setpart-p-rgs-lex.h	2;"	d
HAVE_SETPART_RGS_GRAY_H__	src/comb/setpart-rgs-gray.h	2;"	d
HAVE_SETPART_RGS_LEX_H__	src/comb/setpart-rgs-lex.h	2;"	d
HAVE_SETPART_RGS_SUBSET_LEX_H__	src/comb/setpart-rgs-subset-lex.h	2;"	d
HAVE_SETPART_S_ZERO_MAP_RGS_H__	src/comb/setpart-s-zero-map-rgs.h	2;"	d
HAVE_SETPART_ZERO_MAP_RGS_H__	src/comb/setpart-zero-map-rgs.h	2;"	d
HAVE_SHIFT2D_H__	src/aux2/attic/shift2d.h	2;"	d
HAVE_SHIFT_H__	src/aux1/attic/shift.h	2;"	d
HAVE_SHORTFFT_H__	src/fft/shortfft.h	2;"	d
HAVE_SHORTFHTDIFCORE_H__	src/fht/shortfhtdifcore.h	2;"	d
HAVE_SHORTFHTDITCORE_H__	src/fht/shortfhtditcore.h	2;"	d
HAVE_SHORTGRAYPERMUTE_H__	src/perm/shortgraypermute.h	2;"	d
HAVE_SHORTREVBINPERMUTE0_H__	src/perm/shortrevbinpermute0.h	2;"	d
HAVE_SHORTREVBINPERMUTE_H__	src/perm/shortrevbinpermute.h	2;"	d
HAVE_SHORTWALSHWAKDIF_H__	src/walsh/shortwalshwakdif.h	2;"	d
HAVE_SHORTWALSHWAKDIT_H__	src/walsh/shortwalshwakdit.h	2;"	d
HAVE_SIGN_H__	src/aux0/attic/sign.h	2;"	d
HAVE_SINCOS_H__	src/aux0/sincos.h	2;"	d
HAVE_SKEW_BINARY_H__	src/comb/skew-binary.h	2;"	d
HAVE_SLANT_H__	src/walsh/slant.h	2;"	d
HAVE_SLOWCNVLA_H__	src/convolution/slowcnvla.h	2;"	d
HAVE_SLOWCNVLHALF_H__	src/convolution/slowcnvlhalf.h	2;"	d
HAVE_SLOWCNVL_H__	src/convolution/slowcnvl.h	2;"	d
HAVE_SLOWCNVL_LIN_H__	src/convolution/slowcnvl-lin.h	2;"	d
HAVE_SLOWCONVOLUTION_H__	src/convolution/slowconvolution.h	2;"	d
HAVE_SLOWCORR_H__	src/correlation/slowcorr.h	2;"	d
HAVE_SLOWFT_H__	src/fft/slowft.h	2;"	d
HAVE_SLOWHT_H__	src/fht/slowht.h	2;"	d
HAVE_SLOWTWODIMCNVL_H__	src/convolution/slowtwodimcnvl.h	2;"	d
HAVE_SLOWWEIGHTEDCNVL_H__	src/convolution/slowweightedcnvl.h	2;"	d
HAVE_SL_GRAY_COMPARE_H__	src/comb/sl-gray-compare.h	2;"	d
HAVE_SMOOTH_RFACT_RGS_H__	src/comb/smooth-rfact-rgs.h	2;"	d
HAVE_SORT23FUNC_H__	src/sort/sort23func.h	2;"	d
HAVE_SORT23_H__	src/sort/sort23.h	2;"	d
HAVE_SORTBYKEY_H__	src/sort/sortbykey.h	2;"	d
HAVE_SORTCOMPLEX_H__	src/sort/attic/sortcomplex.h	2;"	d
HAVE_SORTFUNC_H__	src/sort/sortfunc.h	2;"	d
HAVE_SORTIDXFUNC_H__	src/sort/sortidxfunc.h	2;"	d
HAVE_SORTIDX_H__	src/sort/sortidx.h	2;"	d
HAVE_SORTPTRFUNC_H__	src/sort/sortptrfunc.h	2;"	d
HAVE_SORTPTR_H__	src/sort/sortptr.h	2;"	d
HAVE_SORT_ALL_H__	src/sort-all.h	2;"	d
HAVE_SORT_H__	src/sort/attic/sort.h	2;"	d
HAVE_SORT_H__	src/sort/sort.h	2;"	d
HAVE_SQUARE_WAVE_TRANSFORM_H__	src/walsh/square-wave-transform.h	2;"	d
HAVE_STACK_H__	src/ds/stack.h	2;"	d
HAVE_STRINGSUBST_H__	src/comb/attic/stringsubst.h	2;"	d
HAVE_STRING_SUBST_H__	src/comb/string-subst.h	2;"	d
HAVE_SUBSETDEBRUIJN_H__	src/comb/attic/subsetdebruijn.h	2;"	d
HAVE_SUBSET_CONVOLUTION_H__	src/walsh/subset-convolution.h	2;"	d
HAVE_SUBSET_DEBRUIJN_H__	src/comb/subset-debruijn.h	2;"	d
HAVE_SUBSET_DELTALEX_H__	src/comb/subset-deltalex.h	2;"	d
HAVE_SUBSET_GRAY_DELTA_H__	src/comb/subset-gray-delta.h	2;"	d
HAVE_SUBSET_GRAY_H__	src/comb/subset-gray.h	2;"	d
HAVE_SUBSET_LEX_COMPARE_H__	src/comb/subset-lex-compare.h	2;"	d
HAVE_SUBSET_LEX_H__	src/comb/subset-lex.h	2;"	d
HAVE_SUBSET_MONOTONE_H__	src/comb/attic/subset-monotone.h	2;"	d
HAVE_SUMDIFF_H__	src/aux0/sumdiff.h	2;"	d
HAVE_SWAPBLOCKS_H__	src/perm/swapblocks.h	2;"	d
HAVE_SWAP_H__	src/aux0/swap.h	2;"	d
HAVE_SYMBOLIFY_H__	src/sort/attic/symbolify.h	2;"	d
HAVE_SYMMETRICPART_H__	src/matrix/attic/symmetricpart.h	2;"	d
HAVE_SYMMETRY_H__	src/aux1/attic/symmetry.h	2;"	d
HAVE_TCRC64_H__	src/bits/tcrc64.h	2;"	d
HAVE_TESTMATRIX_H__	src/matrix/attic/testmatrix.h	2;"	d
HAVE_TESTNUM_H__	src/mod/attic/testnum.h	2;"	d
HAVE_TEST_GRAY_H__	src/comb/test-gray.h	2;"	d
HAVE_TEST_H__	test/test.h	2;"	d
HAVE_TEX_LINE_H__	src/aux0/tex-line.h	2;"	d
HAVE_THUE_MORSE_H__	src/bits/thue-morse.h	2;"	d
HAVE_TIMER_H__	src/aux0/attic/timer.h	2;"	d
HAVE_TINYFACTORS_H__	src/bits/tinyfactors.h	2;"	d
HAVE_TOEPLITZ_H__	src/matrix/attic/toeplitz.h	2;"	d
HAVE_TRANSPOSE2_H__	src/aux2/attic/transpose2.h	2;"	d
HAVE_TRANSPOSE2_H__	src/aux2/transpose2.h	2;"	d
HAVE_TRANSPOSEDHAARNN_H__	src/haar/transposedhaarnn.h	2;"	d
HAVE_TRANSPOSEDHAARREVNN_H__	src/haar/transposedhaarrevnn.h	2;"	d
HAVE_TRANSPOSE_H__	src/aux2/transpose.h	2;"	d
HAVE_TREE_LEV_SEQ_AUX_H__	src/comb/tree-lev-seq-aux.h	2;"	d
HAVE_TREE_LEV_SEQ_BRANCHING_NUM_H__	src/comb/attic/tree-lev-seq-branching-num.h	2;"	d
HAVE_TREE_LEV_SEQ_H__	src/comb/tree-lev-seq.h	2;"	d
HAVE_TRIGREC_H__	src/aux0/attic/trigrec.h	2;"	d
HAVE_UCOUNT_H__	src/sort/attic/ucount.h	2;"	d
HAVE_UNIQUEAPPROX_H__	src/sort/attic/uniqueapprox.h	2;"	d
HAVE_UNIQUEFUNC_H__	src/sort/uniquefunc.h	2;"	d
HAVE_UNIQUE_H__	src/sort/unique.h	2;"	d
HAVE_USEARCHFUNC_H__	src/sort/attic/usearchfunc.h	2;"	d
HAVE_USEARCH_H__	src/sort/usearch.h	2;"	d
HAVE_VECTOR2D_H__	src/ds/vector2d.h	2;"	d
HAVE_VECTOR3D_H__	src/ds/vector3d.h	2;"	d
HAVE_VECTOR_H__	src/matrix/vector.h	2;"	d
HAVE_VERSION_H__	src/aux0/version.h	2;"	d
HAVE_WALSHEIGEN_H__	src/walsh/walsheigen.h	2;"	d
HAVE_WALSHGRAY_H__	src/walsh/walshgray.h	2;"	d
HAVE_WALSHPAL_H__	src/walsh/walshpal.h	2;"	d
HAVE_WALSHQ_H__	src/walsh/walshq.h	2;"	d
HAVE_WALSHSEQ_H__	src/walsh/walshseq.h	2;"	d
HAVE_WALSHWAK2_H__	src/walsh/walshwak2.h	2;"	d
HAVE_WALSHWAK4_H__	src/walsh/walshwak4.h	2;"	d
HAVE_WALSHWAK8_H__	src/walsh/walshwak8.h	2;"	d
HAVE_WALSHWAKLOC2_H__	src/walsh/walshwakloc2.h	2;"	d
HAVE_WALSHWAKMATRIX_H__	src/walsh/attic/walshwakmatrix.h	2;"	d
HAVE_WALSHWAK_H__	src/walsh/walshwak.h	2;"	d
HAVE_WALSHWALREV_H__	src/walsh/walshwalrev.h	2;"	d
HAVE_WALSHWAL_H__	src/walsh/walshwal.h	2;"	d
HAVE_WALSH_ALL_H__	src/walsh-all.h	2;"	d
HAVE_WALSH_BASIS_H__	src/walsh/walsh-basis.h	2;"	d
HAVE_WAVELETFILTER_H__	src/wavelet/waveletfilter.h	2;"	d
HAVE_WAVELET_ALL_H__	src/wavelet-all.h	2;"	d
HAVE_WAVELET_H__	src/wavelet/wavelet.h	2;"	d
HAVE_WEAKLY_UNIMODAL_RGS_LEX_H__	src/comb/weakly-unimodal-rgs-lex.h	2;"	d
HAVE_WEIGHTEDCONVOLUTION_H__	src/convolution/weightedconvolution.h	2;"	d
HAVE_WEIGHTED_ARITHTRANSFORM_H__	src/walsh/weighted-arithtransform.h	2;"	d
HAVE_WEIGHTED_OR_CONVOLUTION_H__	src/walsh/weighted-or-convolution.h	2;"	d
HAVE_WFL_HILBERT_H__	src/comb/wfl-hilbert.h	2;"	d
HAVE_WORDGRAY_H__	src/aux1/wordgray.h	2;"	d
HAVE_WORD_STATS_H__	src/comb/word-stats.h	2;"	d
HAVE_XORPERMUTE_H__	src/perm/xorpermute.h	2;"	d
HAVE_YOUNG_TAB_RGS_DESCENTS_H__	src/comb/young-tab-rgs-descents.h	2;"	d
HAVE_YOUNG_TAB_RGS_H__	src/comb/young-tab-rgs.h	2;"	d
HAVE_YOUNG_TAB_RGS_SUBSET_LEX_H__	src/comb/young-tab-rgs-subset-lex.h	2;"	d
HAVE_ZEROBYTE_H__	src/bits/zerobyte.h	2;"	d
HAVE_ZIPREV_H__	src/perm/ziprev.h	2;"	d
HAVE_ZIP_H__	src/perm/zip.h	2;"	d
HAVE_ZORDER_H__	src/bits/zorder.h	2;"	d
HDRS	scripts/chkifdef.sh	/^    HDRS=$(find . -name \\*.h)$/;"	v
HDRS	scripts/chkifdef.sh	/^HDRS=$*$/;"	v
HEURISTIC_ASSERTS	src/comb/print-mset.cc	17;"	d	file:
HEURISTIC_ASSERTS	src/comb/print-set.cc	17;"	d	file:
HILBERT_NDIM_UNROLL	src/comb/hilbert-ndim-rec.h	126;"	d
HILBERT_NDIM_UNROLL	src/comb/hilbert-ndim-rec.h	18;"	d
HILBERT_NDIM_UNROLL	src/comb/hilbert-ndim.h	109;"	d
HILBERT_NDIM_UNROLL	src/comb/hilbert-ndim.h	17;"	d
HT	src/bits/lin2hilbert.cc	15;"	d	file:
HT	src/bits/lin2hilbert.cc	33;"	d	file:
Hamiltonian	doc/wfl-hilbert-doc.txt	/^    (i) The path is Hamiltonian, proceeding along edges joining nearest$/;"	v
I	demo/perm/perm-decomp-demo.cc	344;"	d	file:
I	doc/wfl-hilbert-doc.txt	/^  Generation morphism: start symbol A,I,E at level = 0,1,2 mod 3 stabilises$/;"	v
I	src/bits/bitcount-v.o	/^ELF/;"	v
I	src/comb/composition-nz-minc.o	/^ELF/;"	v
I	src/comb/print-composition-by-sorts.o	/^ELF/;"	v
I	src/mod/chebyshev1.o	/^ELF/;"	v
I	src/mod/chebyshev2.o	/^ELF/;"	v
I	src/perm/permq.o	/^HÑèH9ÆÈ/;"	v
IGNCASE	scripts/replace	/^        i|+i) IGNCASE='i';$/;"	v
IGP16	src/perm/shortgraypermute.h	121;"	d
IGP16	src/perm/shortgraypermute.h	203;"	d
IGP32	src/perm/shortgraypermute.h	125;"	d
IGP32	src/perm/shortgraypermute.h	204;"	d
IGP4	src/perm/shortgraypermute.h	117;"	d
IGP4	src/perm/shortgraypermute.h	201;"	d
IGP64	src/perm/shortgraypermute.h	131;"	d
IGP64	src/perm/shortgraypermute.h	205;"	d
IGP8	src/perm/shortgraypermute.h	119;"	d
IGP8	src/perm/shortgraypermute.h	202;"	d
IHT	src/bits/lin2hilbert.cc	104;"	d	file:
IHT	src/bits/lin2hilbert.cc	86;"	d	file:
INCL	scripts/whodep.sh	/^    INCL=1;$/;"	v
INCL	scripts/whodep.sh	/^    INCL=2;$/;"	v
INCL	scripts/whodep.sh	/^INCL=0  ## show files that depend on header$/;"	v
INCR_STEP_8	test/test-bits.cc	785;"	d	file:
INITIAL_RADIX_16	doc/fht-doc.txt	154;"	d	file:
INITIAL_RADIX_16	doc/fht-doc.txt	176;"	d	file:
INITIAL_RADIX_16	doc/fht-doc.txt	40;"	d	file:
INITIAL_RADIX_16	doc/fht-doc.txt	98;"	d	file:
INITIAL_RADIX_16	src/fht/cfht0.cc	34;"	d	file:
INITIAL_RADIX_16	src/fht/cfhtdit.cc	32;"	d	file:
INITIAL_RADIX_16	src/fht/fht0.cc	30;"	d	file:
INITIAL_RADIX_16	src/fht/fhtdit.cc	28;"	d	file:
INIT_ASSERT	src/bpol/gf2n.cc	52;"	d	file:
INTERACTIVE	scripts/replace	/^        f|+f) INTERACTIVE=0;$/;"	v
INTERACTIVE	scripts/replace	/^if [ "$DUMMY" = "1" ]; then  INTERACTIVE=0; fi$/;"	v
INVERSE	demo/comb/perm-gray-lipski-demo.cc	22;"	d	file:
INVERSE	demo/comb/perm-gray-wells-demo.cc	20;"	d	file:
INVERSE	demo/comb/perm-heap-demo.cc	19;"	d	file:
INVERSE	demo/comb/perm-l1r2-gray-demo.cc	20;"	d	file:
ISOSCENT_RGS_FIXARRAYS	src/comb/isoscent-rgs.h	16;"	d
J	doc/wfl-hilbert-doc.txt	/^If A -> G,H,J,K then conjugates of 3-cycle.$/;"	v
J	src/comb/partition-gen.o	/^ELF/;"	v
JJ_ASSERT_ABORT	src/jjassert.h	13;"	d
JJ_ASSERT_DEFAULT	src/jjassert.h	18;"	d
JJ_ASSERT_IGNORE	src/jjassert.h	12;"	d
JJ_ASSERT_SEGV	src/jjassert.h	15;"	d
JJ_ASSERT_STOP	src/jjassert.h	16;"	d
K	demo/comb/combination-emk-rec-demo.cc	/^ulong K;    \/\/ number of ones in words$/;"	v
K	demo/comb/combination-enup-rec-demo.cc	/^ulong K;    \/\/ number of ones in words$/;"	v
K	demo/comb/combination-gray-rec-demo.cc	/^ulong K;    \/\/ number of bits in words$/;"	v
K	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong K;$/;"	v
K	demo/comb/necklace-cat-demo.cc	/^ulong K;  \/\/ K-ary$/;"	v
K	src/comb/tree-lev-seq-aux.o	/^ELF/;"	v
KEEPGOING	scripts/chkifdef.sh	/^        k|+k) KEEPGOING=1;$/;"	v
KEEPGOING	scripts/chkifdef.sh	/^KEEPGOING=0;$/;"	v
K_	src/comb/attic/composition-chase.h	/^    ulong N_, K_;  \/\/ N=n+k-1 choose K=n$/;"	m	class:composition_chase	access:public
Kc	demo/comb/composition-gray-rec-demo.cc	/^ulong Nc, Kc;$/;"	v
Kp	demo/comb/composition-gray-rec-demo.cc	/^ulong Np, Kp;$/;"	v
L	src/comb/big-fact2perm.o	/^ELF/;"	v
L	src/comb/combination-rec.o	/^/;"	v
L	src/comb/mset-perm-lex-rec.o	/^/;"	v
L	src/comb/partition-conj.o	/^óÃ/;"	v
L	src/convolution/twodimfhtcnvl.o	/^ELF/;"	v
L	src/fft/cfftwrap.o	/^/;"	v
L	src/fft/fftsplitradix.o	/^ELF/;"	v
L	src/fht/skipfht.o	/^/;"	v
L	src/graph/search-digraph.o	/^ë/;"	v
L	src/mod/maxorder.o	/^ELF/;"	v
L3_rec	demo/comb/no1111-gray-demo.cc	/^void L3_rec(long p1, long p2, bool z)$/;"	f	signature:(long p1, long p2, bool z)
LAST	scripts/build-old.zsh	/^LAST=$(\\ls -1t ${MYZBAKDIR} | head -n 20 | tac )$/;"	v
LAST	scripts/diff-old.zsh	/^LAST=$(\\ls -1t ${MYZBAKDIR} | head -n 50 | tac )$/;"	v
LC_ALL	scripts/bench.zsh	/^export LC_ALL=C ## for sorting$/;"	v
LC_ALL	scripts/chkdemo.sh	/^export LC_ALL=C$/;"	v
LINES	scripts/whodep.sh	/^        LINES=$(grep -E $1 $NNDEP);$/;"	v
LIST	scripts/whodep.sh	/^        LIST=$(grep -E $1 $NNDEP  |  cut -d ':' -f1);$/;"	v
LOG2_BITS_PER_LONG	src/bits/bitsperlong.h	15;"	d
LOG2_BITS_PER_LONG	src/bits/bitsperlong.h	19;"	d
LOG2_BITS_PER_LONG	src/bits/bitsperlong.h	22;"	d
LOG2_BITS_PER_LONG_LONG	src/bits/bitsperlong.h	39;"	d
LOG_TSIZE	src/bits/tcrc64.h	112;"	d
LOG_TSIZE	src/bits/tcrc64.h	16;"	d
LR_WITH_DUMB_METHODS	demo/ds/left-right-array-demo.cc	2;"	d	file:
LX	src/fft/cfftdif4.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/fft/cfftdit4.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/fft/fftdif4.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/fft/fftdif4l.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/fft/fftdit4.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/fft/fftdit4l.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/ntt/nttdif4.cc	/^static const ulong LX = 2;$/;"	v	file:
LX	src/ntt/nttdit4.cc	/^static const ulong LX = 2;$/;"	v	file:
Lunnon	doc/wfl-hilbert-doc.txt	/^        Draft version 2   Fred Lunnon, Maynooth 01\/05\/13$/;"	v
M	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
M3	demo/comb/string-subst-hilbert3d-demo.cc	/^typedef matrix<int> M3;$/;"	t	file:
MAKEFLAGS	scripts/run-tests.sh	/^export MAKEFLAGS='';$/;"	v
MASK	demo/bits/debruijn-lookup-demo.cc	25;"	d	file:
MAT	src/matrix/attic/cholesky.h	113;"	d
MAT	src/matrix/attic/cholesky.h	11;"	d
MAT	src/matrix/attic/matrixsymmetryq.h	11;"	d
MAT	src/matrix/attic/matrixsymmetryq.h	209;"	d
MAT	src/matrix/attic/reorth.h	56;"	d
MAT	src/matrix/attic/reorth.h	7;"	d
MAT	src/matrix/attic/symmetricpart.h	106;"	d
MAT	src/matrix/attic/symmetricpart.h	10;"	d
MAT	src/matrix/attic/testmatrix.h	10;"	d
MAT	src/matrix/attic/testmatrix.h	31;"	d
MAT	src/matrix/attic/toeplitz.h	102;"	d
MAT	src/matrix/attic/toeplitz.h	11;"	d
MAX	demo/comb/schroeder-tree-demo.cc	/^const int MAX=20;$/;"	v
MAX_ARRAY_LEN	src/comb/composition-colex.h	94;"	d
MAX_N	demo/graph/sta-graph-acgray-demo.cc	15;"	d	file:
MAX_N	demo/graph/sta-graph-macgray-demo.cc	14;"	d	file:
MINFUNC	src/graph/mk-lyndon-gray-digraph.cc	192;"	d	file:
MIXEDRADIX_NAF_SUBSET_LEX_FIXARRAYS	src/comb/mixedradix-naf-subset-lex.h	14;"	d
MIXEDRADIX_RFACT_MAX_ARRAY_LEN	src/comb/mixedradix-rfact.h	15;"	d
MIXEDRADIX_SUBSET_LEXREV_FIXARRAYS	src/comb/mixedradix-subset-lexrev.h	14;"	d
MI_ASSERT	src/mod/modinit.cc	20;"	d	file:
MI_ASSERT	src/mod/modinit.cc	22;"	d	file:
MM	src/mod/moduli.txt	177;"	d	file:
MM	src/mod/moduli.txt	17;"	d	file:
MODPOW_USE_L2R	src/mod/modarith.h	155;"	d
MOD_FFT	src/ntt/attic/nttndim.cc	21;"	d	file:
MOD_FFT	src/ntt/attic/nttskip.cc	6;"	d	file:
MOD_FFT0	src/ntt/attic/nttskip.cc	7;"	d	file:
MSBS_STEP_8	test/test-bits.cc	783;"	d	file:
MSET_PERM_PREF_LEN	src/comb/mset-perm-pref.h	16;"	d
MULTILINE	scripts/replace	/^        m|+m) MULTILINE='ms';$/;"	v
MULT_UNROLL	src/bpol/bitpol-arith.h	20;"	d
MULT_UNROLL	src/bpol/bitpol-arith.h	239;"	d
MULT_UNROLL	src/bpol/bitpolmod-arith.h	257;"	d
MULT_UNROLL	src/bpol/bitpolmod-arith.h	25;"	d
M_	src/comb/cyclic-perm.h	/^    mixedradix_gray *M_;$/;"	m	class:cyclic_perm	access:public
M_	src/comb/perm-gray-rfact.h	/^    mixedradix_gray *M_;$/;"	m	class:perm_gray_rfact	access:public
M_	src/comb/perm-gray-rot1.h	/^    mixedradix_gray *M_;  \/\/ Gray code for factorial numbers$/;"	m	class:perm_gray_rot1	access:public
Math::BigInt	scripts/poly2hex.pl	/^use Math::BigInt;$/;"	m	class:Math	file:
N	demo/bits/revbin-rec-demo.cc	/^ulong N, ct;$/;"	v
N	demo/comb/combination-emk-rec-demo.cc	/^ulong N;    \/\/ number of bits in words$/;"	v
N	demo/comb/combination-enup-rec-demo.cc	/^ulong N;    \/\/ number of bits in words$/;"	v
N	demo/comb/combination-gray-rec-demo.cc	/^ulong N;    \/\/ number of bits in words$/;"	v
N	demo/comb/composition-nz-gray-rec-demo.cc	/^ulong N;$/;"	v
N	demo/comb/composition-nz-subset-lex-rec-demo.cc	/^ulong N;$/;"	v
N	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong N;$/;"	v
N	demo/comb/necklace-cat-demo.cc	/^ulong N;  \/\/ word length$/;"	v
N	demo/comb/necklace-gray-demo.cc	/^ulong N;  \/\/ word length$/;"	v
N	demo/comb/necklace-gray3-demo.cc	/^long N;  \/\/ word length$/;"	v
N	demo/comb/perm-restrpref-demo.cc	/^static ulong N;  \/\/ permutations of length N$/;"	v	file:
N	demo/comb/shift-subsets-demo.cc	/^ulong N;  \/\/ 2**n$/;"	v
N	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong N;$/;"	v
N	demo/graph/graph-perm-star-transpositions-demo.cc	/^static ulong N;$/;"	v	file:
N	demo/graph/sta-graph-acgray-demo.cc	/^ulong N=0;  \/\/ 2**n$/;"	v
N	demo/graph/sta-graph-macgray-demo.cc	/^ulong N=0;  \/\/ 2**n$/;"	v
N	demo/seq/A178514-demo.cc	/^ulong N;  \/\/ set to n in main()$/;"	v
N	demo/seq/A218396-demo.cc	27;"	d	file:
N	src/ntt/nttdif2.o	/^ELF/;"	v
N	src/ntt/nttdit2.o	/^MÒLHÐIÆHD$ I9Þ_þÿÿÝØÝØÝØÝØHD$(HD$(H9D$0¥ýÿÿÝØëÝØHÄh[]A\\A]A^A_Ã@/;"	v
NCHAR	src/comb/string-subst.h	/^    static const ulong NCHAR = 128;$/;"	m	class:string_subst	access:public
NDEBUG	src/aux0/attic/funcemu.h	104;"	d
NEG	src/comb/attic/combminchange.cc	12;"	d	file:
NEXT	demo/gf2n/bitmat-kronecker-demo.cc	26;"	d	file:
NNDEP	scripts/whodep.sh	/^NNDEP=depend.nn  ## dependency file without linebreaks$/;"	v
NUM_PBR	src/perm/permrand-derange.h	152;"	d
NUM_PBR	src/perm/permrand-derange.h	40;"	d
NXARG	src/nextarg.h	138;"	d
NXARGFL	src/nextarg.h	139;"	d
NXARGSTR	src/nextarg.h	140;"	d
N_	src/comb/attic/composition-chase.h	/^    ulong N_, K_;  \/\/ N=n+k-1 choose K=n$/;"	m	class:composition_chase	access:public
N_	src/comb/check-kpermgen.h	/^    ulong N_;$/;"	m	class:check_kpermgen	access:public
Nc	demo/comb/composition-gray-rec-demo.cc	/^ulong Nc, Kc;$/;"	v
Np	demo/comb/composition-gray-rec-demo.cc	/^ulong Np, Kp;$/;"	v
O	src/bpol/gf2n.o	/^/;"	v
OK	src/comb/acyclic-map.h	/^    bool OK()  const$/;"	f	class:acyclic_map	access:public	signature:() const
OK	src/comb/arrangement-rgs.h	/^    bool OK()  const$/;"	f	class:arrangement_rgs	access:public	signature:() const
OK	src/comb/ascent-alt-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_alt_rgs	access:public	signature:() const
OK	src/comb/ascent-nonflat-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
OK	src/comb/ascent-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
OK	src/comb/ascent-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
OK	src/comb/attic/ascent-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
OK	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
OK	src/comb/binary-huffman.h	/^    bool OK()  const$/;"	f	class:binary_huffman	access:public	signature:() const
OK	src/comb/catalan-path-lex.h	/^    bool OK()  const$/;"	f	class:catalan_path_lex	access:public	signature:() const
OK	src/comb/catalan-rgs-gray.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_gray	access:public	signature:() const
OK	src/comb/catalan-rgs-gslex.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_gslex	access:public	signature:() const
OK	src/comb/catalan-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:() const
OK	src/comb/catalan-rgs.h	/^    bool OK()  const$/;"	f	class:catalan_rgs	access:public	signature:() const
OK	src/comb/catalan-step-rgs-colex.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
OK	src/comb/catalan-step-rgs-lex.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
OK	src/comb/catalan-step-rgs-subset-lexrev.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
OK	src/comb/change-rgs.h	/^    bool OK()  const$/;"	f	class:change_rgs	access:public	signature:() const
OK	src/comb/composition-dist-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
OK	src/comb/composition-ex-colex.h	/^    bool OK()  const$/;"	f	class:composition_ex_colex	access:public	signature:() const
OK	src/comb/composition-ex-lex.h	/^    bool OK()  const$/;"	f	class:composition_ex_lex	access:public	signature:() const
OK	src/comb/composition-nz-binary.h	/^    bool OK()  const$/;"	f	class:composition_nz_binary	access:public	signature:() const
OK	src/comb/composition-nz-carlitz.h	/^    bool OK()  const$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
OK	src/comb/composition-nz-first-max.h	/^    bool OK()  const$/;"	f	class:composition_nz_first_max	access:public	signature:() const
OK	src/comb/composition-nz-gray.h	/^    bool OK()  const$/;"	f	class:composition_nz_gray	access:public	signature:() const
OK	src/comb/composition-nz-gray2.h	/^    bool OK()  const$/;"	f	class:composition_nz_gray2	access:public	signature:() const
OK	src/comb/composition-nz-i-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
OK	src/comb/composition-nz-left-2smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
OK	src/comb/composition-nz-left-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
OK	src/comb/composition-nz-max.h	/^    bool OK()  const$/;"	f	class:composition_nz_max	access:public	signature:() const
OK	src/comb/composition-nz-min.h	/^    bool OK()  const$/;"	f	class:composition_nz_min	access:public	signature:() const
OK	src/comb/composition-nz-minc.h	/^    bool OK()  const$/;"	f	class:composition_nz_minc	access:public	signature:() const
OK	src/comb/composition-nz-numparts.h	/^    bool OK()  const$/;"	f	class:composition_nz_numparts	access:public	signature:() const
OK	src/comb/composition-nz-odd-subset-lex.h	/^    bool OK()  const$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
OK	src/comb/composition-nz-odd.h	/^    bool OK()  const$/;"	f	class:composition_nz_odd	access:public	signature:() const
OK	src/comb/composition-nz-restrpref.h	/^    bool OK()  const$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
OK	src/comb/composition-nz-rl.h	/^    bool OK()  const$/;"	f	class:composition_nz_rl	access:public	signature:() const
OK	src/comb/composition-nz-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_smooth	access:public	signature:() const
OK	src/comb/composition-nz-sorts.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts	access:public	signature:() const
OK	src/comb/composition-nz-sorts2-pp.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
OK	src/comb/composition-nz-sorts2.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
OK	src/comb/composition-nz-subset-lex.h	/^    bool OK()  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
OK	src/comb/composition-nz-superdiagonal.h	/^    bool OK()  const$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
OK	src/comb/composition-nz-upstep.h	/^    bool OK()  const$/;"	f	class:composition_nz_upstep	access:public	signature:() const
OK	src/comb/composition-nz-weakly-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
OK	src/comb/composition-nz.h	/^    bool OK()  const$/;"	f	class:composition_nz	access:public	signature:() const
OK	src/comb/composition-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_unimodal	access:public	signature:() const
OK	src/comb/descent-rgs.h	/^    bool OK()  const$/;"	f	class:descent_rgs	access:public	signature:() const
OK	src/comb/dyck-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:() const
OK	src/comb/dyck-rgs.h	/^    bool OK()  const$/;"	f	class:dyck_rgs	access:public	signature:() const
OK	src/comb/id-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
OK	src/comb/involution-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:() const
OK	src/comb/isoscent-rgs.h	/^    bool OK()  const$/;"	f	class:isoscent_rgs	access:public	signature:() const
OK	src/comb/ksubset-lex.h	/^    bool OK()  const$/;"	f	class:ksubset_lex	access:public	signature:() const
OK	src/comb/mixedradix-colex.h	/^    bool OK()  const$/;"	f	class:mixedradix_colex	access:public	signature:() const
OK	src/comb/mixedradix-endo-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
OK	src/comb/mixedradix-endo.h	/^    bool OK()  const$/;"	f	class:mixedradix_endo	access:public	signature:() const
OK	src/comb/mixedradix-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_gray	access:public	signature:() const
OK	src/comb/mixedradix-gray2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gray2	access:public	signature:() const
OK	src/comb/mixedradix-gslex-alt.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
OK	src/comb/mixedradix-gslex-alt2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:() const
OK	src/comb/mixedradix-gslex.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex	access:public	signature:() const
OK	src/comb/mixedradix-gslex2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
OK	src/comb/mixedradix-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_lex	access:public	signature:() const
OK	src/comb/mixedradix-modular-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
OK	src/comb/mixedradix-modular-gray2.h	/^    bool OK()  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
OK	src/comb/mixedradix-naf-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
OK	src/comb/mixedradix-naf-subset-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
OK	src/comb/mixedradix-naf.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf	access:public	signature:() const
OK	src/comb/mixedradix-restrpref.h	/^    bool OK()  const$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
OK	src/comb/mixedradix-sl-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
OK	src/comb/mixedradix-sod-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
OK	src/comb/mixedradix-subset-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
OK	src/comb/mixedradix-subset-lexrev.h	/^    bool OK()  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:() const
OK	src/comb/motzkin-nonflat-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:() const
OK	src/comb/motzkin-path-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_path_lex	access:public	signature:() const
OK	src/comb/motzkin-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_rgs_lex	access:public	signature:() const
OK	src/comb/motzkin-step-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
OK	src/comb/ordered-tree-branches.h	/^    bool OK()  const$/;"	f	class:ordered_tree_branches	access:public	signature:() const
OK	src/comb/ordered-tree-branching-seq.h	/^    bool OK()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
OK	src/comb/ordered-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
OK	src/comb/paren-lex.h	/^    bool OK()  const$/;"	f	class:paren_lex	access:public	signature:() const
OK	src/comb/paren-pref.h	/^    bool OK()  const$/;"	f	class:paren_pref	access:public	signature:() const
OK	src/comb/paren.h	/^    bool OK()  const$/;"	f	class:paren	access:public	signature:() const
OK	src/comb/partition-2fall-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
OK	src/comb/partition-2fall-asc.h	/^    bool OK()  const$/;"	f	class:partition_2fall_asc	access:public	signature:() const
OK	src/comb/partition-2fall-desc.h	/^    bool OK()  const$/;"	f	class:partition_2fall_desc	access:public	signature:() const
OK	src/comb/partition-asc-2rep-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
OK	src/comb/partition-asc-2rep.h	/^    bool OK()  const$/;"	f	class:partition_asc_2rep	access:public	signature:() const
OK	src/comb/partition-asc-perim.h	/^    bool OK()  const$/;"	f	class:partition_asc_perim	access:public	signature:() const
OK	src/comb/partition-asc-sorts.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts	access:public	signature:() const
OK	src/comb/partition-asc-sorts2-pp.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
OK	src/comb/partition-asc-sorts2.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
OK	src/comb/partition-asc-subset-lex-csh.h	/^    bool OK()  const$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
OK	src/comb/partition-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
OK	src/comb/partition-asc.h	/^    bool OK()  const$/;"	f	class:partition_asc	access:public	signature:() const
OK	src/comb/partition-binary-asc.h	/^    bool OK()  const$/;"	f	class:partition_binary_asc	access:public	signature:() const
OK	src/comb/partition-binary-desc.h	/^    bool OK()  const$/;"	f	class:partition_binary_desc	access:public	signature:() const
OK	src/comb/partition-desc-bb.h	/^    bool OK()  const$/;"	f	class:partition_desc_bb	access:public	signature:() const
OK	src/comb/partition-desc.h	/^    bool OK()  const$/;"	f	class:partition_desc	access:public	signature:() const
OK	src/comb/partition-dist-asc-len.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
OK	src/comb/partition-dist-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
OK	src/comb/partition-dist-asc.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc	access:public	signature:() const
OK	src/comb/partition-dist-d-asc.h	/^    bool OK()  const$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
OK	src/comb/partition-dist-desc.h	/^    bool OK()  const$/;"	f	class:partition_dist_desc	access:public	signature:() const
OK	src/comb/partition-nonsquashing-desc.h	/^    bool OK()  const$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
OK	src/comb/partition-odd-asc-subset-lex-csh.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
OK	src/comb/partition-odd-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
OK	src/comb/partition-odd-asc.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc	access:public	signature:() const
OK	src/comb/partition-odd-desc.h	/^    bool OK()  const$/;"	f	class:partition_odd_desc	access:public	signature:() const
OK	src/comb/partition-odd-nonsquashing-desc.h	/^    bool OK()  const$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
OK	src/comb/partition-rgs-lex.h	/^    bool OK()  const$/;"	f	class:partition_rgs_lex	access:public	signature:() const
OK	src/comb/partition-s-desc.h	/^    bool OK()  const$/;"	f	class:partition_s_desc	access:public	signature:() const
OK	src/comb/partition-strongly-decr-desc.h	/^    bool OK()  const$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
OK	src/comb/partition.h	/^    bool OK()  const$/;"	f	class:partition	access:public	signature:() const
OK	src/comb/schroeder-rgs-lex.h	/^    bool OK()  const$/;"	f	class:schroeder_rgs_lex	access:public	signature:() const
OK	src/comb/score-sequence.h	/^    bool OK()  const$/;"	f	class:score_sequence	access:public	signature:() const
OK	src/comb/setpart-ccf-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:() const
OK	src/comb/setpart-ck-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_ck_rgs	access:public	signature:() const
OK	src/comb/setpart-p-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:() const
OK	src/comb/setpart-rgs-gray.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
OK	src/comb/setpart-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
OK	src/comb/setpart-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
OK	src/comb/setpart-s-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:() const
OK	src/comb/setpart-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:() const
OK	src/comb/skew-binary.h	/^    bool OK()  const$/;"	f	class:skew_binary	access:public	signature:() const
OK	src/comb/smooth-rfact-rgs.h	/^    bool OK()  const$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
OK	src/comb/string-subst.cc	/^string_subst::OK()  const$/;"	f	class:string_subst	signature:() const
OK	src/comb/string-subst.h	/^    bool OK()  const;$/;"	p	class:string_subst	access:public	signature:() const
OK	src/comb/tree-lev-seq.h	/^    bool OK()  const  \/\/ test is incomplete$/;"	f	class:tree_lev_seq	access:public	signature:() const
OK	src/comb/weakly-unimodal-rgs-lex.h	/^    bool OK()  const$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:() const
OK	src/comb/young-tab-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
OK	src/comb/young-tab-rgs.h	/^    bool OK()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
OK	src/graph/digraph.h	/^    bool OK()  const  { return (0==test()); }$/;"	f	class:digraph	access:public	signature:() const
ONES_STEP_4	test/test-bits.cc	777;"	d	file:
ONES_STEP_8	test/test-bits.cc	780;"	d	file:
OPT	scripts/chkifdef.sh	/^while getopts :k OPT; do$/;"	v
OPT	scripts/replace	/^while getopts :h\\?fimqQnNcd:D:e:o: OPT; do$/;"	v
ORDER	demo/gf2n/bitpol-srp-demo.cc	30;"	d	file:
ORDER	demo/gf2n/bitpol-srp-demo.cc	33;"	d	file:
OUTFILE	scripts/replace	/^        o|+o) OUTFILE=$OPTARG;$/;"	v
OUTFILE	scripts/replace	/^unset OUTFILE;$/;"	v
P	demo/comb/combination-pref-demo.cc	/^ulong *S, *P;$/;"	v
P	src/comb/arrangement-lex.h	/^    perm_lex_inv P;$/;"	m	class:arrangement_lex	access:private
P	src/comb/hilbert-ndim-rec.h	/^    ulong P[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim_rec	access:public
P	src/comb/hilbert-ndim.h	/^    ulong P[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim	access:public
P1	demo/perm/perm-decomp-demo.cc	190;"	d	file:
P2	demo/perm/perm-decomp-demo.cc	191;"	d	file:
PAD	demo/perm/cycles-demo.cc	22;"	d	file:
PARANOIA	src/aux0/attic/range.h	124;"	d
PAREN_PREF_BASE1	src/comb/paren-pref.h	13;"	d
PAREN_PREF_BASE1	src/comb/paren-pref.h	152;"	d
PARTITION_2FALL_ASC_FIXARRAYS	src/comb/partition-2fall-asc.h	16;"	d
PARTITION_ASC_SORTS_FIXARRAYS	src/comb/partition-asc-sorts.h	19;"	d
PAT	scripts/bench.zsh	/^    PAT='.'; ## this matches all files$/;"	v
PCMD	scripts/mkcompl.sh	/^PCMD='while(<STDIN>) { \/^\\\/\\\/\/ || \/jjkeep\/ || s\/double\/Complex\/g; s\/realconvolution.h\/complexconvolution.h\/g; print;}'$/;"	v
PCOND	src/comb/ksubset-rec.cc	35;"	d	file:
PCOND	src/comb/ksubset-rec.cc	50;"	d	file:
PERM_COLEX_FIXARRAYS	src/comb/perm-colex.h	14;"	d
PERM_HEAP2_FIXARRAYS	src/comb/perm-heap2.h	14;"	d
PERM_HEAP2_SWAPS_FIXARRAYS	src/comb/perm-heap2-swaps.h	13;"	d
PERM_IVES_OPT2	src/comb/perm-ives.h	19;"	d
PERM_LEX2_FIXARRAYS	src/comb/perm-lex2.h	14;"	d
PERM_LEX2_OPT	src/comb/perm-lex2.h	15;"	d
PERM_LEX_INV_FIXARRAYS	src/comb/perm-lex-inv.h	14;"	d
PERM_LEX_INV_OPT	src/comb/perm-lex-inv.h	17;"	d
PERM_MV0_UPDATE_D0	src/comb/perm-mv0.h	15;"	d
PERM_STAR_FIXARRAYS	src/comb/perm-star.h	15;"	d
PERM_STAR_SWAPS_FIXARRAYS	src/comb/perm-star-swaps.h	12;"	d
PERM_STAR_WITH_INVERSE	demo/comb/perm-star-inv-demo.cc	4;"	d	file:
PERM_STAR_WITH_INVERSE	src/comb/perm-star.h	13;"	d
PERM_TROTTER_OPT	src/comb/perm-trotter.h	14;"	d
PF	demo/perm/perm-decomp-demo.cc	/^typedef  void (*PF)(ulong *, ulong);$/;"	t	file:
PGRF_SUCC_BY_INV	src/comb/perm-gray-rfact.h	17;"	d
PP	demo/bits/hilbert-demo.cc	18;"	d	file:
PP	src/bits/bitcount-v.cc	17;"	d	file:
PP	src/bits/bitcount-v.cc	38;"	d	file:
PP	src/mod/moduli.txt	15;"	d	file:
PP	src/mod/moduli.txt	175;"	d	file:
PQ_	src/bpol/mersenne-coprime.h	/^    priority_queue<umod_t, umod_t> PQ_;$/;"	m	class:mersenne_coprime	access:public
PREFIX	INSTALL.txt	/^  make install PREFIX=\/some\/dir\/$/;"	v
PRINT	demo/sort/merge-sort-demo.cc	/^static void PRINT(const char *f, ulong i, ulong n)$/;"	f	file:	signature:(const char *f, ulong i, ulong n)
PRINT	demo/sort/merge-sort4-demo.cc	/^static void PRINT(const char *f, ulong i, ulong n)$/;"	f	file:	signature:(const char *f, ulong i, ulong n)
PRINTVAR2	src/ds/bitarray.cc	17;"	d	file:
PRINT_DO	demo/ds/bitarray-demo.cc	13;"	d	file:
PRINT_DO_VAL	demo/ds/bitarray-demo.cc	19;"	d	file:
PRINT_MATPOW	demo/gf2n/gf2n-matrix-demo.cc	20;"	d	file:
PRINT_VAL	demo/ds/bitarray-demo.cc	16;"	d	file:
PROCESS	demo/comb/combination-lam-demo.cc	39;"	d	file:
PRX	demo/comb/necklace-demo.cc	28;"	d	file:
PRX	demo/seq/A215327-demo.cc	32;"	d	file:
P_	src/comb/mset-perm-gray.h	/^    ulong *P_;   \/\/ permutation$/;"	m	class:mset_perm_gray	access:public
Pnt	src/ds/bounding-box.h	/^    typedef point2d<Type> Pnt;$/;"	t	class:bounding_box	access:private
Pnt	src/ds/centered-array2d.h	/^    typedef point2d<long> Pnt;$/;"	t	class:centered_array2d	access:private
Pnt	src/ds/centered-array3d.h	/^    typedef point3d<long> Pnt;$/;"	t	class:centered_array3d	access:private
Print	demo/bits/crc64-demo.cc	/^Print(const char *str, uint64 a)$/;"	f	signature:(const char *str, uint64 a)
Print	demo/bits/gotcha-demo.cc	/^Print(TYPE c)$/;"	f	signature:(TYPE c)
Print	demo/bits/pcrc64-demo.cc	/^Print(const pcrc64<Type> &P, const ulong pn)$/;"	f	signature:(const pcrc64<Type> &P, const ulong pn)
Print	demo/bits/revbin-steps-demo.cc	/^void Print(const char *w)$/;"	f	signature:(const char *w)
Print	demo/comb/combination-lam-demo.cc	/^void Print(const ulong *, ulong, ulong)$/;"	f	signature:(const ulong *, ulong, ulong)
Print	demo/comb/combination-lam-demo.cc	/^void Print(const ulong *a, ulong n, ulong k)$/;"	f	signature:(const ulong *a, ulong n, ulong k)
Print	demo/fft/locrec-demo.cc	/^void Print(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
Print	demo/perm/swap-blocks-demo.cc	/^void Print(const char *g, const char* bla)$/;"	f	signature:(const char *g, const char* bla)
Print0	demo/perm/swap-blocks-demo.cc	/^void Print0(const char *g, ulong x1, ulong n1, ulong x2, ulong n2)$/;"	f	signature:(const char *g, ulong x1, ulong n1, ulong x2, ulong n2)
Q	scripts/chkdemo-etargets.sh	/^            Q=0;$/;"	v
Q	src/comb/hilbert-ndim-rec.h	/^    ulong Q[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim_rec	access:public
QQ	demo/perm/perm-decomp-demo.cc	154;"	d	file:
QQ	demo/perm/perm-decomp-demo.cc	180;"	d	file:
QUIET	scripts/replace	/^        q|+q) QUIET=1;$/;"	v
QUIET	scripts/replace	/^if [ "$INTERACTIVE" = "1" ]; then  QUIET=0;  fi$/;"	v
Q_	src/comb/mset-perm-gray.h	/^    ulong *Q_;   \/\/ inverse permutation$/;"	m	class:mset_perm_gray	access:public
Queue	fxt.lsm	/^                Sorting, Searching, Stack (FIFO), Queue (LIFO), heap and priority-queue.$/;"	p	file:	signature:(LIFO)
R1	src/bpol/lhcarule-minweight.cc	12;"	d	file:
R1	src/bpol/lhcarule-minweight.cc	526;"	d	file:
R2	src/bpol/lhcarule-minweight.cc	13;"	d	file:
R2	src/bpol/lhcarule-minweight.cc	527;"	d	file:
RBP0_SYMM	src/perm/revbinpermute0.h	114;"	d
RBP0_SYMM	src/perm/revbinpermute0.h	17;"	d
RBP_SYMM	src/perm/revbinpermute.h	112;"	d
RBP_SYMM	src/perm/revbinpermute.h	17;"	d
RBt	demo/ds/ringbuffer-demo.cc	/^typedef signed char  RBt;$/;"	t	file:
RCP_VERSION	src/perm/permrand-connected.h	21;"	d
RCP_VERSION	src/perm/permrand-connected.h	82;"	d
REAL	src/fht/fhtmayer.txt	285;"	d	file:
REAL_COMPLEX_FFT	src/realfft/skiprealfft.cc	14;"	d	file:
REAL_COMPLEX_FFT0	src/realfft/skiprealfft.cc	15;"	d	file:
RESTARGS	src/nextarg.h	150;"	d
RESTARGS_MSG	src/nextarg.h	143;"	d
RESTARGS_MSG	src/nextarg.h	145;"	d
RET	src/comb/attic/combminchange.cc	13;"	d	file:
REVBIN_PERMUTE0_UNROLL	src/perm/attic/revbinpermute.h	7;"	d
REVBIN_PERMUTE_UNROLL	src/perm/attic/revbinpermute.h	6;"	d
RULER_FUNC_MAX_ARRAY_LEN	src/comb/ruler-func.h	12;"	d
ReAlloc	src/realloc.h	/^inline Type *ReAlloc(Type *p, ulong n, ulong \/*nold*\/)$/;"	f	signature:(Type *p, ulong n, ulong )
ReAlloc	src/realloc.h	/^inline Type *ReAlloc(Type *p, ulong n, ulong nold)$/;"	f	signature:(Type *p, ulong n, ulong nold)
S	demo/bits/dragon-curve-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-hex-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r13-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r4-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r5-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r7-2-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r7-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon-r9-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/bits/dragon3-texpic-demo.cc	/^double C[csn], S[csn];  \/\/ direction vectors$/;"	v
S	demo/comb/combination-pref-demo.cc	/^ulong *S, *P;$/;"	v
S	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
S	demo/seq/A218396-demo.cc	/^ulong S[N]; \/\/ allowed set$/;"	v
S	src/bits/bitsubset-gray.h	/^    bit_subset S;$/;"	m	class:bit_subset_gray	access:protected
S	src/comb/paren-string-to-rgs.cc	/^static const char *S = ".1";$/;"	v	file:
S1	demo/comb/no111-gray-demo.cc	102;"	d	file:
S1	demo/comb/no111-gray-demo.cc	86;"	d	file:
S1	demo/comb/no1111-gray-demo.cc	105;"	d	file:
S1	demo/comb/no1111-gray-demo.cc	86;"	d	file:
S1	demo/comb/no1xy1-gray-demo.cc	116;"	d	file:
S1	demo/comb/no1xy1-gray-demo.cc	88;"	d	file:
S2	demo/comb/no111-gray-demo.cc	103;"	d	file:
S2	demo/comb/no111-gray-demo.cc	87;"	d	file:
S2	demo/comb/no1111-gray-demo.cc	106;"	d	file:
S2	demo/comb/no1111-gray-demo.cc	87;"	d	file:
S2	demo/comb/no1xy1-gray-demo.cc	117;"	d	file:
S2	demo/comb/no1xy1-gray-demo.cc	89;"	d	file:
S3	demo/comb/no111-gray-demo.cc	104;"	d	file:
S3	demo/comb/no111-gray-demo.cc	88;"	d	file:
S3	demo/comb/no1111-gray-demo.cc	107;"	d	file:
S3	demo/comb/no1111-gray-demo.cc	88;"	d	file:
S3	demo/comb/no1xy1-gray-demo.cc	118;"	d	file:
S3	demo/comb/no1xy1-gray-demo.cc	90;"	d	file:
S4	demo/comb/no1111-gray-demo.cc	108;"	d	file:
S4	demo/comb/no1111-gray-demo.cc	89;"	d	file:
S4	demo/comb/no1xy1-gray-demo.cc	119;"	d	file:
S4	demo/comb/no1xy1-gray-demo.cc	91;"	d	file:
S5	demo/comb/no1xy1-gray-demo.cc	120;"	d	file:
S5	demo/comb/no1xy1-gray-demo.cc	92;"	d	file:
S6	demo/comb/no1xy1-gray-demo.cc	121;"	d	file:
S6	demo/comb/no1xy1-gray-demo.cc	93;"	d	file:
SAVE_F0	src/dctdst/dst.cc	15;"	d	file:
SAYFUNC	demo/fft/fht-bench.cc	23;"	d	file:
SAYFUNC	demo/fft/walsh-bench.cc	22;"	d	file:
SCHROEDER_RGS_LEX_FIXARRAYS	src/comb/schroeder-rgs-lex.h	16;"	d
SCORE_SEQUENCE_FIXARRAYS	src/comb/score-sequence.h	11;"	d
SEP	demo/arith/power-costs-demo.cc	18;"	d	file:
SEP	demo/arith/power-costs-demo.cc	21;"	d	file:
SET	src/perm/perminvert.cc	/^static inline void SET(ulong *f, ulong k)  { f[k & s0] |= s1; }$/;"	f	file:	signature:(ulong *f, ulong k)
SETPART_CK_RGS_NZ	src/comb/setpart-ck-rgs.h	13;"	d
SETPART_RGS_SUBSET_LEX_SC	src/comb/setpart-rgs-subset-lex.h	19;"	d
SH	src/bits/bitgraypermute.h	124;"	d
SHOW_HEAP	demo/sort/heapsort-demo.cc	43;"	d	file:
SHOW_REVERSED	demo/comb/catalan-rgs-gray-demo.cc	20;"	d	file:
SHWBIN	demo/bits/bitdemos.h	45;"	d
SHWBIN2	demo/bits/bitdemos.h	49;"	d
SHWDEC	demo/bits/bitdemos.h	53;"	d
SINCOS3ALG	doc/fft-doc.txt	173;"	d	file:
SINCOS3ALG	doc/fft-doc.txt	200;"	d	file:
SINCOS3ALG	doc/realfft-doc.txt	125;"	d	file:
SINCOS3ALG	src/fft/cfftsplitradix.cc	21;"	d	file:
SINCOS3ALG	src/fft/fftsplitradix.cc	20;"	d	file:
SINCOS3ALG	src/realfft/realfftsplitradix.cc	21;"	d	file:
SINCOS_AUTOMATIC	src/aux0/sincos.h	11;"	d
SINCOS_USE_ASM	src/aux0/sincos.h	19;"	d
SINCOS_USE_ASM	src/aux0/sincos.h	23;"	d
SINCOS_USE_C	src/aux0/sincos.h	37;"	d
SINCOS_USE_C	src/aux0/sincos.h	48;"	d
SINCOS_USE_MATHINLINE	src/aux0/sincos.h	35;"	d
SIN_1_PI_8	src/aux0/attic/constants.h	16;"	d
SIN_1_PI_8	src/fht/cfht0.cc	19;"	d	file:
SIN_1_PI_8	src/fht/cfhtdif.cc	19;"	d	file:
SIN_1_PI_8	src/fht/cfhtdit.cc	18;"	d	file:
SIN_1_PI_8	src/fht/fht0.cc	15;"	d	file:
SIN_1_PI_8	src/fht/fhtdif.cc	15;"	d	file:
SIN_1_PI_8	src/fht/fhtdit.cc	14;"	d	file:
SLOW_MOD_CONVOLUTION_VERSION	src/ntt/slownttcnvl.cc	16;"	d	file:
SMALL_LDN	test/test.h	86;"	d
SQRT2	src/fht/fhtmayer.txt	58;"	d	file:
SQRT2_2	src/fht/fhtmayer.txt	57;"	d	file:
SQUARE_BY_MULT	src/bpol/bitpolmod-arith.h	258;"	d
SQUARE_BY_MULT	src/bpol/bitpolmod-arith.h	26;"	d
SRC	src/aux2/transpose.h	124;"	d
SRC	src/aux2/transpose.h	78;"	d
SRC	src/aux2/transpose2.h	16;"	d
SRC	src/aux2/transpose2.h	63;"	d
SRC	test/test-transpose.cc	22;"	d	file:
SRC	test/test-transpose.cc	51;"	d	file:
STR	demo/fft/fht-bench.cc	26;"	d	file:
STR	demo/fft/walsh-bench.cc	25;"	d	file:
ST_INIT	src/ds/attic/coroutine-paren-demo.cc	51;"	d	file:
ST_RETURN	src/ds/attic/coroutine-paren-demo.cc	52;"	d	file:
SU1	src/fft/fft9.cc	17;"	d	file:
SU2	src/fft/fft9.cc	18;"	d	file:
SU3	src/fft/fft9.cc	19;"	d	file:
SU4	src/fft/fft9.cc	20;"	d	file:
SUBSET_DELTALEX_MAX_ARRAY_LEN	src/comb/subset-deltalex.h	11;"	d
SUBSET_GRAY_DELTA_MAX_ARRAY_LEN	src/comb/subset-gray-delta.h	14;"	d
SUBSET_GRAY_MAX_ARRAY_LEN	src/comb/subset-gray.h	12;"	d
SZ	fxt-2018.01.08.tar.gz	/^/;"	v
S_	src/comb/ksubset-gray.h	/^    ulong *S_;  \/\/ set in S[1,2,...,k] with elements \\in {1,2,...,n}$/;"	m	class:ksubset_gray	access:public
Searching	fxt.lsm	/^                Sorting, Searching, Stack (FIFO), Queue (LIFO), heap and priority-queue.$/;"	v
Sin	src/fht/hartleyshift.h	148;"	d
Sin	src/fht/hartleyshift.h	17;"	d
SinCos	doc/aux0-doc.txt	/^static inline Complex SinCos(double phi);$/;"	p	file:	signature:(double phi)
SinCos	doc/aux0-doc.txt	/^static inline void SinCos(double a, double *s, double *c);$/;"	p	file:	signature:(double a, double *s, double *c)
SinCos	src/aux0/attic/sincos.cc	/^SinCos(double a, double *s, double *c)$/;"	f	signature:(double a, double *s, double *c)
SinCos	src/aux0/csincos.h	/^static inline Complex SinCos(double phi)$/;"	f	signature:(double phi)
SinCos	src/aux0/sincos.h	/^static inline void SinCos(double a, double *s, double *c)$/;"	f	signature:(double a, double *s, double *c)
Smat	demo/comb/conference-quadres-demo.cc	/^typedef matrix<int>  Smat;  \/\/ matrix with integer entries$/;"	t	file:
Smat	demo/comb/hadamard-srs-demo.cc	/^typedef matrix<int>  Smat;  \/\/ matrix with integer entries$/;"	t	file:
Stack	fxt.lsm	/^                Sorting, Searching, Stack (FIFO), Queue (LIFO), heap and priority-queue.$/;"	p	file:	signature:(FIFO)
T$	src/ntt/nttcnvl.o	/^ELF/;"	v
TABLE_TYPE	demo/seq/A182372-demo.cc	/^typedef unsigned char TABLE_TYPE;$/;"	t	file:
TEST	demo/gf2n/gf2n-minpoly-demo.cc	20;"	d	file:
TEST	demo/gf2n/gf2n-minpoly-demo.cc	25;"	d	file:
TEST	demo/gf2n/normalpoly-dual-demo.cc	30;"	d	file:
TEST	demo/gf2n/normalpoly-dual-demo.cc	37;"	d	file:
TEST	src/perm/perminvert.cc	/^static inline bool TEST(ulong *f, ulong k)  { return (0 != (f[k & s0] & s1)); }$/;"	f	file:	signature:(ulong *f, ulong k)
TESTSRC	scripts/run-tests.sh	/^    make 1test  TESTSRC=test\/test-include-all.cc  || exit 1$/;"	v
TEX_USE_PICT2E	src/aux0/tex-line.h	11;"	d
THRS_STEP_4	test/test-bits.cc	779;"	d	file:
TMAX	demo/comb/schroeder-tree-demo.cc	/^const int TMAX=10*MAX;$/;"	v
TMPI	scripts/chkdirs.sh	/^TMPI=\/tmp\/incl-tmpi$/;"	v
TRIG_INIT	src/fht/fhtmayer.txt	297;"	d	file:
TRIG_INIT	src/fht/fhtmayer.txt	328;"	d	file:
TRIG_NEXT	src/fht/fhtmayer.txt	306;"	d	file:
TRIG_NEXT	src/fht/fhtmayer.txt	335;"	d	file:
TRIG_RESET	src/fht/fhtmayer.txt	322;"	d	file:
TRIG_RESET	src/fht/fhtmayer.txt	341;"	d	file:
TRIG_VARS	src/fht/fhtmayer.txt	295;"	d	file:
TRIG_VARS	src/fht/fhtmayer.txt	326;"	d	file:
TSIZE	src/bits/tcrc64.h	113;"	d
TSIZE	src/bits/tcrc64.h	18;"	d
TT	demo/fft/walsh-basis-demo.cc	18;"	d	file:
TT	demo/perm/perm-decomp-demo.cc	189;"	d	file:
TT	demo/perm/permutation-matrix-demo.cc	20;"	d	file:
TYPE	demo/bits/gotcha-demo.cc	11;"	d	file:
TYPE_BITS	demo/bits/gotcha-demo.cc	13;"	d	file:
T_	src/comb/perm-derange.h	/^    perm_trotter* T_;$/;"	m	class:perm_derange	access:public
Tdouble	src/fht/hartleyshift.h	147;"	d
Tdouble	src/fht/hartleyshift.h	16;"	d
Transform	fxt.lsm	/^                Fast Fourier Transform (FFT), complex and real-valued,$/;"	p	file:	signature:(FFT)
Transform	fxt.lsm	/^                Number Theoretic Transform (NTT), Walsh Transform,$/;"	p	file:	signature:(NTT)
Transform	fxt.lsm	/^                Number Theoretic Transform (NTT), Walsh Transform,$/;"	v
Transform	fxt.lsm	/^                Reed-Muller transform, Haar Transform, Wavelet Transform.$/;"	v
Type	demo/bits/pcrc64-demo.cc	17;"	d	file:
Type	demo/seq/A003040-demo.cc	/^typedef ulong Type;$/;"	t	file:
Type	demo/seq/A218293-demo.cc	/^typedef ulong Type;$/;"	t	file:
U	src/bits/bitsubset.h	/^    ulong U;  \/\/ current subset$/;"	m	class:bit_subset	access:protected
USE_COND	demo/comb/partition-gen-demo.cc	16;"	d	file:
USE_C_REALLOC	src/realloc.h	40;"	d
USE_GCD	demo/gf2n/gf2n-trace0-generators-demo.cc	17;"	d	file:
USE_OLD_ALGORITHM	doc/convolution-doc.txt	57;"	d	file:
USE_OLD_ALGORITHM	src/convolution/matrixfftcocnvla.cc	24;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	148;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	168;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	244;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	264;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	285;"	d	file:
USE_REVBIN_CORE	doc/convolution-doc.txt	301;"	d	file:
USE_REVBIN_CORE	src/convolution/cfhtcnvl.cc	17;"	d	file:
USE_REVBIN_CORE	src/convolution/cfhtcnvla.cc	16;"	d	file:
USE_REVBIN_CORE	src/convolution/fhtcnvl.cc	13;"	d	file:
USE_REVBIN_CORE	src/convolution/fhtcnvla.cc	12;"	d	file:
USE_REVBIN_CORE	src/convolution/fhtloccnvl.cc	14;"	d	file:
USE_REVBIN_CORE	src/convolution/fhtloccnvla.cc	12;"	d	file:
USE_SINCOS3	doc/realfft-doc.txt	122;"	d	file:
USE_SINCOS3	src/realfft/realfftsplitradix.cc	18;"	d	file:
USE_SPLRX	doc/convolution-doc.txt	58;"	d	file:
USE_SPLRX	doc/convolution-doc.txt	9;"	d	file:
USE_SPLRX	src/convolution/fftcocnvl.cc	20;"	d	file:
USE_SPLRX	src/convolution/matrixfftcocnvla.cc	25;"	d	file:
USE_TABLE	demo/seq/A182372-demo.cc	51;"	d	file:
USE_TRIG_REC	src/fht/fhtloc2.h	122;"	d
USE_TRIG_REC	src/fht/fhtloc2.h	19;"	d
USE_WALSH_GRAY	src/walsh/dyadiccnvl.h	102;"	d
V	src/bits/bitsubset.h	/^    ulong V;  \/\/ the full set$/;"	m	class:bit_subset	access:protected
V3	demo/comb/string-subst-hilbert3d-demo.cc	/^typedef vector<int> V3;$/;"	t	file:
VERX	src/mod/chebyshev1.cc	84;"	d	file:
VERX	src/mod/chebyshev2.cc	59;"	d	file:
VV	src/bits/bitcount-v.cc	19;"	d	file:
VV	src/bits/bitcount-v.cc	37;"	d	file:
VV	src/dctdst/dct4.cc	13;"	d	file:
Vec	src/ds/centered-array2d.h	/^    typedef vector2d<long> Vec;$/;"	t	class:centered_array2d	access:private
Vec	src/ds/centered-array3d.h	/^    typedef vector3d<long> Vec;$/;"	t	class:centered_array3d	access:private
Version	COPYING.txt	/^                       Version 3, 29 June 2007$/;"	v
W	src/comb/lyndon-words.h	/^    ulong* W;  \/\/ words in W[1..n], W[0] is a sentinel$/;"	m	class:lyndon_words	access:protected
WALSH_DIF8_USE_FINAL_16	src/walsh/walshwak8.h	123;"	d
WALSH_DIF8_USE_FINAL_16	src/walsh/walshwak8.h	13;"	d
WALSH_DIF8_USE_FINAL_16	src/walsh/walshwak8.h	66;"	d
WALSH_DIT8_USE_FINAL_16	src/walsh/walshwak8.h	70;"	d
WFL_MAXDIM	src/comb/wfl-hilbert.h	12;"	d
WFL_MAXLEV	src/comb/wfl-hilbert.h	10;"	d
WFL_NUMLEV	src/comb/wfl-hilbert.h	11;"	d
WORD	demo/bits/bitdemos.h	57;"	d
X	src/comb/mixedradix2num.o	/^ELF/;"	v
X	src/graph/lyndon-gray.h	158;"	d
X	src/graph/lyndon-gray.h	163;"	d
X	test/test-bits.cc	1104;"	d	file:
XX	src/mod/moduli.txt	16;"	d	file:
XX	src/mod/moduli.txt	176;"	d	file:
X_rec	demo/comb/fib-alt-gray-demo.cc	/^void X_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
Y_rec	demo/comb/no1xy1-gray-demo.cc	/^void Y_rec(long p1, long p2, bool z)$/;"	f	signature:(long p1, long p2, bool z)
Y_rec	demo/comb/perm-dist1-gray-demo.cc	/^void Y_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
Y_rec	demo/comb/perm-l1r2-gray-demo.cc	/^void Y_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
Y_rec	demo/comb/perm-right1-gray-demo.cc	/^void Y_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
Z	demo/fft/gen-walsh-demo.cc	104;"	d	file:
Z	demo/fft/gen-walsh-demo.cc	17;"	d	file:
ZEBRA_HACK	demo/comb/subset-debruijn-demo.cc	17;"	d	file:
ZP_USE_REVBIN_CORE	doc/convolution-doc.txt	286;"	d	file:
ZP_USE_REVBIN_CORE	doc/convolution-doc.txt	302;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/cfhtcnvl.cc	24;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/cfhtcnvla.cc	24;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/fhtcnvl.cc	20;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/fhtcnvla.cc	20;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/fhtloccnvl.cc	15;"	d	file:
ZP_USE_REVBIN_CORE	src/convolution/fhtloccnvla.cc	13;"	d	file:
_CMP1_	src/ds/attic/priorityqueue1.h	138;"	d
_CMP1_	src/ds/attic/priorityqueue1.h	19;"	d
_CMP1_	src/ds/attic/priorityqueue1.h	24;"	d
_CMPEQ1_	src/ds/attic/priorityqueue1.h	139;"	d
_CMPEQ1_	src/ds/attic/priorityqueue1.h	20;"	d
_CMPEQ1_	src/ds/attic/priorityqueue1.h	25;"	d
_CMPEQ_	doc/ds-doc.txt	115;"	d	file:
_CMPEQ_	doc/ds-doc.txt	120;"	d	file:
_CMPEQ_	src/ds/priorityqueue.h	169;"	d
_CMPEQ_	src/ds/priorityqueue.h	20;"	d
_CMPEQ_	src/ds/priorityqueue.h	25;"	d
_CMP_	doc/ds-doc.txt	114;"	d	file:
_CMP_	doc/ds-doc.txt	119;"	d	file:
_CMP_	src/ds/priorityqueue.h	168;"	d
_CMP_	src/ds/priorityqueue.h	19;"	d
_CMP_	src/ds/priorityqueue.h	24;"	d
_GLIBCPP_HAVE_SINCOS	src/aux0/sincos.h	31;"	d
__JJSTRING	src/jjassert.h	41;"	d
a	demo/comb/composition-nz-gray-rec-demo.cc	/^ulong *a;  \/\/ composition$/;"	v
a	demo/comb/composition-nz-subset-lex-rec-demo.cc	/^ulong *a;  \/\/ composition$/;"	v
a	demo/seq/A179009-demo.cc	/^const ulong *a = 0;$/;"	v
a	scripts/bench.zsh	/^            a=$(echo $aa | tr '@' ' ' );$/;"	v
a	src/comb/attic/partition-dist-lex-rec-demo.cc	/^ulong *a;$/;"	v
a	src/comb/attic/partition-lex-rec-demo.cc	/^ulong *a;$/;"	v
a	src/comb/lyndon-words.h	/^    ulong a;  \/\/ first (smallest) letter$/;"	m	class:lyndon_words	access:protected
a	src/comb/perm-restrpref.h	/^    ulong *a;  \/\/ current permutation of {1, ..., n}, one-based array!$/;"	m	class:perm_restrpref	access:protected
a	src/comb/word-stats.h	/^    const ulong *a;  \/\/ digits of the string$/;"	m	class:word_stats	access:private
a0_	src/graph/attic/debruijngraph.h	/^    ulong *a0_, *a1_;  \/\/ every node has two outgoing connections (Arcs)$/;"	m	class:debruijn_graph	access:public
a1_	src/graph/attic/debruijngraph.h	/^    ulong *a0_, *a1_;  \/\/ every node has two outgoing connections (Arcs)$/;"	m	class:debruijn_graph	access:public
a_	src/bits/bit-necklace.h	/^    ulong a_;   \/\/ necklace$/;"	m	class:bit_necklace	access:public
a_	src/bits/crc32.h	/^    uint a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:crc32	access:public
a_	src/bits/crc64.h	/^    uint64 a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:crc64	access:public
a_	src/bits/tcrc64.h	/^    uint64 a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:tcrc64	access:public
a_	src/bpol/fcsr.h	/^    ulong a_;     \/\/ internal state (a_0*2**k modulo c),  1 <= a < c$/;"	m	class:fcsr	access:public
a_	src/bpol/lfsr.h	/^    ulong a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:lfsr	access:public
a_	src/bpol/lfsr64.h	/^    unsigned long long a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:lfsr64	access:public
a_	src/bpol/necklace2bitpol.h	/^    ulong a_;  \/\/ generator modulo c$/;"	m	class:necklace2bitpol	access:public
a_	src/comb/acyclic-map.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:acyclic_map	access:public
a_	src/comb/arrangement-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS$/;"	m	class:arrangement_rgs	access:public
a_	src/comb/ascent-alt-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= k$/;"	m	class:ascent_alt_rgs	access:public
a_	src/comb/ascent-nonflat-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_nonflat_rgs	access:public
a_	src/comb/ascent-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs_subset_lex	access:public
a_	src/comb/ascent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs	access:public
a_	src/comb/attic/ascent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs	access:public
a_	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
a_	src/comb/binary-huffman.h	/^    ulong *a_;  \/\/ partition:$/;"	m	class:binary_huffman	access:public
a_	src/comb/binary-necklace.h	/^    ulong *a_;  \/\/ the string, NOTE: one-based$/;"	m	class:binary_necklace	access:public
a_	src/comb/binary-sl-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:binary_sl_gray	access:public
a_	src/comb/catalan-path-lex.h	/^    ulong *a_;$/;"	m	class:catalan_path_lex	access:public
a_	src/comb/catalan-rgs-gray.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs_gray	access:public
a_	src/comb/catalan-rgs-gslex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs_gslex	access:public
a_	src/comb/catalan-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= as[k-1] + 1$/;"	m	class:catalan_rgs_subset_lex	access:public
a_	src/comb/catalan-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs	access:public
a_	src/comb/catalan-step-rgs-colex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_colex	access:public
a_	src/comb/catalan-step-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_lex	access:public
a_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
a_	src/comb/cayley-perm.h	/^    ulong *a_;  \/\/ multiset data in a[0], ..., a[n-1], sentinels at [-1] and [-2]$/;"	m	class:cayley_perm	access:public
a_	src/comb/change-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:change_rgs	access:public
a_	src/comb/check-kpermgen.h	/^    ulong *a_;  \/\/ for mixed radix numbers$/;"	m	class:check_kpermgen	access:public
a_	src/comb/combination-chase.h	/^    ulong *a_;  \/\/ data (a delta set)$/;"	m	class:combination_chase	access:public
a_	src/comb/combination-emk.h	/^    ulong *a_;  \/\/ aux: actual start position of moves$/;"	m	class:combination_emk	access:public
a_	src/comb/combination-endo.h	/^    ulong *a_;  \/\/ aux: actual start position of endo moves$/;"	m	class:combination_endo	access:public
a_	src/comb/combination-enup.h	/^    ulong *a_;  \/\/ aux: actual start position of enup moves$/;"	m	class:combination_enup	access:public
a_	src/comb/combination-mod.h	/^    ulong *a_;  \/\/ aux: actual start position of moves$/;"	m	class:combination_mod	access:public
a_	src/comb/composition-dist-unimodal.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_dist_unimodal	access:public
a_	src/comb/composition-nz-binary.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_binary	access:public
a_	src/comb/composition-nz-carlitz.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_carlitz	access:public
a_	src/comb/composition-nz-first-max.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_first_max	access:public
a_	src/comb/composition-nz-gray.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_gray	access:public
a_	src/comb/composition-nz-gray2.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_gray2	access:public
a_	src/comb/composition-nz-i-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_i_smooth	access:public
a_	src/comb/composition-nz-left-2smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_left_2smooth	access:public
a_	src/comb/composition-nz-left-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_left_smooth	access:public
a_	src/comb/composition-nz-max.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_max	access:public
a_	src/comb/composition-nz-min.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_min	access:public
a_	src/comb/composition-nz-minc.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_minc	access:public
a_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_odd_subset_lex	access:public
a_	src/comb/composition-nz-odd.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_odd	access:public
a_	src/comb/composition-nz-restrpref.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_restrpref	access:public
a_	src/comb/composition-nz-rl.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_rl	access:public
a_	src/comb/composition-nz-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_smooth	access:public
a_	src/comb/composition-nz-sorts.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts	access:public
a_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts2_pp	access:public
a_	src/comb/composition-nz-sorts2.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts2	access:public
a_	src/comb/composition-nz-subset-lex.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_subset_lex	access:public
a_	src/comb/composition-nz-superdiagonal.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_superdiagonal	access:public
a_	src/comb/composition-nz-upstep.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_upstep	access:public
a_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong *a_;  \/\/ composition: n = a[1] + a[2] + ... + a[m]$/;"	m	class:composition_nz_weakly_unimodal	access:public
a_	src/comb/composition-nz.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz	access:public
a_	src/comb/composition-unimodal.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_unimodal	access:public
a_	src/comb/descent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:descent_rgs	access:public
a_	src/comb/dyck-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= as[k-1] + 1$/;"	m	class:dyck_rgs_subset_lex	access:public
a_	src/comb/id-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:id_tree_lev_seq	access:private
a_	src/comb/involution-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:involution_zero_map_rgs	access:public
a_	src/comb/isoscent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:isoscent_rgs	access:public
a_	src/comb/map23-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:map23_rgs	access:public
a_	src/comb/mixedradix-colex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_colex	access:public
a_	src/comb/mixedradix-endo-gray.h	/^    ulong *a_;  \/\/ mixed radix digits$/;"	m	class:mixedradix_endo_gray	access:public
a_	src/comb/mixedradix-endo.h	/^    ulong *a_;  \/\/ digits, sentinel a[n]$/;"	m	class:mixedradix_endo	access:public
a_	src/comb/mixedradix-gray.h	/^    ulong *a_;  \/\/ mixed radix digits$/;"	m	class:mixedradix_gray	access:public
a_	src/comb/mixedradix-gray2.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_gray2	access:public
a_	src/comb/mixedradix-gslex-alt.h	/^    ulong *a_;  \/\/ digits,  a[-1]==~0 is a sentinel$/;"	m	class:mixedradix_gslex_alt	access:public
a_	src/comb/mixedradix-gslex-alt2.h	/^    ulong *a_;  \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_gslex_alt2	access:public
a_	src/comb/mixedradix-gslex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_gslex	access:public
a_	src/comb/mixedradix-gslex2.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:mixedradix_gslex2	access:public
a_	src/comb/mixedradix-lex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_lex	access:public
a_	src/comb/mixedradix-modular-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_modular_gray	access:public
a_	src/comb/mixedradix-modular-gray2.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_modular_gray2	access:public
a_	src/comb/mixedradix-naf-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_naf_gray	access:public
a_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *a_;    \/\/ Digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
a_	src/comb/mixedradix-naf.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_naf	access:public
a_	src/comb/mixedradix-restrpref.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:mixedradix_restrpref	access:public
a_	src/comb/mixedradix-rfact.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_rfact	access:public
a_	src/comb/mixedradix-sl-gray.h	/^    ulong *a_;   \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_sl_gray	access:public
a_	src/comb/mixedradix-sod-lex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_sod_lex	access:public
a_	src/comb/mixedradix-sod-lex.h	/^    ulong a_[MIXEDRADIX_SOD_LEX_MAX_ARRAY_LEN+2];$/;"	m	class:mixedradix_sod_lex	access:public
a_	src/comb/mixedradix-subset-lex.h	/^    ulong *a_;   \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_subset_lex	access:public
a_	src/comb/mixedradix-subset-lexrev.h	/^    ulong *a_;  \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_subset_lexrev	access:public
a_	src/comb/mixedradix-subset-lexrev.h	/^    ulong a_[64];$/;"	m	class:mixedradix_subset_lexrev	access:public
a_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1, a[k] != a_[k-1]$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
a_	src/comb/motzkin-path-lex.h	/^    ulong *a_;$/;"	m	class:motzkin_path_lex	access:public
a_	src/comb/motzkin-rgs-lex.h	/^    ulong * restrict a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:motzkin_rgs_lex	access:public
a_	src/comb/motzkin-step-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:motzkin_step_rgs_lex	access:public
a_	src/comb/necklace.h	/^    ulong *a_;  \/\/ the string, NOTE: one-based$/;"	m	class:necklace	access:public
a_	src/comb/ordered-tree-branches.h	/^    ulong *a_;  \/\/ branch lengths (limbs): a composition a[1] + a[2] + ... + a[m] = n$/;"	m	class:ordered_tree_branches	access:public
a_	src/comb/ordered-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:ordered_tree_lev_seq	access:private
a_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_asc_subset_lex	access:public
a_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong a_[62];$/;"	m	class:partition_2fall_asc_subset_lex	access:public
a_	src/comb/partition-2fall-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_asc	access:public
a_	src/comb/partition-2fall-asc.h	/^    ulong a_[62];$/;"	m	class:partition_2fall_asc	access:public
a_	src/comb/partition-2fall-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_desc	access:public
a_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_2rep_subset_lex	access:public
a_	src/comb/partition-asc-2rep.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_2rep	access:public
a_	src/comb/partition-asc-perim.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_perim	access:public
a_	src/comb/partition-asc-sorts.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts	access:public
a_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts2_pp	access:public
a_	src/comb/partition-asc-sorts2.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts2	access:public
a_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_subset_lex_csh	access:public
a_	src/comb/partition-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_subset_lex	access:public
a_	src/comb/partition-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc	access:public
a_	src/comb/partition-binary-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_binary_asc	access:public
a_	src/comb/partition-binary-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_binary_desc	access:public
a_	src/comb/partition-desc-bb.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_desc_bb	access:public
a_	src/comb/partition-desc-bb.h	/^    ulong a_[448];  \/\/ > 2^66 partitions$/;"	m	class:partition_desc_bb	access:public
a_	src/comb/partition-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_desc	access:public
a_	src/comb/partition-desc.h	/^    ulong a_[448];  \/\/ > 2^66 partitions$/;"	m	class:partition_desc	access:public
a_	src/comb/partition-dist-asc-len.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc_len	access:public
a_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc_subset_lex	access:public
a_	src/comb/partition-dist-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc	access:public
a_	src/comb/partition-dist-d-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_d_asc	access:public
a_	src/comb/partition-dist-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_desc	access:public
a_	src/comb/partition-nonsquashing-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_nonsquashing_desc	access:public
a_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
a_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong a_[1000]; \/\/ > 10^21$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
a_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc_subset_lex	access:public
a_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong a_[1000]; \/\/ > 10^21$/;"	m	class:partition_odd_asc_subset_lex	access:public
a_	src/comb/partition-odd-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc	access:public
a_	src/comb/partition-odd-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_desc	access:public
a_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_nonsquashing_desc	access:public
a_	src/comb/partition-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:partition_rgs_lex	access:public
a_	src/comb/partition-s-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_s_desc	access:public
a_	src/comb/partition-strongly-decr-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_strongly_decr_desc	access:public
a_	src/comb/perm-rot.h	/^    ulong *a_;  \/\/ permutation of n elements$/;"	m	class:perm_rot	access:public
a_	src/comb/perm-star.h	/^    ulong *a_;   \/\/ current permutation$/;"	m	class:perm_star	access:public
a_	src/comb/perm-star.h	/^    ulong a_[32];   \/\/ current permutation$/;"	m	class:perm_star	access:public
a_	src/comb/schroeder-path-lex.h	/^    ulong *a_;$/;"	m	class:schroeder_path_lex	access:public
a_	src/comb/schroeder-rgs-lex.h	/^    ulong * restrict a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:schroeder_rgs_lex	access:public
a_	src/comb/score-sequence.h	/^    ulong *a_;  \/\/ score sequence$/;"	m	class:score_sequence	access:public
a_	src/comb/setpart-ccf-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_ccf_rgs_lex	access:public
a_	src/comb/setpart-ck-rgs.h	/^    ulong *a_;  \/\/ Cooper-Kennedy RGS$/;"	m	class:setpart_ck_rgs	access:public
a_	src/comb/setpart-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS$/;"	m	class:setpart_rgs_subset_lex	access:public
a_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
a_	src/comb/setpart-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_zero_map_rgs	access:public
a_	src/comb/skew-binary.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:skew_binary	access:public
a_	src/comb/skew-binary.h	/^    ulong a_[SKEW_BINARY_MAX_ARRAY_LEN];   \/\/ digits$/;"	m	class:skew_binary	access:public
a_	src/comb/smooth-rfact-rgs.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:smooth_rfact_rgs	access:public
a_	src/comb/tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:tree_lev_seq	access:private
a_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:weakly_unimodal_rgs_lex	access:public
a_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong *a_;   \/\/ RGS$/;"	m	class:young_tab_rgs_subset_lex	access:public
a_	src/comb/young-tab-rgs.h	/^    ulong *a_;   \/\/ RGS$/;"	m	class:young_tab_rgs	access:public
ac_gray	doc/comb-doc.txt	/^void ac_gray(ulong *g, ulong ldn);$/;"	p	file:	signature:(ulong *g, ulong ldn)
ac_gray	src/comb/acgray.cc	/^ac_gray(ulong *g, ulong ldn)$/;"	f	signature:(ulong *g, ulong ldn)
ac_gray	src/comb/acgray.h	/^void ac_gray(ulong *g, ulong ldn);$/;"	p	signature:(ulong *g, ulong ldn)
ac_gray_delta	doc/comb-doc.txt	/^void ac_gray_delta(uchar *d, ulong ldn);$/;"	p	file:	signature:(uchar *d, ulong ldn)
ac_gray_delta	src/comb/acgray.cc	/^ac_gray_delta(uchar *d, ulong ldn)$/;"	f	signature:(uchar *d, ulong ldn)
ac_gray_delta	src/comb/acgray.h	/^void ac_gray_delta(uchar *d, ulong ldn);$/;"	p	signature:(uchar *d, ulong ldn)
acopy	doc/aux1-doc.txt	/^inline void acopy(const Type *src, Type *dst, ulong n);$/;"	p	file:	signature:(const Type *src, Type *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const Complex *src, Complex *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const Complex *src, Complex *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const Type *src, Type *dst, ulong n)$/;"	f	signature:(const Type *src, Type *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const char *src, char *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const char *src, char *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const double *src, double *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const double *src, double *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const float *src, float *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const float *src, float *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const int *src, int *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const int *src, int *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const long *src, long *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const long *src, long *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const uint *src, uint *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const uint *src, uint *dst, ulong n)
acopy	src/aux1/copy.h	/^inline void acopy(const ulong *src, ulong *dst, ulong n) { memcopy(src, dst, n); }$/;"	f	signature:(const ulong *src, ulong *dst, ulong n)
acyclic_map	src/comb/acyclic-map.h	/^    acyclic_map(const acyclic_map&);  \/\/ forbidden$/;"	p	class:acyclic_map	access:private	signature:(const acyclic_map&)
acyclic_map	src/comb/acyclic-map.h	/^    explicit acyclic_map(ulong n, ulong m)$/;"	f	class:acyclic_map	access:public	signature:(ulong n, ulong m)
acyclic_map	src/comb/acyclic-map.h	/^class acyclic_map$/;"	c
acyclic_map::OK	src/comb/acyclic-map.h	/^    bool OK()  const$/;"	f	class:acyclic_map	access:public	signature:() const
acyclic_map::a_	src/comb/acyclic-map.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:acyclic_map	access:public
acyclic_map::acyclic_map	src/comb/acyclic-map.h	/^    acyclic_map(const acyclic_map&);  \/\/ forbidden$/;"	p	class:acyclic_map	access:private	signature:(const acyclic_map&)
acyclic_map::acyclic_map	src/comb/acyclic-map.h	/^    explicit acyclic_map(ulong n, ulong m)$/;"	f	class:acyclic_map	access:public	signature:(ulong n, ulong m)
acyclic_map::check_pos	src/comb/acyclic-map.h	/^    bool check_pos(ulong j)  const$/;"	f	class:acyclic_map	access:private	signature:(ulong j) const
acyclic_map::data	src/comb/acyclic-map.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:acyclic_map	access:public	signature:() const
acyclic_map::first	src/comb/acyclic-map.h	/^    void first()$/;"	f	class:acyclic_map	access:public	signature:()
acyclic_map::j_	src/comb/acyclic-map.h	/^    ulong j_;  \/\/ leftmost position of last change$/;"	m	class:acyclic_map	access:public
acyclic_map::m_	src/comb/acyclic-map.h	/^    ulong m_;  \/\/ max allowed value in map$/;"	m	class:acyclic_map	access:public
acyclic_map::n_	src/comb/acyclic-map.h	/^    ulong n_;  \/\/ Number of elements$/;"	m	class:acyclic_map	access:public
acyclic_map::next	src/comb/acyclic-map.h	/^    bool next()$/;"	f	class:acyclic_map	access:public	signature:()
acyclic_map::operator =	src/comb/acyclic-map.h	/^    acyclic_map & operator = (const acyclic_map&);  \/\/ forbidden$/;"	p	class:acyclic_map	access:private	signature:(const acyclic_map&)
acyclic_map::pos	src/comb/acyclic-map.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:acyclic_map	access:public	signature:() const
acyclic_map::print	src/comb/acyclic-map.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:acyclic_map	access:public	signature:(const char *bla, bool dfz=false) const
acyclic_map::~acyclic_map	src/comb/acyclic-map.h	/^    ~acyclic_map()$/;"	f	class:acyclic_map	access:public	signature:()
add	doc/aux1-doc.txt	/^inline void add(Type *f, ulong n, const Type *g);$/;"	p	file:	signature:(Type *f, ulong n, const Type *g)
add	src/aux1/arith1.h	/^inline void add(Type *f, ulong n, const Type *g)$/;"	f	signature:(Type *f, ulong n, const Type *g)
add	src/aux2/attic/arith2d.h	/^inline void add(Type **f, ulong nr, ulong nc, const Type *const*g)$/;"	f	signature:(Type **f, ulong nr, ulong nc, const Type *const*g)
add_map	src/comb/string-subst.cc	/^string_subst::add_map(const uchar * const c, const uchar * const str)$/;"	f	class:string_subst	signature:(const uchar * const c, const uchar * const str)
add_map	src/comb/string-subst.cc	/^string_subst::add_map(uchar c, const uchar * const str)$/;"	f	class:string_subst	signature:(uchar c, const uchar * const str)
add_map	src/comb/string-subst.h	/^    bool add_map(const uchar *c, const uchar *str);$/;"	p	class:string_subst	access:protected	signature:(const uchar *c, const uchar *str)
add_map	src/comb/string-subst.h	/^    bool add_map(uchar c, const uchar * const str);$/;"	p	class:string_subst	access:protected	signature:(uchar c, const uchar * const str)
add_mod	doc/mod-doc.txt	/^inline umod_t add_mod(umod_t a, umod_t b, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t b, umod_t m)
add_mod	src/mod/modarith.h	/^inline umod_t add_mod(umod_t a, umod_t b, umod_t m)$/;"	f	signature:(umod_t a, umod_t b, umod_t m)
add_radm1pi	doc/bits-doc.txt	/^static inline ulong add_radm1pi(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
add_radm1pi	src/bits/radix-m1pi.h	/^static inline ulong add_radm1pi(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
add_sat16	doc/bits-doc.txt	/^static inline ushort add_sat16(ushort a, ushort b);$/;"	p	file:	signature:(ushort a, ushort b)
add_sat16	src/bits/branchless.h	/^static inline ushort add_sat16(ushort a, ushort b)$/;"	f	signature:(ushort a, ushort b)
add_val	src/aux2/attic/arith2d.h	/^inline void add_val(Type **f, ulong nr, ulong nc, Type s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type s)
adj_swap	src/graph/mk-perm-gray-digraph.cc	/^static inline void adj_swap(ulong *x, ulong c)$/;"	f	file:	signature:(ulong *x, ulong c)
al	src/aux0/attic/trigrec.h	/^    Type al, be;$/;"	m	class:trigrec	access:private
all	src/comb/perm-restrpref.h	/^    ulong all()$/;"	f	class:perm_restrpref	access:public	signature:()
all_branching_numbers	src/comb/tree-lev-seq-aux.h	/^    void all_branching_numbers(const ulong *a, ulong n, ulong *b, ulong *s)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong *b, ulong *s) const
all_clear_q	src/ds/bitarray.h	/^    ulong all_clear_q()  const$/;"	f	class:bitarray	access:public	signature:() const
all_compositions_minchange	src/comb/attic/all-compositions-minchange.h	/^    all_compositions_minchange(ulong n, ulong k)$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong n, ulong k)
all_compositions_minchange	src/comb/attic/all-compositions-minchange.h	/^class all_compositions_minchange$/;"	c
all_compositions_minchange::all_compositions_minchange	src/comb/attic/all-compositions-minchange.h	/^    all_compositions_minchange(ulong n, ulong k)$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong n, ulong k)
all_compositions_minchange::b_	src/comb/attic/all-compositions-minchange.h	/^    ulong b_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::cl_	src/comb/attic/all-compositions-minchange.h	/^    composition_colex cl_;$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::get	src/comb/attic/all-compositions-minchange.h	/^    uchar *get(ulong z)  const$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong z) const
all_compositions_minchange::gray	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::gray(ulong k)$/;"	f	class:all_compositions_minchange	signature:(ulong k)
all_compositions_minchange::gray	src/comb/attic/all-compositions-minchange.h	/^    void gray(ulong k);$/;"	p	class:all_compositions_minchange	access:protected	signature:(ulong k)
all_compositions_minchange::init	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::init()$/;"	f	class:all_compositions_minchange	signature:()
all_compositions_minchange::init	src/comb/attic/all-compositions-minchange.h	/^    void init();$/;"	p	class:all_compositions_minchange	access:protected	signature:()
all_compositions_minchange::k_	src/comb/attic/all-compositions-minchange.h	/^    ulong &n_, &k_;$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::n_	src/comb/attic/all-compositions-minchange.h	/^    ulong &n_, &k_;$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::print	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::print()  const$/;"	f	class:all_compositions_minchange	signature:() const
all_compositions_minchange::print	src/comb/attic/all-compositions-minchange.h	/^    void print()  const;$/;"	p	class:all_compositions_minchange	access:protected	signature:() const
all_compositions_minchange::print	src/comb/attic/all-compositions-minchange.h	/^    void print(ulong z)  const$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong z) const
all_compositions_minchange::swap	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::swap(ulong i1, ulong i2, ulong k)$/;"	f	class:all_compositions_minchange	signature:(ulong i1, ulong i2, ulong k)
all_compositions_minchange::swap	src/comb/attic/all-compositions-minchange.h	/^    void swap(ulong i1, ulong i2, ulong k);$/;"	p	class:all_compositions_minchange	access:protected	signature:(ulong i1, ulong i2, ulong k)
all_compositions_minchange::x_	src/comb/attic/all-compositions-minchange.h	/^    mutable uchar *x_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::xx_	src/comb/attic/all-compositions-minchange.h	/^    uchar *xx_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
all_compositions_minchange::~all_compositions_minchange	src/comb/attic/all-compositions-minchange.h	/^    ~all_compositions_minchange()  { delete [] xx_; }$/;"	f	class:all_compositions_minchange	access:public	signature:()
all_cond_paths	src/graph/digraph-paths.h	/^    ulong all_cond_paths(ulong (*pfunc)(const digraph_paths &),$/;"	p	class:digraph_paths	access:public	signature:(ulong (pfunc)const digraph_paths &), bool (*cfunc)(digraph_paths &, ulong), ulong ns=0, ulong p=0, ulong maxnp=0)
all_cond_paths	src/graph/search-digraph-cond.cc	/^digraph_paths::all_cond_paths(ulong (*pfunc)(const digraph_paths &),$/;"	f	class:digraph_paths	signature:(ulong (pfunc)const digraph_paths &), bool (*cfunc)(digraph_paths &, ulong), ulong ns , ulong p , ulong maxnp )
all_cycles	src/graph/attic/debruijngraph.h	/^    ulong all_cycles()$/;"	f	class:debruijn_cycles	access:public	signature:()
all_irredpoly	src/bpol/all-irredpoly.h	/^    explicit all_irredpoly(ulong n, ulong c=0, ulong a=0)$/;"	f	class:all_irredpoly	access:public	signature:(ulong n, ulong c=0, ulong a=0)
all_irredpoly	src/bpol/all-irredpoly.h	/^class all_irredpoly$/;"	c
all_irredpoly::all_irredpoly	src/bpol/all-irredpoly.h	/^    explicit all_irredpoly(ulong n, ulong c=0, ulong a=0)$/;"	f	class:all_irredpoly	access:public	signature:(ulong n, ulong c=0, ulong a=0)
all_irredpoly::bn_	src/bpol/all-irredpoly.h	/^    bit_necklace    bn_;$/;"	m	class:all_irredpoly	access:public
all_irredpoly::data	src/bpol/all-irredpoly.h	/^    ulong data() const { return  p_; }$/;"	f	class:all_irredpoly	access:public	signature:() const
all_irredpoly::init	src/bpol/all-irredpoly.h	/^    void init(ulong n=0, ulong c=0, ulong a=0)$/;"	f	class:all_irredpoly	access:public	signature:(ulong n=0, ulong c=0, ulong a=0)
all_irredpoly::is_primitive	src/bpol/all-irredpoly.h	/^    bool is_primitive()  const$/;"	f	class:all_irredpoly	access:public	signature:() const
all_irredpoly::mers_	src/bpol/all-irredpoly.h	/^    ulong mers_;$/;"	m	class:all_irredpoly	access:public
all_irredpoly::n2b_	src/bpol/all-irredpoly.h	/^    necklace2bitpol n2b_;$/;"	m	class:all_irredpoly	access:public
all_irredpoly::next	src/bpol/all-irredpoly.h	/^    ulong next()  \/\/ return poly, zero if there are no more$/;"	f	class:all_irredpoly	access:public	signature:()
all_irredpoly::next_primitive	src/bpol/all-irredpoly.h	/^    ulong next_primitive()  \/\/ return poly, zero if there are no more$/;"	f	class:all_irredpoly	access:public	signature:()
all_irredpoly::p_	src/bpol/all-irredpoly.h	/^    ulong p_;$/;"	m	class:all_irredpoly	access:public
all_irredpoly::~all_irredpoly	src/bpol/all-irredpoly.h	/^    ~all_irredpoly() {;}$/;"	f	class:all_irredpoly	access:public	signature:()
all_paths	src/graph/digraph-paths.h	/^    ulong all_paths(ulong (*pfunc)(const digraph_paths &),$/;"	p	class:digraph_paths	access:public	signature:(ulong (pfunc)const digraph_paths &), ulong ns=0, ulong p=0, ulong maxnp=0)
all_paths	src/graph/search-digraph.cc	/^digraph_paths::all_paths(ulong (*pfunc)(const digraph_paths &),$/;"	f	class:digraph_paths	signature:(ulong (pfunc)const digraph_paths &), ulong ns , ulong p , ulong maxnp )
all_seen	src/comb/check-mixedradix.h	/^    bool all_seen()  const$/;"	f	class:check_mixedradix	access:public	signature:() const
all_set_partitions	src/comb/attic/allsetpartitions.h	/^    all_set_partitions(ulong n, bool xdr=true, int dr0=+1)$/;"	f	class:all_set_partitions	access:public	signature:(ulong n, bool xdr=true, int dr0=+1)
all_set_partitions	src/comb/attic/allsetpartitions.h	/^class all_set_partitions$/;"	c
all_set_partitions::all_set_partitions	src/comb/attic/allsetpartitions.h	/^    all_set_partitions(ulong n, bool xdr=true, int dr0=+1)$/;"	f	class:all_set_partitions	access:public	signature:(ulong n, bool xdr=true, int dr0=+1)
all_set_partitions::b_	src/comb/attic/allsetpartitions.h	/^    ulong b_;  \/\/ Bell number B(n)$/;"	m	class:all_set_partitions	access:public
all_set_partitions::bell_table	src/comb/attic/allsetpartitions.cc	/^ulong all_set_partitions::bell_table[] = { \/\/ Bell numbers$/;"	m	class:all_set_partitions	file:
all_set_partitions::bell_table	src/comb/attic/allsetpartitions.h	/^    static ulong bell_table[]; \/\/ Bell numbers B(n)$/;"	m	class:all_set_partitions	access:public
all_set_partitions::cp_append	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::cp_append(const signed char *src, signed char *dst, ulong k, ulong a)$/;"	f	class:all_set_partitions	signature:(const signed char *src, signed char *dst, ulong k, ulong a)
all_set_partitions::cp_append	src/comb/attic/allsetpartitions.h	/^    static void cp_append(const signed char *src, signed char *dst, ulong k, ulong a);$/;"	p	class:all_set_partitions	access:protected	signature:(const signed char *src, signed char *dst, ulong k, ulong a)
all_set_partitions::get	src/comb/attic/allsetpartitions.h	/^    bool get(ulong k, signed char *dst)  const$/;"	f	class:all_set_partitions	access:public	signature:(ulong k, signed char *dst) const
all_set_partitions::init	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::init(bool xdr, int dr0)$/;"	f	class:all_set_partitions	signature:(bool xdr, int dr0)
all_set_partitions::init	src/comb/attic/allsetpartitions.h	/^    void init(bool xdr, int dr0);  \/\/ build up the table$/;"	p	class:all_set_partitions	access:public	signature:(bool xdr, int dr0)
all_set_partitions::n_	src/comb/attic/allsetpartitions.h	/^    ulong n_;  \/\/ Number of elements in set; set = {1,2,3,...,n}$/;"	m	class:all_set_partitions	access:public
all_set_partitions::np_	src/comb/attic/allsetpartitions.h	/^    ulong np_; \/\/ Number of chars in array p points to$/;"	m	class:all_set_partitions	access:public
all_set_partitions::p_	src/comb/attic/allsetpartitions.h	/^    signed char *p_;  \/\/ Table of all set partitions$/;"	m	class:all_set_partitions	access:public
all_set_partitions::print	src/comb/attic/allsetpartitions.h	/^    ulong print(ulong k)  const$/;"	f	class:all_set_partitions	access:public	signature:(ulong k) const
all_set_partitions::print_p	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::print_p(const signed char *x, ulong n)$/;"	f	class:all_set_partitions	signature:(const signed char *x, ulong n)
all_set_partitions::print_p	src/comb/attic/allsetpartitions.h	/^    static ulong print_p(const signed char *x, ulong n);$/;"	p	class:all_set_partitions	access:public	signature:(const signed char *x, ulong n)
all_set_partitions::~all_set_partitions	src/comb/attic/allsetpartitions.h	/^    ~all_set_partitions()  { delete [] p_; }$/;"	f	class:all_set_partitions	access:public	signature:()
all_set_q	src/ds/bitarray.h	/^    bool all_set_q()  const$/;"	f	class:bitarray	access:public	signature:() const
all_trees	demo/comb/schroeder-tree-demo.cc	/^void all_trees()$/;"	f	signature:()
alph	src/comb/print-mset.cc	/^static const char *alph = "abcdefghijklmnopqrstuvwxyz";$/;"	v	file:
and_auto_convolution	doc/walsh-doc.txt	/^inline void and_auto_convolution(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
and_auto_convolution	src/walsh/and-convolution.h	/^inline void and_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
and_convolution	doc/walsh-doc.txt	/^inline void and_convolution(Type * restrict f, Type * restrict g, ulong ldn);$/;"	p	file:	signature:(Type * restrict f, Type * restrict g, ulong ldn)
and_convolution	src/walsh/and-convolution.h	/^inline void and_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
anti_diff	src/aux1/attic/diff.h	/^inline void anti_diff(Type *f, ulong n, Type (*func)(Type, Type), ulong j=1)$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type, Type), ulong j=1)
anti_diff	src/aux1/attic/diff.h	/^inline void anti_diff(Type *f, ulong n, ulong j=1)$/;"	f	signature:(Type *f, ulong n, ulong j=1)
anti_symmetric_part	src/matrix/attic/symmetricpart.h	/^int anti_symmetric_part(const MAT &A, MAT &B)$/;"	f	signature:(const MAT &A, MAT &B)
any_symm_q	src/aux1/attic/symmetry.cc	/^any_symm_q(const double *f, ulong n, double eps\/*=1e-5*\/)$/;"	f	signature:(const double *f, ulong n, double eps )
any_symm_q	src/aux1/attic/symmetry.h	/^int any_symm_q(const double *f, ulong n, double eps=1e-5);$/;"	p	signature:(const double *f, ulong n, double eps=1e-5)
append	src/ds/attic/rarray.h	/^    ulong append(const Type & z)$/;"	f	class:rarray	access:public	signature:(const Type & z)
apply_func	src/aux1/attic/applyfunc.h	/^inline void apply_func(Type *f, ulong n, Type (*func)(Type))$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type))
apply_func	src/aux1/attic/applyfunc.h	/^inline void apply_func(Type *f, ulong n, Type (*func)(Type, Type), const Type *g)$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type, Type), const Type *g)
apply_func	src/aux1/attic/array.h	/^    void apply_func(Type (*func)(Type)) { ::apply_func(f_, n_, func); }$/;"	f	class:array	access:public	signature:(Type (func)Type))
apply_func	src/aux2/attic/applyfunc2d.h	/^inline void apply_func(Type **f, ulong nr, ulong nc, Type (*func)(Type))$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type (*func)(Type))
apply_idx_func	src/aux1/attic/applyfunc.h	/^inline void apply_idx_func(Type *f, ulong n, Type (*func)(Type, Type, ulong), const Type *g)$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type, Type, ulong), const Type *g)
apply_idx_func	src/aux1/attic/applyfunc.h	/^inline void apply_idx_func(Type *f, ulong n, Type (*func)(Type, ulong))$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type, ulong))
apply_inverse_permutation	doc/perm-doc.txt	/^void apply_inverse_permutation(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0);$/;"	p	file:	signature:(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)
apply_inverse_permutation	doc/perm-doc.txt	/^void apply_inverse_permutation(const ulong *x, const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const ulong *x, const Type *f, Type * restrict g, ulong n)
apply_inverse_permutation	doc/perm-doc.txt	/^void apply_inverse_permutation(ulong (*x)(ulong), Type *f, ulong n, bitarray *bp=0);$/;"	p	file:	signature:(ulong (x)ulong), Type *f, ulong n, bitarray *bp=0)
apply_inverse_permutation	doc/perm-doc.txt	/^void apply_inverse_permutation(ulong (*x)(ulong), const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(ulong (x)ulong), const Type *f, Type * restrict g, ulong n)
apply_inverse_permutation	src/perm/permapply.h	/^void apply_inverse_permutation(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)$/;"	f	signature:(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)
apply_inverse_permutation	src/perm/permapply.h	/^void apply_inverse_permutation(const ulong *x, const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const ulong *x, const Type *f, Type * restrict g, ulong n)
apply_inverse_permutation	src/perm/permapplyfunc.h	/^void apply_inverse_permutation(ulong (*x)(ulong), Type *f, ulong n, bitarray *bp=0)$/;"	f	signature:(ulong (x)ulong), Type *f, ulong n, bitarray *bp=0)
apply_inverse_permutation	src/perm/permapplyfunc.h	/^void apply_inverse_permutation(ulong (*x)(ulong), const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(ulong (x)ulong), const Type *f, Type * restrict g, ulong n)
apply_permutation	doc/perm-doc.txt	/^void apply_permutation(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0);$/;"	p	file:	signature:(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)
apply_permutation	doc/perm-doc.txt	/^void apply_permutation(const ulong *x, const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const ulong *x, const Type *f, Type * restrict g, ulong n)
apply_permutation	doc/perm-doc.txt	/^void apply_permutation(ulong (*x)(ulong), Type * restrict f, ulong n, bitarray *bp=0);$/;"	p	file:	signature:(ulong (x)ulong), Type * restrict f, ulong n, bitarray *bp=0)
apply_permutation	doc/perm-doc.txt	/^void apply_permutation(ulong (*x)(ulong), const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(ulong (x)ulong), const Type *f, Type * restrict g, ulong n)
apply_permutation	src/perm/permapply.h	/^void apply_permutation(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)$/;"	f	signature:(const ulong *x, Type * restrict f, ulong n, bitarray *bp=0)
apply_permutation	src/perm/permapply.h	/^void apply_permutation(const ulong *x, const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const ulong *x, const Type *f, Type * restrict g, ulong n)
apply_permutation	src/perm/permapplyfunc.h	/^void apply_permutation(ulong (*x)(ulong), Type * restrict f, ulong n, bitarray *bp=0)$/;"	f	signature:(ulong (x)ulong), Type * restrict f, ulong n, bitarray *bp=0)
apply_permutation	src/perm/permapplyfunc.h	/^void apply_permutation(ulong (*x)(ulong), const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(ulong (x)ulong), const Type *f, Type * restrict g, ulong n)
approx_eq	src/aux1/attic/auxprint.cc	/^approx_eq(const Complex *f, const Complex *g, ulong n,$/;"	f	signature:(const Complex *f, const Complex *g, ulong n, const char *bla, double eps )
approx_eq	src/aux1/attic/auxprint.cc	/^approx_eq(const double *f, const double *g, ulong n,$/;"	f	signature:(const double *f, const double *g, ulong n, const char *bla, double eps )
approx_eq	src/aux1/attic/auxprint.cc	/^approx_eq(const ulong *f, const ulong *g, ulong n, const char *bla)$/;"	f	signature:(const ulong *f, const ulong *g, ulong n, const char *bla)
approx_eq	test/aux-test.cc	/^approx_eq(const Complex *f, const Complex *g, ulong n,$/;"	f	signature:(const Complex *f, const Complex *g, ulong n, const char *bla, double eps )
approx_eq	test/aux-test.cc	/^approx_eq(const double *f, const double *g, ulong n,$/;"	f	signature:(const double *f, const double *g, ulong n, const char *bla, double eps )
approx_eq	test/aux-test.cc	/^approx_eq(const ulong *f, const ulong *g, ulong n, const char *bla)$/;"	f	signature:(const ulong *f, const ulong *g, ulong n, const char *bla)
approx_eq	test/test.h	/^void approx_eq(const Complex *f, const Complex *g, ulong n,$/;"	p	signature:(const Complex *f, const Complex *g, ulong n, const char *bla, double eps=1e-12)
approx_eq	test/test.h	/^void approx_eq(const double *f, const double *g, ulong n,$/;"	p	signature:(const double *f, const double *g, ulong n, const char *bla, double eps=1e-12)
approx_eq	test/test.h	/^void approx_eq(const ulong *f, const ulong *g, ulong n, const char *bla);$/;"	p	signature:(const ulong *f, const ulong *g, ulong n, const char *bla)
approx_equal	src/sort/attic/uniqueapprox.h	/^inline bool approx_equal(Type x1, Type x2, Type da)$/;"	f	signature:(Type x1, Type x2, Type da)
area	src/comb/catalan-path-lex.h	/^    ulong area()  const$/;"	f	class:catalan_path_lex	access:public	signature:() const
area	src/comb/motzkin-path-lex.h	/^    ulong area()  const$/;"	f	class:motzkin_path_lex	access:public	signature:() const
arith_table	demo/mod/modarithtables-demo.cc	/^arith_table(int q, int gq)$/;"	f	signature:(int q, int gq)
arith_transform_minus	doc/walsh-doc.txt	/^void arith_transform_minus(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
arith_transform_minus	doc/walsh-doc.txt	/^void arith_transform_minus(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
arith_transform_minus	src/walsh/arithtransform.h	/^void arith_transform_minus(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
arith_transform_minus	src/walsh/weighted-arithtransform.h	/^void arith_transform_minus(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
arith_transform_plus	doc/walsh-doc.txt	/^void arith_transform_plus(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
arith_transform_plus	doc/walsh-doc.txt	/^void arith_transform_plus(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
arith_transform_plus	src/walsh/arithtransform.h	/^void arith_transform_plus(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
arith_transform_plus	src/walsh/weighted-arithtransform.h	/^void arith_transform_plus(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
arrangement_lex	src/comb/arrangement-lex.h	/^    arrangement_lex(ulong n)$/;"	f	class:arrangement_lex	access:public	signature:(ulong n)
arrangement_lex	src/comb/arrangement-lex.h	/^class arrangement_lex$/;"	c
arrangement_lex::P	src/comb/arrangement-lex.h	/^    perm_lex_inv P;$/;"	m	class:arrangement_lex	access:private
arrangement_lex::arrangement_lex	src/comb/arrangement-lex.h	/^    arrangement_lex(ulong n)$/;"	f	class:arrangement_lex	access:public	signature:(ulong n)
arrangement_lex::data	src/comb/arrangement-lex.h	/^    const ulong *data()  const  { return P.data(); }$/;"	f	class:arrangement_lex	access:public	signature:() const
arrangement_lex::e_	src/comb/arrangement-lex.h	/^    ulong e_;  \/\/ length of current arrangement$/;"	m	class:arrangement_lex	access:private
arrangement_lex::first	src/comb/arrangement-lex.h	/^    void first()$/;"	f	class:arrangement_lex	access:public	signature:()
arrangement_lex::next	src/comb/arrangement-lex.h	/^    ulong next()$/;"	f	class:arrangement_lex	access:public	signature:()
arrangement_lex::num	src/comb/arrangement-lex.h	/^    ulong num()  const  { return e_; }$/;"	f	class:arrangement_lex	access:public	signature:() const
arrangement_lex::print	src/comb/arrangement-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:arrangement_lex	access:public	signature:(const char *bla, bool dfz=false) const
arrangement_rgs	src/comb/arrangement-rgs.h	/^    arrangement_rgs(const arrangement_rgs&);  \/\/ forbidden$/;"	p	class:arrangement_rgs	access:private	signature:(const arrangement_rgs&)
arrangement_rgs	src/comb/arrangement-rgs.h	/^    explicit arrangement_rgs(ulong n)$/;"	f	class:arrangement_rgs	access:public	signature:(ulong n)
arrangement_rgs	src/comb/arrangement-rgs.h	/^class arrangement_rgs$/;"	c
arrangement_rgs::OK	src/comb/arrangement-rgs.h	/^    bool OK()  const$/;"	f	class:arrangement_rgs	access:public	signature:() const
arrangement_rgs::a_	src/comb/arrangement-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS$/;"	m	class:arrangement_rgs	access:public
arrangement_rgs::arrangement_rgs	src/comb/arrangement-rgs.h	/^    arrangement_rgs(const arrangement_rgs&);  \/\/ forbidden$/;"	p	class:arrangement_rgs	access:private	signature:(const arrangement_rgs&)
arrangement_rgs::arrangement_rgs	src/comb/arrangement-rgs.h	/^    explicit arrangement_rgs(ulong n)$/;"	f	class:arrangement_rgs	access:public	signature:(ulong n)
arrangement_rgs::data	src/comb/arrangement-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:arrangement_rgs	access:public	signature:() const
arrangement_rgs::first	src/comb/arrangement-rgs.h	/^    void first()$/;"	f	class:arrangement_rgs	access:public	signature:()
arrangement_rgs::last	src/comb/arrangement-rgs.h	/^    void last()$/;"	f	class:arrangement_rgs	access:public	signature:()
arrangement_rgs::n_	src/comb/arrangement-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:arrangement_rgs	access:public
arrangement_rgs::next	src/comb/arrangement-rgs.h	/^    ulong next()$/;"	f	class:arrangement_rgs	access:public	signature:()
arrangement_rgs::operator =	src/comb/arrangement-rgs.h	/^    arrangement_rgs & operator = (const arrangement_rgs&);  \/\/ forbidden$/;"	p	class:arrangement_rgs	access:private	signature:(const arrangement_rgs&)
arrangement_rgs::prev	src/comb/arrangement-rgs.h	/^    ulong prev()$/;"	f	class:arrangement_rgs	access:public	signature:()
arrangement_rgs::print	src/comb/arrangement-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:arrangement_rgs	access:public	signature:(const char *bla, bool dfz=true) const
arrangement_rgs::z_	src/comb/arrangement-rgs.h	/^    ulong *z_;  \/\/ 1 + number of nonzero digits in prefix$/;"	m	class:arrangement_rgs	access:public
arrangement_rgs::~arrangement_rgs	src/comb/arrangement-rgs.h	/^    ~arrangement_rgs()$/;"	f	class:arrangement_rgs	access:public	signature:()
array	src/aux1/attic/array.h	/^    array(ulong n, Type *f=0)$/;"	f	class:array	access:public	signature:(ulong n, Type *f=0)
array	src/aux1/attic/array.h	/^class array$/;"	c
array2d	src/ds/array2d.h	/^    array2d(const array2d&);  \/\/ forbidden$/;"	p	class:array2d	access:private	signature:(const array2d&)
array2d	src/ds/array2d.h	/^    explicit array2d(ulong nr, ulong nc, Type *f=0)$/;"	f	class:array2d	access:public	signature:(ulong nr, ulong nc, Type *f=0)
array2d	src/ds/array2d.h	/^class array2d$/;"	c
array2d::array2d	src/ds/array2d.h	/^    array2d(const array2d&);  \/\/ forbidden$/;"	p	class:array2d	access:private	signature:(const array2d&)
array2d::array2d	src/ds/array2d.h	/^    explicit array2d(ulong nr, ulong nc, Type *f=0)$/;"	f	class:array2d	access:public	signature:(ulong nr, ulong nc, Type *f=0)
array2d::f_	src/ds/array2d.h	/^    Type *f_;        \/\/ pointer to data$/;"	m	class:array2d	access:protected
array2d::fill	src/ds/array2d.h	/^    void fill(Type v)$/;"	f	class:array2d	access:public	signature:(Type v)
array2d::myfq_	src/ds/array2d.h	/^    bool myfq_;      \/\/ whether f_ was allocated by constructor$/;"	m	class:array2d	access:protected
array2d::nc_	src/ds/array2d.h	/^    ulong nr_, nc_;  \/\/ #rows, #cols$/;"	m	class:array2d	access:protected
array2d::nr_	src/ds/array2d.h	/^    ulong nr_, nc_;  \/\/ #rows, #cols$/;"	m	class:array2d	access:protected
array2d::null	src/ds/array2d.h	/^    void null()$/;"	f	class:array2d	access:public	signature:()
array2d::num_cols	src/ds/array2d.h	/^    ulong num_cols()  const  { return nc_; }$/;"	f	class:array2d	access:public	signature:() const
array2d::num_elem	src/ds/array2d.h	/^    ulong num_elem()  const  { return num_elem_; }$/;"	f	class:array2d	access:public	signature:() const
array2d::num_elem_	src/ds/array2d.h	/^    ulong num_elem_;  \/\/ number of elements$/;"	m	class:array2d	access:protected
array2d::num_rows	src/ds/array2d.h	/^    ulong num_rows()  const  { return nr_; }$/;"	f	class:array2d	access:public	signature:() const
array2d::operator =	src/ds/array2d.h	/^    array2d & operator = (const array2d&);  \/\/ forbidden$/;"	p	class:array2d	access:private	signature:(const array2d&)
array2d::operator []	src/ds/array2d.h	/^    Type * operator [] (ulong r)$/;"	f	class:array2d	access:public	signature:(ulong r)
array2d::operator []	src/ds/array2d.h	/^    const Type * operator [] (ulong r)  const$/;"	f	class:array2d	access:public	signature:(ulong r) const
array2d::rowp_	src/ds/array2d.h	/^    Type **rowp_;    \/\/ pointers to rows$/;"	m	class:array2d	access:protected
array2d::~array2d	src/ds/array2d.h	/^    ~array2d()$/;"	f	class:array2d	access:public	signature:()
array3d	src/ds/array3d.h	/^    array3d(const array3d&);  \/\/ forbidden$/;"	p	class:array3d	access:private	signature:(const array3d&)
array3d	src/ds/array3d.h	/^    explicit array3d(ulong nx, ulong ny, ulong nz, Type *f=0)$/;"	f	class:array3d	access:public	signature:(ulong nx, ulong ny, ulong nz, Type *f=0)
array3d	src/ds/array3d.h	/^class array3d$/;"	c
array3d::array3d	src/ds/array3d.h	/^    array3d(const array3d&);  \/\/ forbidden$/;"	p	class:array3d	access:private	signature:(const array3d&)
array3d::array3d	src/ds/array3d.h	/^    explicit array3d(ulong nx, ulong ny, ulong nz, Type *f=0)$/;"	f	class:array3d	access:public	signature:(ulong nx, ulong ny, ulong nz, Type *f=0)
array3d::arxp_	src/ds/array3d.h	/^    array2d<Type> **arxp_;    \/\/ pointers to array2d at coordinate x$/;"	m	class:array3d	access:protected
array3d::f_	src/ds/array3d.h	/^    Type *f_;        \/\/ pointer to data$/;"	m	class:array3d	access:protected
array3d::fill	src/ds/array3d.h	/^    void fill(Type v)$/;"	f	class:array3d	access:public	signature:(Type v)
array3d::myfq_	src/ds/array3d.h	/^    bool myfq_;      \/\/ whether f_ was allocated by constructor$/;"	m	class:array3d	access:protected
array3d::null	src/ds/array3d.h	/^    void null()$/;"	f	class:array3d	access:public	signature:()
array3d::num_elem	src/ds/array3d.h	/^    ulong num_elem()  const  { return num_elem_; }$/;"	f	class:array3d	access:public	signature:() const
array3d::num_elem_	src/ds/array3d.h	/^    ulong num_elem_;  \/\/ number of elements$/;"	m	class:array3d	access:protected
array3d::num_x	src/ds/array3d.h	/^    ulong num_x()  const  { return nx_; }$/;"	f	class:array3d	access:public	signature:() const
array3d::num_y	src/ds/array3d.h	/^    ulong num_y()  const  { return ny_; }$/;"	f	class:array3d	access:public	signature:() const
array3d::num_z	src/ds/array3d.h	/^    ulong num_z()  const  { return nz_; }$/;"	f	class:array3d	access:public	signature:() const
array3d::nx_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
array3d::ny_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
array3d::nz_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
array3d::operator =	src/ds/array3d.h	/^    array3d & operator = (const array3d&);  \/\/ forbidden$/;"	p	class:array3d	access:private	signature:(const array3d&)
array3d::operator []	src/ds/array3d.h	/^    array2d<Type> & operator [] (ulong x)$/;"	f	class:array3d	access:public	signature:(ulong x)
array3d::operator []	src/ds/array3d.h	/^    const array3d<Type> & operator [] (ulong x)  const$/;"	f	class:array3d	access:public	signature:(ulong x) const
array3d::~array3d	src/ds/array3d.h	/^    ~array3d()$/;"	f	class:array3d	access:public	signature:()
array::apply_func	src/aux1/attic/array.h	/^    void apply_func(Type (*func)(Type)) { ::apply_func(f_, n_, func); }$/;"	f	class:array	access:public	signature:(Type (func)Type))
array::array	src/aux1/attic/array.h	/^    array(ulong n, Type *f=0)$/;"	f	class:array	access:public	signature:(ulong n, Type *f=0)
array::copy	src/aux1/attic/array.h	/^    void copy(array<Type> a)  { acopy(a.f_, a.n_, f_, n_); }$/;"	f	class:array	access:public	signature:(array<Type> a)
array::f_	src/aux1/attic/array.h	/^    Type *f_;  \/\/ pointer to data$/;"	m	class:array	access:public
array::get	src/aux1/attic/array.h	/^    Type get(ulong k)  const  { return f_[k]; }$/;"	f	class:array	access:public	signature:(ulong k) const
array::linear_scale	src/aux1/attic/array.h	/^    void linear_scale(Type mi, Type ma, Type nmi, Type nma)$/;"	f	class:array	access:public	signature:(Type mi, Type ma, Type nmi, Type nma)
array::linear_scale	src/aux1/attic/array.h	/^    void linear_scale(Type nmi, Type nma)$/;"	f	class:array	access:public	signature:(Type nmi, Type nma)
array::log_scale	src/aux1/attic/array.h	/^    void log_scale(double xi, double xa, Type nma)$/;"	f	class:array	access:public	signature:(double xi, double xa, Type nma)
array::min_max	src/aux1/attic/array.h	/^    void min_max(Type *mi, Type *ma)  const  { ::min_max(f_, n_, mi, ma); }$/;"	f	class:array	access:public	signature:(Type *mi, Type *ma) const
array::myfq_	src/aux1/attic/array.h	/^    bool myfq_;  \/\/ whether f_ was allocated by constructor$/;"	m	class:array	access:protected
array::n_	src/aux1/attic/array.h	/^    ulong n_;  \/\/ #elems$/;"	m	class:array	access:public
array::nelem	src/aux1/attic/array.h	/^    ulong nelem()  const  { return n_; }$/;"	f	class:array	access:public	signature:() const
array::null	src/aux1/attic/array.h	/^    void null()  { ::null(f_, n_); }$/;"	f	class:array	access:public	signature:()
array::operator []	src/aux1/attic/array.h	/^    Type *operator [] (ulong x) const  { return f_[x]; }$/;"	f	class:array	access:public	signature:(ulong x) const
array::reverse	src/aux1/attic/array.h	/^    void reverse()  { ::reverse(f_, n_); }$/;"	f	class:array	access:public	signature:()
array::reverse_0	src/aux1/attic/array.h	/^    void reverse_0()  { ::reverse_0(f_, n_); }$/;"	f	class:array	access:public	signature:()
array::rotate	src/aux1/attic/array.h	/^    void rotate(long r)  { ::rotate_sgn(f_, n_, r); }$/;"	f	class:array	access:public	signature:(long r)
array::rotate_left	src/aux1/attic/array.h	/^    void rotate_left(ulong r)  { ::rotate_left(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
array::rotate_right	src/aux1/attic/array.h	/^    void rotate_right(ulong r)  { ::rotate_right(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
array::set	src/aux1/attic/array.h	/^    void set(ulong k, Type v)  { f_[k]=v; }$/;"	f	class:array	access:public	signature:(ulong k, Type v)
array::shift	src/aux1/attic/array.h	/^    void shift(long s)  { ::shift_sgn(f_, n_, s); }$/;"	f	class:array	access:public	signature:(long s)
array::shift_left	src/aux1/attic/array.h	/^    void shift_left(ulong r)  { ::shift_left(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
array::shift_right	src/aux1/attic/array.h	/^    void shift_right(ulong r)  { ::shift_right(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
array::~array	src/aux1/attic/array.h	/^    ~array()  { if ( myfq_ )  delete [] f_; }$/;"	f	class:array	access:public	signature:()
arxp_	src/ds/array3d.h	/^    array2d<Type> **arxp_;    \/\/ pointers to array2d at coordinate x$/;"	m	class:array3d	access:protected
as_	src/comb/catalan.h	/^    int *as_;   \/\/ digits of the RGS: as_[k] <= as[k-1] + 1$/;"	m	class:catalan	access:public
as_	src/comb/setpart.h	/^    int *as_;   \/\/ element k attached At Set (0<=as[k]<=k) of set(k-1)$/;"	m	class:setpart	access:public
as_vector	src/ds/point2d.h	/^    vec2d as_vector()  const  {  return vec2d( x_, y_ ); }$/;"	f	class:point2d	access:public	signature:() const
as_vector	src/ds/point3d.h	/^    vec3d as_vector()  const  {  return vec3d( x_, y_, z_ ); }$/;"	f	class:point3d	access:public	signature:() const
ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    ascent_alt_rgs(const ascent_alt_rgs&);  \/\/ forbidden$/;"	p	class:ascent_alt_rgs	access:private	signature:(const ascent_alt_rgs&)
ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    explicit ascent_alt_rgs(ulong n)$/;"	f	class:ascent_alt_rgs	access:public	signature:(ulong n)
ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^class ascent_alt_rgs$/;"	c
ascent_alt_rgs::OK	src/comb/ascent-alt-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_alt_rgs	access:public	signature:() const
ascent_alt_rgs::a_	src/comb/ascent-alt-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= k$/;"	m	class:ascent_alt_rgs	access:public
ascent_alt_rgs::ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    ascent_alt_rgs(const ascent_alt_rgs&);  \/\/ forbidden$/;"	p	class:ascent_alt_rgs	access:private	signature:(const ascent_alt_rgs&)
ascent_alt_rgs::ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    explicit ascent_alt_rgs(ulong n)$/;"	f	class:ascent_alt_rgs	access:public	signature:(ulong n)
ascent_alt_rgs::data	src/comb/ascent-alt-rgs.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:ascent_alt_rgs	access:public	signature:() const
ascent_alt_rgs::first	src/comb/ascent-alt-rgs.h	/^    void first()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
ascent_alt_rgs::n_	src/comb/ascent-alt-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_alt_rgs	access:public
ascent_alt_rgs::next	src/comb/ascent-alt-rgs.h	/^    ulong next()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
ascent_alt_rgs::operator =	src/comb/ascent-alt-rgs.h	/^    ascent_alt_rgs & operator = (const ascent_alt_rgs&);  \/\/ forbidden$/;"	p	class:ascent_alt_rgs	access:private	signature:(const ascent_alt_rgs&)
ascent_alt_rgs::p_	src/comb/ascent-alt-rgs.h	/^    ulong *p_;  \/\/ (prefix) stats: p[d] = number of digits d$/;"	m	class:ascent_alt_rgs	access:public
ascent_alt_rgs::print	src/comb/ascent-alt-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_alt_rgs	access:public	signature:(const char *bla, bool dfz=true) const
ascent_alt_rgs::~ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    ~ascent_alt_rgs()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    ascent_nonflat_rgs(const ascent_nonflat_rgs&);  \/\/ forbidden$/;"	p	class:ascent_nonflat_rgs	access:private	signature:(const ascent_nonflat_rgs&)
ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    explicit ascent_nonflat_rgs(ulong n)$/;"	f	class:ascent_nonflat_rgs	access:public	signature:(ulong n)
ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^class ascent_nonflat_rgs$/;"	c
ascent_nonflat_rgs::OK	src/comb/ascent-nonflat-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
ascent_nonflat_rgs::a_	src/comb/ascent-nonflat-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_nonflat_rgs	access:public
ascent_nonflat_rgs::ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    ascent_nonflat_rgs(const ascent_nonflat_rgs&);  \/\/ forbidden$/;"	p	class:ascent_nonflat_rgs	access:private	signature:(const ascent_nonflat_rgs&)
ascent_nonflat_rgs::ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    explicit ascent_nonflat_rgs(ulong n)$/;"	f	class:ascent_nonflat_rgs	access:public	signature:(ulong n)
ascent_nonflat_rgs::data	src/comb/ascent-nonflat-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
ascent_nonflat_rgs::first	src/comb/ascent-nonflat-rgs.h	/^    void first()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
ascent_nonflat_rgs::last	src/comb/ascent-nonflat-rgs.h	/^    void last()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
ascent_nonflat_rgs::m_	src/comb/ascent-nonflat-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_nonflat_rgs	access:public
ascent_nonflat_rgs::n_	src/comb/ascent-nonflat-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_nonflat_rgs	access:public
ascent_nonflat_rgs::next	src/comb/ascent-nonflat-rgs.h	/^    ulong next()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
ascent_nonflat_rgs::num_ascents	src/comb/ascent-nonflat-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
ascent_nonflat_rgs::operator =	src/comb/ascent-nonflat-rgs.h	/^    ascent_nonflat_rgs & operator = (const ascent_nonflat_rgs&);  \/\/ forbidden$/;"	p	class:ascent_nonflat_rgs	access:private	signature:(const ascent_nonflat_rgs&)
ascent_nonflat_rgs::print	src/comb/ascent-nonflat-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:(const char *bla, bool dfz=true) const
ascent_nonflat_rgs::refresh_m	src/comb/ascent-nonflat-rgs.h	/^    void refresh_m(ulong j)$/;"	f	class:ascent_nonflat_rgs	access:private	signature:(ulong j)
ascent_nonflat_rgs::~ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    ~ascent_nonflat_rgs()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
ascent_rgs	src/comb/ascent-rgs.h	/^    ascent_rgs(const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs	src/comb/ascent-rgs.h	/^    explicit ascent_rgs(ulong n)$/;"	f	class:ascent_rgs	access:public	signature:(ulong n)
ascent_rgs	src/comb/ascent-rgs.h	/^class ascent_rgs$/;"	c
ascent_rgs	src/comb/attic/ascent-rgs.h	/^    ascent_rgs(const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs	src/comb/attic/ascent-rgs.h	/^    explicit ascent_rgs(ulong n)$/;"	f	class:ascent_rgs	access:public	signature:(ulong n)
ascent_rgs	src/comb/attic/ascent-rgs.h	/^class ascent_rgs$/;"	c
ascent_rgs::OK	src/comb/ascent-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::OK	src/comb/attic/ascent-rgs.h	/^    bool OK()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::a_	src/comb/ascent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs	access:public
ascent_rgs::a_	src/comb/attic/ascent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs	access:public
ascent_rgs::ascent_rgs	src/comb/ascent-rgs.h	/^    ascent_rgs(const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs::ascent_rgs	src/comb/ascent-rgs.h	/^    explicit ascent_rgs(ulong n)$/;"	f	class:ascent_rgs	access:public	signature:(ulong n)
ascent_rgs::ascent_rgs	src/comb/attic/ascent-rgs.h	/^    ascent_rgs(const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs::ascent_rgs	src/comb/attic/ascent-rgs.h	/^    explicit ascent_rgs(ulong n)$/;"	f	class:ascent_rgs	access:public	signature:(ulong n)
ascent_rgs::data	src/comb/ascent-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::data	src/comb/attic/ascent-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::first	src/comb/ascent-rgs.h	/^    void first()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::first	src/comb/attic/ascent-rgs.h	/^    void first()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::last	src/comb/ascent-rgs.h	/^    void last()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::m_	src/comb/ascent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs	access:public
ascent_rgs::m_	src/comb/attic/ascent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs	access:public
ascent_rgs::n_	src/comb/ascent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs	access:public
ascent_rgs::n_	src/comb/attic/ascent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs	access:public
ascent_rgs::next	src/comb/ascent-rgs.h	/^    ulong next()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::next	src/comb/attic/ascent-rgs.h	/^    ulong next()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::num_ascents	src/comb/ascent-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::num_ascents	src/comb/attic/ascent-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
ascent_rgs::operator =	src/comb/ascent-rgs.h	/^    ascent_rgs & operator = (const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs::operator =	src/comb/attic/ascent-rgs.h	/^    ascent_rgs & operator = (const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
ascent_rgs::prev	src/comb/ascent-rgs.h	/^    ulong prev()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::print	src/comb/ascent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
ascent_rgs::~ascent_rgs	src/comb/ascent-rgs.h	/^    ~ascent_rgs()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs::~ascent_rgs	src/comb/attic/ascent-rgs.h	/^    virtual ~ascent_rgs()$/;"	f	class:ascent_rgs	access:public	signature:()
ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    ascent_rgs_subset_lex(const ascent_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:ascent_rgs_subset_lex	access:private	signature:(const ascent_rgs_subset_lex&)
ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    explicit ascent_rgs_subset_lex(ulong n)$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:(ulong n)
ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^class ascent_rgs_subset_lex$/;"	c
ascent_rgs_subset_lex::OK	src/comb/ascent-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
ascent_rgs_subset_lex::a_	src/comb/ascent-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:ascent_rgs_subset_lex	access:public
ascent_rgs_subset_lex::ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    ascent_rgs_subset_lex(const ascent_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:ascent_rgs_subset_lex	access:private	signature:(const ascent_rgs_subset_lex&)
ascent_rgs_subset_lex::ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    explicit ascent_rgs_subset_lex(ulong n)$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:(ulong n)
ascent_rgs_subset_lex::data	src/comb/ascent-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
ascent_rgs_subset_lex::first	src/comb/ascent-rgs-subset-lex.h	/^    void first()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
ascent_rgs_subset_lex::last	src/comb/ascent-rgs-subset-lex.h	/^    void last()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
ascent_rgs_subset_lex::m_	src/comb/ascent-rgs-subset-lex.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs_subset_lex	access:public
ascent_rgs_subset_lex::n1_	src/comb/ascent-rgs-subset-lex.h	/^    ulong n1_;  \/\/ last track$/;"	m	class:ascent_rgs_subset_lex	access:public
ascent_rgs_subset_lex::n_	src/comb/ascent-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs_subset_lex	access:public
ascent_rgs_subset_lex::next	src/comb/ascent-rgs-subset-lex.h	/^    ulong next()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
ascent_rgs_subset_lex::num_ascents	src/comb/ascent-rgs-subset-lex.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
ascent_rgs_subset_lex::operator =	src/comb/ascent-rgs-subset-lex.h	/^    ascent_rgs_subset_lex & operator = (const ascent_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:ascent_rgs_subset_lex	access:private	signature:(const ascent_rgs_subset_lex&)
ascent_rgs_subset_lex::prev	src/comb/ascent-rgs-subset-lex.h	/^    ulong prev()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
ascent_rgs_subset_lex::print	src/comb/ascent-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
ascent_rgs_subset_lex::tr_	src/comb/ascent-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track (position of rightmost nonzero digit)$/;"	m	class:ascent_rgs_subset_lex	access:public
ascent_rgs_subset_lex::~ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    ~ascent_rgs_subset_lex()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
asm_b_c	doc/bits-doc.txt	/^static inline void asm_b_c(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_b_c	src/bits/bitasm-amd64.h	/^static inline void asm_b_c(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_b_c	src/bits/bitasm-i386.h	/^static inline void asm_b_c(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_b_r	doc/bits-doc.txt	/^static inline void asm_b_r(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_b_r	src/bits/bitasm-amd64.h	/^static inline void asm_b_r(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_b_r	src/bits/bitasm-i386.h	/^static inline void asm_b_r(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_b_s	doc/bits-doc.txt	/^static inline void asm_b_s(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_b_s	src/bits/bitasm-amd64.h	/^static inline void asm_b_s(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_b_s	src/bits/bitasm-i386.h	/^static inline void asm_b_s(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_bit_count	doc/bits-doc.txt	/^static inline ulong asm_bit_count(ulong x);$/;"	p	file:	signature:(ulong x)
asm_bit_count	src/bits/bitasm-amd64.h	/^static inline ulong asm_bit_count(ulong x)$/;"	f	signature:(ulong x)
asm_bsf	doc/bits-doc.txt	/^static inline ulong asm_bsf(ulong x);$/;"	p	file:	signature:(ulong x)
asm_bsf	src/bits/attic/bitsasm.cc	/^asm_bsf(ulong *x)$/;"	f	signature:(ulong *x)
asm_bsf	src/bits/bitasm-amd64.h	/^static inline ulong asm_bsf(ulong x)$/;"	f	signature:(ulong x)
asm_bsf	src/bits/bitasm-i386.h	/^static inline ulong asm_bsf(ulong x)$/;"	f	signature:(ulong x)
asm_bsr	doc/bits-doc.txt	/^static inline ulong asm_bsr(ulong x);$/;"	p	file:	signature:(ulong x)
asm_bsr	src/bits/attic/bitsasm.cc	/^asm_bsr(ulong *x)$/;"	f	signature:(ulong *x)
asm_bsr	src/bits/bitasm-amd64.h	/^static inline ulong asm_bsr(ulong x)$/;"	f	signature:(ulong x)
asm_bsr	src/bits/bitasm-i386.h	/^static inline ulong asm_bsr(ulong x)$/;"	f	signature:(ulong x)
asm_bswap	doc/bits-doc.txt	/^static inline ulong asm_bswap(ulong x);$/;"	p	file:	signature:(ulong x)
asm_bswap	src/bits/bitasm-amd64.h	/^static inline ulong asm_bswap(ulong x)$/;"	f	signature:(ulong x)
asm_bswap	src/bits/bitasm-i386.h	/^static inline ulong asm_bswap(ulong x)$/;"	f	signature:(ulong x)
asm_bt	doc/bits-doc.txt	/^static inline ulong asm_bt(const ulong *f, ulong i);$/;"	p	file:	signature:(const ulong *f, ulong i)
asm_bt	src/bits/bitasm-amd64.h	/^static inline ulong asm_bt(const ulong *f, ulong i)$/;"	f	signature:(const ulong *f, ulong i)
asm_bt	src/bits/bitasm-i386.h	/^static inline ulong asm_bt(const ulong *f, ulong i)$/;"	f	signature:(const ulong *f, ulong i)
asm_btc	doc/bits-doc.txt	/^static inline ulong asm_btc(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_btc	src/bits/bitasm-amd64.h	/^static inline ulong asm_btc(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_btc	src/bits/bitasm-i386.h	/^static inline ulong asm_btc(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_btr	doc/bits-doc.txt	/^static inline ulong asm_btr(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_btr	src/bits/bitasm-amd64.h	/^static inline ulong asm_btr(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_btr	src/bits/bitasm-i386.h	/^static inline ulong asm_btr(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_bts	doc/bits-doc.txt	/^static inline ulong asm_bts(ulong *f, ulong i);$/;"	p	file:	signature:(ulong *f, ulong i)
asm_bts	src/bits/bitasm-amd64.h	/^static inline ulong asm_bts(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_bts	src/bits/bitasm-i386.h	/^static inline ulong asm_bts(ulong *f, ulong i)$/;"	f	signature:(ulong *f, ulong i)
asm_parity	doc/bits-doc.txt	/^static inline ulong asm_parity(ulong x);$/;"	p	file:	signature:(ulong x)
asm_parity	src/bits/bitasm-amd64.h	/^static inline ulong asm_parity(ulong x)$/;"	f	signature:(ulong x)
asm_parity	src/bits/bitasm-i386.h	/^static inline ulong asm_parity(ulong x)$/;"	f	signature:(ulong x)
asm_rol	doc/bits-doc.txt	/^static inline ulong asm_rol(ulong x, ulong r);$/;"	p	file:	signature:(ulong x, ulong r)
asm_rol	src/bits/bitasm-amd64.h	/^static inline ulong asm_rol(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
asm_rol	src/bits/bitasm-i386.h	/^static inline ulong asm_rol(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
asm_ror	doc/bits-doc.txt	/^static inline ulong asm_ror(ulong x, ulong r);$/;"	p	file:	signature:(ulong x, ulong r)
asm_ror	src/bits/bitasm-amd64.h	/^static inline ulong asm_ror(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
asm_ror	src/bits/bitasm-i386.h	/^static inline ulong asm_ror(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
aux	src/comb/balanced-ordered-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
aux	src/comb/id-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:id_tree_lev_seq	access:private
aux	src/comb/ordered-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:ordered_tree_lev_seq	access:private
aux	src/comb/tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:tree_lev_seq	access:private
auxil$	tags	/^$showaux	scripts\/autodoc.pl	\/^$showaux = 1;     # whether to print funcs marked as auxil$\/;"	v$/;"	v
average	doc/bits-doc.txt	/^static inline ulong average(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
average	src/bits/average.h	/^static inline ulong average(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
ax_	src/ds/bounding-box.h	/^    Type ix_, ax_;  \/\/ min-x, max-x$/;"	m	class:bounding_box	access:protected
axiom_	src/comb/string-subst.h	/^    uchar *axiom_;  \/\/ the axiom$/;"	m	class:string_subst	access:public
axiom_str_	src/comb/lindenmayer-system.h	/^    std::string axiom_str_;$/;"	m	class:lindenmayer_system	access:protected
ay_	src/ds/bounding-box.h	/^    Type iy_, ay_;  \/\/ min-y, max-y$/;"	m	class:bounding_box	access:protected
b	scripts/chkifdef.sh	/^    export b=$(basename $f .h | tr 'a-z\\-' 'A-Z_' );$/;"	v
b_	src/comb/attic/all-compositions-minchange.h	/^    ulong b_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
b_	src/comb/attic/allsetpartitions.h	/^    ulong b_;  \/\/ Bell number B(n)$/;"	m	class:all_set_partitions	access:public
b_	src/comb/combination-pref.h	/^    ulong *b_;  \/\/ data as delta set$/;"	m	class:combination_pref	access:public
b_	src/comb/ordered-tree-branches.h	/^    ulong *b_;  \/\/ branch heights (absolute, above root)$/;"	m	class:ordered_tree_branches	access:public
b_	src/comb/ordered-tree-branching-seq.h	/^    ulong *b_;  \/\/ branching sequence$/;"	m	class:ordered_tree_branching_seq	access:public
b_	src/comb/paren-pref.h	/^    ulong *b_;     \/\/ array of t ones and s zeros$/;"	m	class:paren_pref	access:public
b_	src/comb/paren-pref.h	/^    ulong b_[64];  \/\/ array of t ones and s zeros$/;"	m	class:paren_pref	access:public
b_	src/comb/perm-star-swaps.h	/^    ulong *b_;   \/\/ auxiliary array$/;"	m	class:perm_star_swaps	access:public
b_	src/comb/perm-star-swaps.h	/^    ulong b_[32];$/;"	m	class:perm_star_swaps	access:public
b_	src/comb/perm-star.h	/^    ulong *b_;   \/\/ auxiliary array$/;"	m	class:perm_star	access:public
b_	src/comb/perm-star.h	/^    ulong b_[32];   \/\/ auxiliary array$/;"	m	class:perm_star	access:public
b_equiv_q	demo/sort/equivclass-bracelets-demo.cc	/^bool b_equiv_q(ulong x, ulong y)  \/\/ bracelets$/;"	f	signature:(ulong x, ulong y)
ba_	src/comb/partition-desc-bb.h	/^    ulong ba_;  \/\/ bound for size of parts$/;"	m	class:partition_desc_bb	access:public
balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    balanced_ordered_tree_lev_seq(const balanced_ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:balanced_ordered_tree_lev_seq	access:private	signature:(const balanced_ordered_tree_lev_seq&)
balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    explicit balanced_ordered_tree_lev_seq(ulong n)$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong n)
balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^class balanced_ordered_tree_lev_seq$/;"	c
balanced_ordered_tree_lev_seq::OK	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::a_	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
balanced_ordered_tree_lev_seq::aux	src/comb/balanced-ordered-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
balanced_ordered_tree_lev_seq::balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    balanced_ordered_tree_lev_seq(const balanced_ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:balanced_ordered_tree_lev_seq	access:private	signature:(const balanced_ordered_tree_lev_seq&)
balanced_ordered_tree_lev_seq::balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    explicit balanced_ordered_tree_lev_seq(ulong n)$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong n)
balanced_ordered_tree_lev_seq::branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
balanced_ordered_tree_lev_seq::data	src/comb/balanced-ordered-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::first	src/comb/balanced-ordered-tree-lev-seq.h	/^    void first()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
balanced_ordered_tree_lev_seq::height	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::is_balanced	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:private	signature:() const
balanced_ordered_tree_lev_seq::is_branch	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
balanced_ordered_tree_lev_seq::is_leaf	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
balanced_ordered_tree_lev_seq::lev	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong k) const
balanced_ordered_tree_lev_seq::limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
balanced_ordered_tree_lev_seq::max_branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::max_limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::min_branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::min_limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::n_	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
balanced_ordered_tree_lev_seq::next	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong next()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
balanced_ordered_tree_lev_seq::num_leaves	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::operator =	src/comb/balanced-ordered-tree-lev-seq.h	/^    balanced_ordered_tree_lev_seq & operator = (const balanced_ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:balanced_ordered_tree_lev_seq	access:private	signature:(const balanced_ordered_tree_lev_seq&)
balanced_ordered_tree_lev_seq::print	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=false) const
balanced_ordered_tree_lev_seq::print_aa	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla) const
balanced_ordered_tree_lev_seq::print_branching_numbers	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
balanced_ordered_tree_lev_seq::print_composition	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_composition(const char *bla)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla) const
balanced_ordered_tree_lev_seq::print_paren_word	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
balanced_ordered_tree_lev_seq::size	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
balanced_ordered_tree_lev_seq::valency	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
balanced_ordered_tree_lev_seq::write_tail	src/comb/balanced-ordered-tree-lev-seq.h	/^    void write_tail(ulong j)$/;"	f	class:balanced_ordered_tree_lev_seq	access:private	signature:(ulong j)
balanced_ordered_tree_lev_seq::~balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    ~balanced_ordered_tree_lev_seq()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
base_idx	src/comb/tree-lev-seq-aux.h	/^    ulong base_idx(const ulong *a, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:private	signature:(const ulong *a, ulong j) const
bb	demo/arith/briggs-log-demo.cc	/^double bb;$/;"	v
bc_mon	demo/graph/graph-monotonicgray-demo.cc	/^ulong *bc_mon;  \/\/ table of bit counts as they occur in monotonic Gray paths$/;"	v
bc_tab	demo/graph/graph-monotonicgray-demo.cc	/^ulong *bc_tab;  \/\/ table of bit counts: bc_tab[k] == bit_count(k)$/;"	v
be	src/aux0/attic/trigrec.h	/^    Type al, be;$/;"	m	class:trigrec	access:private
bell_table	src/comb/attic/allsetpartitions.cc	/^ulong all_set_partitions::bell_table[] = { \/\/ Bell numbers$/;"	m	class:all_set_partitions	file:
bell_table	src/comb/attic/allsetpartitions.h	/^    static ulong bell_table[]; \/\/ Bell numbers B(n)$/;"	m	class:all_set_partitions	access:public
bin2fibrep	doc/bits-doc.txt	/^static inline ulong bin2fibrep(ulong b);$/;"	p	file:	signature:(ulong b)
bin2fibrep	src/bits/fibrep.h	/^static inline ulong bin2fibrep(ulong b)$/;"	f	signature:(ulong b)
bin2naf	doc/bits-doc.txt	/^static inline void bin2naf(ulong x, ulong &np, ulong &nm);$/;"	p	file:	signature:(ulong x, ulong &np, ulong &nm)
bin2naf	src/bits/bin2naf.h	/^static inline void bin2naf(ulong x, ulong &np, ulong &nm)$/;"	f	signature:(ulong x, ulong &np, ulong &nm)
bin2neg	doc/bits-doc.txt	/^static inline ulong bin2neg(ulong x);$/;"	p	file:	signature:(ulong x)
bin2neg	src/bits/negbin.h	/^static inline ulong bin2neg(ulong x)$/;"	f	signature:(ulong x)
bin2sbin	doc/bits-doc.txt	/^static inline void bin2sbin(ulong x, ulong &np, ulong &nm);$/;"	p	file:	signature:(ulong x, ulong &np, ulong &nm)
bin2sbin	src/bits/bin2naf.h	/^static inline void bin2sbin(ulong x, ulong &np, ulong &nm)$/;"	f	signature:(ulong x, ulong &np, ulong &nm)
bin_imag_to_rad2i	doc/bits-doc.txt	/^static inline ulong bin_imag_to_rad2i(ulong x);$/;"	p	file:	signature:(ulong x)
bin_imag_to_rad2i	src/bits/radix-2i.h	/^static inline ulong bin_imag_to_rad2i(ulong x)$/;"	f	signature:(ulong x)
bin_imag_to_radm1pi	doc/bits-doc.txt	/^static inline ulong bin_imag_to_radm1pi(ulong x);$/;"	p	file:	signature:(ulong x)
bin_imag_to_radm1pi	src/bits/radix-m1pi.h	/^static inline ulong bin_imag_to_radm1pi(ulong x)$/;"	f	signature:(ulong x)
bin_real_to_rad2i	doc/bits-doc.txt	/^static inline ulong bin_real_to_rad2i(ulong x);$/;"	p	file:	signature:(ulong x)
bin_real_to_rad2i	src/bits/radix-2i.h	/^static inline ulong bin_real_to_rad2i(ulong x)$/;"	f	signature:(ulong x)
bin_real_to_radm1pi	doc/bits-doc.txt	/^static inline ulong bin_real_to_radm1pi(ulong x);$/;"	p	file:	signature:(ulong x)
bin_real_to_radm1pi	src/bits/radix-m1pi.h	/^static inline ulong bin_real_to_radm1pi(ulong x)$/;"	f	signature:(ulong x)
bin_to_rad2i	doc/bits-doc.txt	/^static inline ulong bin_to_rad2i(ulong re, ulong im);$/;"	p	file:	signature:(ulong re, ulong im)
bin_to_rad2i	src/bits/radix-2i.h	/^static inline ulong bin_to_rad2i(ulong re, ulong im)$/;"	f	signature:(ulong re, ulong im)
bin_to_radm1pi	doc/bits-doc.txt	/^static inline ulong bin_to_radm1pi(ulong re, ulong im);$/;"	p	file:	signature:(ulong re, ulong im)
bin_to_radm1pi	src/bits/radix-m1pi.h	/^static inline ulong bin_to_radm1pi(ulong re, ulong im)$/;"	f	signature:(ulong re, ulong im)
bin_to_radm4	doc/bits-doc.txt	/^static inline ulong bin_to_radm4(ulong x);$/;"	p	file:	signature:(ulong x)
bin_to_radm4	src/bits/radix-m4.h	/^static inline ulong bin_to_radm4(ulong x)$/;"	f	signature:(ulong x)
bin_to_sl_gray	doc/bits-doc.txt	/^static inline ulong bin_to_sl_gray(ulong k, ulong ldn);$/;"	p	file:	signature:(ulong k, ulong ldn)
bin_to_sl_gray	src/bits/bin-to-sl-gray.h	/^static inline ulong bin_to_sl_gray(ulong k, ulong ldn)$/;"	f	signature:(ulong k, ulong ldn)
binary_debruijn	src/comb/attic/binarydebruijn.h	/^    binary_debruijn(ulong n)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n)
binary_debruijn	src/comb/attic/binarydebruijn.h	/^class binary_debruijn$/;"	c
binary_debruijn	src/comb/binary-debruijn.h	/^    explicit binary_debruijn(ulong n)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n)
binary_debruijn	src/comb/binary-debruijn.h	/^class binary_debruijn : public binary_necklace$/;"	c	inherits:binary_necklace
binary_debruijn::binary_debruijn	src/comb/attic/binarydebruijn.h	/^    binary_debruijn(ulong n)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n)
binary_debruijn::binary_debruijn	src/comb/binary-debruijn.h	/^    explicit binary_debruijn(ulong n)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n)
binary_debruijn::ct1	src/comb/attic/binarydebruijn.h	/^    ulong ct1, ct2;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::ct2	src/comb/attic/binarydebruijn.h	/^    ulong ct1, ct2;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::first_digit	src/comb/binary-debruijn.h	/^    ulong first_digit()$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::first_string	src/comb/binary-debruijn.h	/^    ulong first_string()$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::func	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::func(ulong n)$/;"	f	class:binary_debruijn	signature:(ulong n)
binary_debruijn::func	src/comb/attic/binarydebruijn.h	/^    ulong func(ulong n);$/;"	p	class:binary_debruijn	access:public	signature:(ulong n)
binary_debruijn::func1	src/comb/attic/binarydebruijn.h	/^    ulong func1()  \/\/ output 01010101...$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::func2	src/comb/attic/binarydebruijn.h	/^    ulong func2()  \/\/ output 001100110011...$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::i_	src/comb/binary-debruijn.h	/^    ulong i_;   \/\/ position of current digit in current string$/;"	m	class:binary_debruijn	access:public
binary_debruijn::init	src/comb/attic/binarydebruijn.h	/^    void init(ulong n=0)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n=0)
binary_debruijn::make_seq	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::make_seq(ulong *z, ulong ndb\/*=0*\/)$/;"	f	class:binary_debruijn	signature:(ulong *z, ulong ndb )
binary_debruijn::make_seq	src/comb/attic/binarydebruijn.h	/^    void make_seq(ulong *z, ulong ndb=0);$/;"	p	class:binary_debruijn	access:public	signature:(ulong *z, ulong ndb=0)
binary_debruijn::n_	src/comb/attic/binarydebruijn.h	/^    ulong n_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::ndb_	src/comb/attic/binarydebruijn.h	/^    ulong ndb_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::ndbac_	src/comb/attic/binarydebruijn.h	/^    ulong ndbac_;  \/\/ to avoid cyclic search$/;"	m	class:binary_debruijn	access:public
binary_debruijn::next	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::next()$/;"	f	class:binary_debruijn	signature:()
binary_debruijn::next	src/comb/attic/binarydebruijn.h	/^    ulong next();$/;"	p	class:binary_debruijn	access:public	signature:()
binary_debruijn::next_digit	src/comb/binary-debruijn.h	/^    ulong next_digit()$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::next_string	src/comb/binary-debruijn.h	/^    ulong next_string()  \/\/ make new string, return length$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::nmax_	src/comb/attic/binarydebruijn.h	/^    const ulong nmax_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::nn	src/comb/attic/binarydebruijn.h	/^    ulong nn;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::t_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::tt	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::word_	src/comb/attic/binarydebruijn.h	/^    ulong word_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::x_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::xx	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::y_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
binary_debruijn::yy	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
binary_debruijn::~binary_debruijn	src/comb/attic/binarydebruijn.h	/^    ~binary_debruijn()$/;"	f	class:binary_debruijn	access:public	signature:()
binary_debruijn::~binary_debruijn	src/comb/binary-debruijn.h	/^    ~binary_debruijn()  { ; }$/;"	f	class:binary_debruijn	access:public	signature:()
binary_huffman	src/comb/binary-huffman.h	/^    binary_huffman(const binary_huffman&);  \/\/ forbidden$/;"	p	class:binary_huffman	access:private	signature:(const binary_huffman&)
binary_huffman	src/comb/binary-huffman.h	/^    explicit binary_huffman(ulong n)$/;"	f	class:binary_huffman	access:public	signature:(ulong n)
binary_huffman	src/comb/binary-huffman.h	/^class binary_huffman$/;"	c
binary_huffman::OK	src/comb/binary-huffman.h	/^    bool OK()  const$/;"	f	class:binary_huffman	access:public	signature:() const
binary_huffman::a_	src/comb/binary-huffman.h	/^    ulong *a_;  \/\/ partition:$/;"	m	class:binary_huffman	access:public
binary_huffman::binary_huffman	src/comb/binary-huffman.h	/^    binary_huffman(const binary_huffman&);  \/\/ forbidden$/;"	p	class:binary_huffman	access:private	signature:(const binary_huffman&)
binary_huffman::binary_huffman	src/comb/binary-huffman.h	/^    explicit binary_huffman(ulong n)$/;"	f	class:binary_huffman	access:public	signature:(ulong n)
binary_huffman::data	src/comb/binary-huffman.h	/^    const ulong * data()  const  { return  a_; }$/;"	f	class:binary_huffman	access:public	signature:() const
binary_huffman::first	src/comb/binary-huffman.h	/^    void first()$/;"	f	class:binary_huffman	access:public	signature:()
binary_huffman::m_	src/comb/binary-huffman.h	/^    ulong m_;   \/\/ last nonzero position (m==0 for n==0)$/;"	m	class:binary_huffman	access:public
binary_huffman::n_	src/comb/binary-huffman.h	/^    ulong n_;   \/\/ partitions into n parts$/;"	m	class:binary_huffman	access:public
binary_huffman::next	src/comb/binary-huffman.h	/^    ulong next()$/;"	f	class:binary_huffman	access:public	signature:()
binary_huffman::operator =	src/comb/binary-huffman.h	/^    binary_huffman & operator = (const binary_huffman&);  \/\/ forbidden$/;"	p	class:binary_huffman	access:private	signature:(const binary_huffman&)
binary_huffman::print	src/comb/binary-huffman.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:binary_huffman	access:public	signature:(const char *bla, bool dfz=false) const
binary_huffman::print_unit_sum	src/comb/binary-huffman.cc	/^binary_huffman::print_unit_sum(const char *bla)  const$/;"	f	class:binary_huffman	signature:(const char *bla) const
binary_huffman::print_unit_sum	src/comb/binary-huffman.h	/^    void print_unit_sum(const char *bla)  const;$/;"	p	class:binary_huffman	access:public	signature:(const char *bla) const
binary_huffman::write_tail	src/comb/binary-huffman.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:binary_huffman	access:private	signature:(ulong s, ulong j)
binary_huffman::~binary_huffman	src/comb/binary-huffman.h	/^    ~binary_huffman()$/;"	f	class:binary_huffman	access:public	signature:()
binary_necklace	src/comb/binary-necklace.h	/^    binary_necklace(const binary_necklace&);  \/\/ forbidden$/;"	p	class:binary_necklace	access:private	signature:(const binary_necklace&)
binary_necklace	src/comb/binary-necklace.h	/^    explicit binary_necklace(ulong n)$/;"	f	class:binary_necklace	access:public	signature:(ulong n)
binary_necklace	src/comb/binary-necklace.h	/^class binary_necklace$/;"	c
binary_necklace::a_	src/comb/binary-necklace.h	/^    ulong *a_;  \/\/ the string, NOTE: one-based$/;"	m	class:binary_necklace	access:public
binary_necklace::binary_necklace	src/comb/binary-necklace.h	/^    binary_necklace(const binary_necklace&);  \/\/ forbidden$/;"	p	class:binary_necklace	access:private	signature:(const binary_necklace&)
binary_necklace::binary_necklace	src/comb/binary-necklace.h	/^    explicit binary_necklace(ulong n)$/;"	f	class:binary_necklace	access:public	signature:(ulong n)
binary_necklace::data	src/comb/binary-necklace.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:binary_necklace	access:public	signature:() const
binary_necklace::dv_	src/comb/binary-necklace.h	/^    ulong *dv_;  \/\/ delta sequence of divisors of n$/;"	m	class:binary_necklace	access:public
binary_necklace::first	src/comb/binary-necklace.h	/^    void first()$/;"	f	class:binary_necklace	access:public	signature:()
binary_necklace::is_lyn	src/comb/binary-necklace.h	/^    bool is_lyn()  const$/;"	f	class:binary_necklace	access:public	signature:() const
binary_necklace::is_necklace	src/comb/binary-necklace.h	/^    bool is_necklace()  const$/;"	f	class:binary_necklace	access:public	signature:() const
binary_necklace::j_	src/comb/binary-necklace.h	/^    ulong j_;  \/\/ period of the word (if necklaces)$/;"	m	class:binary_necklace	access:public
binary_necklace::n_	src/comb/binary-necklace.h	/^    ulong n_;  \/\/ length of strings$/;"	m	class:binary_necklace	access:public
binary_necklace::next	src/comb/binary-necklace.h	/^    ulong next()  \/\/ next necklace$/;"	f	class:binary_necklace	access:public	signature:()
binary_necklace::next_lyn	src/comb/binary-necklace.h	/^    ulong next_lyn()  \/\/ next Lyndon word$/;"	f	class:binary_necklace	access:public	signature:()
binary_necklace::next_pre	src/comb/binary-necklace.h	/^    ulong next_pre()  \/\/ next pre-necklace$/;"	f	class:binary_necklace	access:public	signature:()
binary_necklace::operator =	src/comb/binary-necklace.h	/^    binary_necklace & operator = (const binary_necklace&);  \/\/ forbidden$/;"	p	class:binary_necklace	access:private	signature:(const binary_necklace&)
binary_necklace::~binary_necklace	src/comb/binary-necklace.h	/^    ~binary_necklace()$/;"	f	class:binary_necklace	access:public	signature:()
binary_sgcd	doc/aux0-doc.txt	/^Type binary_sgcd(Type a, Type b);$/;"	p	file:	signature:(Type a, Type b)
binary_sgcd	src/aux0/attic/gcd.cc	/^binary_sgcd(long a, long b)$/;"	f	signature:(long a, long b)
binary_sgcd	src/aux0/gcd.h	/^Type binary_sgcd(Type a, Type b)$/;"	f	signature:(Type a, Type b)
binary_sgcd	src/mod/attic/gcd.cc	/^binary_sgcd(smod_t a, smod_t b)$/;"	f	signature:(smod_t a, smod_t b)
binary_sl_gray	src/comb/binary-sl-gray.h	/^    binary_sl_gray(const binary_sl_gray&);  \/\/ forbidden$/;"	p	class:binary_sl_gray	access:private	signature:(const binary_sl_gray&)
binary_sl_gray	src/comb/binary-sl-gray.h	/^    explicit binary_sl_gray(ulong n)$/;"	f	class:binary_sl_gray	access:public	signature:(ulong n)
binary_sl_gray	src/comb/binary-sl-gray.h	/^class binary_sl_gray$/;"	c
binary_sl_gray::a_	src/comb/binary-sl-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::binary_sl_gray	src/comb/binary-sl-gray.h	/^    binary_sl_gray(const binary_sl_gray&);  \/\/ forbidden$/;"	p	class:binary_sl_gray	access:private	signature:(const binary_sl_gray&)
binary_sl_gray::binary_sl_gray	src/comb/binary-sl-gray.h	/^    explicit binary_sl_gray(ulong n)$/;"	f	class:binary_sl_gray	access:public	signature:(ulong n)
binary_sl_gray::data	src/comb/binary-sl-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:binary_sl_gray	access:public	signature:() const
binary_sl_gray::dir	src/comb/binary-sl-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:binary_sl_gray	access:public	signature:() const
binary_sl_gray::dm_	src/comb/binary-sl-gray.h	/^    int dm_;    \/\/ direction of last change; returned by dir()$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::dt_	src/comb/binary-sl-gray.h	/^    ulong dt_;  \/\/ aux: direction in which track tries to move$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::first	src/comb/binary-sl-gray.h	/^    void first()$/;"	f	class:binary_sl_gray	access:public	signature:()
binary_sl_gray::j_	src/comb/binary-sl-gray.h	/^    ulong j_;   \/\/ position of last change; returned by pos()$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::last	src/comb/binary-sl-gray.h	/^    void last()$/;"	f	class:binary_sl_gray	access:public	signature:()
binary_sl_gray::n_	src/comb/binary-sl-gray.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::next	src/comb/binary-sl-gray.h	/^    bool next()$/;"	f	class:binary_sl_gray	access:public	signature:()
binary_sl_gray::operator =	src/comb/binary-sl-gray.h	/^    binary_sl_gray & operator = (const binary_sl_gray&);  \/\/ forbidden$/;"	p	class:binary_sl_gray	access:private	signature:(const binary_sl_gray&)
binary_sl_gray::pos	src/comb/binary-sl-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:binary_sl_gray	access:public	signature:() const
binary_sl_gray::prev	src/comb/binary-sl-gray.h	/^    bool prev()$/;"	f	class:binary_sl_gray	access:public	signature:()
binary_sl_gray::print	src/comb/binary-sl-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:binary_sl_gray	access:public	signature:(const char *bla, bool dfz=false) const
binary_sl_gray::rank	src/comb/binary-sl-gray.h	/^    ulong rank()  const$/;"	f	class:binary_sl_gray	access:public	signature:() const
binary_sl_gray::tr_	src/comb/binary-sl-gray.h	/^    ulong tr_;  \/\/ aux: current track (0 <= tr <= n)$/;"	m	class:binary_sl_gray	access:public
binary_sl_gray::unrank	src/comb/binary-sl-gray.h	/^    void unrank(ulong r)$/;"	f	class:binary_sl_gray	access:public	signature:(ulong r)
binary_sl_gray::~binary_sl_gray	src/comb/binary-sl-gray.h	/^    ~binary_sl_gray()$/;"	f	class:binary_sl_gray	access:public	signature:()
binary_ugcd	doc/aux0-doc.txt	/^Type binary_ugcd(Type a, Type b);$/;"	p	file:	signature:(Type a, Type b)
binary_ugcd	src/aux0/attic/gcd.cc	/^binary_ugcd(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
binary_ugcd	src/aux0/gcd.h	/^Type binary_ugcd(Type a, Type b)$/;"	f	signature:(Type a, Type b)
binary_ugcd	src/mod/attic/gcd.cc	/^binary_ugcd(umod_t a, umod_t b)$/;"	f	signature:(umod_t a, umod_t b)
binomial	doc/aux0-doc.txt	/^inline ulong binomial(ulong n, ulong k);$/;"	p	file:	signature:(ulong n, ulong k)
binomial	src/aux0/attic/binomial.cc	/^binomial(ulong n, ulong k)$/;"	f	signature:(ulong n, ulong k)
binomial	src/aux0/binomial.h	/^inline ulong binomial(ulong n, ulong k)$/;"	f	signature:(ulong n, ulong k)
bit2comb	src/bits/attic/bit2composition.h	/^static inline void bit2comb(ulong w, ulong *x\/*, ulong n*\/)$/;"	f	signature:(ulong w, ulong *x )
bit2composition	src/bits/attic/bit2composition.h	/^static inline void bit2composition(ulong w, ulong *x, ulong n)$/;"	f	signature:(ulong w, ulong *x, ulong n)
bit_block	doc/bits-doc.txt	/^static inline ulong bit_block(ulong p, ulong n);$/;"	p	file:	signature:(ulong p, ulong n)
bit_block	src/bits/bitblock.h	/^static inline ulong bit_block(ulong p, ulong n)$/;"	f	signature:(ulong p, ulong n)
bit_block_count	doc/bits-doc.txt	/^static inline ulong bit_block_count(ulong x);$/;"	p	file:	signature:(ulong x)
bit_block_count	src/bits/bitcount.h	/^static inline ulong bit_block_count(ulong x)$/;"	f	signature:(ulong x)
bit_block_ge2_count	doc/bits-doc.txt	/^static inline ulong bit_block_ge2_count(ulong x);$/;"	p	file:	signature:(ulong x)
bit_block_ge2_count	src/bits/bitcount.h	/^static inline ulong bit_block_ge2_count(ulong x)$/;"	f	signature:(ulong x)
bit_comb_shifts	src/bits/bitcombshifts.h	/^    explicit bit_comb_shifts(ulong n, ulong k)$/;"	f	class:bit_comb_shifts	access:public	signature:(ulong n, ulong k)
bit_comb_shifts	src/bits/bitcombshifts.h	/^class bit_comb_shifts$/;"	c
bit_comb_shifts::bit_comb_shifts	src/bits/bitcombshifts.h	/^    explicit bit_comb_shifts(ulong n, ulong k)$/;"	f	class:bit_comb_shifts	access:public	signature:(ulong n, ulong k)
bit_comb_shifts::first	src/bits/bitcombshifts.h	/^    ulong first()  { return first(n_, k_); }$/;"	f	class:bit_comb_shifts	access:public	signature:()
bit_comb_shifts::first	src/bits/bitcombshifts.h	/^    ulong first(ulong n, ulong k)$/;"	f	class:bit_comb_shifts	access:public	signature:(ulong n, ulong k)
bit_comb_shifts::k_	src/bits/bitcombshifts.h	/^    ulong n_, k_;  \/\/ combinations (n choose k)$/;"	m	class:bit_comb_shifts	access:public
bit_comb_shifts::last_	src/bits/bitcombshifts.h	/^    ulong last_;   \/\/ last combination$/;"	m	class:bit_comb_shifts	access:public
bit_comb_shifts::n_	src/bits/bitcombshifts.h	/^    ulong n_, k_;  \/\/ combinations (n choose k)$/;"	m	class:bit_comb_shifts	access:public
bit_comb_shifts::next	src/bits/bitcombshifts.h	/^    ulong next()$/;"	f	class:bit_comb_shifts	access:public	signature:()
bit_comb_shifts::s_	src/bits/bitcombshifts.h	/^    ulong s_;  \/\/ how far shifted to the right$/;"	m	class:bit_comb_shifts	access:public
bit_comb_shifts::x_	src/bits/bitcombshifts.h	/^    ulong x_;  \/\/ the combination$/;"	m	class:bit_comb_shifts	access:public
bit_comb_shifts::~bit_comb_shifts	src/bits/bitcombshifts.h	/^    ~bit_comb_shifts()  { ; }$/;"	f	class:bit_comb_shifts	access:public	signature:()
bit_copy_periodic	doc/bits-doc.txt	/^static inline ulong bit_copy_periodic(ulong a, ulong p);$/;"	p	file:	signature:(ulong a, ulong p)
bit_copy_periodic	doc/bits-doc.txt	/^static inline ulong bit_copy_periodic(ulong a, ulong p, ulong ldn);$/;"	p	file:	signature:(ulong a, ulong p, ulong ldn)
bit_copy_periodic	src/bits/bitperiodic.h	/^static inline ulong bit_copy_periodic(ulong a, ulong p)$/;"	f	signature:(ulong a, ulong p)
bit_copy_periodic	src/bits/bitperiodic.h	/^static inline ulong bit_copy_periodic(ulong a, ulong p, ulong ldn)$/;"	f	signature:(ulong a, ulong p, ulong ldn)
bit_count	doc/bits-doc.txt	/^static inline ulong bit_count(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count	src/bits/bitcount.h	/^static inline ulong bit_count(ulong x)$/;"	f	signature:(ulong x)
bit_count_01	doc/bits-doc.txt	/^static inline ulong bit_count_01(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count_01	src/bits/bitcount.h	/^static inline ulong bit_count_01(ulong x)$/;"	f	signature:(ulong x)
bit_count_15	doc/bits-doc.txt	/^static inline ulong bit_count_15(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count_15	src/bits/bitcount.h	/^static inline ulong bit_count_15(ulong x)$/;"	f	signature:(ulong x)
bit_count_3	doc/bits-doc.txt	/^static inline ulong bit_count_3(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count_3	src/bits/bitcount.h	/^static inline ulong bit_count_3(ulong x)$/;"	f	signature:(ulong x)
bit_count_cmp	doc/bits-doc.txt	/^static inline int bit_count_cmp(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
bit_count_cmp	src/bits/bitcount.h	/^static inline int bit_count_cmp(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
bit_count_dense	doc/bits-doc.txt	/^static inline ulong bit_count_dense(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count_dense	src/bits/bitcount.h	/^static inline ulong bit_count_dense(ulong x)$/;"	f	signature:(ulong x)
bit_count_leq31	demo/bits/bitcount-v-demo.cc	/^bit_count_leq31(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
bit_count_sparse	doc/bits-doc.txt	/^static inline ulong bit_count_sparse(ulong x);$/;"	p	file:	signature:(ulong x)
bit_count_sparse	src/bits/bitcount.h	/^static inline ulong bit_count_sparse(ulong x)$/;"	f	signature:(ulong x)
bit_count_v	doc/bits-doc.txt	/^ulong bit_count_v(const ulong *x, ulong n);$/;"	p	file:	signature:(const ulong *x, ulong n)
bit_count_v	src/bits/bitcount-v.cc	/^bit_count_v(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
bit_count_v	src/bits/bitcount.h	/^ulong bit_count_v(const ulong *x, ulong n);$/;"	p	signature:(const ulong *x, ulong n)
bit_count_v15	src/bits/bitcount-v.cc	/^static inline ulong bit_count_v15(const ulong *x)$/;"	f	file:	signature:(const ulong *x)
bit_count_v2	demo/bits/bitcount-v-demo.cc	/^bit_count_v2(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
bit_count_weight	doc/walsh-doc.txt	/^void bit_count_weight(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
bit_count_weight	src/walsh/bitcount-weight.h	/^void bit_count_weight(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
bit_cyclic_dist	doc/bits-doc.txt	/^static inline ulong bit_cyclic_dist(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
bit_cyclic_dist	doc/bits-doc.txt	/^static inline ulong bit_cyclic_dist(ulong a, ulong b, ulong n);$/;"	p	file:	signature:(ulong a, ulong b, ulong n)
bit_cyclic_dist	src/bits/bitcyclic-dist.h	/^static inline ulong bit_cyclic_dist(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
bit_cyclic_dist	src/bits/bitcyclic-dist.h	/^static inline ulong bit_cyclic_dist(ulong a, ulong b, ulong n)$/;"	f	signature:(ulong a, ulong b, ulong n)
bit_cyclic_dist1_match	doc/bits-doc.txt	/^static inline ulong bit_cyclic_dist1_match(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
bit_cyclic_dist1_match	doc/bits-doc.txt	/^static inline ulong bit_cyclic_dist1_match(ulong x, ulong y, ulong n);$/;"	p	file:	signature:(ulong x, ulong y, ulong n)
bit_cyclic_dist1_match	src/bits/bitcyclic-match.h	/^static inline ulong bit_cyclic_dist1_match(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
bit_cyclic_dist1_match	src/bits/bitcyclic-match.h	/^static inline ulong bit_cyclic_dist1_match(ulong x, ulong y, ulong n)$/;"	f	signature:(ulong x, ulong y, ulong n)
bit_cyclic_inv_lxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_inv_lxor(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_inv_lxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_inv_lxor(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_inv_rxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_inv_rxor(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_inv_rxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_inv_rxor(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_lxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_lxor(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_lxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_lxor(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
bit_cyclic_lxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_lxor(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_lxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_lxor(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
bit_cyclic_match	doc/bits-doc.txt	/^static inline ulong bit_cyclic_match(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
bit_cyclic_match	doc/bits-doc.txt	/^static inline ulong bit_cyclic_match(ulong x, ulong y, ulong n);$/;"	p	file:	signature:(ulong x, ulong y, ulong n)
bit_cyclic_match	src/bits/bitcyclic-match.h	/^static inline ulong bit_cyclic_match(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
bit_cyclic_match	src/bits/bitcyclic-match.h	/^static inline ulong bit_cyclic_match(ulong x, ulong y, ulong n)$/;"	f	signature:(ulong x, ulong y, ulong n)
bit_cyclic_max	doc/bits-doc.txt	/^static inline ulong bit_cyclic_max(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_max	doc/bits-doc.txt	/^static inline ulong bit_cyclic_max(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
bit_cyclic_max	src/bits/bitcyclic-minmax.h	/^static inline ulong bit_cyclic_max(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_max	src/bits/bitcyclic-minmax.h	/^static inline ulong bit_cyclic_max(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
bit_cyclic_min	doc/bits-doc.txt	/^static inline ulong bit_cyclic_min(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_min	doc/bits-doc.txt	/^static inline ulong bit_cyclic_min(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
bit_cyclic_min	src/bits/bitcyclic-minmax.h	/^static inline ulong bit_cyclic_min(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_min	src/bits/bitcyclic-minmax.h	/^static inline ulong bit_cyclic_min(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
bit_cyclic_period	doc/bits-doc.txt	/^static inline ulong bit_cyclic_period(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_period	doc/bits-doc.txt	/^static inline ulong bit_cyclic_period(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
bit_cyclic_period	src/bits/bitcyclic-period.h	/^static inline ulong bit_cyclic_period(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_period	src/bits/bitcyclic-period.h	/^static inline ulong bit_cyclic_period(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
bit_cyclic_rxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_rxor(ulong x);$/;"	p	file:	signature:(ulong x)
bit_cyclic_rxor	doc/bits-doc.txt	/^static inline ulong bit_cyclic_rxor(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
bit_cyclic_rxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_rxor(ulong x)$/;"	f	signature:(ulong x)
bit_cyclic_rxor	src/bits/bitcyclic-xor.h	/^static inline ulong bit_cyclic_rxor(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
bit_dragon3_turn	doc/bits-doc.txt	/^static inline bool bit_dragon3_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon3_turn	src/bits/bit-dragon3.h	/^static inline bool bit_dragon3_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r13_turn	doc/bits-doc.txt	/^static inline bool bit_dragon_r13_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r13_turn	src/bits/bit-dragon-r13.h	/^static inline bool bit_dragon_r13_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r4_turn	doc/bits-doc.txt	/^static inline int bit_dragon_r4_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r4_turn	src/bits/bit-dragon-r4.h	/^static inline int bit_dragon_r4_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r5_turn	doc/bits-doc.txt	/^static inline bool bit_dragon_r5_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r5_turn	src/bits/bit-dragon-r5.h	/^static inline bool bit_dragon_r5_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r7_2_turn	doc/bits-doc.txt	/^static inline int bit_dragon_r7_2_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r7_2_turn	src/bits/bit-dragon-r7.h	/^static inline int bit_dragon_r7_2_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r7_turn	doc/bits-doc.txt	/^static inline bool bit_dragon_r7_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r7_turn	src/bits/bit-dragon-r7.h	/^static inline bool bit_dragon_r7_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_r9_turn	doc/bits-doc.txt	/^static inline bool bit_dragon_r9_turn(ulong &x);$/;"	p	file:	signature:(ulong &x)
bit_dragon_r9_turn	src/bits/bit-dragon-r9.h	/^static inline bool bit_dragon_r9_turn(ulong &x)$/;"	f	signature:(ulong &x)
bit_dragon_rot	doc/bits-doc.txt	/^static inline ulong bit_dragon_rot(ulong k);$/;"	p	file:	signature:(ulong k)
bit_dragon_rot	src/bits/bit-paper-fold.h	/^static inline ulong bit_dragon_rot(ulong k)$/;"	f	signature:(ulong k)
bit_fibgray	src/bits/bitfibgray.h	/^    explicit bit_fibgray(ulong n)$/;"	f	class:bit_fibgray	access:public	signature:(ulong n)
bit_fibgray	src/bits/bitfibgray.h	/^class bit_fibgray$/;"	c
bit_fibgray::bit_fibgray	src/bits/bitfibgray.h	/^    explicit bit_fibgray(ulong n)$/;"	f	class:bit_fibgray	access:public	signature:(ulong n)
bit_fibgray::data	src/bits/bitfibgray.h	/^    ulong data()  const  { return x_; }$/;"	f	class:bit_fibgray	access:public	signature:() const
bit_fibgray::fw_	src/bits/bitfibgray.h	/^    ulong fw_, lw_;  \/\/ first and last Fibonacci word in Gray code$/;"	m	class:bit_fibgray	access:public
bit_fibgray::k_	src/bits/bitfibgray.h	/^    ulong k_;  \/\/ aux$/;"	m	class:bit_fibgray	access:public
bit_fibgray::lw_	src/bits/bitfibgray.h	/^    ulong fw_, lw_;  \/\/ first and last Fibonacci word in Gray code$/;"	m	class:bit_fibgray	access:public
bit_fibgray::mw_	src/bits/bitfibgray.h	/^    ulong mw_;  \/\/ max(fw_, lw_)$/;"	m	class:bit_fibgray	access:public
bit_fibgray::n_	src/bits/bitfibgray.h	/^    ulong n_;   \/\/ Number of bits$/;"	m	class:bit_fibgray	access:public
bit_fibgray::next	src/bits/bitfibgray.h	/^    ulong next()$/;"	f	class:bit_fibgray	access:public	signature:()
bit_fibgray::x_	src/bits/bitfibgray.h	/^    ulong x_;  \/\/ current Fibonacci word$/;"	m	class:bit_fibgray	access:public
bit_fibgray::~bit_fibgray	src/bits/bitfibgray.h	/^    ~bit_fibgray()  { ; }$/;"	f	class:bit_fibgray	access:public	signature:()
bit_gather	doc/bits-doc.txt	/^static inline ulong bit_gather(ulong w, ulong m);$/;"	p	file:	signature:(ulong w, ulong m)
bit_gather	src/bits/bitgather.h	/^static inline ulong bit_gather(ulong w, ulong m)$/;"	f	signature:(ulong w, ulong m)
bit_gray_permute	doc/bits-doc.txt	/^static inline ulong bit_gray_permute(ulong x);$/;"	p	file:	signature:(ulong x)
bit_gray_permute	src/bits/bitgraypermute.h	/^static inline ulong bit_gray_permute(ulong x)$/;"	f	signature:(ulong x)
bit_in	src/bits/crc32.h	/^    uint bit_in(uchar b)$/;"	f	class:crc32	access:public	signature:(uchar b)
bit_in	src/bits/crc64.h	/^    uint64 bit_in(uchar b)$/;"	f	class:crc64	access:public	signature:(uchar b)
bit_in	src/bits/tcrc64.h	/^    void bit_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
bit_inverse_gray_permute	doc/bits-doc.txt	/^static inline ulong bit_inverse_gray_permute(ulong x);$/;"	p	file:	signature:(ulong x)
bit_inverse_gray_permute	src/bits/bitgraypermute.h	/^static inline ulong bit_inverse_gray_permute(ulong x)$/;"	f	signature:(ulong x)
bit_inverse_mrotate	src/bits/attic/bitmrotate.h	/^static inline ulong bit_inverse_mrotate(const ulong f, ulong r, ulong n=BITS_PER_LONG)$/;"	f	signature:(const ulong f, ulong r, ulong n=BITS_PER_LONG)
bit_mrotate	src/bits/attic/bitmrotate.h	/^static inline ulong bit_mrotate(const ulong f, ulong r, ulong n=BITS_PER_LONG)$/;"	f	signature:(const ulong f, ulong r, ulong n=BITS_PER_LONG)
bit_necklace	src/bits/bit-necklace.h	/^    explicit bit_necklace(ulong n)  { init(n); }$/;"	f	class:bit_necklace	access:public	signature:(ulong n)
bit_necklace	src/bits/bit-necklace.h	/^class bit_necklace$/;"	c
bit_necklace::a_	src/bits/bit-necklace.h	/^    ulong a_;   \/\/ necklace$/;"	m	class:bit_necklace	access:public
bit_necklace::bit_necklace	src/bits/bit-necklace.h	/^    explicit bit_necklace(ulong n)  { init(n); }$/;"	f	class:bit_necklace	access:public	signature:(ulong n)
bit_necklace::data	src/bits/bit-necklace.h	/^    ulong data() const { return  a_; }$/;"	f	class:bit_necklace	access:public	signature:() const
bit_necklace::first	src/bits/bit-necklace.h	/^    void first()$/;"	f	class:bit_necklace	access:public	signature:()
bit_necklace::init	src/bits/bit-necklace.h	/^    void init(ulong n)$/;"	f	class:bit_necklace	access:public	signature:(ulong n)
bit_necklace::is_lyndon_word	src/bits/bit-necklace.h	/^    ulong is_lyndon_word()  const  { return (j2_ & n2_); }$/;"	f	class:bit_necklace	access:public	signature:() const
bit_necklace::j2_	src/bits/bit-necklace.h	/^    ulong j2_;  \/\/ bit representing j: j2==2**(j-1)$/;"	m	class:bit_necklace	access:public
bit_necklace::j_	src/bits/bit-necklace.h	/^    ulong j_;   \/\/ period of the necklace$/;"	m	class:bit_necklace	access:public
bit_necklace::mm_	src/bits/bit-necklace.h	/^    ulong mm_;  \/\/ mask of n ones$/;"	m	class:bit_necklace	access:public
bit_necklace::n2_	src/bits/bit-necklace.h	/^    ulong n2_;  \/\/ bit representing n: n2==2**(n-1)$/;"	m	class:bit_necklace	access:public
bit_necklace::n_	src/bits/bit-necklace.h	/^    ulong n_;   \/\/ number of bits in words$/;"	m	class:bit_necklace	access:public
bit_necklace::next	src/bits/bit-necklace.h	/^    ulong next()$/;"	f	class:bit_necklace	access:public	signature:()
bit_necklace::next_lyn	src/bits/bit-necklace.h	/^    ulong next_lyn()$/;"	f	class:bit_necklace	access:public	signature:()
bit_necklace::period	src/bits/bit-necklace.h	/^    ulong period() const { return j_; }$/;"	f	class:bit_necklace	access:public	signature:() const
bit_necklace::tfb_	src/bits/bit-necklace.h	/^    ulong tfb_;  \/\/ for fast factor lookup$/;"	m	class:bit_necklace	access:public
bit_necklace::~bit_necklace	src/bits/bit-necklace.h	/^    ~bit_necklace()  { ; }$/;"	f	class:bit_necklace	access:public	signature:()
bit_paper_fold	doc/bits-doc.txt	/^static inline bool bit_paper_fold(ulong k);$/;"	p	file:	signature:(ulong k)
bit_paper_fold	src/bits/bit-paper-fold.h	/^static inline bool bit_paper_fold(ulong k)$/;"	f	signature:(ulong k)
bit_paper_fold_alt	doc/bits-doc.txt	/^static inline bool bit_paper_fold_alt(ulong k);$/;"	p	file:	signature:(ulong k)
bit_paper_fold_alt	src/bits/bit-paper-fold.h	/^static inline bool bit_paper_fold_alt(ulong k)$/;"	f	signature:(ulong k)
bit_paper_fold_alt_rot	doc/bits-doc.txt	/^static inline ulong bit_paper_fold_alt_rot(ulong k);$/;"	p	file:	signature:(ulong k)
bit_paper_fold_alt_rot	src/bits/bit-paper-fold.h	/^static inline ulong bit_paper_fold_alt_rot(ulong k)$/;"	f	signature:(ulong k)
bit_paper_fold_general	doc/bits-doc.txt	/^static inline bool bit_paper_fold_general(ulong k, ulong w);$/;"	p	file:	signature:(ulong k, ulong w)
bit_paper_fold_general	src/bits/bit-paper-fold.h	/^static inline bool bit_paper_fold_general(ulong k, ulong w)$/;"	f	signature:(ulong k, ulong w)
bit_paper_fold_general_rot	doc/bits-doc.txt	/^static inline ulong bit_paper_fold_general_rot(ulong k, ulong w);$/;"	p	file:	signature:(ulong k, ulong w)
bit_paper_fold_general_rot	src/bits/bit-paper-fold.h	/^static inline ulong bit_paper_fold_general_rot(ulong k, ulong w)$/;"	f	signature:(ulong k, ulong w)
bit_perimeter	demo/seq/A182372-demo.cc	/^static inline ulong bit_perimeter(ulong x)$/;"	f	file:	signature:(ulong x)
bit_reed_muller	doc/walsh-doc.txt	/^inline void bit_reed_muller(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
bit_reed_muller	src/walsh/reedmuller.h	/^inline void bit_reed_muller(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
bit_rll2	src/bits/bit-rll2.h	/^    bit_rll2()  { first(); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2	src/bits/bit-rll2.h	/^class bit_rll2$/;"	c
bit_rll2::bit_rll2	src/bits/bit-rll2.h	/^    bit_rll2()  { first(); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::data	src/bits/bit-rll2.h	/^    ulong data()  const$/;"	f	class:bit_rll2	access:public	signature:() const
bit_rll2::fib	src/bits/bit-rll2.h	/^    ulong fib()  const$/;"	f	class:bit_rll2	access:public	signature:() const
bit_rll2::first	src/bits/bit-rll2.h	/^    void first()$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::last	src/bits/bit-rll2.h	/^    void last()$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::middle	src/bits/bit-rll2.h	/^    void middle()$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::next	src/bits/bit-rll2.h	/^    ulong next()  { return step( w_ ); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::next_fib	src/bits/bit-rll2.h	/^    ulong next_fib()  { next();  return fib(); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::prev	src/bits/bit-rll2.h	/^    ulong prev()  { return step( ~w_ ); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::prev_fib	src/bits/bit-rll2.h	/^    ulong prev_fib()  { prev();  return fib(); }$/;"	f	class:bit_rll2	access:public	signature:()
bit_rll2::step	src/bits/bit-rll2.h	/^    ulong step(ulong x)$/;"	f	class:bit_rll2	access:private	signature:(ulong x)
bit_rll2::w_	src/bits/bit-rll2.h	/^    ulong w_;  \/\/ RLL-word$/;"	m	class:bit_rll2	access:public
bit_rotate_left	doc/bits-doc.txt	/^static inline ulong bit_rotate_left(ulong x, ulong r);$/;"	p	file:	signature:(ulong x, ulong r)
bit_rotate_left	doc/bits-doc.txt	/^static inline ulong bit_rotate_left(ulong x, ulong r, ulong n);$/;"	p	file:	signature:(ulong x, ulong r, ulong n)
bit_rotate_left	src/bits/bitrotate.h	/^static inline ulong bit_rotate_left(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
bit_rotate_left	src/bits/bitrotate.h	/^static inline ulong bit_rotate_left(ulong x, ulong r, ulong n)$/;"	f	signature:(ulong x, ulong r, ulong n)
bit_rotate_right	doc/bits-doc.txt	/^static inline ulong bit_rotate_right(ulong x, ulong r);$/;"	p	file:	signature:(ulong x, ulong r)
bit_rotate_right	doc/bits-doc.txt	/^static inline ulong bit_rotate_right(ulong x, ulong r, ulong n);$/;"	p	file:	signature:(ulong x, ulong r, ulong n)
bit_rotate_right	src/bits/bitrotate.h	/^static inline ulong bit_rotate_right(ulong x, ulong r)$/;"	f	signature:(ulong x, ulong r)
bit_rotate_right	src/bits/bitrotate.h	/^static inline ulong bit_rotate_right(ulong x, ulong r, ulong n)$/;"	f	signature:(ulong x, ulong r, ulong n)
bit_rotate_sgn	doc/bits-doc.txt	/^static inline ulong bit_rotate_sgn(ulong x, long r);$/;"	p	file:	signature:(ulong x, long r)
bit_rotate_sgn	doc/bits-doc.txt	/^static inline ulong bit_rotate_sgn(ulong x, long r, ulong n);$/;"	p	file:	signature:(ulong x, long r, ulong n)
bit_rotate_sgn	src/bits/bitrotate.h	/^static inline ulong bit_rotate_sgn(ulong x, long r)$/;"	f	signature:(ulong x, long r)
bit_rotate_sgn	src/bits/bitrotate.h	/^static inline ulong bit_rotate_sgn(ulong x, long r, ulong n)$/;"	f	signature:(ulong x, long r, ulong n)
bit_scatter	doc/bits-doc.txt	/^static inline ulong bit_scatter(ulong w, ulong m);$/;"	p	file:	signature:(ulong w, ulong m)
bit_scatter	src/bits/bitgather.h	/^static inline ulong bit_scatter(ulong w, ulong m)$/;"	f	signature:(ulong w, ulong m)
bit_separate	doc/bits-doc.txt	/^static inline ulong bit_separate(ulong w, ulong m, ulong s=BITS_PER_LONG\/2);$/;"	p	file:	signature:(ulong w, ulong m, ulong s=BITS_PER_LONG/2)
bit_separate	src/bits/bitseparate.h	/^static inline ulong bit_separate(ulong w, ulong m, ulong s=BITS_PER_LONG\/2)$/;"	f	signature:(ulong w, ulong m, ulong s=BITS_PER_LONG/2)
bit_separate_subwords	doc/bits-doc.txt	/^static inline ulong bit_separate_subwords(ulong w, ulong m, ulong s);$/;"	p	file:	signature:(ulong w, ulong m, ulong s)
bit_separate_subwords	src/bits/bitseparate.h	/^static inline ulong bit_separate_subwords(ulong w, ulong m, ulong s)$/;"	f	signature:(ulong w, ulong m, ulong s)
bit_sequency	doc/bits-doc.txt	/^static inline ulong bit_sequency(ulong x);$/;"	p	file:	signature:(ulong x)
bit_sequency	src/bits/bitsequency.h	/^static inline ulong bit_sequency(ulong x)$/;"	f	signature:(ulong x)
bit_sl_gray	src/bits/bit-sl-gray.h	/^    explicit bit_sl_gray(ulong n)  { first(n); }$/;"	f	class:bit_sl_gray	access:public	signature:(ulong n)
bit_sl_gray	src/bits/bit-sl-gray.h	/^class bit_sl_gray$/;"	c
bit_sl_gray::bit_sl_gray	src/bits/bit-sl-gray.h	/^    explicit bit_sl_gray(ulong n)  { first(n); }$/;"	f	class:bit_sl_gray	access:public	signature:(ulong n)
bit_sl_gray::data	src/bits/bit-sl-gray.h	/^    ulong data()  const  { return x_; }$/;"	f	class:bit_sl_gray	access:public	signature:() const
bit_sl_gray::dt_	src/bits/bit-sl-gray.h	/^    bool dt_;   \/\/ direction track tries to move in: true== try move right$/;"	m	class:bit_sl_gray	access:public
bit_sl_gray::first	src/bits/bit-sl-gray.h	/^    void first(ulong n)$/;"	f	class:bit_sl_gray	access:public	signature:(ulong n)
bit_sl_gray::h_	src/bits/bit-sl-gray.h	/^    ulong h_;   \/\/ highest allowed track$/;"	m	class:bit_sl_gray	access:public
bit_sl_gray::next	src/bits/bit-sl-gray.h	/^    ulong next()$/;"	f	class:bit_sl_gray	access:public	signature:()
bit_sl_gray::tr_	src/bits/bit-sl-gray.h	/^    ulong tr_;  \/\/ current track (a one-bit word)$/;"	m	class:bit_sl_gray	access:public
bit_sl_gray::x_	src/bits/bit-sl-gray.h	/^    ulong x_;   \/\/ Gray code word$/;"	m	class:bit_sl_gray	access:public
bit_sl_gray::~bit_sl_gray	src/bits/bit-sl-gray.h	/^    ~bit_sl_gray()  { ; }$/;"	f	class:bit_sl_gray	access:public	signature:()
bit_string	src/comb/catalan-rgs-gray.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
bit_string	src/comb/catalan-rgs-gslex.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
bit_string	src/comb/catalan-rgs-subset-lex.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
bit_string	src/comb/catalan-rgs.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs	access:public	signature:()
bit_string	src/comb/dyck-rgs-subset-lex.h	/^    const char* bit_string()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
bit_string	src/comb/motzkin-rgs-lex.h	/^    const char* bit_string()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
bit_subset	src/bits/bitsubset.h	/^    explicit bit_subset(ulong v) : U(0), V(v)  { ; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
bit_subset	src/bits/bitsubset.h	/^class bit_subset$/;"	c
bit_subset::U	src/bits/bitsubset.h	/^    ulong U;  \/\/ current subset$/;"	m	class:bit_subset	access:protected
bit_subset::V	src/bits/bitsubset.h	/^    ulong V;  \/\/ the full set$/;"	m	class:bit_subset	access:protected
bit_subset::bit_subset	src/bits/bitsubset.h	/^    explicit bit_subset(ulong v) : U(0), V(v)  { ; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
bit_subset::complement	src/bits/bitsubset.h	/^    ulong complement()  { U ^= V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::current	src/bits/bitsubset.h	/^    ulong current()  const  { return U; }$/;"	f	class:bit_subset	access:public	signature:() const
bit_subset::first	src/bits/bitsubset.h	/^    ulong first()  { first(V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::first	src/bits/bitsubset.h	/^    ulong first(ulong v)  { V=v;  U=0;  return U; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
bit_subset::full_set	src/bits/bitsubset.h	/^    ulong full_set()  const  { return V; }$/;"	f	class:bit_subset	access:public	signature:() const
bit_subset::last	src/bits/bitsubset.h	/^    ulong last()  { last(V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::last	src/bits/bitsubset.h	/^    ulong last(ulong v)  { V=v;  U=v;  return U; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
bit_subset::negate_all_blocks	src/bits/bitsubset.h	/^    ulong negate_all_blocks()  { complement();  return next_all_blocks(); }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::next	src/bits/bitsubset.h	/^    ulong next()  { U = (U - V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::next_all_blocks	src/bits/bitsubset.h	/^    ulong next_all_blocks()  { U = (U - V + ~V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::prev	src/bits/bitsubset.h	/^    ulong prev()  { U = (U - 1) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::prev_all_blocks	src/bits/bitsubset.h	/^    ulong prev_all_blocks()  { U = (U + V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::rev_gray_code	src/bits/bitsubset.h	/^    ulong rev_gray_code()    { U ^= ( (U << 1) + ~V );  U &= V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::set	src/bits/bitsubset.h	/^    void set(ulong u)  { U = u & V; }$/;"	f	class:bit_subset	access:public	signature:(ulong u)
bit_subset::set_all_blocks_one	src/bits/bitsubset.h	/^    ulong set_all_blocks_one()  { U = (-V + ~V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::set_right_block_borders	src/bits/bitsubset.h	/^    ulong set_right_block_borders()  { U |= ( (-V + ~V) & V );  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::shift_left	src/bits/bitsubset.h	/^    ulong shift_left()  { U = ( (U << 1) + ~V ) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::shift_left_blocks	src/bits/bitsubset.h	/^    ulong shift_left_blocks()  { U = ( U << 1 ) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::shift_left_blocks_fill	src/bits/bitsubset.h	/^    ulong shift_left_blocks_fill()  { shift_left_blocks();  U |= ((-V + ~V) & V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::shift_left_fill	src/bits/bitsubset.h	/^    ulong shift_left_fill()  { shift_left();  next();  return U; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset::~bit_subset	src/bits/bitsubset.h	/^    ~bit_subset()  { ; }$/;"	f	class:bit_subset	access:public	signature:()
bit_subset_gray	src/bits/bitsubset-gray.h	/^    explicit bit_subset_gray(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
bit_subset_gray	src/bits/bitsubset-gray.h	/^class bit_subset_gray$/;"	c
bit_subset_gray::G	src/bits/bitsubset-gray.h	/^    ulong G;  \/\/ subsets in Gray code order$/;"	m	class:bit_subset_gray	access:protected
bit_subset_gray::H	src/bits/bitsubset-gray.h	/^    ulong H;  \/\/ highest bit in S.V;  needed for the prev() method$/;"	m	class:bit_subset_gray	access:protected
bit_subset_gray::S	src/bits/bitsubset-gray.h	/^    bit_subset S;$/;"	m	class:bit_subset_gray	access:protected
bit_subset_gray::bit_subset_gray	src/bits/bitsubset-gray.h	/^    explicit bit_subset_gray(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
bit_subset_gray::current	src/bits/bitsubset-gray.h	/^    ulong current()  const { return G; }$/;"	f	class:bit_subset_gray	access:public	signature:() const
bit_subset_gray::first	src/bits/bitsubset-gray.h	/^    ulong first()$/;"	f	class:bit_subset_gray	access:public	signature:()
bit_subset_gray::first	src/bits/bitsubset-gray.h	/^    ulong first(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
bit_subset_gray::full_set	src/bits/bitsubset-gray.h	/^    ulong full_set()  const { return S.full_set(); }$/;"	f	class:bit_subset_gray	access:public	signature:() const
bit_subset_gray::last	src/bits/bitsubset-gray.h	/^    ulong last()$/;"	f	class:bit_subset_gray	access:public	signature:()
bit_subset_gray::last	src/bits/bitsubset-gray.h	/^    ulong last(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
bit_subset_gray::next	src/bits/bitsubset-gray.h	/^    ulong next()$/;"	f	class:bit_subset_gray	access:public	signature:()
bit_subset_gray::prev	src/bits/bitsubset-gray.h	/^    ulong prev()$/;"	f	class:bit_subset_gray	access:public	signature:()
bit_subset_gray::~bit_subset_gray	src/bits/bitsubset-gray.h	/^    ~bit_subset_gray()  { ; }$/;"	f	class:bit_subset_gray	access:public	signature:()
bit_swap	doc/bits-doc.txt	/^static inline ulong bit_swap(ulong a, ulong k1, ulong k2);$/;"	p	file:	signature:(ulong a, ulong k1, ulong k2)
bit_swap	src/bits/bitswap.h	/^static inline ulong bit_swap(ulong a, ulong k1, ulong k2)$/;"	f	signature:(ulong a, ulong k1, ulong k2)
bit_swap_01	doc/bits-doc.txt	/^static inline ulong bit_swap_01(ulong a, ulong k1, ulong k2);$/;"	p	file:	signature:(ulong a, ulong k1, ulong k2)
bit_swap_01	src/bits/bitswap.h	/^static inline ulong bit_swap_01(ulong a, ulong k1, ulong k2)$/;"	f	signature:(ulong a, ulong k1, ulong k2)
bit_swap_01	src/comb/attic/combminchange.h	/^    void bit_swap_01(ulong n, ulong k)$/;"	f	class:comb_minchange	access:public	signature:(ulong n, ulong k)
bit_swap_1	doc/bits-doc.txt	/^static inline ulong bit_swap_1(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_1	src/bits/bitswap.h	/^static inline ulong bit_swap_1(ulong x)$/;"	f	signature:(ulong x)
bit_swap_16	doc/bits-doc.txt	/^static inline ulong bit_swap_16(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_16	src/bits/bitswap.h	/^static inline ulong bit_swap_16(ulong x)$/;"	f	signature:(ulong x)
bit_swap_2	doc/bits-doc.txt	/^static inline ulong bit_swap_2(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_2	src/bits/bitswap.h	/^static inline ulong bit_swap_2(ulong x)$/;"	f	signature:(ulong x)
bit_swap_32	doc/bits-doc.txt	/^static inline ulong bit_swap_32(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_32	src/bits/bitswap.h	/^static inline ulong bit_swap_32(ulong x)$/;"	f	signature:(ulong x)
bit_swap_4	doc/bits-doc.txt	/^static inline ulong bit_swap_4(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_4	src/bits/bitswap.h	/^static inline ulong bit_swap_4(ulong x)$/;"	f	signature:(ulong x)
bit_swap_8	doc/bits-doc.txt	/^static inline ulong bit_swap_8(ulong x);$/;"	p	file:	signature:(ulong x)
bit_swap_8	src/bits/bitswap.h	/^static inline ulong bit_swap_8(ulong x)$/;"	f	signature:(ulong x)
bit_unzip	doc/bits-doc.txt	/^static inline ulong bit_unzip(ulong x);$/;"	p	file:	signature:(ulong x)
bit_unzip	src/bits/bitzip.h	/^static inline ulong bit_unzip(ulong x)$/;"	f	signature:(ulong x)
bit_unzip0	doc/bits-doc.txt	/^static inline ulong bit_unzip0(ulong x);$/;"	p	file:	signature:(ulong x)
bit_unzip0	src/bits/bitzip.h	/^static inline ulong bit_unzip0(ulong x)$/;"	f	signature:(ulong x)
bit_unzip0_pairs	doc/bits-doc.txt	/^static inline ulong bit_unzip0_pairs(ulong x);$/;"	p	file:	signature:(ulong x)
bit_unzip0_pairs	src/bits/bitzip-pairs.h	/^static inline ulong bit_unzip0_pairs(ulong x)$/;"	f	signature:(ulong x)
bit_unzip2	doc/bits-doc.txt	/^static inline ulong bit_unzip2(ulong lo, ulong hi);$/;"	p	file:	signature:(ulong lo, ulong hi)
bit_unzip2	doc/bits-doc.txt	/^static inline void bit_unzip2(ulong t, ulong &x, ulong &y);$/;"	p	file:	signature:(ulong t, ulong &x, ulong &y)
bit_unzip2	src/bits/bitzip.h	/^static inline ulong bit_unzip2(ulong lo, ulong hi)$/;"	f	signature:(ulong lo, ulong hi)
bit_unzip2	src/bits/bitzip.h	/^static inline void bit_unzip2(ulong t, ulong &x, ulong &y)$/;"	f	signature:(ulong t, ulong &x, ulong &y)
bit_volume	demo/seq/A182372-demo.cc	/^static inline ulong bit_volume(ulong x, ulong v=0)$/;"	f	file:	signature:(ulong x, ulong v=0)
bit_volume_table	demo/seq/A182372-demo.cc	/^static inline ulong bit_volume_table(ulong x)$/;"	f	file:	signature:(ulong x)
bit_xor	src/bmat/bitmat-hessenberg.cc	/^static inline ulong bit_xor(ulong a, ulong k1, ulong k2)$/;"	f	file:	signature:(ulong a, ulong k1, ulong k2)
bit_zip	doc/bits-doc.txt	/^static inline ulong bit_zip(ulong x);$/;"	p	file:	signature:(ulong x)
bit_zip	src/bits/bitzip.h	/^static inline ulong bit_zip(ulong x)$/;"	f	signature:(ulong x)
bit_zip0	doc/bits-doc.txt	/^static inline ulong bit_zip0(ulong x);$/;"	p	file:	signature:(ulong x)
bit_zip0	src/bits/bitzip.h	/^static inline ulong bit_zip0(ulong x)$/;"	f	signature:(ulong x)
bit_zip0_pairs	doc/bits-doc.txt	/^static inline ulong bit_zip0_pairs(ulong x);$/;"	p	file:	signature:(ulong x)
bit_zip0_pairs	src/bits/bitzip-pairs.h	/^static inline ulong bit_zip0_pairs(ulong x)$/;"	f	signature:(ulong x)
bit_zip2	doc/bits-doc.txt	/^static inline ulong bit_zip2(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
bit_zip2	doc/bits-doc.txt	/^static inline void bit_zip2(ulong x, ulong &lo, ulong &hi);$/;"	p	file:	signature:(ulong x, ulong &lo, ulong &hi)
bit_zip2	src/bits/bitzip.h	/^static inline ulong bit_zip2(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
bit_zip2	src/bits/bitzip.h	/^static inline void bit_zip2(ulong x, ulong &lo, ulong &hi)$/;"	f	signature:(ulong x, ulong &lo, ulong &hi)
bitarray	src/ds/bitarray.h	/^    bitarray(const bitarray&);  \/\/ forbidden$/;"	p	class:bitarray	access:private	signature:(const bitarray&)
bitarray	src/ds/bitarray.h	/^    explicit bitarray(ulong nbits, ulong *f=0)$/;"	f	class:bitarray	access:public	signature:(ulong nbits, ulong *f=0)
bitarray	src/ds/bitarray.h	/^class bitarray$/;"	c
bitarray::all_clear_q	src/ds/bitarray.h	/^    ulong all_clear_q()  const$/;"	f	class:bitarray	access:public	signature:() const
bitarray::all_set_q	src/ds/bitarray.h	/^    bool all_set_q()  const$/;"	f	class:bitarray	access:public	signature:() const
bitarray::bitarray	src/ds/bitarray.h	/^    bitarray(const bitarray&);  \/\/ forbidden$/;"	p	class:bitarray	access:private	signature:(const bitarray&)
bitarray::bitarray	src/ds/bitarray.h	/^    explicit bitarray(ulong nbits, ulong *f=0)$/;"	f	class:bitarray	access:public	signature:(ulong nbits, ulong *f=0)
bitarray::change	src/ds/bitarray.h	/^    void change(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::clear	src/ds/bitarray.h	/^    void clear(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::clear_all	src/ds/bitarray.h	/^    void clear_all()$/;"	f	class:bitarray	access:public	signature:()
bitarray::count_ones	src/ds/bitarray.h	/^    ulong count_ones()  const$/;"	f	class:bitarray	access:public	signature:() const
bitarray::count_zeros	src/ds/bitarray.h	/^    ulong count_zeros()  const$/;"	f	class:bitarray	access:public	signature:() const
bitarray::ctor_core	src/ds/bitarray.h	/^    ulong ctor_core(ulong nbits)$/;"	f	class:bitarray	access:private	signature:(ulong nbits)
bitarray::dump	src/ds/bitarray.cc	/^bitarray::dump()  const$/;"	f	class:bitarray	signature:() const
bitarray::dump	src/ds/bitarray.h	/^    void dump()  const;$/;"	p	class:bitarray	access:public	signature:() const
bitarray::dump_bits	src/ds/bitarray.cc	/^bitarray::dump_bits(ulong prettyq\/*=0*\/)  const$/;"	f	class:bitarray	signature:(ulong prettyq ) const
bitarray::dump_bits	src/ds/bitarray.h	/^    void dump_bits(ulong prettyq=0)  const;$/;"	p	class:bitarray	access:public	signature:(ulong prettyq=0) const
bitarray::f_	src/ds/bitarray.h	/^    ulong *f_;   \/\/ bit bucket$/;"	m	class:bitarray	access:public
bitarray::first_clear	src/ds/bitarray.h	/^    ulong first_clear()$/;"	f	class:bitarray	access:public	signature:()
bitarray::first_set	src/ds/bitarray.h	/^    ulong first_set()$/;"	f	class:bitarray	access:public	signature:()
bitarray::mp_	src/ds/bitarray.h	/^    ulong mp_;   \/\/ mask for partially used word if there is one, else zero$/;"	m	class:bitarray	access:public
bitarray::myfq_	src/ds/bitarray.h	/^    bool myfq_;  \/\/ whether f[] was allocated by class$/;"	m	class:bitarray	access:public
bitarray::n_	src/ds/bitarray.h	/^    ulong n_;    \/\/ number of bits$/;"	m	class:bitarray	access:public
bitarray::next_clear	src/ds/bitarray.h	/^    ulong next_clear(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
bitarray::next_set	src/ds/bitarray.h	/^    ulong next_set(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
bitarray::nfw_	src/ds/bitarray.h	/^    ulong nfw_;  \/\/ number of words where all bits are used, may be zero$/;"	m	class:bitarray	access:public
bitarray::operator =	src/ds/bitarray.h	/^    bitarray & operator = (const bitarray&);  \/\/ forbidden$/;"	p	class:bitarray	access:private	signature:(const bitarray&)
bitarray::set	src/ds/bitarray.h	/^    void set(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::set_all	src/ds/bitarray.h	/^    void set_all()$/;"	f	class:bitarray	access:public	signature:()
bitarray::size	src/ds/bitarray.h	/^    ulong size()  const  { return n_; }$/;"	f	class:bitarray	access:public	signature:() const
bitarray::test	src/ds/bitarray.h	/^    ulong test(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
bitarray::test_change	src/ds/bitarray.h	/^    ulong test_change(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::test_clear	src/ds/bitarray.h	/^    ulong test_clear(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::test_set	src/ds/bitarray.h	/^    ulong test_set(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
bitarray::use_asm_q	src/ds/bitarray.h	/^    static bool use_asm_q()$/;"	f	class:bitarray	access:public	signature:()
bitarray::~bitarray	src/ds/bitarray.h	/^    ~bitarray()$/;"	f	class:bitarray	access:public	signature:()
bitlex_b	demo/bits/bitlex-rec-demo.cc	/^void bitlex_b(ulong f, ulong n)  \/\/ backward$/;"	f	signature:(ulong f, ulong n)
bitlex_b	demo/bits/bitlex-rec-demo.cc	/^void bitlex_b(ulong f, ulong n);$/;"	p	file:	signature:(ulong f, ulong n)
bitlex_f	demo/bits/bitlex-rec-demo.cc	/^void bitlex_f(ulong f, ulong n)  \/\/ forward$/;"	f	signature:(ulong f, ulong n)
bitmat_add_unit	doc/bmat-doc.txt	/^inline void bitmat_add_unit(ulong *M, ulong n);$/;"	p	file:	signature:(ulong *M, ulong n)
bitmat_add_unit	src/bmat/bitmat-inline.h	/^inline void bitmat_add_unit(ulong *M, ulong n)$/;"	f	signature:(ulong *M, ulong n)
bitmat_charpoly	doc/bmat-doc.txt	/^ulong bitmat_charpoly(const ulong *M, ulong n);$/;"	p	file:	signature:(const ulong *M, ulong n)
bitmat_charpoly	src/bmat/bitmat-charpoly.cc	/^bitmat_charpoly(const ulong *M, ulong n)$/;"	f	signature:(const ulong *M, ulong n)
bitmat_charpoly	src/bmat/bitmat-funcs.h	/^ulong bitmat_charpoly(const ulong *M, ulong n);$/;"	p	signature:(const ulong *M, ulong n)
bitmat_circulant	doc/bmat-doc.txt	/^inline void bitmat_circulant(ulong v, ulong n, ulong *M);$/;"	p	file:	signature:(ulong v, ulong n, ulong *M)
bitmat_circulant	src/bmat/bitmat-inline.h	/^inline void bitmat_circulant(ulong v, ulong n, ulong *M)$/;"	f	signature:(ulong v, ulong n, ulong *M)
bitmat_companion	doc/bmat-doc.txt	/^inline void bitmat_companion(ulong p, ulong n, ulong *M);$/;"	p	file:	signature:(ulong p, ulong n, ulong *M)
bitmat_companion	src/bmat/bitmat-inline.h	/^inline void bitmat_companion(ulong p, ulong n, ulong *M)$/;"	f	signature:(ulong p, ulong n, ulong *M)
bitmat_copy	doc/bmat-doc.txt	/^inline void bitmat_copy(const ulong *M1, ulong n, ulong *M2);$/;"	p	file:	signature:(const ulong *M1, ulong n, ulong *M2)
bitmat_copy	src/bmat/bitmat-inline.h	/^inline void bitmat_copy(const ulong *M1, ulong n, ulong *M2)$/;"	f	signature:(const ulong *M1, ulong n, ulong *M2)
bitmat_eq	doc/bmat-doc.txt	/^inline bool bitmat_eq(const ulong *M1, const ulong *M2, ulong n);$/;"	p	file:	signature:(const ulong *M1, const ulong *M2, ulong n)
bitmat_eq	src/bmat/bitmat-inline.h	/^inline bool bitmat_eq(const ulong *M1, const ulong *M2, ulong n)$/;"	f	signature:(const ulong *M1, const ulong *M2, ulong n)
bitmat_get	doc/bmat-doc.txt	/^inline ulong bitmat_get(const ulong *M, ulong r, ulong c);$/;"	p	file:	signature:(const ulong *M, ulong r, ulong c)
bitmat_get	src/bmat/bitmat-inline.h	/^inline ulong bitmat_get(const ulong *M, ulong r, ulong c)$/;"	f	signature:(const ulong *M, ulong r, ulong c)
bitmat_hessenberg	doc/bmat-doc.txt	/^void bitmat_hessenberg(const ulong *M, ulong n, ulong *H);$/;"	p	file:	signature:(const ulong *M, ulong n, ulong *H)
bitmat_hessenberg	src/bmat/bitmat-funcs.h	/^void bitmat_hessenberg(const ulong *M, ulong n, ulong *H);$/;"	p	signature:(const ulong *M, ulong n, ulong *H)
bitmat_hessenberg	src/bmat/bitmat-hessenberg.cc	/^bitmat_hessenberg(const ulong *M, ulong n, ulong *H)$/;"	f	signature:(const ulong *M, ulong n, ulong *H)
bitmat_hessenberg2charpoly	doc/bmat-doc.txt	/^ulong bitmat_hessenberg2charpoly(const ulong *H, ulong n);$/;"	p	file:	signature:(const ulong *H, ulong n)
bitmat_hessenberg2charpoly	src/bmat/bitmat-charpoly.cc	/^bitmat_hessenberg2charpoly(const ulong *H, ulong n)$/;"	f	signature:(const ulong *H, ulong n)
bitmat_hessenberg2charpoly	src/bmat/bitmat-funcs.h	/^ulong bitmat_hessenberg2charpoly(const ulong *H, ulong n);$/;"	p	signature:(const ulong *H, ulong n)
bitmat_inverse	doc/bmat-doc.txt	/^bool bitmat_inverse(const ulong *M, ulong n,$/;"	p	file:	signature:(const ulong *M, ulong n, ulong * restrict Mi, const ulong * restrict B )
bitmat_inverse	src/bmat/bitmat-funcs.h	/^bool bitmat_inverse(const ulong *M, ulong n, ulong * restrict Mi,$/;"	p	signature:(const ulong *M, ulong n, ulong * restrict Mi, const ulong * restrict B=0)
bitmat_inverse	src/bmat/bitmat-inverse.cc	/^bitmat_inverse(const ulong *M, ulong n,$/;"	f	signature:(const ulong *M, ulong n, ulong * restrict Mi, const ulong * restrict B )
bitmat_inverse_q	doc/bmat-doc.txt	/^bool bitmat_inverse_q(const ulong *M, ulong n, const ulong *Mi);$/;"	p	file:	signature:(const ulong *M, ulong n, const ulong *Mi)
bitmat_inverse_q	src/bmat/bitmat-funcs.h	/^bool bitmat_inverse_q(const ulong *M, ulong n, const ulong *Mi);$/;"	p	signature:(const ulong *M, ulong n, const ulong *Mi)
bitmat_inverse_q	src/bmat/bitmat-inverse.cc	/^bitmat_inverse_q(const ulong *M, ulong n, const ulong *Mi)$/;"	f	signature:(const ulong *M, ulong n, const ulong *Mi)
bitmat_invert	doc/bmat-doc.txt	/^bool bitmat_invert(ulong *M, ulong n);$/;"	p	file:	signature:(ulong *M, ulong n)
bitmat_invert	src/bmat/bitmat-funcs.h	/^bool bitmat_invert(ulong *M, ulong n);$/;"	p	signature:(ulong *M, ulong n)
bitmat_invert	src/bmat/bitmat-inverse.cc	/^bitmat_invert(ulong *M, ulong n)$/;"	f	signature:(ulong *M, ulong n)
bitmat_is_hessenberg	doc/bmat-doc.txt	/^bool bitmat_is_hessenberg(const ulong *H, ulong n);$/;"	p	file:	signature:(const ulong *H, ulong n)
bitmat_is_hessenberg	src/bmat/bitmat-funcs.h	/^bool bitmat_is_hessenberg(const ulong *H, ulong n);$/;"	p	signature:(const ulong *H, ulong n)
bitmat_is_hessenberg	src/bmat/bitmat-hessenberg.cc	/^bitmat_is_hessenberg(const ulong *H, ulong n)$/;"	f	signature:(const ulong *H, ulong n)
bitmat_is_unit	doc/bmat-doc.txt	/^inline bool bitmat_is_unit(const ulong *M, ulong n);$/;"	p	file:	signature:(const ulong *M, ulong n)
bitmat_is_unit	src/bmat/bitmat-inline.h	/^inline bool bitmat_is_unit(const ulong *M, ulong n)$/;"	f	signature:(const ulong *M, ulong n)
bitmat_is_zero	doc/bmat-doc.txt	/^inline bool bitmat_is_zero(const ulong *M, ulong n);$/;"	p	file:	signature:(const ulong *M, ulong n)
bitmat_is_zero	src/bmat/bitmat-inline.h	/^inline bool bitmat_is_zero(const ulong *M, ulong n)$/;"	f	signature:(const ulong *M, ulong n)
bitmat_kronecker	doc/bmat-doc.txt	/^void bitmat_kronecker(const ulong *M1, ulong n1,$/;"	p	file:	signature:(const ulong *M1, ulong n1, const ulong *M2, ulong n2, ulong * restrict K)
bitmat_kronecker	src/bmat/bitmat-funcs.h	/^void bitmat_kronecker(const ulong *M1, ulong n1, const ulong *M2, ulong n2, ulong *K);$/;"	p	signature:(const ulong *M1, ulong n1, const ulong *M2, ulong n2, ulong *K)
bitmat_kronecker	src/bmat/bitmat-kronecker.cc	/^bitmat_kronecker(const ulong *M1, ulong n1,$/;"	f	signature:(const ulong *M1, ulong n1, const ulong *M2, ulong n2, ulong * restrict K)
bitmat_mult_MM	doc/bmat-doc.txt	/^void bitmat_mult_MM(const ulong *M1, const ulong *M2, ulong n, ulong *P);$/;"	p	file:	signature:(const ulong *M1, const ulong *M2, ulong n, ulong *P)
bitmat_mult_MM	src/bmat/bitmat-funcs.h	/^void bitmat_mult_MM(const ulong *M1, const ulong *M2, ulong n, ulong *P);$/;"	p	signature:(const ulong *M1, const ulong *M2, ulong n, ulong *P)
bitmat_mult_MM	src/bmat/bitmat-mult-mm.cc	/^bitmat_mult_MM(const ulong *M1, const ulong *M2, ulong n, ulong *P)$/;"	f	signature:(const ulong *M1, const ulong *M2, ulong n, ulong *P)
bitmat_mult_Mv	doc/bmat-doc.txt	/^inline ulong bitmat_mult_Mv(const ulong *M, ulong n, ulong v);$/;"	p	file:	signature:(const ulong *M, ulong n, ulong v)
bitmat_mult_Mv	src/bmat/bitmat-inline.h	/^inline ulong bitmat_mult_Mv(const ulong *M, ulong n, ulong v)$/;"	f	signature:(const ulong *M, ulong n, ulong v)
bitmat_mult_vM	doc/bmat-doc.txt	/^inline ulong bitmat_mult_vM(const ulong *M, ulong n, ulong v);$/;"	p	file:	signature:(const ulong *M, ulong n, ulong v)
bitmat_mult_vM	src/bmat/bitmat-inline.h	/^inline ulong bitmat_mult_vM(const ulong *M, ulong n, ulong v)$/;"	f	signature:(const ulong *M, ulong n, ulong v)
bitmat_nullspace	doc/bmat-doc.txt	/^ulong bitmat_nullspace(const ulong *M, ulong n, ulong *Ns);$/;"	p	file:	signature:(const ulong *M, ulong n, ulong *Ns)
bitmat_nullspace	src/bmat/bitmat-funcs.h	/^ulong bitmat_nullspace(const ulong *M, ulong n, ulong *Ns);$/;"	p	signature:(const ulong *M, ulong n, ulong *Ns)
bitmat_nullspace	src/bmat/bitmat-nullspace.cc	/^bitmat_nullspace(const ulong *M, ulong n, ulong *Ns)$/;"	f	signature:(const ulong *M, ulong n, ulong *Ns)
bitmat_print	doc/bmat-doc.txt	/^void bitmat_print(const char *bla, const ulong *M, ulong n, ulong nv\/*=0*\/);$/;"	p	file:	signature:(const char *bla, const ulong *M, ulong n, ulong nv )
bitmat_print	src/bmat/bitmat-funcs.h	/^void bitmat_print(const char *bla, const ulong *M, ulong n, ulong nv=0);$/;"	p	signature:(const char *bla, const ulong *M, ulong n, ulong nv=0)
bitmat_print	src/bmat/bitmat-print.cc	/^bitmat_print(const char *bla, const ulong *M, ulong n, ulong nv\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *M, ulong n, ulong nv )
bitmat_set	doc/bmat-doc.txt	/^inline void bitmat_set(ulong *M, ulong r, ulong c, ulong v);$/;"	p	file:	signature:(ulong *M, ulong r, ulong c, ulong v)
bitmat_set	src/bmat/bitmat-inline.h	/^inline void bitmat_set(ulong *M, ulong r, ulong c, ulong v)$/;"	f	signature:(ulong *M, ulong r, ulong c, ulong v)
bitmat_test_nullspace	doc/bmat-doc.txt	/^ulong bitmat_test_nullspace(const ulong *M, ulong n, const ulong *Ns, ulong r);$/;"	p	file:	signature:(const ulong *M, ulong n, const ulong *Ns, ulong r)
bitmat_test_nullspace	src/bmat/bitmat-funcs.h	/^ulong bitmat_test_nullspace(const ulong *M, ulong n, const ulong *Ns, ulong r);$/;"	p	signature:(const ulong *M, ulong n, const ulong *Ns, ulong r)
bitmat_test_nullspace	src/bmat/bitmat-nullspace.cc	/^bitmat_test_nullspace(const ulong *M, ulong n, const ulong *Ns, ulong r)$/;"	f	signature:(const ulong *M, ulong n, const ulong *Ns, ulong r)
bitmat_trace	doc/bmat-doc.txt	/^inline ulong bitmat_trace(const ulong *M, ulong n);$/;"	p	file:	signature:(const ulong *M, ulong n)
bitmat_trace	src/bmat/bitmat-inline.h	/^inline ulong bitmat_trace(const ulong *M, ulong n)$/;"	f	signature:(const ulong *M, ulong n)
bitmat_transpose	doc/bmat-doc.txt	/^void bitmat_transpose(const ulong *M, ulong n, ulong *T);$/;"	p	file:	signature:(const ulong *M, ulong n, ulong *T)
bitmat_transpose	src/bmat/bitmat-funcs.h	/^void bitmat_transpose(const ulong *M, ulong n, ulong *T);$/;"	p	signature:(const ulong *M, ulong n, ulong *T)
bitmat_transpose	src/bmat/bitmat-transpose.cc	/^bitmat_transpose(const ulong *M, ulong n, ulong *T)$/;"	f	signature:(const ulong *M, ulong n, ulong *T)
bitmat_unit	doc/bmat-doc.txt	/^inline void bitmat_unit(ulong *M, ulong n);$/;"	p	file:	signature:(ulong *M, ulong n)
bitmat_unit	src/bmat/bitmat-inline.h	/^inline void bitmat_unit(ulong *M, ulong n)$/;"	f	signature:(ulong *M, ulong n)
bitpol_binary_gcd	doc/bpol-doc.txt	/^inline ulong bitpol_binary_gcd(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
bitpol_binary_gcd	src/bpol/bitpol-gcd.h	/^inline ulong bitpol_binary_gcd(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
bitpol_compose_xp1	doc/bpol-doc.txt	/^inline ulong bitpol_compose_xp1(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_compose_xp1	src/bpol/bitpol-irred.h	/^inline ulong bitpol_compose_xp1(ulong c)$/;"	f	signature:(ulong c)
bitpol_deg	doc/bpol-doc.txt	/^inline ulong bitpol_deg(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_deg	src/bpol/bitpol-degree.h	/^inline ulong bitpol_deg(ulong c)$/;"	f	signature:(ulong c)
bitpol_deriv	doc/bpol-doc.txt	/^inline ulong bitpol_deriv(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_deriv	src/bpol/bitpol-deriv.h	/^inline ulong bitpol_deriv(ulong c)$/;"	f	signature:(ulong c)
bitpol_div	doc/bpol-doc.txt	/^inline ulong bitpol_div(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
bitpol_div	src/bpol/bitpol-arith.h	/^inline ulong bitpol_div(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
bitpol_div_x2p1	doc/bpol-doc.txt	/^inline ulong bitpol_div_x2p1(ulong a);$/;"	p	file:	signature:(ulong a)
bitpol_div_x2p1	src/bpol/bitpol-arith.h	/^inline ulong bitpol_div_x2p1(ulong a)$/;"	f	signature:(ulong a)
bitpol_div_xp1	doc/bpol-doc.txt	/^inline ulong bitpol_div_xp1(ulong a);$/;"	p	file:	signature:(ulong a)
bitpol_div_xp1	src/bpol/bitpol-arith.h	/^inline ulong bitpol_div_xp1(ulong a)$/;"	f	signature:(ulong a)
bitpol_divrem	doc/bpol-doc.txt	/^inline void bitpol_divrem(ulong a, ulong b, ulong &q, ulong &r);$/;"	p	file:	signature:(ulong a, ulong b, ulong &q, ulong &r)
bitpol_divrem	src/bpol/bitpol-arith.h	/^inline void bitpol_divrem(ulong a, ulong b, ulong &q, ulong &r)$/;"	f	signature:(ulong a, ulong b, ulong &q, ulong &r)
bitpol_egcd	doc/bpol-doc.txt	/^inline ulong bitpol_egcd(ulong u, ulong v, ulong &iu, ulong &iv);$/;"	p	file:	signature:(ulong u, ulong v, ulong &iu, ulong &iv)
bitpol_egcd	src/bpol/bitpol-gcd.h	/^inline ulong bitpol_egcd(ulong u, ulong v, ulong &iu, ulong &iv)$/;"	f	signature:(ulong u, ulong v, ulong &iu, ulong &iv)
bitpol_el_order	doc/bpol-doc.txt	/^ulong bitpol_el_order(ulong c, ulong h, const factorization &mfact, ulong a);$/;"	p	file:	signature:(ulong c, ulong h, const factorization &mfact, ulong a)
bitpol_el_order	src/bpol/bitpol-order.cc	/^bitpol_el_order(ulong c, ulong h, const factorization &mfact, ulong a)$/;"	f	signature:(ulong c, ulong h, const factorization &mfact, ulong a)
bitpol_el_order	src/bpol/bitpol-order.h	/^ulong bitpol_el_order(ulong c, ulong h, const factorization &mfact, ulong a);$/;"	p	signature:(ulong c, ulong h, const factorization &mfact, ulong a)
bitpol_factor	doc/bpol-doc.txt	/^ulong bitpol_factor(ulong c, ulong *f, ulong *e);$/;"	p	file:	signature:(ulong c, ulong *f, ulong *e)
bitpol_factor	src/bpol/bitpol-factor.cc	/^bitpol_factor(ulong c, ulong *f, ulong *e)$/;"	f	signature:(ulong c, ulong *f, ulong *e)
bitpol_factor	src/bpol/bitpol-factor.h	/^ulong bitpol_factor(ulong c, ulong *f, ulong *e);$/;"	p	signature:(ulong c, ulong *f, ulong *e)
bitpol_factor_squarefree	doc/bpol-doc.txt	/^ulong bitpol_factor_squarefree(ulong c, ulong *f);$/;"	p	file:	signature:(ulong c, ulong *f)
bitpol_factor_squarefree	doc/bpol-doc.txt	/^ulong bitpol_factor_squarefree(ulong c, ulong *sf, ulong *se);$/;"	p	file:	signature:(ulong c, ulong *sf, ulong *se)
bitpol_factor_squarefree	src/bpol/berlekamp.cc	/^bitpol_factor_squarefree(ulong c, ulong *f)$/;"	f	signature:(ulong c, ulong *f)
bitpol_factor_squarefree	src/bpol/bitpol-factor.h	/^ulong bitpol_factor_squarefree(ulong c, ulong *f);$/;"	p	signature:(ulong c, ulong *f)
bitpol_factor_squarefree	src/bpol/bitpol-squarefree.cc	/^bitpol_factor_squarefree(ulong c, ulong *sf, ulong *se)$/;"	f	signature:(ulong c, ulong *sf, ulong *se)
bitpol_factor_squarefree	src/bpol/bitpol-squarefree.h	/^ulong bitpol_factor_squarefree(ulong c, ulong *sf, ulong *se);$/;"	p	signature:(ulong c, ulong *sf, ulong *se)
bitpol_gcd	doc/bpol-doc.txt	/^inline ulong bitpol_gcd(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
bitpol_gcd	src/bpol/bitpol-gcd.h	/^inline ulong bitpol_gcd(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
bitpol_h	doc/bpol-doc.txt	/^inline ulong bitpol_h(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_h	src/bpol/bitpol-degree.h	/^inline ulong bitpol_h(ulong c)$/;"	f	signature:(ulong c)
bitpol_hdeg	doc/bpol-doc.txt	/^inline void bitpol_hdeg(ulong c, ulong &d, ulong &h);$/;"	p	file:	signature:(ulong c, ulong &d, ulong &h)
bitpol_hdeg	src/bpol/bitpol-degree.h	/^inline void bitpol_hdeg(ulong c, ulong &d, ulong &h)$/;"	f	signature:(ulong c, ulong &d, ulong &h)
bitpol_irreducible_ben_or_q	doc/bpol-doc.txt	/^bool bitpol_irreducible_ben_or_q(ulong c, ulong h);$/;"	p	file:	signature:(ulong c, ulong h)
bitpol_irreducible_ben_or_q	src/bpol/bitpol-irred-ben-or.cc	/^bitpol_irreducible_ben_or_q(ulong c, ulong h)$/;"	f	signature:(ulong c, ulong h)
bitpol_irreducible_ben_or_q	src/bpol/bitpol-irred.h	/^bool bitpol_irreducible_ben_or_q(ulong c, ulong h);$/;"	p	signature:(ulong c, ulong h)
bitpol_irreducible_q	doc/bpol-doc.txt	/^inline bool bitpol_irreducible_q(ulong c, ulong h);$/;"	p	file:	signature:(ulong c, ulong h)
bitpol_irreducible_q	src/bpol/bitpol-irred.h	/^inline bool bitpol_irreducible_q(ulong c, ulong h)$/;"	f	signature:(ulong c, ulong h)
bitpol_irreducible_rabin_q	doc/bpol-doc.txt	/^bool bitpol_irreducible_rabin_q(ulong c, ulong h);$/;"	p	file:	signature:(ulong c, ulong h)
bitpol_irreducible_rabin_q	src/bpol/bitpol-irred-rabin.cc	/^bitpol_irreducible_rabin_q(ulong c, ulong h)$/;"	f	signature:(ulong c, ulong h)
bitpol_irreducible_rabin_q	src/bpol/bitpol-irred.h	/^bool bitpol_irreducible_rabin_q(ulong c, ulong h);$/;"	p	signature:(ulong c, ulong h)
bitpol_make_squarefree	doc/bpol-doc.txt	/^inline ulong bitpol_make_squarefree(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_make_squarefree	src/bpol/bitpol-squarefree.h	/^inline ulong bitpol_make_squarefree(ulong c)$/;"	f	signature:(ulong c)
bitpol_mult	doc/bpol-doc.txt	/^inline ulong bitpol_mult(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
bitpol_mult	src/bpol/bitpol-arith.h	/^inline ulong bitpol_mult(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
bitpol_need_gcd	doc/bpol-doc.txt	/^bool bitpol_need_gcd(ulong h);$/;"	p	file:	signature:(ulong h)
bitpol_need_gcd	src/bpol/bitpol-irred.h	/^bool bitpol_need_gcd(ulong h);$/;"	p	signature:(ulong h)
bitpol_need_gcd	src/bpol/bitpol-spi.cc	/^bitpol_need_gcd(ulong h)$/;"	f	signature:(ulong h)
bitpol_normal2_q	doc/bpol-doc.txt	/^bool bitpol_normal2_q(ulong c, ulong n);$/;"	p	file:	signature:(ulong c, ulong n)
bitpol_normal2_q	src/bpol/bitpol-normal.cc	/^bitpol_normal2_q(ulong c, ulong n)$/;"	f	signature:(ulong c, ulong n)
bitpol_normal2_q	src/bpol/normalbasis.h	/^bool bitpol_normal2_q(ulong c, ulong n);$/;"	p	signature:(ulong c, ulong n)
bitpol_normal_q	doc/bpol-doc.txt	/^bool bitpol_normal_q(ulong c, ulong n, ulong iq\/*=0*\/, ulong *M\/*=0*\/);$/;"	p	file:	signature:(ulong c, ulong n, ulong iq , ulong *M )
bitpol_normal_q	src/bpol/bitpol-normal.cc	/^bitpol_normal_q(ulong c, ulong n, ulong iq\/*=0*\/, ulong *M\/*=0*\/)$/;"	f	signature:(ulong c, ulong n, ulong iq , ulong *M )
bitpol_normal_q	src/bpol/normalbasis.h	/^bool bitpol_normal_q(ulong c, ulong n, ulong iq=0, ulong *M=0);$/;"	p	signature:(ulong c, ulong n, ulong iq=0, ulong *M=0)
bitpol_order	doc/bpol-doc.txt	/^ulong bitpol_order(ulong c, ulong h, const factorization &mfact);$/;"	p	file:	signature:(ulong c, ulong h, const factorization &mfact)
bitpol_order	src/bpol/bitpol-order.cc	/^bitpol_order(ulong c, ulong h, const factorization &mfact)$/;"	f	signature:(ulong c, ulong h, const factorization &mfact)
bitpol_order	src/bpol/bitpol-order.h	/^ulong bitpol_order(ulong c, ulong hc, const factorization &mfact);$/;"	p	signature:(ulong c, ulong hc, const factorization &mfact)
bitpol_pol2srp	doc/bpol-doc.txt	/^inline ulong bitpol_pol2srp(ulong f, ulong d);$/;"	p	file:	signature:(ulong f, ulong d)
bitpol_pol2srp	src/bpol/bitpol-srp.h	/^inline ulong bitpol_pol2srp(ulong f, ulong d)$/;"	f	signature:(ulong f, ulong d)
bitpol_power	doc/bpol-doc.txt	/^inline ulong bitpol_power(ulong a, ulong e);$/;"	p	file:	signature:(ulong a, ulong e)
bitpol_power	src/bpol/bitpol-arith.h	/^inline ulong bitpol_power(ulong a, ulong e)$/;"	f	signature:(ulong a, ulong e)
bitpol_print	doc/bpol-doc.txt	/^void bitpol_print(const char *bla, ulong c, bool sq\/*=true*\/);$/;"	p	file:	signature:(const char *bla, ulong c, bool sq )
bitpol_print	src/bpol/bitpol-print.cc	/^bitpol_print(const char *bla, ulong c, bool sq\/*=true*\/)$/;"	f	signature:(const char *bla, ulong c, bool sq )
bitpol_print	src/bpol/bitpol-print.h	/^void bitpol_print(const char *bla, ulong c, bool sq=true);$/;"	p	signature:(const char *bla, ulong c, bool sq=true)
bitpol_print_bin	doc/bpol-doc.txt	/^void bitpol_print_bin(const char *bla, ulong c);$/;"	p	file:	signature:(const char *bla, ulong c)
bitpol_print_bin	src/bpol/bitpol-print.cc	/^bitpol_print_bin(const char *bla, ulong c)$/;"	f	signature:(const char *bla, ulong c)
bitpol_print_bin	src/bpol/bitpol-print.h	/^void bitpol_print_bin(const char *bla, ulong c);$/;"	p	signature:(const char *bla, ulong c)
bitpol_print_bin_factorization	doc/bpol-doc.txt	/^void bitpol_print_bin_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	file:	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_bin_factorization	src/bpol/bitpol-print.cc	/^bitpol_print_bin_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct)$/;"	f	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_bin_factorization	src/bpol/bitpol-print.h	/^void bitpol_print_bin_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_coeff	doc/bpol-doc.txt	/^void bitpol_print_coeff(const char *bla, ulong c);$/;"	p	file:	signature:(const char *bla, ulong c)
bitpol_print_coeff	src/bpol/bitpol-print.cc	/^bitpol_print_coeff(const char *bla, ulong c)$/;"	f	signature:(const char *bla, ulong c)
bitpol_print_coeff	src/bpol/bitpol-print.h	/^void bitpol_print_coeff(const char *bla, ulong c);$/;"	p	signature:(const char *bla, ulong c)
bitpol_print_coeff_factorization	doc/bpol-doc.txt	/^void bitpol_print_coeff_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	file:	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_coeff_factorization	src/bpol/bitpol-print.cc	/^bitpol_print_coeff_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct)$/;"	f	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_coeff_factorization	src/bpol/bitpol-print.h	/^void bitpol_print_coeff_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_factorization	doc/bpol-doc.txt	/^void bitpol_print_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	file:	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_factorization	src/bpol/bitpol-print.cc	/^bitpol_print_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct)$/;"	f	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_factorization	src/bpol/bitpol-print.h	/^void bitpol_print_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_short_factorization	doc/bpol-doc.txt	/^void bitpol_print_short_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	file:	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_short_factorization	src/bpol/bitpol-print.cc	/^bitpol_print_short_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct)$/;"	f	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_short_factorization	src/bpol/bitpol-print.h	/^void bitpol_print_short_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_tex	doc/bpol-doc.txt	/^void bitpol_print_tex(const char *bla, ulong c);$/;"	p	file:	signature:(const char *bla, ulong c)
bitpol_print_tex	src/bpol/bitpol-print.cc	/^bitpol_print_tex(const char *bla, ulong c)$/;"	f	signature:(const char *bla, ulong c)
bitpol_print_tex	src/bpol/bitpol-print.h	/^void bitpol_print_tex(const char *bla, ulong c);$/;"	p	signature:(const char *bla, ulong c)
bitpol_print_tex_factorization	doc/bpol-doc.txt	/^void bitpol_print_tex_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	file:	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_tex_factorization	src/bpol/bitpol-print.cc	/^bitpol_print_tex_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct)$/;"	f	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_print_tex_factorization	src/bpol/bitpol-print.h	/^void bitpol_print_tex_factorization(const char *bla, const ulong *f, const ulong *e, ulong fct);$/;"	p	signature:(const char *bla, const ulong *f, const ulong *e, ulong fct)
bitpol_pure_sqrt	doc/bpol-doc.txt	/^inline ulong bitpol_pure_sqrt(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_pure_sqrt	src/bpol/bitpol-squarefree.h	/^inline ulong bitpol_pure_sqrt(ulong c)$/;"	f	signature:(ulong c)
bitpol_pure_square_q	doc/bpol-doc.txt	/^inline ulong bitpol_pure_square_q(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_pure_square_q	src/bpol/bitpol-squarefree.h	/^inline ulong bitpol_pure_square_q(ulong c)$/;"	f	signature:(ulong c)
bitpol_recip	doc/bpol-doc.txt	/^inline ulong bitpol_recip(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_recip	src/bpol/bitpol-irred.h	/^inline ulong bitpol_recip(ulong c)$/;"	f	signature:(ulong c)
bitpol_refine_factors	doc/bpol-doc.txt	/^ulong bitpol_refine_factors(ulong *f, ulong nf, const ulong *nn, ulong r);$/;"	p	file:	signature:(ulong *f, ulong nf, const ulong *nn, ulong r)
bitpol_refine_factors	src/bpol/berlekamp.cc	/^bitpol_refine_factors(ulong *f, ulong nf, const ulong *nn, ulong r)$/;"	f	signature:(ulong *f, ulong nf, const ulong *nn, ulong r)
bitpol_refine_factors	src/bpol/bitpol-factor.h	/^ulong bitpol_refine_factors(ulong *f, ulong nf, const ulong *nn, ulong r);$/;"	p	signature:(ulong *f, ulong nf, const ulong *nn, ulong r)
bitpol_rem	doc/bpol-doc.txt	/^inline ulong bitpol_rem(ulong a, const ulong b);$/;"	p	file:	signature:(ulong a, const ulong b)
bitpol_rem	src/bpol/bitpol-arith.h	/^inline ulong bitpol_rem(ulong a, const ulong b)$/;"	f	signature:(ulong a, const ulong b)
bitpol_sort_factorization	doc/bpol-doc.txt	/^void bitpol_sort_factorization(ulong *f, ulong *e, ulong fct);$/;"	p	file:	signature:(ulong *f, ulong *e, ulong fct)
bitpol_sort_factorization	src/bpol/bitpol-factor.cc	/^bitpol_sort_factorization(ulong *f, ulong *e, ulong fct)$/;"	f	signature:(ulong *f, ulong *e, ulong fct)
bitpol_sort_factorization	src/bpol/bitpol-factor.h	/^void bitpol_sort_factorization(ulong *f, ulong *e, ulong fct);$/;"	p	signature:(ulong *f, ulong *e, ulong fct)
bitpol_spi_q	doc/bpol-doc.txt	/^bool bitpol_spi_q(ulong c, ulong h);$/;"	p	file:	signature:(ulong c, ulong h)
bitpol_spi_q	src/bpol/bitpol-irred.h	/^bool bitpol_spi_q(ulong c, ulong h);$/;"	p	signature:(ulong c, ulong h)
bitpol_spi_q	src/bpol/bitpol-spi.cc	/^bitpol_spi_q(ulong c, ulong h)$/;"	f	signature:(ulong c, ulong h)
bitpol_square	doc/bpol-doc.txt	/^inline ulong bitpol_square(ulong a);$/;"	p	file:	signature:(ulong a)
bitpol_square	src/bpol/bitpol-arith.h	/^inline ulong bitpol_square(ulong a)$/;"	f	signature:(ulong a)
bitpol_squarefree_part	doc/bpol-doc.txt	/^inline ulong bitpol_squarefree_part(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_squarefree_part	src/bpol/bitpol-squarefree.h	/^inline ulong bitpol_squarefree_part(ulong c)$/;"	f	signature:(ulong c)
bitpol_sreduce	doc/bpol-doc.txt	/^ulong bitpol_sreduce(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_sreduce	src/bpol/bitpol-squarefree.cc	/^bitpol_sreduce(ulong c)$/;"	f	signature:(ulong c)
bitpol_sreduce	src/bpol/bitpol-squarefree.h	/^ulong bitpol_sreduce(ulong c);$/;"	p	signature:(ulong c)
bitpol_srp2pol	doc/bpol-doc.txt	/^inline ulong bitpol_srp2pol(ulong s, ulong hd);$/;"	p	file:	signature:(ulong s, ulong hd)
bitpol_srp2pol	src/bpol/bitpol-srp.h	/^inline ulong bitpol_srp2pol(ulong s, ulong hd)$/;"	f	signature:(ulong s, ulong hd)
bitpol_test_factorization	doc/bpol-doc.txt	/^ulong bitpol_test_factorization(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi);$/;"	p	file:	signature:(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi)
bitpol_test_factorization	src/bpol/bitpol-factor.cc	/^bitpol_test_factorization(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi)$/;"	f	signature:(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi)
bitpol_test_factorization	src/bpol/bitpol-factor.h	/^ulong bitpol_test_factorization(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi);$/;"	p	signature:(ulong c, const ulong *f, const ulong *e, ulong fct, ulong &fi)
bitpol_test_squarefree	doc/bpol-doc.txt	/^inline ulong bitpol_test_squarefree(ulong c);$/;"	p	file:	signature:(ulong c)
bitpol_test_squarefree	src/bpol/bitpol-squarefree.h	/^inline ulong bitpol_test_squarefree(ulong c)$/;"	f	signature:(ulong c)
bitpolmod_div_x	doc/bpol-doc.txt	/^static inline ulong bitpolmod_div_x(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_div_x	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_div_x(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_divide	doc/bpol-doc.txt	/^inline ulong bitpolmod_divide(ulong a, ulong b, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong b, ulong c, ulong h)
bitpolmod_divide	src/bpol/bitpolmod-arith.h	/^inline ulong bitpolmod_divide(ulong a, ulong b, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong b, ulong c, ulong h)
bitpolmod_inv_x	doc/bpol-doc.txt	/^static inline ulong bitpolmod_inv_x(ulong c, ulong h);$/;"	p	file:	signature:(ulong c, ulong h)
bitpolmod_inv_x	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_inv_x(ulong c, ulong h)$/;"	f	signature:(ulong c, ulong h)
bitpolmod_inverse	doc/bpol-doc.txt	/^inline ulong bitpolmod_inverse(ulong a, ulong c);$/;"	p	file:	signature:(ulong a, ulong c)
bitpolmod_inverse	src/bpol/bitpolmod-arith.h	/^inline ulong bitpolmod_inverse(ulong a, ulong c)$/;"	f	signature:(ulong a, ulong c)
bitpolmod_inverse_irred	doc/bpol-doc.txt	/^inline ulong bitpolmod_inverse_irred(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_inverse_irred	src/bpol/bitpolmod-arith.h	/^inline ulong bitpolmod_inverse_irred(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_minpoly	doc/bpol-doc.txt	/^ulong bitpolmod_minpoly(ulong a, ulong c, ulong n, ulong &bp);$/;"	p	file:	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_minpoly	src/bpol/bitpolmod-minpoly.cc	/^bitpolmod_minpoly(ulong a, ulong c, ulong n, ulong &bp)$/;"	f	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_minpoly	src/bpol/bitpolmod-minpoly.h	/^ulong bitpolmod_minpoly(ulong a, ulong c, ulong n, ulong &bp);$/;"	p	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_minpoly2	doc/bpol-doc.txt	/^ulong bitpolmod_minpoly2(ulong a, ulong c, ulong n, ulong &bp);$/;"	p	file:	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_minpoly2	src/bpol/bitpolmod-minpoly.cc	/^bitpolmod_minpoly2(ulong a, ulong c, ulong n, ulong &bp)$/;"	f	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_minpoly2	src/bpol/bitpolmod-minpoly.h	/^ulong bitpolmod_minpoly2(ulong a, ulong c, ulong n, ulong &bp);$/;"	p	signature:(ulong a, ulong c, ulong n, ulong &bp)
bitpolmod_mult	doc/bpol-doc.txt	/^static inline ulong bitpolmod_mult(ulong a, ulong b, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong b, ulong c, ulong h)
bitpolmod_mult	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_mult(ulong a, ulong b, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong b, ulong c, ulong h)
bitpolmod_mult_rev	src/bpol/attic/bitpolmod-multrev.h	/^inline ulong bitpolmod_mult_rev(ulong a, ulong b, ulong c)$/;"	f	signature:(ulong a, ulong b, ulong c)
bitpolmod_power	doc/bpol-doc.txt	/^inline ulong bitpolmod_power(ulong a, ulong e, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong e, ulong c, ulong h)
bitpolmod_power	src/bpol/bitpolmod-arith.h	/^inline ulong bitpolmod_power(ulong a, ulong e, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong e, ulong c, ulong h)
bitpolmod_solve_quadratic	doc/bpol-doc.txt	/^bool bitpolmod_solve_quadratic(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m);$/;"	p	file:	signature:(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m)
bitpolmod_solve_quadratic	src/bpol/bitpolmod-solvequadratic.cc	/^bitpolmod_solve_quadratic(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m)$/;"	f	signature:(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m)
bitpolmod_solve_quadratic	src/bpol/bitpolmod-solvequadratic.h	/^bool bitpolmod_solve_quadratic(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m);$/;"	p	signature:(ulong a, ulong b, ulong c, ulong& r0, ulong& r1, ulong m)
bitpolmod_solve_reduced_quadratic	doc/bpol-doc.txt	/^bool bitpolmod_solve_reduced_quadratic(ulong c, ulong& r, ulong m);$/;"	p	file:	signature:(ulong c, ulong& r, ulong m)
bitpolmod_solve_reduced_quadratic	src/bpol/bitpolmod-solvequadratic.cc	/^bitpolmod_solve_reduced_quadratic(ulong c, ulong& r, ulong m)$/;"	f	signature:(ulong c, ulong& r, ulong m)
bitpolmod_solve_reduced_quadratic	src/bpol/bitpolmod-solvequadratic.h	/^bool bitpolmod_solve_reduced_quadratic(ulong c, ulong& r, ulong m);$/;"	p	signature:(ulong c, ulong& r, ulong m)
bitpolmod_sqrt	doc/bpol-doc.txt	/^static inline ulong bitpolmod_sqrt(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_sqrt	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_sqrt(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_square	doc/bpol-doc.txt	/^static inline ulong bitpolmod_square(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_square	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_square(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_times_x	doc/bpol-doc.txt	/^static inline ulong bitpolmod_times_x(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_times_x	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_times_x(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_times_x2	doc/bpol-doc.txt	/^static inline ulong bitpolmod_times_x2(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
bitpolmod_times_x2	src/bpol/bitpolmod-arith.h	/^static inline ulong bitpolmod_times_x2(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
bitpolmod_times_x_rev	src/bpol/attic/bitpolmod-multrev.h	/^static inline ulong bitpolmod_times_x_rev(ulong a, ulong c)$/;"	f	signature:(ulong a, ulong c)
bitpolmod_xpower	doc/bpol-doc.txt	/^inline ulong bitpolmod_xpower(ulong e, ulong c, ulong h);$/;"	p	file:	signature:(ulong e, ulong c, ulong h)
bitpolmod_xpower	src/bpol/bitpolmod-arith.h	/^inline ulong bitpolmod_xpower(ulong e, ulong c, ulong h)$/;"	f	signature:(ulong e, ulong c, ulong h)
bitrev	demo/perm/revbin-perm-rec-demo.cc	/^void bitrev(Type* p, ulong i, ulong l, ulong r, ulong k)$/;"	f	signature:(Type* p, ulong i, ulong l, ulong r, ulong k)
bitrev_p	demo/perm/revbin-perm-rec-demo.cc	/^void bitrev_p(ulong i, ulong l, ulong r, ulong k, ulong ind=0)$/;"	f	signature:(ulong i, ulong l, ulong r, ulong k, ulong ind=0)
bits_	src/comb/attic/combcolex.h	/^    ulong bits_;$/;"	m	class:comb_colex	access:public
bits_	src/comb/attic/combination-altminchange.h	/^    ulong bits_;$/;"	m	class:combination_altminchange	access:public
bits_	src/comb/attic/combination-minchange.h	/^    ulong bits_;$/;"	m	class:combination_minchange	access:public
bits_	src/comb/attic/comblex.h	/^    ulong bits_;$/;"	m	class:comb_lex	access:public
bits_	src/comb/attic/combminchange.h	/^    ulong bits_;$/;"	m	class:comb_minchange	access:public
bits_	src/comb/attic/compositionalt.h	/^    ulong bits_;$/;"	m	class:composition_alt	access:public
bits_in	src/bits/crc32.h	/^    uint bits_in(uint w, uchar k)$/;"	f	class:crc32	access:public	signature:(uint w, uchar k)
bits_in	src/bits/crc64.h	/^    uint64 bits_in(uint64 w, uchar k)$/;"	f	class:crc64	access:public	signature:(uint64 w, uchar k)
bitset2deltaset	doc/bits-doc.txt	/^static inline ulong bitset2deltaset(ulong b, ulong *f, ulong n);$/;"	p	file:	signature:(ulong b, ulong *f, ulong n)
bitset2deltaset	src/bits/bitset2set.h	/^static inline ulong bitset2deltaset(ulong b, ulong *f, ulong n)$/;"	f	signature:(ulong b, ulong *f, ulong n)
bitset2set	doc/bits-doc.txt	/^static inline ulong bitset2set(ulong b, ulong *f, ulong n, ulong off=0);$/;"	p	file:	signature:(ulong b, ulong *f, ulong n, ulong off=0)
bitset2set	src/bits/bitset2set.h	/^static inline ulong bitset2set(ulong b, ulong *f, ulong n, ulong off=0)$/;"	f	signature:(ulong b, ulong *f, ulong n, ulong off=0)
block_border_ones	doc/bits-doc.txt	/^static inline ulong block_border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
block_border_ones	src/bits/bit-isolate.h	/^static inline ulong block_border_ones(ulong x)$/;"	f	signature:(ulong x)
block_ones	doc/bits-doc.txt	/^static inline ulong block_ones(ulong x);$/;"	p	file:	signature:(ulong x)
block_ones	src/bits/bit-isolate.h	/^static inline ulong block_ones(ulong x)$/;"	f	signature:(ulong x)
block_values	doc/bits-doc.txt	/^static inline ulong block_values(ulong x);$/;"	p	file:	signature:(ulong x)
block_values	src/bits/bit-isolate.h	/^static inline ulong block_values(ulong x)$/;"	f	signature:(ulong x)
blue_code	doc/bits-doc.txt	/^static inline ulong blue_code(ulong a);$/;"	p	file:	signature:(ulong a)
blue_code	src/bits/bittransforms.h	/^static inline ulong blue_code(ulong a)$/;"	f	signature:(ulong a)
blue_fixed_point	doc/bits-doc.txt	/^static inline ulong blue_fixed_point(ulong s);$/;"	p	file:	signature:(ulong s)
blue_fixed_point	src/bits/blue-fixed-points.h	/^static inline ulong blue_fixed_point(ulong s)$/;"	f	signature:(ulong s)
blue_fixed_point_idx	doc/bits-doc.txt	/^static inline ulong blue_fixed_point_idx(ulong f);$/;"	p	file:	signature:(ulong f)
blue_fixed_point_idx	src/bits/blue-fixed-points.h	/^static inline ulong blue_fixed_point_idx(ulong f)$/;"	f	signature:(ulong f)
blue_xcode	doc/bits-doc.txt	/^static inline ulong blue_xcode(ulong a, ulong x);$/;"	p	file:	signature:(ulong a, ulong x)
blue_xcode	src/bits/bitxtransforms.h	/^static inline ulong blue_xcode(ulong a, ulong x)$/;"	f	signature:(ulong a, ulong x)
bm_	src/comb/partition-desc-bb.h	/^    ulong bm_;  \/\/ bound for number of parts$/;"	m	class:partition_desc_bb	access:public
bn_	src/bpol/all-irredpoly.h	/^    bit_necklace    bn_;$/;"	m	class:all_irredpoly	access:public
bo	demo/comb/ksubset-rec-demo.cc	/^ulong bo=0;$/;"	v
boothroyd_invert	doc/perm-doc.txt	/^void boothroyd_invert(ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(ulong *f, ulong n, bitarray *bp )
boothroyd_invert	src/perm/perminvert.cc	/^boothroyd_invert(ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(ulong *f, ulong n, bitarray *bp )
boothroyd_invert	src/perm/perminvert.h	/^void boothroyd_invert(ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(ulong *f, ulong n, bitarray *bp=0)
border_ones	doc/bits-doc.txt	/^static inline ulong border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
border_ones	src/bits/bit-isolate.h	/^static inline ulong border_ones(ulong x)$/;"	f	signature:(ulong x)
border_values	doc/bits-doc.txt	/^static inline ulong border_values(ulong x);$/;"	p	file:	signature:(ulong x)
border_values	src/bits/bit-isolate.h	/^static inline ulong border_values(ulong x)$/;"	f	signature:(ulong x)
bounding_box	src/ds/bounding-box.h	/^    explicit bounding_box( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
bounding_box	src/ds/bounding-box.h	/^    explicit bounding_box( const Pnt & P, const Pnt & Q )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P, const Pnt & Q )
bounding_box	src/ds/bounding-box.h	/^class bounding_box$/;"	c
bounding_box::Pnt	src/ds/bounding-box.h	/^    typedef point2d<Type> Pnt;$/;"	t	class:bounding_box	access:private
bounding_box::ax_	src/ds/bounding-box.h	/^    Type ix_, ax_;  \/\/ min-x, max-x$/;"	m	class:bounding_box	access:protected
bounding_box::ay_	src/ds/bounding-box.h	/^    Type iy_, ay_;  \/\/ min-y, max-y$/;"	m	class:bounding_box	access:protected
bounding_box::bounding_box	src/ds/bounding-box.h	/^    explicit bounding_box( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
bounding_box::bounding_box	src/ds/bounding-box.h	/^    explicit bounding_box( const Pnt & P, const Pnt & Q )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P, const Pnt & Q )
bounding_box::delta_x	src/ds/bounding-box.h	/^    Type delta_x()  const  { return ax_ - ix_; }  \/\/ width$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::delta_y	src/ds/bounding-box.h	/^    Type delta_y()  const  { return ay_ - iy_; }  \/\/ height$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::inside_q	src/ds/bounding-box.h	/^    bool inside_q( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
bounding_box::ix_	src/ds/bounding-box.h	/^    Type ix_, ax_;  \/\/ min-x, max-x$/;"	m	class:bounding_box	access:protected
bounding_box::iy_	src/ds/bounding-box.h	/^    Type iy_, ay_;  \/\/ min-y, max-y$/;"	m	class:bounding_box	access:protected
bounding_box::max_extent	src/ds/bounding-box.h	/^    Type max_extent()  const$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::max_point	src/ds/bounding-box.h	/^    Pnt max_point()  const  { return Pnt( ax_, ay_ ); }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::max_x	src/ds/bounding-box.h	/^    Type max_x()  const  { return ax_; }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::max_y	src/ds/bounding-box.h	/^    Type max_y()  const  { return ay_; }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::mid_point	src/ds/bounding-box.h	/^    Pnt mid_point()  const$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::min_point	src/ds/bounding-box.h	/^    Pnt min_point()  const  { return Pnt( ix_, iy_ ); }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::min_x	src/ds/bounding-box.h	/^    Type min_x()  const  { return ix_; }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::min_y	src/ds/bounding-box.h	/^    Type min_y()  const  { return iy_; }$/;"	f	class:bounding_box	access:public	signature:() const
bounding_box::reset	src/ds/bounding-box.h	/^    void reset( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
bounding_box::update	src/ds/bounding-box.h	/^    void update( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
bp_	src/bpol/necklace2bitpol.h	/^    ulong bp_;  \/\/ result as bit-vector$/;"	m	class:necklace2bitpol	access:public
branch	src/comb/wfl-hilbert.h	/^    wfl_cell branch[WFL_NUMLEV]; \/\/ chain along branch of tree of cells \/ D0L symbols$/;"	m	class:wfl_hilbert	access:public
branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
branching_number	src/comb/id-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(ulong j) const
branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong branching_number(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
branching_number	src/comb/tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
briggs_log	demo/arith/briggs-log-demo.cc	/^briggs_log(double x, double eps)$/;"	f	signature:(double x, double eps)
briggs_ltab	demo/arith/briggs-log-demo.cc	/^double *briggs_ltab;$/;"	v
bs1	test/test-bits.cc	/^static inline ulong bs1(ulong x)$/;"	f	file:	signature:(ulong x)
bs_equiv_q	demo/sort/equivclass-bitstring-demo.cc	/^bool bs_equiv_q(ulong x, ulong y)  \/\/ identify words that are mutal reverses$/;"	f	signature:(ulong x, ulong y)
bsearch	doc/sort-doc.txt	/^ulong bsearch(const Type *f, ulong n, const Type v);$/;"	p	file:	signature:(const Type *f, ulong n, const Type v)
bsearch	src/sort/bsearch.h	/^ulong bsearch(const Type *f, ulong n, const Type v)$/;"	f	signature:(const Type *f, ulong n, const Type v)
bsearch	src/sort/bsearchfunc.h	/^ulong bsearch(const Type *f, ulong n, const Type v,$/;"	f	signature:(const Type *f, ulong n, const Type v, int (*cmp)(const Type &, const Type &))
bsearch_approx	doc/sort-doc.txt	/^ulong bsearch_approx(const Type *f, ulong n, const Type v, Type da);$/;"	p	file:	signature:(const Type *f, ulong n, const Type v, Type da)
bsearch_approx	src/sort/bsearchapprox.h	/^ulong bsearch_approx(const Type *f, ulong n, const Type v, Type da)$/;"	f	signature:(const Type *f, ulong n, const Type v, Type da)
bsearch_approx	src/sort/bsearchapprox.h	/^ulong bsearch_approx(const Type *f, ulong n, const Type v, Type da,$/;"	f	signature:(const Type *f, ulong n, const Type v, Type da, int (*cmp)(const Type &, const Type &))
bsearch_complex	src/sort/attic/sortcomplex.cc	/^bsearch_complex(const Complex *f, ulong n, Complex v)$/;"	f	signature:(const Complex *f, ulong n, Complex v)
bsearch_complex	src/sort/attic/sortcomplex.h	/^ulong bsearch_complex(const Complex *f, ulong n, Complex v);$/;"	p	signature:(const Complex *f, ulong n, Complex v)
bsearch_geq	doc/sort-doc.txt	/^ulong bsearch_geq(const Type *f, ulong n, const Type v);$/;"	p	file:	signature:(const Type *f, ulong n, const Type v)
bsearch_geq	src/sort/bsearch.h	/^ulong bsearch_geq(const Type *f, ulong n, const Type v)$/;"	f	signature:(const Type *f, ulong n, const Type v)
bsearch_geq	src/sort/bsearchfunc.h	/^ulong bsearch_geq(const Type *f, ulong n, const Type v,$/;"	f	signature:(const Type *f, ulong n, const Type v, int (*cmp)(const Type &, const Type &))
bsearch_leq	doc/sort-doc.txt	/^ulong bsearch_leq(const Type *f, ulong n, const Type v);$/;"	p	file:	signature:(const Type *f, ulong n, const Type v)
bsearch_leq	src/sort/bsearch.h	/^ulong bsearch_leq(const Type *f, ulong n, const Type v)$/;"	f	signature:(const Type *f, ulong n, const Type v)
bsearch_leq	src/sort/bsearchfunc.h	/^ulong bsearch_leq(const Type *f, ulong n, const Type v,$/;"	f	signature:(const Type *f, ulong n, const Type v, int (*cmp)(const Type &, const Type &))
bsu_equiv_q	demo/sort/equivclass-bitstring-demo.cc	/^bool bsu_equiv_q(ulong x, ulong y)  \/\/ unlabeled bit-strings$/;"	f	signature:(ulong x, ulong y)
bswap	doc/bits-doc.txt	/^static inline ulong bswap(ulong x);$/;"	p	file:	signature:(ulong x)
bswap	src/bits/revbin.h	/^static inline ulong bswap(ulong x)$/;"	f	signature:(ulong x)
bu_equiv_q	demo/sort/equivclass-bracelets-demo.cc	/^bool bu_equiv_q(ulong x, ulong y)  \/\/ unlabeled bracelets$/;"	f	signature:(ulong x, ulong y)
build_heap	doc/ds-doc.txt	/^void build_heap(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
build_heap	src/ds/heap.h	/^void build_heap(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
builder	doc/wfl-hilbert-doc.txt	/^    <hilbert> holds test programs, optional table builder, driver$/;"	v
butterfly_1	doc/bits-doc.txt	/^static inline ulong butterfly_1(ulong x);$/;"	p	file:	signature:(ulong x)
butterfly_1	src/bits/bitbutterfly.h	/^static inline ulong butterfly_1(ulong x)$/;"	f	signature:(ulong x)
butterfly_16	doc/bits-doc.txt	/^static inline ulong butterfly_16(ulong x);$/;"	p	file:	signature:(ulong x)
butterfly_16	src/bits/bitbutterfly.h	/^static inline ulong butterfly_16(ulong x)$/;"	f	signature:(ulong x)
butterfly_2	doc/bits-doc.txt	/^static inline ulong butterfly_2(ulong x);$/;"	p	file:	signature:(ulong x)
butterfly_2	src/bits/bitbutterfly.h	/^static inline ulong butterfly_2(ulong x)$/;"	f	signature:(ulong x)
butterfly_4	doc/bits-doc.txt	/^static inline ulong butterfly_4(ulong x);$/;"	p	file:	signature:(ulong x)
butterfly_4	src/bits/bitbutterfly.h	/^static inline ulong butterfly_4(ulong x)$/;"	f	signature:(ulong x)
butterfly_8	doc/bits-doc.txt	/^static inline ulong butterfly_8(ulong x);$/;"	p	file:	signature:(ulong x)
butterfly_8	src/bits/bitbutterfly.h	/^static inline ulong butterfly_8(ulong x)$/;"	f	signature:(ulong x)
byte_gray_code	doc/bits-doc.txt	/^static inline ulong byte_gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
byte_gray_code	src/bits/graycode.h	/^static inline ulong byte_gray_code(ulong x)$/;"	f	signature:(ulong x)
byte_in	src/bits/crc32.h	/^    uint byte_in(uchar b)$/;"	f	class:crc32	access:public	signature:(uchar b)
byte_in	src/bits/crc64.h	/^    uint64 byte_in(uchar b)$/;"	f	class:crc64	access:public	signature:(uchar b)
byte_in	src/bits/tcrc64.h	/^    uint64 byte_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
byte_inverse_gray_code	doc/bits-doc.txt	/^static inline ulong byte_inverse_gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
byte_inverse_gray_code	src/bits/graycode.h	/^static inline ulong byte_inverse_gray_code(ulong x)$/;"	f	signature:(ulong x)
byte_parity	doc/bits-doc.txt	/^static inline ulong byte_parity(ulong x);$/;"	p	file:	signature:(ulong x)
byte_parity	src/bits/parity.h	/^static inline ulong byte_parity(ulong x)$/;"	f	signature:(ulong x)
c	demo/comb/composition-gray-rec-demo.cc	/^ulong *c;  \/\/ combination data (Kc elements)$/;"	v
c	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
c	demo/comb/shift-subsets-demo.cc	/^ulong c, ct=1;$/;"	v
c	src/bpol/gf2n.o	/^/;"	v
c01	demo/bits/bitdemos.h	/^static const char c01[] = ".1";$/;"	v
c_	src/bits/crc32.h	/^    uint c_;  \/\/ a binary primitive polynomial$/;"	m	class:crc32	access:public
c_	src/bits/crc64.h	/^    uint64 c_;  \/\/ a binary primitive polynomial$/;"	m	class:crc64	access:public
c_	src/bits/tcrc64.h	/^    uint64 c_;  \/\/ a binary primitive polynomial$/;"	m	class:tcrc64	access:public
c_	src/bpol/fcsr.h	/^    ulong c_;     \/\/ a prime with primitive root 2, e.g. 37 = 1..1.1$/;"	m	class:fcsr	access:public
c_	src/bpol/gf2n.cc	/^ulong GF2n::c_ = 0;  \/\/ polynomial modulus$/;"	m	class:GF2n	file:
c_	src/bpol/gf2n.h	/^    static ulong c_;  \/\/ polynomial modulus$/;"	m	class:GF2n	access:public
c_	src/bpol/lfsr.h	/^    ulong c_;  \/\/ (mod 2) poly  e.g. x^4+x+1 == 0x13 == 1..11$/;"	m	class:lfsr	access:public
c_	src/bpol/lfsr64.h	/^    unsigned long long c_;  \/\/ (mod 2) polynomial == x^64 + x^4 + x^3 + x + 1$/;"	m	class:lfsr64	access:public
c_	src/bpol/necklace2bitpol.h	/^    ulong c_;  \/\/ modulus (irreducible polynomial)$/;"	m	class:necklace2bitpol	access:public
c_	src/comb/combination-revdoor.h	/^    ulong *c_;  \/\/ delta set$/;"	m	class:combination_revdoor	access:public
c_	src/comb/composition-nz-minc.h	/^    ulong c_;   \/\/ size of first part =a[1]$/;"	m	class:composition_nz_minc	access:public
c_	src/comb/dyck-gray2.h	/^    ulong *c_;   \/\/ positions of ones (1-based)$/;"	m	class:dyck_gray2	access:public
c_	src/comb/partition.h	/^    ulong *c_;  \/\/ partition:  c[1]* 1 + c[2]* 2 + ... + c[n]* n == n$/;"	m	class:partition	access:public
c_	src/comb/perm-star-swaps.h	/^    ulong *c_;   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star_swaps	access:public
c_	src/comb/perm-star-swaps.h	/^    ulong c_[32];$/;"	m	class:perm_star_swaps	access:public
c_	src/comb/perm-star.h	/^    ulong *c_;   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star	access:public
c_	src/comb/perm-star.h	/^    ulong c_[32];   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star	access:public
c_print	src/aux1/attic/auxprint.cc	/^c_print(const char *bla, const Complex *c, long n, double eps\/*=0.0*\/)$/;"	f	signature:(const char *bla, const Complex *c, long n, double eps )
c_print	test/aux-test.cc	/^c_print(const char *bla, const Complex *c, long n, double eps\/*=0.0*\/)$/;"	f	signature:(const char *bla, const Complex *c, long n, double eps )
c_print	test/test.h	/^void c_print(const char *what, const Complex *c, long n, double eps=0.0);$/;"	p	signature:(const char *what, const Complex *c, long n, double eps=0.0)
can_decr_q	src/comb/mixedradix-naf-gray.h	/^    bool can_decr_q(ulong j)  const$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong j) const
can_incr_q	src/comb/mixedradix-naf-gray.h	/^    bool can_incr_q(ulong j)  const$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong j) const
can_incr_q	src/comb/mixedradix-naf.h	/^    bool can_incr_q(ulong j)  const$/;"	f	class:mixedradix_naf	access:private	signature:(ulong j) const
can_refine	demo/seq/A179009-demo.cc	/^bool can_refine(ulong m)$/;"	f	signature:(ulong m)
card	src/comb/mixedradix-subset-lex.h	/^    ulong card()  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
catalan	src/comb/catalan.h	/^    catalan(const catalan&);  \/\/ forbidden$/;"	p	class:catalan	access:private	signature:(const catalan&)
catalan	src/comb/catalan.h	/^    explicit catalan(ulong n, bool xdr=true, int dr0=+1)$/;"	f	class:catalan	access:public	signature:(ulong n, bool xdr=true, int dr0=+1)
catalan	src/comb/catalan.h	/^class catalan$/;"	c
catalan::as_	src/comb/catalan.h	/^    int *as_;   \/\/ digits of the RGS: as_[k] <= as[k-1] + 1$/;"	m	class:catalan	access:public
catalan::catalan	src/comb/catalan.h	/^    catalan(const catalan&);  \/\/ forbidden$/;"	p	class:catalan	access:private	signature:(const catalan&)
catalan::catalan	src/comb/catalan.h	/^    explicit catalan(ulong n, bool xdr=true, int dr0=+1)$/;"	f	class:catalan	access:public	signature:(ulong n, bool xdr=true, int dr0=+1)
catalan::d_	src/comb/catalan.h	/^    int *d_;    \/\/ direction with recursion (+1 or -1)$/;"	m	class:catalan	access:public
catalan::dr0_	src/comb/catalan.h	/^    int dr0_;   \/\/ dr0: starting direction in each recursive step:$/;"	m	class:catalan	access:public
catalan::first	src/comb/catalan.h	/^    void first(bool xdr, int dr0)$/;"	f	class:catalan	access:public	signature:(bool xdr, int dr0)
catalan::get	src/comb/catalan.h	/^    const int *get()  const  { return as_; }$/;"	f	class:catalan	access:public	signature:() const
catalan::n_	src/comb/catalan.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan	access:public
catalan::next	src/comb/catalan.h	/^    bool next()  { return next_rec(n_-1); }$/;"	f	class:catalan	access:public	signature:()
catalan::next_rec	src/comb/catalan.cc	/^catalan::next_rec(ulong k)$/;"	f	class:catalan	signature:(ulong k)
catalan::next_rec	src/comb/catalan.h	/^    bool next_rec(ulong k);$/;"	p	class:catalan	access:protected	signature:(ulong k)
catalan::operator =	src/comb/catalan.h	/^    catalan & operator = (const catalan&);  \/\/ forbidden$/;"	p	class:catalan	access:private	signature:(const catalan&)
catalan::paren_string	src/comb/catalan.h	/^    const char* paren_string()$/;"	f	class:catalan	access:public	signature:()
catalan::print_internal	src/comb/catalan.cc	/^catalan::print_internal()  const$/;"	f	class:catalan	signature:() const
catalan::print_internal	src/comb/catalan.h	/^    void print_internal()  const;$/;"	p	class:catalan	access:public	signature:() const
catalan::str_	src/comb/catalan.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan	access:public
catalan::xdr_	src/comb/catalan.h	/^    bool xdr_;  \/\/ whether to change direction in recursion (==> minimal-change order)$/;"	m	class:catalan	access:public
catalan::~catalan	src/comb/catalan.h	/^    ~catalan()$/;"	f	class:catalan	access:public	signature:()
catalan_path_lex	src/comb/catalan-path-lex.h	/^    catalan_path_lex(const catalan_path_lex&);  \/\/ forbidden$/;"	p	class:catalan_path_lex	access:private	signature:(const catalan_path_lex&)
catalan_path_lex	src/comb/catalan-path-lex.h	/^    explicit catalan_path_lex(ulong n)$/;"	f	class:catalan_path_lex	access:public	signature:(ulong n)
catalan_path_lex	src/comb/catalan-path-lex.h	/^class catalan_path_lex$/;"	c
catalan_path_lex::OK	src/comb/catalan-path-lex.h	/^    bool OK()  const$/;"	f	class:catalan_path_lex	access:public	signature:() const
catalan_path_lex::a_	src/comb/catalan-path-lex.h	/^    ulong *a_;$/;"	m	class:catalan_path_lex	access:public
catalan_path_lex::area	src/comb/catalan-path-lex.h	/^    ulong area()  const$/;"	f	class:catalan_path_lex	access:public	signature:() const
catalan_path_lex::catalan_path_lex	src/comb/catalan-path-lex.h	/^    catalan_path_lex(const catalan_path_lex&);  \/\/ forbidden$/;"	p	class:catalan_path_lex	access:private	signature:(const catalan_path_lex&)
catalan_path_lex::catalan_path_lex	src/comb/catalan-path-lex.h	/^    explicit catalan_path_lex(ulong n)$/;"	f	class:catalan_path_lex	access:public	signature:(ulong n)
catalan_path_lex::data	src/comb/catalan-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_path_lex	access:public	signature:() const
catalan_path_lex::first	src/comb/catalan-path-lex.h	/^    void first()$/;"	f	class:catalan_path_lex	access:public	signature:()
catalan_path_lex::n_	src/comb/catalan-path-lex.h	/^    ulong n_;$/;"	m	class:catalan_path_lex	access:public
catalan_path_lex::next	src/comb/catalan-path-lex.h	/^    ulong next()$/;"	f	class:catalan_path_lex	access:public	signature:()
catalan_path_lex::operator =	src/comb/catalan-path-lex.h	/^    catalan_path_lex & operator = (const catalan_path_lex&);  \/\/ forbidden$/;"	p	class:catalan_path_lex	access:private	signature:(const catalan_path_lex&)
catalan_path_lex::print	src/comb/catalan-path-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:catalan_path_lex	access:public	signature:(const char *bla, bool dfz=false) const
catalan_path_lex::print_aa	src/comb/catalan-path-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_path_lex	access:public	signature:() const
catalan_path_lex::print_horiz_aa	src/comb/catalan-path-lex.h	/^    void print_horiz_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_path_lex	access:public	signature:() const
catalan_path_lex::~catalan_path_lex	src/comb/catalan-path-lex.h	/^    ~catalan_path_lex()$/;"	f	class:catalan_path_lex	access:public	signature:()
catalan_path_print_horiz_aa	src/comb/print-catalan-path-aa.cc	/^catalan_path_print_horiz_aa(const ulong *a, ulong n2)$/;"	f	signature:(const ulong *a, ulong n2)
catalan_path_print_horiz_aa	src/comb/print-catalan-path-aa.h	/^void catalan_path_print_horiz_aa(const ulong *a, ulong n2);$/;"	p	signature:(const ulong *a, ulong n2)
catalan_rgs	src/comb/catalan-rgs.h	/^    catalan_rgs(const catalan_rgs&);  \/\/ forbidden$/;"	p	class:catalan_rgs	access:private	signature:(const catalan_rgs&)
catalan_rgs	src/comb/catalan-rgs.h	/^    explicit catalan_rgs(ulong n)$/;"	f	class:catalan_rgs	access:public	signature:(ulong n)
catalan_rgs	src/comb/catalan-rgs.h	/^class catalan_rgs$/;"	c
catalan_rgs::OK	src/comb/catalan-rgs.h	/^    bool OK()  const$/;"	f	class:catalan_rgs	access:public	signature:() const
catalan_rgs::a_	src/comb/catalan-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs	access:public
catalan_rgs::bit_string	src/comb/catalan-rgs.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs	access:public	signature:()
catalan_rgs::catalan_rgs	src/comb/catalan-rgs.h	/^    catalan_rgs(const catalan_rgs&);  \/\/ forbidden$/;"	p	class:catalan_rgs	access:private	signature:(const catalan_rgs&)
catalan_rgs::catalan_rgs	src/comb/catalan-rgs.h	/^    explicit catalan_rgs(ulong n)$/;"	f	class:catalan_rgs	access:public	signature:(ulong n)
catalan_rgs::data	src/comb/catalan-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:catalan_rgs	access:public	signature:() const
catalan_rgs::first	src/comb/catalan-rgs.h	/^    void first()$/;"	f	class:catalan_rgs	access:public	signature:()
catalan_rgs::n_	src/comb/catalan-rgs.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs	access:public
catalan_rgs::next	src/comb/catalan-rgs.h	/^    ulong next()$/;"	f	class:catalan_rgs	access:public	signature:()
catalan_rgs::operator =	src/comb/catalan-rgs.h	/^    catalan_rgs & operator = (const catalan_rgs&);  \/\/ forbidden$/;"	p	class:catalan_rgs	access:private	signature:(const catalan_rgs&)
catalan_rgs::paren_string	src/comb/catalan-rgs.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs	access:public	signature:()
catalan_rgs::print	src/comb/catalan-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs	access:public	signature:(const char *bla, bool dfz=true) const
catalan_rgs::size	src/comb/catalan-rgs.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:catalan_rgs	access:public	signature:() const
catalan_rgs::str_	src/comb/catalan-rgs.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs	access:public
catalan_rgs::~catalan_rgs	src/comb/catalan-rgs.h	/^    ~catalan_rgs()$/;"	f	class:catalan_rgs	access:public	signature:()
catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    catalan_rgs_gray(const catalan_rgs_gray&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gray	access:private	signature:(const catalan_rgs_gray&)
catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    explicit catalan_rgs_gray(ulong n)$/;"	f	class:catalan_rgs_gray	access:public	signature:(ulong n)
catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^class catalan_rgs_gray$/;"	c
catalan_rgs_gray::OK	src/comb/catalan-rgs-gray.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_gray	access:public	signature:() const
catalan_rgs_gray::a_	src/comb/catalan-rgs-gray.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs_gray	access:public
catalan_rgs_gray::bit_string	src/comb/catalan-rgs-gray.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
catalan_rgs_gray::catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    catalan_rgs_gray(const catalan_rgs_gray&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gray	access:private	signature:(const catalan_rgs_gray&)
catalan_rgs_gray::catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    explicit catalan_rgs_gray(ulong n)$/;"	f	class:catalan_rgs_gray	access:public	signature:(ulong n)
catalan_rgs_gray::d_	src/comb/catalan-rgs-gray.h	/^    ulong *d_;  \/\/ direction$/;"	m	class:catalan_rgs_gray	access:public
catalan_rgs_gray::data	src/comb/catalan-rgs-gray.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_gray	access:public	signature:() const
catalan_rgs_gray::first	src/comb/catalan-rgs-gray.h	/^    void first(bool dr0=true)$/;"	f	class:catalan_rgs_gray	access:public	signature:(bool dr0=true)
catalan_rgs_gray::n_	src/comb/catalan-rgs-gray.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs_gray	access:public
catalan_rgs_gray::next	src/comb/catalan-rgs-gray.h	/^    ulong next()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
catalan_rgs_gray::operator =	src/comb/catalan-rgs-gray.h	/^    catalan_rgs_gray & operator = (const catalan_rgs_gray&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gray	access:private	signature:(const catalan_rgs_gray&)
catalan_rgs_gray::paren_string	src/comb/catalan-rgs-gray.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
catalan_rgs_gray::print	src/comb/catalan-rgs-gray.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs_gray	access:public	signature:(const char *bla, bool dfz=true) const
catalan_rgs_gray::str_	src/comb/catalan-rgs-gray.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_gray	access:public
catalan_rgs_gray::~catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    ~catalan_rgs_gray()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    catalan_rgs_gslex(const catalan_rgs_gslex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gslex	access:private	signature:(const catalan_rgs_gslex&)
catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    explicit catalan_rgs_gslex(ulong n)$/;"	f	class:catalan_rgs_gslex	access:public	signature:(ulong n)
catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^class catalan_rgs_gslex$/;"	c
catalan_rgs_gslex::OK	src/comb/catalan-rgs-gslex.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_gslex	access:public	signature:() const
catalan_rgs_gslex::a_	src/comb/catalan-rgs-gslex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:catalan_rgs_gslex	access:public
catalan_rgs_gslex::bit_string	src/comb/catalan-rgs-gslex.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
catalan_rgs_gslex::catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    catalan_rgs_gslex(const catalan_rgs_gslex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gslex	access:private	signature:(const catalan_rgs_gslex&)
catalan_rgs_gslex::catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    explicit catalan_rgs_gslex(ulong n)$/;"	f	class:catalan_rgs_gslex	access:public	signature:(ulong n)
catalan_rgs_gslex::data	src/comb/catalan-rgs-gslex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_gslex	access:public	signature:() const
catalan_rgs_gslex::first	src/comb/catalan-rgs-gslex.h	/^    void first()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
catalan_rgs_gslex::n_	src/comb/catalan-rgs-gslex.h	/^    ulong n_;   \/\/ number of digits (paren pairs)$/;"	m	class:catalan_rgs_gslex	access:public
catalan_rgs_gslex::next	src/comb/catalan-rgs-gslex.h	/^    bool next()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
catalan_rgs_gslex::operator =	src/comb/catalan-rgs-gslex.h	/^    catalan_rgs_gslex & operator = (const catalan_rgs_gslex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gslex	access:private	signature:(const catalan_rgs_gslex&)
catalan_rgs_gslex::paren_string	src/comb/catalan-rgs-gslex.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
catalan_rgs_gslex::str_	src/comb/catalan-rgs-gslex.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_gslex	access:public
catalan_rgs_gslex::tr_	src/comb/catalan-rgs-gslex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:catalan_rgs_gslex	access:public
catalan_rgs_gslex::~catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    ~catalan_rgs_gslex()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    catalan_rgs_subset_lex(const catalan_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_subset_lex	access:private	signature:(const catalan_rgs_subset_lex&)
catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    explicit catalan_rgs_subset_lex(ulong n)$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:(ulong n)
catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^class catalan_rgs_subset_lex$/;"	c
catalan_rgs_subset_lex::OK	src/comb/catalan-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:() const
catalan_rgs_subset_lex::a_	src/comb/catalan-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= as[k-1] + 1$/;"	m	class:catalan_rgs_subset_lex	access:public
catalan_rgs_subset_lex::bit_string	src/comb/catalan-rgs-subset-lex.h	/^    const char* bit_string()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    catalan_rgs_subset_lex(const catalan_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_subset_lex	access:private	signature:(const catalan_rgs_subset_lex&)
catalan_rgs_subset_lex::catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    explicit catalan_rgs_subset_lex(ulong n)$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:(ulong n)
catalan_rgs_subset_lex::data	src/comb/catalan-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:() const
catalan_rgs_subset_lex::first	src/comb/catalan-rgs-subset-lex.h	/^    void first()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::last	src/comb/catalan-rgs-subset-lex.h	/^    void last()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::n_	src/comb/catalan-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs_subset_lex	access:public
catalan_rgs_subset_lex::next	src/comb/catalan-rgs-subset-lex.h	/^    bool next()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::operator =	src/comb/catalan-rgs-subset-lex.h	/^    catalan_rgs_subset_lex & operator = (const catalan_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_subset_lex	access:private	signature:(const catalan_rgs_subset_lex&)
catalan_rgs_subset_lex::paren_string	src/comb/catalan-rgs-subset-lex.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::prev	src/comb/catalan-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_subset_lex::print	src/comb/catalan-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
catalan_rgs_subset_lex::str_	src/comb/catalan-rgs-subset-lex.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_subset_lex	access:public
catalan_rgs_subset_lex::tr_	src/comb/catalan-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:catalan_rgs_subset_lex	access:public
catalan_rgs_subset_lex::~catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    ~catalan_rgs_subset_lex()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
catalan_rgs_to_noncrossing_setpart_rgs	src/comb/catalan-rgs-to-noncrossing-setpart-rgs.h	/^inline void catalan_rgs_to_noncrossing_setpart_rgs(const ulong *A, ulong n,$/;"	f	signature:(const ulong *A, ulong n, ulong *P)
catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    catalan_step_rgs_colex(const catalan_step_rgs_colex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_colex	access:private	signature:(const catalan_step_rgs_colex&)
catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    explicit catalan_step_rgs_colex(ulong n)$/;"	f	class:catalan_step_rgs_colex	access:public	signature:(ulong n)
catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^class catalan_step_rgs_colex$/;"	c
catalan_step_rgs_colex::OK	src/comb/catalan-step-rgs-colex.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
catalan_step_rgs_colex::a_	src/comb/catalan-step-rgs-colex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_colex	access:public
catalan_step_rgs_colex::catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    catalan_step_rgs_colex(const catalan_step_rgs_colex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_colex	access:private	signature:(const catalan_step_rgs_colex&)
catalan_step_rgs_colex::catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    explicit catalan_step_rgs_colex(ulong n)$/;"	f	class:catalan_step_rgs_colex	access:public	signature:(ulong n)
catalan_step_rgs_colex::data	src/comb/catalan-step-rgs-colex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
catalan_step_rgs_colex::first	src/comb/catalan-step-rgs-colex.h	/^    void first()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
catalan_step_rgs_colex::last	src/comb/catalan-step-rgs-colex.h	/^    void last()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
catalan_step_rgs_colex::n_	src/comb/catalan-step-rgs-colex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:catalan_step_rgs_colex	access:public
catalan_step_rgs_colex::next	src/comb/catalan-step-rgs-colex.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
catalan_step_rgs_colex::operator =	src/comb/catalan-step-rgs-colex.h	/^    catalan_step_rgs_colex & operator = (const catalan_step_rgs_colex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_colex	access:private	signature:(const catalan_step_rgs_colex&)
catalan_step_rgs_colex::prev	src/comb/catalan-step-rgs-colex.h	/^    ulong prev()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
catalan_step_rgs_colex::print	src/comb/catalan-step-rgs-colex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_colex	access:public	signature:(const char *bla, bool dfz) const
catalan_step_rgs_colex::print_aa	src/comb/catalan-step-rgs-colex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
catalan_step_rgs_colex::tr_	src/comb/catalan-step-rgs-colex.h	/^    ulong tr_;  \/\/ current track (position of first non-zero element)$/;"	m	class:catalan_step_rgs_colex	access:public
catalan_step_rgs_colex::~catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    ~catalan_step_rgs_colex()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    catalan_step_rgs_lex(const catalan_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_lex	access:private	signature:(const catalan_step_rgs_lex&)
catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    explicit catalan_step_rgs_lex(ulong n)$/;"	f	class:catalan_step_rgs_lex	access:public	signature:(ulong n)
catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^class catalan_step_rgs_lex$/;"	c
catalan_step_rgs_lex::OK	src/comb/catalan-step-rgs-lex.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
catalan_step_rgs_lex::a_	src/comb/catalan-step-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_lex	access:public
catalan_step_rgs_lex::catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    catalan_step_rgs_lex(const catalan_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_lex	access:private	signature:(const catalan_step_rgs_lex&)
catalan_step_rgs_lex::catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    explicit catalan_step_rgs_lex(ulong n)$/;"	f	class:catalan_step_rgs_lex	access:public	signature:(ulong n)
catalan_step_rgs_lex::data	src/comb/catalan-step-rgs-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
catalan_step_rgs_lex::first	src/comb/catalan-step-rgs-lex.h	/^    void first()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
catalan_step_rgs_lex::last	src/comb/catalan-step-rgs-lex.h	/^    void last()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
catalan_step_rgs_lex::n_	src/comb/catalan-step-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:catalan_step_rgs_lex	access:public
catalan_step_rgs_lex::next	src/comb/catalan-step-rgs-lex.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
catalan_step_rgs_lex::operator =	src/comb/catalan-step-rgs-lex.h	/^    catalan_step_rgs_lex & operator = (const catalan_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_lex	access:private	signature:(const catalan_step_rgs_lex&)
catalan_step_rgs_lex::prev	src/comb/catalan-step-rgs-lex.h	/^    ulong prev()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
catalan_step_rgs_lex::print	src/comb/catalan-step-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
catalan_step_rgs_lex::print_aa	src/comb/catalan-step-rgs-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
catalan_step_rgs_lex::~catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    ~catalan_step_rgs_lex()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
catalan_step_rgs_print_aa	src/comb/print-catalan-step-rgs-aa.cc	/^catalan_step_rgs_print_aa(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
catalan_step_rgs_print_aa	src/comb/print-catalan-step-rgs-aa.h	/^void catalan_step_rgs_print_aa(const ulong *x, ulong n);$/;"	p	signature:(const ulong *x, ulong n)
catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    catalan_step_rgs_subset_lexrev(const catalan_step_rgs_subset_lexrev&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_subset_lexrev	access:private	signature:(const catalan_step_rgs_subset_lexrev&)
catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    explicit catalan_step_rgs_subset_lexrev(ulong n)$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:(ulong n)
catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^class catalan_step_rgs_subset_lexrev$/;"	c
catalan_step_rgs_subset_lexrev::OK	src/comb/catalan-step-rgs-subset-lexrev.h	/^    bool OK()  const$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
catalan_step_rgs_subset_lexrev::a_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
catalan_step_rgs_subset_lexrev::catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    catalan_step_rgs_subset_lexrev(const catalan_step_rgs_subset_lexrev&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_subset_lexrev	access:private	signature:(const catalan_step_rgs_subset_lexrev&)
catalan_step_rgs_subset_lexrev::catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    explicit catalan_step_rgs_subset_lexrev(ulong n)$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:(ulong n)
catalan_step_rgs_subset_lexrev::data	src/comb/catalan-step-rgs-subset-lexrev.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
catalan_step_rgs_subset_lexrev::first	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void first()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
catalan_step_rgs_subset_lexrev::n2_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong n2_;  \/\/ aux: min(n,2).$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
catalan_step_rgs_subset_lexrev::n_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
catalan_step_rgs_subset_lexrev::next	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
catalan_step_rgs_subset_lexrev::operator =	src/comb/catalan-step-rgs-subset-lexrev.h	/^    catalan_step_rgs_subset_lexrev & operator = (const catalan_step_rgs_subset_lexrev&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_subset_lexrev	access:private	signature:(const catalan_step_rgs_subset_lexrev&)
catalan_step_rgs_subset_lexrev::print	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:(const char *bla, bool dfz) const
catalan_step_rgs_subset_lexrev::print_aa	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
catalan_step_rgs_subset_lexrev::tr_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong tr_;  \/\/ aux: track we are looking at$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
catalan_step_rgs_subset_lexrev::~catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ~catalan_step_rgs_subset_lexrev()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
catalan_step_rgs_to_paren_string	src/comb/catalan-step-rgs-to-paren-string.h	/^inline void catalan_step_rgs_to_paren_string(const ulong *rgs, ulong n,  char *str)$/;"	f	signature:(const ulong *rgs, ulong n, char *str)
cayley_perm	src/comb/cayley-perm.h	/^    cayley_perm(const cayley_perm&);  \/\/ forbidden$/;"	p	class:cayley_perm	access:private	signature:(const cayley_perm&)
cayley_perm	src/comb/cayley-perm.h	/^    explicit cayley_perm(ulong n)$/;"	f	class:cayley_perm	access:public	signature:(ulong n)
cayley_perm	src/comb/cayley-perm.h	/^class cayley_perm$/;"	c
cayley_perm::a_	src/comb/cayley-perm.h	/^    ulong *a_;  \/\/ multiset data in a[0], ..., a[n-1], sentinels at [-1] and [-2]$/;"	m	class:cayley_perm	access:public
cayley_perm::cayley_perm	src/comb/cayley-perm.h	/^    cayley_perm(const cayley_perm&);  \/\/ forbidden$/;"	p	class:cayley_perm	access:private	signature:(const cayley_perm&)
cayley_perm::cayley_perm	src/comb/cayley-perm.h	/^    explicit cayley_perm(ulong n)$/;"	f	class:cayley_perm	access:public	signature:(ulong n)
cayley_perm::data	src/comb/cayley-perm.h	/^    const ulong * data()  const { return a_; }$/;"	f	class:cayley_perm	access:public	signature:() const
cayley_perm::first	src/comb/cayley-perm.h	/^    void first()$/;"	f	class:cayley_perm	access:public	signature:()
cayley_perm::first	src/comb/cayley-perm.h	/^    void first(ulong mi, ulong mx)$/;"	f	class:cayley_perm	access:public	signature:(ulong mi, ulong mx)
cayley_perm::m_	src/comb/cayley-perm.h	/^    ulong m_;   \/\/ maximal value (digit) in current word$/;"	m	class:cayley_perm	access:public
cayley_perm::max_digit	src/comb/cayley-perm.h	/^    ulong max_digit()  const { return m_; }$/;"	f	class:cayley_perm	access:public	signature:() const
cayley_perm::mi_	src/comb/cayley-perm.h	/^    ulong mi_;  \/\/ minimum value of max digit (== min value of m_)$/;"	m	class:cayley_perm	access:public
cayley_perm::mx_	src/comb/cayley-perm.h	/^    ulong mx_;  \/\/ maximal allowed digit (== max value of m_)$/;"	m	class:cayley_perm	access:public
cayley_perm::n_	src/comb/cayley-perm.h	/^    ulong n_;   \/\/ number of objects$/;"	m	class:cayley_perm	access:public
cayley_perm::next	src/comb/cayley-perm.h	/^    bool next()$/;"	f	class:cayley_perm	access:public	signature:()
cayley_perm::next_perm	src/comb/cayley-perm.h	/^    bool next_perm()$/;"	f	class:cayley_perm	access:private	signature:()
cayley_perm::num_parts	src/comb/cayley-perm.h	/^    ulong num_parts()  const { return n_; }$/;"	f	class:cayley_perm	access:public	signature:() const
cayley_perm::operator =	src/comb/cayley-perm.h	/^    cayley_perm & operator = (const cayley_perm&);  \/\/ forbidden$/;"	p	class:cayley_perm	access:private	signature:(const cayley_perm&)
cayley_perm::print	src/comb/cayley-perm.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:cayley_perm	access:public	signature:(const char *bla, bool dfz=false) const
cayley_perm::print_arrangement	src/comb/cayley-perm.cc	/^cayley_perm::print_arrangement(const char *bla)  const$/;"	f	class:cayley_perm	signature:(const char *bla) const
cayley_perm::print_arrangement	src/comb/cayley-perm.h	/^    void print_arrangement(const char *bla)  const;$/;"	p	class:cayley_perm	access:public	signature:(const char *bla) const
cayley_perm::~cayley_perm	src/comb/cayley-perm.h	/^    ~cayley_perm()$/;"	f	class:cayley_perm	access:public	signature:()
cc	src/bits/crc32.cc	/^const uint crc32::cc[] = {$/;"	m	class:crc32	file:
cc	src/bits/crc32.h	/^    static const uint cc[];  \/\/ 16 "random" 32-bit primitive polynomials$/;"	m	class:crc32	access:public
cc	src/bits/crc64.cc	/^const uint64 crc64::cc[] = {$/;"	m	class:crc64	file:
cc	src/bits/crc64.h	/^    static const uint64 cc[];  \/\/ 16 "random" 64-bit primitive polynomials$/;"	m	class:crc64	access:public
cc_	src/comb/attic/stringsubst.h	/^    char  *cc_;  \/\/ string to hold result$/;"	m	class:string_subst	access:public
cc_	src/comb/num-compositions.h	/^    ulong *cc_;  \/\/ data (binomial coefficients)$/;"	m	class:num_compositions	access:public
ccf2perm	doc/perm-doc.txt	/^void ccf2perm(const ulong *c, ulong n, ulong *p, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const ulong *c, ulong n, ulong *p, bitarray *tb )
ccf2perm	src/perm/perm2ccf.cc	/^ccf2perm(const ulong *c, ulong n, ulong *p, bitarray *tb\/*=0*\/)$/;"	f	signature:(const ulong *c, ulong n, ulong *p, bitarray *tb )
ccf2perm	src/perm/perm2ccf.h	/^void ccf2perm(const ulong *c, ulong n, ulong *p, bitarray *tb=0);$/;"	p	signature:(const ulong *c, ulong n, ulong *p, bitarray *tb=0)
ccoord	src/comb/wfl-hilbert.h	/^    ulong ccoord[WFL_MAXDIM];  \/\/ jj: static layout for speed$/;"	m	class:wfl_cell	access:public
cct_	src/graph/attic/debruijngraph.h	/^    ulong cct_;  \/\/ count Cycles$/;"	m	class:debruijn_cycles	access:public
cct_	src/graph/digraph-paths.h	/^    ulong cct_;  \/\/ count Cycles$/;"	m	class:digraph_paths	access:public
cedge	src/comb/wfl-hilbert.h	/^    ulong cedge; \/\/ transforming edge-pair or corresponding symbol indexing tables$/;"	m	class:wfl_cell	access:public
ceil_average	doc/bits-doc.txt	/^static inline ulong ceil_average(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
ceil_average	src/bits/average.h	/^static inline ulong ceil_average(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
cell	doc/wfl-hilbert-doc.txt	/^  d equals the dimension; l indexes the level of a cell;$/;"	v
centered_array2d	src/ds/centered-array2d.h	/^    explicit centered_array2d(long ck)$/;"	f	class:centered_array2d	access:public	signature:(long ck)
centered_array2d	src/ds/centered-array2d.h	/^class centered_array2d$/;"	c
centered_array2d::A	src/ds/centered-array2d.h	/^    array2d<Type> A;$/;"	m	class:centered_array2d	access:private
centered_array2d::Pnt	src/ds/centered-array2d.h	/^    typedef point2d<long> Pnt;$/;"	t	class:centered_array2d	access:private
centered_array2d::Vec	src/ds/centered-array2d.h	/^    typedef vector2d<long> Vec;$/;"	t	class:centered_array2d	access:private
centered_array2d::centered_array2d	src/ds/centered-array2d.h	/^    explicit centered_array2d(long ck)$/;"	f	class:centered_array2d	access:public	signature:(long ck)
centered_array2d::k	src/ds/centered-array2d.h	/^    long k;$/;"	m	class:centered_array2d	access:private
centered_array2d::null	src/ds/centered-array2d.h	/^    void null()  { A.null(); }$/;"	f	class:centered_array2d	access:public	signature:()
centered_array2d::operator []	src/ds/centered-array2d.h	/^    Type & operator [] (const Pnt & P)$/;"	f	class:centered_array2d	access:public	signature:(const Pnt & P)
centered_array2d::operator []	src/ds/centered-array2d.h	/^    Type & operator [] (const Vec & V)$/;"	f	class:centered_array2d	access:public	signature:(const Vec & V)
centered_array2d::operator []	src/ds/centered-array2d.h	/^    const Type & operator [] (const Pnt & P)  const$/;"	f	class:centered_array2d	access:public	signature:(const Pnt & P) const
centered_array2d::operator []	src/ds/centered-array2d.h	/^    const Type & operator [] (const Vec & V)  const$/;"	f	class:centered_array2d	access:public	signature:(const Vec & V) const
centered_array2d::~centered_array2d	src/ds/centered-array2d.h	/^    ~centered_array2d()  {;}$/;"	f	class:centered_array2d	access:public	signature:()
centered_array3d	src/ds/centered-array3d.h	/^    explicit centered_array3d(long ck)$/;"	f	class:centered_array3d	access:public	signature:(long ck)
centered_array3d	src/ds/centered-array3d.h	/^class centered_array3d$/;"	c
centered_array3d::A	src/ds/centered-array3d.h	/^    array3d<Type> A;$/;"	m	class:centered_array3d	access:private
centered_array3d::Pnt	src/ds/centered-array3d.h	/^    typedef point3d<long> Pnt;$/;"	t	class:centered_array3d	access:private
centered_array3d::Vec	src/ds/centered-array3d.h	/^    typedef vector3d<long> Vec;$/;"	t	class:centered_array3d	access:private
centered_array3d::centered_array3d	src/ds/centered-array3d.h	/^    explicit centered_array3d(long ck)$/;"	f	class:centered_array3d	access:public	signature:(long ck)
centered_array3d::k	src/ds/centered-array3d.h	/^    long k;$/;"	m	class:centered_array3d	access:private
centered_array3d::null	src/ds/centered-array3d.h	/^    void null()  { A.null(); }$/;"	f	class:centered_array3d	access:public	signature:()
centered_array3d::operator []	src/ds/centered-array3d.h	/^    Type & operator [] (const Pnt & P)$/;"	f	class:centered_array3d	access:public	signature:(const Pnt & P)
centered_array3d::operator []	src/ds/centered-array3d.h	/^    Type & operator [] (const Vec & V)$/;"	f	class:centered_array3d	access:public	signature:(const Vec & V)
centered_array3d::operator []	src/ds/centered-array3d.h	/^    const Type & operator [] (const Pnt & P)  const$/;"	f	class:centered_array3d	access:public	signature:(const Pnt & P) const
centered_array3d::operator []	src/ds/centered-array3d.h	/^    const Type & operator [] (const Vec & V)  const$/;"	f	class:centered_array3d	access:public	signature:(const Vec & V) const
centered_array3d::~centered_array3d	src/ds/centered-array3d.h	/^    ~centered_array3d()  {;}$/;"	f	class:centered_array3d	access:public	signature:()
cf	demo/graph/graph-lyndon-gray-demo.cc	/^CF cf[] = {$/;"	v
cf_mt	demo/graph/graph-acgray-demo.cc	/^ulong cf_mt;  \/\/ mid track < cf_mt,  set in main()$/;"	v
cf_nb	demo/graph/graph-macgray-demo.cc	/^ulong cf_nb;  \/\/ number of bits,  set in main()$/;"	v
cfdone_	src/graph/attic/debruijngraph.h	/^    bool cfdone_;  \/\/ if set (by cfunc()) then search is stopped$/;"	m	class:debruijn_cycles	access:public
cfunc_	src/graph/attic/debruijngraph.h	/^    void (*cfunc_)(debruijn_cycles &);  \/\/ function to call with each cycle found$/;"	m	class:debruijn_cycles	access:public
cfunc_	src/graph/digraph-paths.h	/^    bool (*cfunc_)(digraph_paths &, ulong ns);  \/\/ can set pfdone_$/;"	m	class:digraph_paths	access:public
cfunc_ac	demo/graph/graph-acgray-demo.cc	/^bool cfunc_ac(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_adj	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^bool cfunc_adj(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_both	demo/graph/graph-lyndon-gray-demo.cc	/^bool cfunc_both(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_mac	demo/graph/graph-macgray-demo.cc	/^bool cfunc_mac(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_max	demo/graph/graph-fibrepgray-demo.cc	/^bool cfunc_max(digraph_paths &dp, ulong \/*ns*\/)$/;"	f	signature:(digraph_paths &dp, ulong )
cfunc_monotonic	demo/graph/graph-lyndon-gray-demo.cc	/^bool cfunc_monotonic(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_monotonic	demo/graph/graph-monotonicgray-demo.cc	/^cfunc_monotonic(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
cfunc_rot0	demo/graph/graph-lyndon-gray-demo.cc	/^bool cfunc_rot0(digraph_paths &dp, ulong ns)$/;"	f	signature:(digraph_paths &dp, ulong ns)
change	src/ds/bitarray.h	/^    void change(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
change_bit	doc/bits-doc.txt	/^static inline ulong change_bit(ulong a, ulong i);$/;"	p	file:	signature:(ulong a, ulong i)
change_bit	src/bits/bittest.h	/^static inline ulong change_bit(ulong a, ulong i)$/;"	f	signature:(ulong a, ulong i)
change_rgs	src/comb/change-rgs.h	/^    change_rgs(const change_rgs&);  \/\/ forbidden$/;"	p	class:change_rgs	access:private	signature:(const change_rgs&)
change_rgs	src/comb/change-rgs.h	/^    explicit change_rgs(ulong n)$/;"	f	class:change_rgs	access:public	signature:(ulong n)
change_rgs	src/comb/change-rgs.h	/^class change_rgs$/;"	c
change_rgs::OK	src/comb/change-rgs.h	/^    bool OK()  const$/;"	f	class:change_rgs	access:public	signature:() const
change_rgs::a_	src/comb/change-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:change_rgs	access:public
change_rgs::change_rgs	src/comb/change-rgs.h	/^    change_rgs(const change_rgs&);  \/\/ forbidden$/;"	p	class:change_rgs	access:private	signature:(const change_rgs&)
change_rgs::change_rgs	src/comb/change-rgs.h	/^    explicit change_rgs(ulong n)$/;"	f	class:change_rgs	access:public	signature:(ulong n)
change_rgs::data	src/comb/change-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:change_rgs	access:public	signature:() const
change_rgs::first	src/comb/change-rgs.h	/^    void first()$/;"	f	class:change_rgs	access:public	signature:()
change_rgs::last	src/comb/change-rgs.h	/^    void last()$/;"	f	class:change_rgs	access:public	signature:()
change_rgs::m_	src/comb/change-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of changes in prefix a[0,1,..,k]$/;"	m	class:change_rgs	access:public
change_rgs::n_	src/comb/change-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:change_rgs	access:public
change_rgs::next	src/comb/change-rgs.h	/^    ulong next()$/;"	f	class:change_rgs	access:public	signature:()
change_rgs::num_changes	src/comb/change-rgs.h	/^    ulong num_changes()  const$/;"	f	class:change_rgs	access:public	signature:() const
change_rgs::operator =	src/comb/change-rgs.h	/^    change_rgs & operator = (const change_rgs&);  \/\/ forbidden$/;"	p	class:change_rgs	access:private	signature:(const change_rgs&)
change_rgs::prev	src/comb/change-rgs.h	/^    ulong prev()$/;"	f	class:change_rgs	access:public	signature:()
change_rgs::print	src/comb/change-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:change_rgs	access:public	signature:(const char *bla, bool dfz=true) const
change_rgs::~change_rgs	src/comb/change-rgs.h	/^    ~change_rgs()$/;"	f	class:change_rgs	access:public	signature:()
chebyT	doc/mod-doc.txt	/^umod_t chebyT(umod_t n, umod_t x, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t x, umod_t m)
chebyT	doc/mod-doc.txt	/^void chebyT(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m)
chebyT	src/mod/chebyshev.h	/^umod_t chebyT(umod_t n, umod_t x, umod_t m);$/;"	p	signature:(umod_t n, umod_t x, umod_t m)
chebyT	src/mod/chebyshev.h	/^void chebyT(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m);$/;"	p	signature:(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m)
chebyT	src/mod/chebyshev1.cc	/^chebyT(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m)$/;"	f	signature:(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m)
chebyT	src/mod/chebyshev1.cc	/^chebyT(umod_t n, umod_t x, umod_t m)$/;"	f	signature:(umod_t n, umod_t x, umod_t m)
chebyT2	doc/mod-doc.txt	/^umod_t chebyT2(umod_t n, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t m)
chebyT2	doc/mod-doc.txt	/^void chebyT2(umod_t n, umod_t &t1, umod_t &t0, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t &t1, umod_t &t0, umod_t m)
chebyT2	src/mod/chebyshev.h	/^umod_t chebyT2(umod_t n, umod_t m);$/;"	p	signature:(umod_t n, umod_t m)
chebyT2	src/mod/chebyshev.h	/^void chebyT2(umod_t n, umod_t &t1, umod_t &t0, umod_t m);$/;"	p	signature:(umod_t n, umod_t &t1, umod_t &t0, umod_t m)
chebyT2	src/mod/chebyshev1.cc	/^chebyT2(umod_t n, umod_t &t1, umod_t &t0, umod_t m)$/;"	f	signature:(umod_t n, umod_t &t1, umod_t &t0, umod_t m)
chebyT2	src/mod/chebyshev1.cc	/^chebyT2(umod_t n, umod_t m)$/;"	f	signature:(umod_t n, umod_t m)
chebyU	doc/mod-doc.txt	/^umod_t chebyU(umod_t n, umod_t x, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t x, umod_t m)
chebyU	doc/mod-doc.txt	/^void chebyU(umod_t n, umod_t x, umod_t &u1, umod_t &u0, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t x, umod_t &u1, umod_t &u0, umod_t m)
chebyU	src/mod/chebyshev.h	/^umod_t chebyU(umod_t n, umod_t x, umod_t m);$/;"	p	signature:(umod_t n, umod_t x, umod_t m)
chebyU	src/mod/chebyshev.h	/^void chebyU(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m);$/;"	p	signature:(umod_t n, umod_t x, umod_t &t1, umod_t &t0, umod_t m)
chebyU	src/mod/chebyshev2.cc	/^chebyU(umod_t n, umod_t x, umod_t &u1, umod_t &u0, umod_t m)$/;"	f	signature:(umod_t n, umod_t x, umod_t &u1, umod_t &u0, umod_t m)
chebyU	src/mod/chebyshev2.cc	/^chebyU(umod_t n, umod_t x, umod_t m)$/;"	f	signature:(umod_t n, umod_t x, umod_t m)
chebyU2	doc/mod-doc.txt	/^umod_t chebyU2(umod_t n, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t m)
chebyU2	doc/mod-doc.txt	/^void chebyU2(umod_t n, umod_t &u1, umod_t &u0, umod_t m);$/;"	p	file:	signature:(umod_t n, umod_t &u1, umod_t &u0, umod_t m)
chebyU2	src/mod/chebyshev.h	/^umod_t chebyU2(umod_t n, umod_t m);$/;"	p	signature:(umod_t n, umod_t m)
chebyU2	src/mod/chebyshev.h	/^void chebyU2(umod_t n, umod_t &u1, umod_t &u0, umod_t m);$/;"	p	signature:(umod_t n, umod_t &u1, umod_t &u0, umod_t m)
chebyU2	src/mod/chebyshev2.cc	/^chebyU2(umod_t n, umod_t &u1, umod_t &u0, umod_t m)$/;"	f	signature:(umod_t n, umod_t &u1, umod_t &u0, umod_t m)
chebyU2	src/mod/chebyshev2.cc	/^chebyU2(umod_t n, umod_t m)$/;"	f	signature:(umod_t n, umod_t m)
check	demo/graph/lyndon-gray-demo.cc	/^check(lyndon_gray &lg)$/;"	f	signature:(lyndon_gray &lg)
check	src/bpol/gf2n.cc	/^GF2n::check()  \/\/ uses asserts$/;"	f	class:GF2n	signature:()
check	src/bpol/gf2n.h	/^    static void check();  \/\/ uses asserts$/;"	p	class:GF2n	access:public	signature:()
check	src/comb/partition-gen.cc	/^partition_gen::check(ulong i\/*=0*\/)  const$/;"	f	class:partition_gen	signature:(ulong i ) const
check	src/comb/partition-gen.h	/^    bool check(ulong i=0)  const;$/;"	p	class:partition_gen	access:public	signature:(ulong i=0) const
check	src/mod/factor.cc	/^factorization::check()  const$/;"	f	class:factorization	signature:() const
check	src/mod/factor.h	/^    bool  check()  const;$/;"	p	class:factorization	access:public	signature:() const
check	src/wavelet/waveletfilter.h	/^    bool check(double eps=1e-6) const$/;"	f	class:wavelet_filter	access:public	signature:(double eps=1e-6) const
check_gray	demo/comb/no111-gray-demo.cc	/^bool check_gray()$/;"	f	signature:()
check_gray	demo/comb/no1111-gray-demo.cc	/^bool check_gray()$/;"	f	signature:()
check_gray	demo/comb/no1xy1-gray-demo.cc	/^bool check_gray()$/;"	f	signature:()
check_kpermgen	src/comb/check-kpermgen.h	/^    check_kpermgen(const check_kpermgen&);  \/\/ forbidden$/;"	p	class:check_kpermgen	access:private	signature:(const check_kpermgen&)
check_kpermgen	src/comb/check-kpermgen.h	/^    explicit check_kpermgen(ulong n, ulong k)$/;"	f	class:check_kpermgen	access:public	signature:(ulong n, ulong k)
check_kpermgen	src/comb/check-kpermgen.h	/^class check_kpermgen : bitarray$/;"	c	inherits:bitarray
check_kpermgen::N_	src/comb/check-kpermgen.h	/^    ulong N_;$/;"	m	class:check_kpermgen	access:public
check_kpermgen::a_	src/comb/check-kpermgen.h	/^    ulong *a_;  \/\/ for mixed radix numbers$/;"	m	class:check_kpermgen	access:public
check_kpermgen::check_kpermgen	src/comb/check-kpermgen.h	/^    check_kpermgen(const check_kpermgen&);  \/\/ forbidden$/;"	p	class:check_kpermgen	access:private	signature:(const check_kpermgen&)
check_kpermgen::check_kpermgen	src/comb/check-kpermgen.h	/^    explicit check_kpermgen(ulong n, ulong k)$/;"	f	class:check_kpermgen	access:public	signature:(ulong n, ulong k)
check_kpermgen::first	src/comb/check-kpermgen.h	/^    void first(const ulong *x)$/;"	f	class:check_kpermgen	access:public	signature:(const ulong *x)
check_kpermgen::have_all	src/comb/check-kpermgen.h	/^    bool have_all()  const$/;"	f	class:check_kpermgen	access:public	signature:() const
check_kpermgen::is_repeat	src/comb/check-kpermgen.h	/^    bool is_repeat()$/;"	f	class:check_kpermgen	access:public	signature:()
check_kpermgen::is_repeat_rev	src/comb/check-kpermgen.h	/^    bool is_repeat_rev()$/;"	f	class:check_kpermgen	access:public	signature:()
check_kpermgen::k_	src/comb/check-kpermgen.h	/^    ulong k_;$/;"	m	class:check_kpermgen	access:public
check_kpermgen::n_	src/comb/check-kpermgen.h	/^    ulong n_;$/;"	m	class:check_kpermgen	access:public
check_kpermgen::operator =	src/comb/check-kpermgen.h	/^    check_kpermgen & operator = (const check_kpermgen&);  \/\/ forbidden$/;"	p	class:check_kpermgen	access:private	signature:(const check_kpermgen&)
check_kpermgen::r_	src/comb/check-kpermgen.h	/^    ulong *r_;  \/\/ for reversed permutations$/;"	m	class:check_kpermgen	access:public
check_kpermgen::x_	src/comb/check-kpermgen.h	/^    const ulong *x_;$/;"	m	class:check_kpermgen	access:public
check_kpermgen::~check_kpermgen	src/comb/check-kpermgen.h	/^    ~check_kpermgen()$/;"	f	class:check_kpermgen	access:public	signature:()
check_mixedradix	src/comb/check-mixedradix.h	/^    check_mixedradix(const check_mixedradix&);  \/\/ forbidden$/;"	p	class:check_mixedradix	access:private	signature:(const check_mixedradix&)
check_mixedradix	src/comb/check-mixedradix.h	/^    explicit check_mixedradix(const ulong *m1, ulong n)$/;"	f	class:check_mixedradix	access:public	signature:(const ulong *m1, ulong n)
check_mixedradix	src/comb/check-mixedradix.h	/^class check_mixedradix : public bitarray$/;"	c	inherits:bitarray
check_mixedradix::all_seen	src/comb/check-mixedradix.h	/^    bool all_seen()  const$/;"	f	class:check_mixedradix	access:public	signature:() const
check_mixedradix::check_mixedradix	src/comb/check-mixedradix.h	/^    check_mixedradix(const check_mixedradix&);  \/\/ forbidden$/;"	p	class:check_mixedradix	access:private	signature:(const check_mixedradix&)
check_mixedradix::check_mixedradix	src/comb/check-mixedradix.h	/^    explicit check_mixedradix(const ulong *m1, ulong n)$/;"	f	class:check_mixedradix	access:public	signature:(const ulong *m1, ulong n)
check_mixedradix::first	src/comb/check-mixedradix.h	/^    void first(const ulong *x)$/;"	f	class:check_mixedradix	access:public	signature:(const ulong *x)
check_mixedradix::is_repeat	src/comb/check-mixedradix.h	/^    bool is_repeat()$/;"	f	class:check_mixedradix	access:public	signature:()
check_mixedradix::m1_	src/comb/check-mixedradix.h	/^    const ulong *m1_;$/;"	m	class:check_mixedradix	access:public
check_mixedradix::n_	src/comb/check-mixedradix.h	/^    ulong n_;$/;"	m	class:check_mixedradix	access:public
check_mixedradix::operator =	src/comb/check-mixedradix.h	/^    check_mixedradix & operator = (const check_mixedradix&);  \/\/ forbidden$/;"	p	class:check_mixedradix	access:private	signature:(const check_mixedradix&)
check_mixedradix::x_	src/comb/check-mixedradix.h	/^    const ulong *x_;$/;"	m	class:check_mixedradix	access:public
check_mixedradix::~check_mixedradix	src/comb/check-mixedradix.h	/^    ~check_mixedradix()  {;}$/;"	f	class:check_mixedradix	access:public	signature:()
check_permgen	src/comb/check-permgen.h	/^    check_permgen(const check_permgen&);  \/\/ forbidden$/;"	p	class:check_permgen	access:private	signature:(const check_permgen&)
check_permgen	src/comb/check-permgen.h	/^    explicit check_permgen(ulong n)$/;"	f	class:check_permgen	access:public	signature:(ulong n)
check_permgen	src/comb/check-permgen.h	/^class check_permgen : bitarray$/;"	c	inherits:bitarray
check_permgen::check_permgen	src/comb/check-permgen.h	/^    check_permgen(const check_permgen&);  \/\/ forbidden$/;"	p	class:check_permgen	access:private	signature:(const check_permgen&)
check_permgen::check_permgen	src/comb/check-permgen.h	/^    explicit check_permgen(ulong n)$/;"	f	class:check_permgen	access:public	signature:(ulong n)
check_permgen::first	src/comb/check-permgen.h	/^    void first(const ulong *x)$/;"	f	class:check_permgen	access:public	signature:(const ulong *x)
check_permgen::is_repeat	src/comb/check-permgen.h	/^    bool is_repeat()$/;"	f	class:check_permgen	access:public	signature:()
check_permgen::is_repeat_rev	src/comb/check-permgen.h	/^    bool is_repeat_rev()$/;"	f	class:check_permgen	access:public	signature:()
check_permgen::n_	src/comb/check-permgen.h	/^    ulong n_;$/;"	m	class:check_permgen	access:public
check_permgen::operator =	src/comb/check-permgen.h	/^    check_permgen & operator = (const check_permgen&);  \/\/ forbidden$/;"	p	class:check_permgen	access:private	signature:(const check_permgen&)
check_permgen::r_	src/comb/check-permgen.h	/^    ulong *r_;  \/\/ for reversed permutations$/;"	m	class:check_permgen	access:public
check_permgen::x_	src/comb/check-permgen.h	/^    const ulong *x_;$/;"	m	class:check_permgen	access:public
check_permgen::~check_permgen	src/comb/check-permgen.h	/^    ~check_permgen()$/;"	f	class:check_permgen	access:public	signature:()
check_pos	src/comb/acyclic-map.h	/^    bool check_pos(ulong j)  const$/;"	f	class:acyclic_map	access:private	signature:(ulong j) const
chinese	doc/mod-doc.txt	/^umod_t chinese(const umod_t *x, const factorization &f);$/;"	p	file:	signature:(const umod_t *x, const factorization &f)
chinese	src/mod/chinese.cc	/^chinese(const umod_t *x, const factorization &f)$/;"	f	signature:(const umod_t *x, const factorization &f)
chinese	src/mod/numtheory.h	/^umod_t chinese(const umod_t *x, const factorization &f);$/;"	p	signature:(const umod_t *x, const factorization &f)
chk_dp	src/aux0/attic/funcemu.h	/^    void chk_dp(ulong j=0)  const$/;"	f	class:funcemu	access:public	signature:(ulong j=0) const
chk_dp	src/aux0/attic/funcemu.h	63;"	d
chk_dp	src/ds/attic/coroutine.h	/^    void chk_dp(ulong j=0)  const$/;"	f	class:coroutine	access:public	signature:(ulong j=0) const
chk_dp	src/ds/attic/coroutine.h	60;"	d
chk_gray	demo/comb/gexz-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/naf-gray-rec-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/ntnz-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/ntz-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/perm-dist1-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/perm-l1r2-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_gray	demo/comb/perm-right1-gray-demo.cc	/^ulong chk_gray()$/;"	f	signature:()
chk_tp	src/aux0/attic/funcemu.h	/^    void chk_tp(ulong j=0)  const$/;"	f	class:funcemu	access:public	signature:(ulong j=0) const
chk_tp	src/aux0/attic/funcemu.h	62;"	d
chk_tp	src/ds/attic/coroutine.h	/^    void chk_tp(ulong j=0)  const$/;"	f	class:coroutine	access:public	signature:(ulong j=0) const
chk_tp	src/ds/attic/coroutine.h	59;"	d
cholesky	src/matrix/attic/cholesky.h	/^ulong cholesky(MAT &A, Type *v=0)$/;"	f	signature:(MAT &A, Type *v=0)
cholesky_invert	src/matrix/attic/cholesky.h	/^void cholesky_invert(const MAT &L, const Type *v, MAT &A)$/;"	f	signature:(const MAT &L, const Type *v, MAT &A)
cholesky_pseudo_inverse	src/matrix/attic/cholesky.h	/^ulong cholesky_pseudo_inverse(const MAT &X, MAT &J)$/;"	f	signature:(const MAT &X, MAT &J)
cholesky_solve	src/matrix/attic/cholesky.h	/^void cholesky_solve(const MAT &L, const Type *v, const Type *b, Type *x)$/;"	f	signature:(const MAT &L, const Type *v, const Type *b, Type *x)
choose_min	src/graph/lyndon-gray.h	/^    inline ulong choose_min(ulong u)$/;"	f	class:lyndon_gray	access:public	signature:(ulong u)
chop	demo/fft/fft-arblen-demo.cc	/^chop(Complex x, double eps=1e-9)$/;"	f	signature:(Complex x, double eps=1e-9)
chop	demo/fft/fft-arblen-demo.cc	/^chop(double x, double eps=1e-9)$/;"	f	signature:(double x, double eps=1e-9)
chop	src/aux0/attic/aux0double.cc	/^chop(double &x, double eps=1e-6)$/;"	f	signature:(double &x, double eps=1e-6)
chop	src/aux0/attic/aux0double.h	/^void chop(double &x, double eps=1e-6);$/;"	p	signature:(double &x, double eps=1e-6)
chop0	src/aux0/tex-line.cc	/^static inline double chop0(double x)  { if ( fabs(x)<0.001 )  x=0.0;  return x; }$/;"	f	file:	signature:(double x)
cl_	src/comb/attic/all-compositions-minchange.h	/^    composition_colex cl_;$/;"	m	class:all_compositions_minchange	access:public
clear	src/ds/bitarray.h	/^    void clear(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
clear_all	src/ds/bitarray.h	/^    void clear_all()$/;"	f	class:bitarray	access:public	signature:()
clear_bit	doc/bits-doc.txt	/^static inline ulong clear_bit(ulong a, ulong i);$/;"	p	file:	signature:(ulong a, ulong i)
clear_bit	src/bits/bittest.h	/^static inline ulong clear_bit(ulong a, ulong i)$/;"	f	signature:(ulong a, ulong i)
clear_lowest_one	doc/bits-doc.txt	/^static inline ulong clear_lowest_one(ulong x);$/;"	p	file:	signature:(ulong x)
clear_lowest_one	src/bits/bitlow.h	/^static inline ulong clear_lowest_one(ulong x)$/;"	f	signature:(ulong x)
clear_unused	demo/ds/queue-demo.cc	/^clear_unused(queue<ulong> &f)$/;"	f	file:	signature:(queue<ulong> &f)
clear_vars	scripts/eval-bench-log.pl	/^sub clear_vars()$/;"	f	signature:()
clhca2poly	doc/bpol-doc.txt	/^inline ulong clhca2poly(ulong r, ulong n);$/;"	p	file:	signature:(ulong r, ulong n)
clhca2poly	src/bpol/clhca.h	/^inline ulong clhca2poly(ulong r, ulong n)$/;"	f	signature:(ulong r, ulong n)
clhca2poly_too	doc/bpol-doc.txt	/^inline ulong clhca2poly_too(ulong r, ulong n);$/;"	p	file:	signature:(ulong r, ulong n)
clhca2poly_too	src/bpol/clhca.h	/^inline ulong clhca2poly_too(ulong r, ulong n)$/;"	f	signature:(ulong r, ulong n)
clhca_next	doc/bpol-doc.txt	/^inline ulong clhca_next(ulong x, ulong r, ulong n);$/;"	p	file:	signature:(ulong x, ulong r, ulong n)
clhca_next	src/bpol/clhca.h	/^inline ulong clhca_next(ulong x, ulong r, ulong n)$/;"	f	signature:(ulong x, ulong r, ulong n)
clip_range	doc/bits-doc.txt	/^static inline long clip_range(long x, long mi, long ma);$/;"	p	file:	signature:(long x, long mi, long ma)
clip_range	src/aux0/attic/range.h	/^static inline void clip_range(Type xmin, Type xmax, Type &x)$/;"	f	signature:(Type xmin, Type xmax, Type &x)
clip_range	src/bits/branchless.h	/^static inline long clip_range(long x, long mi, long ma)$/;"	f	signature:(long x, long mi, long ma)
clip_range0	doc/bits-doc.txt	/^static inline long clip_range0(long x, long m);$/;"	p	file:	signature:(long x, long m)
clip_range0	src/aux0/attic/range.h	/^static inline void clip_range0(Type xmax, Type &x)$/;"	f	signature:(Type xmax, Type &x)
clip_range0	src/bits/branchless.h	/^static inline long clip_range0(long x, long m)$/;"	f	signature:(long x, long m)
clip_range_q	src/aux0/attic/range.h	/^static inline bool clip_range_q(Type xmin, Type xmax, Type &x)$/;"	f	signature:(Type xmin, Type xmax, Type &x)
cmax_	src/comb/attic/stringsubst.h	/^    ulong cmax_;  \/\/ max string length$/;"	m	class:string_subst	access:public
cmp	src/graph/lyndon-gray.h	/^    int (*cmp)(const ulong &, const ulong &);$/;"	m	class:lyndon_gray	access:public
cmp0	src/graph/digraph.cc	/^static inline int cmp0(const ulong &a, const ulong &b)$/;"	f	file:	signature:(const ulong &a, const ulong &b)
cmp1	src/graph/digraph.cc	/^static inline int cmp1(const ulong &a, const ulong &b)$/;"	f	file:	signature:(const ulong &a, const ulong &b)
cmp_blue	demo/graph/graph-gray-demo.cc	/^int cmp_blue(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
cmp_complex	demo/sort/sort-complex-demo.cc	/^cmp_complex(const Complex &f, const Complex &g)$/;"	f	file:	signature:(const Complex &f, const Complex &g)
cmp_complex	src/sort/attic/sortcomplex.cc	/^cmp_complex(const Complex &f, const Complex &g)$/;"	f	file:	signature:(const Complex &f, const Complex &g)
cmp_exp	demo/graph/graph-mtl-demo.cc	/^int cmp_exp(const ulong &a, const ulong &b)  \/\/ for experiments$/;"	f	signature:(const ulong &a, const ulong &b)
cmp_g03	src/graph/lyndon-gray.h	/^    static int cmp_g03(const ulong &a, const ulong &b)  \/\/ ncmp==0$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmp_g05	src/graph/lyndon-gray.h	/^    static int cmp_g05(const ulong &a, const ulong &b)  \/\/ ncmp==1$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmp_g21	src/graph/lyndon-gray.h	/^    static int cmp_g21(const ulong &a, const ulong &b)  \/\/ ncmp==2$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmp_g29	src/graph/lyndon-gray.h	/^    static int cmp_g29(const ulong &a, const ulong &b)  \/\/ ncmp==3$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmp_igc	src/graph/lyndon-gray.h	/^    static int cmp_igc(const ulong &a, const ulong &b)  \/\/ ncmp==4$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmp_lex	demo/graph/graph-gray-demo.cc	/^int cmp_lex(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
cmp_mtl	demo/graph/graph-mtl-demo.cc	/^int cmp_mtl(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
cmp_test	src/graph/lyndon-gray.h	/^    static int cmp_test(const ulong &a, const ulong &b)  \/\/ ncmp==5 (playground)$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
cmult	src/aux0/cmult.h	/^static inline void cmult(Complex c, Complex s,$/;"	f	signature:(Complex c, Complex s, Complex x, Complex y, Complex &u, Complex &v)
cmult	src/aux0/cmult.h	/^static inline void cmult(double c, double s,$/;"	f	signature:(double c, double s, Complex x, Complex y, Complex &u, Complex &v)
cmult	src/aux0/cmult.h	/^static inline void cmult(double c, double s,$/;"	f	signature:(double c, double s, double &u, double &v)
cmult	src/aux0/cmult.h	/^static inline void cmult(double c, double s,$/;"	f	signature:(double c, double s, double x, double y, double &u, double &v)
cmult_inv	src/aux0/cmult.h	/^static inline void cmult_inv(Complex c, Complex s,$/;"	f	signature:(Complex c, Complex s, Complex x, Complex y, Complex &u, Complex &v)
cmult_inv	src/aux0/cmult.h	/^static inline void cmult_inv(double c, double s,$/;"	f	signature:(double c, double s, Complex x, Complex y, Complex &u, Complex &v)
cmult_inv	src/aux0/cmult.h	/^static inline void cmult_inv(double c, double s,$/;"	f	signature:(double c, double s, double x, double y, double &u, double &v)
cmult_n	src/aux0/cmult.h	/^static inline void cmult_n(double c, double s,$/;"	f	signature:(double c, double s, double &u, double &v, double dn)
cnd	demo/seq/A178514-demo.cc	/^static bool cnd[32];$/;"	v	file:
cnp_	src/comb/attic/composition-chase.h	/^    combination_chase *cnp_;$/;"	m	class:composition_chase	access:public
co	demo/comb/composition-gray-rec-demo.cc	/^ulong *co;  \/\/ aux: test Gray-ness$/;"	v
codes	demo/topics.txt	/^comb@ combinatorics @ Combinatorial objects like combinations, permutations, Gray codes, partitions and necklaces.$/;"	v
codes	fxt.lsm	/^                subsets, multisets, Gray codes, Catalan objects, necklaces, Lyndon words.$/;"	v
color01	doc/bits-doc.txt	/^static inline uint color01(uint c, ulong v);$/;"	p	file:	signature:(uint c, ulong v)
color01	src/bits/colormix.h	/^static inline uint color01(uint c, ulong v)$/;"	f	signature:(uint c, ulong v)
color_mix	doc/bits-doc.txt	/^static inline uint color_mix(uint c1, uint c2, ulong v);$/;"	p	file:	signature:(uint c1, uint c2, ulong v)
color_mix	src/bits/colormix.h	/^static inline uint color_mix(uint c1, uint c2, ulong v)$/;"	f	signature:(uint c1, uint c2, ulong v)
color_mix_25	doc/bits-doc.txt	/^static inline uint color_mix_25(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
color_mix_25	doc/bits-doc.txt	/^static inline uint color_mix_25(uint c1, uint c2, uint c3);$/;"	p	file:	signature:(uint c1, uint c2, uint c3)
color_mix_25	src/bits/colormix.h	/^static inline uint color_mix_25(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
color_mix_25	src/bits/colormix.h	/^static inline uint color_mix_25(uint c1, uint c2, uint c3)$/;"	f	signature:(uint c1, uint c2, uint c3)
color_mix_50	doc/bits-doc.txt	/^static inline uint color_mix_50(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
color_mix_50	doc/bits-doc.txt	/^static inline uint color_mix_50(uint c1, uint c2, uint c3);$/;"	p	file:	signature:(uint c1, uint c2, uint c3)
color_mix_50	src/bits/colormix.h	/^static inline uint color_mix_50(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
color_mix_50	src/bits/colormix.h	/^static inline uint color_mix_50(uint c1, uint c2, uint c3)$/;"	f	signature:(uint c1, uint c2, uint c3)
color_mix_75	doc/bits-doc.txt	/^static inline uint color_mix_75(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
color_mix_75	doc/bits-doc.txt	/^static inline uint color_mix_75(uint c1, uint c2, uint c3);$/;"	p	file:	signature:(uint c1, uint c2, uint c3)
color_mix_75	src/bits/colormix.h	/^static inline uint color_mix_75(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
color_mix_75	src/bits/colormix.h	/^static inline uint color_mix_75(uint c1, uint c2, uint c3)$/;"	f	signature:(uint c1, uint c2, uint c3)
color_mult	doc/bits-doc.txt	/^static inline uint color_mult(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
color_mult	src/bits/colormix.h	/^static inline uint color_mult(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
color_sum	doc/bits-doc.txt	/^static inline uint color_sum(uint c0, uint c1, uint c2);$/;"	p	file:	signature:(uint c0, uint c1, uint c2)
color_sum	doc/bits-doc.txt	/^static inline uint color_sum(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
color_sum	src/bits/colormix.h	/^static inline uint color_sum(uint c0, uint c1, uint c2)$/;"	f	signature:(uint c0, uint c1, uint c2)
color_sum	src/bits/colormix.h	/^static inline uint color_sum(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
color_sum_adjust	doc/bits-doc.txt	/^static inline uint color_sum_adjust(uint s);$/;"	p	file:	signature:(uint s)
color_sum_adjust	src/bits/colormix.h	/^static inline uint color_sum_adjust(uint s)$/;"	f	signature:(uint s)
column_complex_imag_ffts	doc/fft-doc.txt	/^void column_complex_imag_ffts(const double *fr, double *fi, ulong nr, ulong nc, double *tmp); \/\/ aux$/;"	p	file:	signature:(const double *fr, double *fi, ulong nr, ulong nc, double *tmp)
column_complex_imag_ffts	src/fft/columnffts.cc	/^column_complex_imag_ffts(const double *fr, double *fi, ulong nr, ulong nc, double *tmp)$/;"	f	signature:(const double *fr, double *fi, ulong nr, ulong nc, double *tmp)
column_complex_imag_ffts	src/fft/matrixfft.h	/^void column_complex_imag_ffts(const double *fr, double *fi, ulong r, ulong c, double *tmp);  \/\/ aux$/;"	p	signature:(const double *fr, double *fi, ulong r, ulong c, double *tmp)
column_complex_real_ffts	doc/fft-doc.txt	/^void column_complex_real_ffts(double *f, ulong nr, ulong nc, double *tmp); \/\/ aux$/;"	p	file:	signature:(double *f, ulong nr, ulong nc, double *tmp)
column_complex_real_ffts	src/fft/columnffts.cc	/^column_complex_real_ffts(double *f, ulong nr, ulong nc, double *tmp)$/;"	f	signature:(double *f, ulong nr, ulong nc, double *tmp)
column_complex_real_ffts	src/fft/matrixfft.h	/^void column_complex_real_ffts(double *fr, ulong nr, ulong nc, double *t);  \/\/ aux$/;"	p	signature:(double *fr, ulong nr, ulong nc, double *t)
column_ffts	doc/fft-doc.txt	/^void column_ffts(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp)
column_ffts	doc/fft-doc.txt	/^void column_ffts(double *fr, double *fi, ulong nr, ulong nc, int is,$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int is, int zp, double *tmpr, double *tmpi)
column_ffts	src/fft/columnffts.cc	/^column_ffts(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp)
column_ffts	src/fft/columnffts.cc	/^column_ffts(double *fr, double *fi, ulong nr, ulong nc, int is,$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int is, int zp, double *tmpr, double *tmpi)
column_ffts	src/fft/matrixfft.h	/^void column_ffts(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp);  \/\/ aux$/;"	p	signature:(Complex *f, ulong nr, ulong nc, int is, int zp, Complex *tmp)
column_ffts	src/fft/matrixfft.h	/^void column_ffts(double *fr, double *fi, ulong nr, ulong nc, int is, int zp, double *tr, double *ti);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, int is, int zp, double *tr, double *ti)
column_real_complex_ffts	doc/fft-doc.txt	/^void column_real_complex_ffts(double *f, ulong nr, ulong nc, int zp, double *tmp); \/\/ aux$/;"	p	file:	signature:(double *f, ulong nr, ulong nc, int zp, double *tmp)
column_real_complex_ffts	src/fft/columnffts.cc	/^column_real_complex_ffts(double *f, ulong nr, ulong nc, int zp, double *tmp)$/;"	f	signature:(double *f, ulong nr, ulong nc, int zp, double *tmp)
column_real_complex_ffts	src/fft/matrixfft.h	/^void column_real_complex_ffts(double *fr, ulong nr, ulong nc, int zp, double *t);  \/\/ aux$/;"	p	signature:(double *fr, ulong nr, ulong nc, int zp, double *t)
com	demo/bits/all-dbs-demo.cc	/^com(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
comb2bit	src/bits/attic/bit2composition.h	/^static inline ulong comb2bit(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
comb2comp	src/comb/attic/composition-chase.h	/^    void comb2comp()$/;"	f	class:composition_chase	access:public	signature:()
comb2comp	src/comb/comp2comb.h	/^inline void comb2comp(const ulong *b, ulong N, ulong K, ulong *p)$/;"	f	signature:(const ulong *b, ulong N, ulong K, ulong *p)
comb2comp_nk	src/comb/comp2comb.h	/^inline void comb2comp_nk(ulong N, ulong K, ulong &n, ulong &k)$/;"	f	signature:(ulong N, ulong K, ulong &n, ulong &k)
comb_colex	src/comb/attic/combcolex.h	/^    comb_colex(ulong n, ulong k)$/;"	f	class:comb_colex	access:public	signature:(ulong n, ulong k)
comb_colex	src/comb/attic/combcolex.h	/^class comb_colex$/;"	c
comb_colex::bits_	src/comb/attic/combcolex.h	/^    ulong bits_;$/;"	m	class:comb_colex	access:public
comb_colex::comb_colex	src/comb/attic/combcolex.h	/^    comb_colex(ulong n, ulong k)$/;"	f	class:comb_colex	access:public	signature:(ulong n, ulong k)
comb_colex::data	src/comb/attic/combcolex.h	/^    const ulong * data()  { return x_; }$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::first	src/comb/attic/combcolex.h	/^    ulong first()$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::k_	src/comb/attic/combcolex.h	/^    ulong k_;$/;"	m	class:comb_colex	access:public
comb_colex::last	src/comb/attic/combcolex.h	/^    ulong last()$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::mask_	src/comb/attic/combcolex.h	/^    ulong mask_;  \/\/ 111...111000..00 (n zeros)$/;"	m	class:comb_colex	access:public
comb_colex::n_	src/comb/attic/combcolex.h	/^    ulong n_;$/;"	m	class:comb_colex	access:public
comb_colex::next	src/comb/attic/combcolex.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::operator <<	src/comb/attic/combcolex.h	/^    friend ostream & operator << (ostream &os, const comb_colex &x);$/;"	p	class:comb_colex	access:friend	signature:(ostream &os, const comb_colex &x)
comb_colex::prev	src/comb/attic/combcolex.h	/^    ulong prev()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::sync_x	src/comb/attic/combcolex.h	/^    ulong sync_x()$/;"	f	class:comb_colex	access:public	signature:()
comb_colex::x_	src/comb/attic/combcolex.h	/^    ulong *x_;$/;"	m	class:comb_colex	access:public
comb_colex::~comb_colex	src/comb/attic/combcolex.h	/^    ~comb_colex()  { delete [] x_; }$/;"	f	class:comb_colex	access:public	signature:()
comb_emk	demo/comb/combination-emk-rec-demo.cc	/^comb_emk(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_emk_compl	demo/comb/combination-emk-rec-demo.cc	/^comb_emk_compl(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_enup	demo/comb/combination-enup-rec-demo.cc	/^comb_enup(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_enup_compl	demo/comb/combination-enup-rec-demo.cc	/^comb_enup_compl(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_gray	demo/comb/combination-gray-rec-demo.cc	/^void comb_gray(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_gray_compl	demo/comb/combination-gray-rec-demo.cc	/^void comb_gray_compl(ulong n, ulong k, bool z)$/;"	f	signature:(ulong n, ulong k, bool z)
comb_lex	src/comb/attic/comblex.h	/^    comb_lex(ulong n, ulong k)$/;"	f	class:comb_lex	access:public	signature:(ulong n, ulong k)
comb_lex	src/comb/attic/comblex.h	/^class comb_lex$/;"	c
comb_lex::bits_	src/comb/attic/comblex.h	/^    ulong bits_;$/;"	m	class:comb_lex	access:public
comb_lex::comb_lex	src/comb/attic/comblex.h	/^    comb_lex(ulong n, ulong k)$/;"	f	class:comb_lex	access:public	signature:(ulong n, ulong k)
comb_lex::current	src/comb/attic/comblex.h	/^    const comb_lex &  current()  const  { return *this; }$/;"	f	class:comb_lex	access:public	signature:() const
comb_lex::data	src/comb/attic/comblex.h	/^    const ulong * data()  { return x_; }$/;"	f	class:comb_lex	access:public	signature:()
comb_lex::first	src/comb/attic/comblex.h	/^    ulong first()$/;"	f	class:comb_lex	access:public	signature:()
comb_lex::k_	src/comb/attic/comblex.h	/^    ulong k_;$/;"	m	class:comb_lex	access:public
comb_lex::mask_	src/comb/attic/comblex.h	/^    ulong mask_;  \/\/ 111...111000..00 (n zeros)$/;"	m	class:comb_lex	access:public
comb_lex::n_	src/comb/attic/comblex.h	/^    ulong n_;$/;"	m	class:comb_lex	access:public
comb_lex::next	src/comb/attic/comblex.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_lex	access:public	signature:()
comb_lex::nmask_	src/comb/attic/comblex.h	/^    ulong nmask_;  \/\/ ~mask_$/;"	m	class:comb_lex	access:public
comb_lex::operator <<	src/comb/attic/comblex.h	/^    friend ostream & operator << (ostream &os, const comb_lex &x);$/;"	p	class:comb_lex	access:friend	signature:(ostream &os, const comb_lex &x)
comb_lex::sync_x	src/comb/attic/comblex.h	/^    void sync_x()$/;"	f	class:comb_lex	access:public	signature:()
comb_lex::x_	src/comb/attic/comblex.h	/^    ulong *x_;$/;"	m	class:comb_lex	access:public
comb_lex::xbits_	src/comb/attic/comblex.h	/^    ulong xbits_;$/;"	m	class:comb_lex	access:public
comb_lex::~comb_lex	src/comb/attic/comblex.h	/^    ~comb_lex()  { delete [] x_; }$/;"	f	class:comb_lex	access:public	signature:()
comb_minchange	src/comb/attic/combminchange.cc	/^comb_minchange::comb_minchange(ulong n, ulong k)$/;"	f	class:comb_minchange	signature:(ulong n, ulong k)
comb_minchange	src/comb/attic/combminchange.h	/^    comb_minchange(ulong n, ulong k);$/;"	p	class:comb_minchange	access:public	signature:(ulong n, ulong k)
comb_minchange	src/comb/attic/combminchange.h	/^class comb_minchange$/;"	c
comb_minchange::bit_swap_01	src/comb/attic/combminchange.h	/^    void bit_swap_01(ulong n, ulong k)$/;"	f	class:comb_minchange	access:public	signature:(ulong n, ulong k)
comb_minchange::bits_	src/comb/attic/combminchange.h	/^    ulong bits_;$/;"	m	class:comb_minchange	access:public
comb_minchange::comb_minchange	src/comb/attic/combminchange.cc	/^comb_minchange::comb_minchange(ulong n, ulong k)$/;"	f	class:comb_minchange	signature:(ulong n, ulong k)
comb_minchange::comb_minchange	src/comb/attic/combminchange.h	/^    comb_minchange(ulong n, ulong k);$/;"	p	class:comb_minchange	access:public	signature:(ulong n, ulong k)
comb_minchange::data	src/comb/attic/combminchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:comb_minchange	access:public	signature:() const
comb_minchange::fe_	src/comb/attic/combminchange.h	/^    funcemu<ulong> *fe_;$/;"	m	class:comb_minchange	access:public
comb_minchange::first	src/comb/attic/combminchange.h	/^    ulong first()$/;"	f	class:comb_minchange	access:public	signature:()
comb_minchange::k_	src/comb/attic/combminchange.h	/^    ulong k_;$/;"	m	class:comb_minchange	access:public
comb_minchange::last_	src/comb/attic/combminchange.h	/^    ulong last_;$/;"	m	class:comb_minchange	access:public
comb_minchange::n_	src/comb/attic/combminchange.h	/^    ulong n_;$/;"	m	class:comb_minchange	access:public
comb_minchange::next	src/comb/attic/combminchange.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_minchange	access:public	signature:()
comb_minchange::next_recursion	src/comb/attic/combminchange.cc	/^comb_minchange::next_recursion()$/;"	f	class:comb_minchange	signature:()
comb_minchange::next_recursion	src/comb/attic/combminchange.h	/^    ulong next_recursion();  \/\/ aux$/;"	p	class:comb_minchange	access:public	signature:()
comb_minchange::operator <<	src/comb/attic/combminchange.h	/^    friend ostream & operator << (ostream &os, const comb_minchange &x);$/;"	p	class:comb_minchange	access:friend	signature:(ostream &os, const comb_minchange &x)
comb_minchange::sw1_	src/comb/attic/combminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:comb_minchange	access:public
comb_minchange::sw2_	src/comb/attic/combminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:comb_minchange	access:public
comb_minchange::sync_x	src/comb/attic/combminchange.h	/^    void sync_x()$/;"	f	class:comb_minchange	access:public	signature:()
comb_minchange::x_	src/comb/attic/combminchange.h	/^    ulong *x_;$/;"	m	class:comb_minchange	access:public
comb_minchange::~comb_minchange	src/comb/attic/combminchange.cc	/^comb_minchange::~comb_minchange()$/;"	f	class:comb_minchange	signature:()
comb_minchange::~comb_minchange	src/comb/attic/combminchange.h	/^    ~comb_minchange();$/;"	p	class:comb_minchange	access:public	signature:()
comb_rec	src/comb/combination-rec.h	/^    comb_rec(const comb_rec&);  \/\/ forbidden$/;"	p	class:comb_rec	access:private	signature:(const comb_rec&)
comb_rec	src/comb/combination-rec.h	/^    explicit comb_rec(ulong n, ulong k)$/;"	f	class:comb_rec	access:public	signature:(ulong n, ulong k)
comb_rec	src/comb/combination-rec.h	/^class comb_rec$/;"	c
comb_rec::comb_rec	src/comb/combination-rec.h	/^    comb_rec(const comb_rec&);  \/\/ forbidden$/;"	p	class:comb_rec	access:private	signature:(const comb_rec&)
comb_rec::comb_rec	src/comb/combination-rec.h	/^    explicit comb_rec(ulong n, ulong k)$/;"	f	class:comb_rec	access:public	signature:(ulong n, ulong k)
comb_rec::ct_	src/comb/combination-rec.h	/^    ulong ct_;   \/\/ count combinations$/;"	m	class:comb_rec	access:public
comb_rec::generate	src/comb/combination-rec.h	/^    void generate(void (*visit)(const comb_rec &), ulong rq, ulong nq=0)$/;"	f	class:comb_rec	access:public	signature:(void (*visit)(const comb_rec &), ulong rq, ulong nq=0)
comb_rec::k_	src/comb/combination-rec.h	/^    ulong n_, k_;  \/\/ (n choose k)$/;"	m	class:comb_rec	access:public
comb_rec::n_	src/comb/combination-rec.h	/^    ulong n_, k_;  \/\/ (n choose k)$/;"	m	class:comb_rec	access:public
comb_rec::next_rec	src/comb/combination-rec.cc	/^comb_rec::next_rec(ulong d)$/;"	f	class:comb_rec	signature:(ulong d)
comb_rec::next_rec	src/comb/combination-rec.h	/^    void next_rec(ulong d);$/;"	p	class:comb_rec	access:private	signature:(ulong d)
comb_rec::nq_	src/comb/combination-rec.h	/^    ulong nq_;   \/\/ whether to reverse order$/;"	m	class:comb_rec	access:public
comb_rec::operator =	src/comb/combination-rec.h	/^    comb_rec & operator = (const comb_rec&);  \/\/ forbidden$/;"	p	class:comb_rec	access:private	signature:(const comb_rec&)
comb_rec::print_deltaset	src/comb/combination-rec.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:comb_rec	access:public	signature:(const char *bla=0) const
comb_rec::print_set	src/comb/combination-rec.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:comb_rec	access:public	signature:(const char *bla=0) const
comb_rec::rct_	src/comb/combination-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:comb_rec	access:public
comb_rec::rq_	src/comb/combination-rec.h	/^    ulong rq_;   \/\/ condition that determines the order:$/;"	m	class:comb_rec	access:public
comb_rec::rv_	src/comb/combination-rec.h	/^    ulong *rv_;   \/\/  combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:comb_rec	access:public
comb_rec::visit_	src/comb/combination-rec.h	/^    void (*visit_)(const comb_rec &);  \/\/ function to call with each combination$/;"	m	class:comb_rec	access:public
comb_rec::~comb_rec	src/comb/combination-rec.h	/^    ~comb_rec()$/;"	f	class:comb_rec	access:public	signature:()
combination_altminchange	src/comb/attic/combination-altminchange.h	/^    combination_altminchange(ulong n, ulong k)$/;"	f	class:combination_altminchange	access:public	signature:(ulong n, ulong k)
combination_altminchange	src/comb/attic/combination-altminchange.h	/^class combination_altminchange$/;"	c
combination_altminchange::bits_	src/comb/attic/combination-altminchange.h	/^    ulong bits_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::combination_altminchange	src/comb/attic/combination-altminchange.h	/^    combination_altminchange(ulong n, ulong k)$/;"	f	class:combination_altminchange	access:public	signature:(ulong n, ulong k)
combination_altminchange::data	src/comb/attic/combination-altminchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_altminchange	access:public	signature:() const
combination_altminchange::first	src/comb/attic/combination-altminchange.h	/^    ulong first()$/;"	f	class:combination_altminchange	access:public	signature:()
combination_altminchange::igc_bits_	src/comb/attic/combination-altminchange.h	/^    ulong igc_bits_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::igc_first_	src/comb/attic/combination-altminchange.h	/^    ulong igc_first_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::igc_last_	src/comb/attic/combination-altminchange.h	/^    ulong igc_last_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::k_	src/comb/attic/combination-altminchange.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:combination_altminchange	access:public
combination_altminchange::last	src/comb/attic/combination-altminchange.h	/^    ulong last()$/;"	f	class:combination_altminchange	access:public	signature:()
combination_altminchange::n_	src/comb/attic/combination-altminchange.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:combination_altminchange	access:public
combination_altminchange::next	src/comb/attic/combination-altminchange.h	/^    ulong next()  \/\/ return zero if current combination is the last$/;"	f	class:combination_altminchange	access:public	signature:()
combination_altminchange::nk_	src/comb/attic/combination-altminchange.h	/^    ulong nk_;  \/\/ n_ - k_$/;"	m	class:combination_altminchange	access:public
combination_altminchange::prev	src/comb/attic/combination-altminchange.h	/^    ulong prev()  \/\/ return zero if current combination is the first$/;"	f	class:combination_altminchange	access:public	signature:()
combination_altminchange::sw1_	src/comb/attic/combination-altminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::sw2_	src/comb/attic/combination-altminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::sync_x	src/comb/attic/combination-altminchange.h	/^    void sync_x()  \/\/ aux$/;"	f	class:combination_altminchange	access:public	signature:()
combination_altminchange::x_	src/comb/attic/combination-altminchange.h	/^    ulong *x_;$/;"	m	class:combination_altminchange	access:public
combination_altminchange::~combination_altminchange	src/comb/attic/combination-altminchange.h	/^    ~combination_altminchange()$/;"	f	class:combination_altminchange	access:public	signature:()
combination_chase	src/comb/combination-chase.h	/^    combination_chase(const combination_chase&);  \/\/ forbidden$/;"	p	class:combination_chase	access:private	signature:(const combination_chase&)
combination_chase	src/comb/combination-chase.h	/^    explicit combination_chase(ulong n, ulong k)$/;"	f	class:combination_chase	access:public	signature:(ulong n, ulong k)
combination_chase	src/comb/combination-chase.h	/^class combination_chase$/;"	c
combination_chase::a_	src/comb/combination-chase.h	/^    ulong *a_;  \/\/ data (a delta set)$/;"	m	class:combination_chase	access:public
combination_chase::combination_chase	src/comb/combination-chase.h	/^    combination_chase(const combination_chase&);  \/\/ forbidden$/;"	p	class:combination_chase	access:private	signature:(const combination_chase&)
combination_chase::combination_chase	src/comb/combination-chase.h	/^    explicit combination_chase(ulong n, ulong k)$/;"	f	class:combination_chase	access:public	signature:(ulong n, ulong k)
combination_chase::data	src/comb/combination-chase.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:combination_chase	access:public	signature:() const
combination_chase::first	src/comb/combination-chase.h	/^    void first()$/;"	f	class:combination_chase	access:public	signature:()
combination_chase::k_	src/comb/combination-chase.h	/^    ulong k_;  \/\/ 1<=k<=n$/;"	m	class:combination_chase	access:public
combination_chase::n_	src/comb/combination-chase.h	/^    ulong n_;  \/\/ (n choose k)  n>=1$/;"	m	class:combination_chase	access:public
combination_chase::next	src/comb/combination-chase.h	/^    bool next()$/;"	f	class:combination_chase	access:public	signature:()
combination_chase::operator =	src/comb/combination-chase.h	/^    combination_chase & operator = (const combination_chase&);  \/\/ forbidden$/;"	p	class:combination_chase	access:private	signature:(const combination_chase&)
combination_chase::r_	src/comb/combination-chase.h	/^    ulong r_;  \/\/ aux$/;"	m	class:combination_chase	access:public
combination_chase::s_	src/comb/combination-chase.h	/^    ulong s_;  \/\/ == n_ - k_$/;"	m	class:combination_chase	access:public
combination_chase::t_	src/comb/combination-chase.h	/^    ulong t_;  \/\/ == n_ - s_$/;"	m	class:combination_chase	access:public
combination_chase::w_	src/comb/combination-chase.h	/^    ulong *w_;  \/\/ aux$/;"	m	class:combination_chase	access:public
combination_chase::~combination_chase	src/comb/combination-chase.h	/^    ~combination_chase()$/;"	f	class:combination_chase	access:public	signature:()
combination_colex	src/comb/combination-colex.h	/^    combination_colex(const combination_colex&);  \/\/ forbidden$/;"	p	class:combination_colex	access:private	signature:(const combination_colex&)
combination_colex	src/comb/combination-colex.h	/^    explicit combination_colex(ulong n, ulong k)$/;"	f	class:combination_colex	access:public	signature:(ulong n, ulong k)
combination_colex	src/comb/combination-colex.h	/^class combination_colex$/;"	c
combination_colex::combination_colex	src/comb/combination-colex.h	/^    combination_colex(const combination_colex&);  \/\/ forbidden$/;"	p	class:combination_colex	access:private	signature:(const combination_colex&)
combination_colex::combination_colex	src/comb/combination-colex.h	/^    explicit combination_colex(ulong n, ulong k)$/;"	f	class:combination_colex	access:public	signature:(ulong n, ulong k)
combination_colex::data	src/comb/combination-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_colex	access:public	signature:() const
combination_colex::first	src/comb/combination-colex.h	/^    void first()$/;"	f	class:combination_colex	access:public	signature:()
combination_colex::k_	src/comb/combination-colex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_colex	access:public
combination_colex::last	src/comb/combination-colex.h	/^    void last()$/;"	f	class:combination_colex	access:public	signature:()
combination_colex::n_	src/comb/combination-colex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_colex	access:public
combination_colex::next	src/comb/combination-colex.h	/^    ulong next()$/;"	f	class:combination_colex	access:public	signature:()
combination_colex::operator =	src/comb/combination-colex.h	/^    combination_colex & operator = (const combination_colex&);  \/\/ forbidden$/;"	p	class:combination_colex	access:private	signature:(const combination_colex&)
combination_colex::prev	src/comb/combination-colex.h	/^    ulong prev()$/;"	f	class:combination_colex	access:public	signature:()
combination_colex::print_deltaset	src/comb/combination-colex.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_colex	access:public	signature:(const char *bla=0) const
combination_colex::print_set	src/comb/combination-colex.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_colex	access:public	signature:(const char *bla=0) const
combination_colex::x_	src/comb/combination-colex.h	/^    ulong *x_;    \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_colex	access:public
combination_colex::~combination_colex	src/comb/combination-colex.h	/^    ~combination_colex()  { delete [] x_; }$/;"	f	class:combination_colex	access:public	signature:()
combination_data	src/comb/attic/composition-chase.h	/^    const ulong * combination_data()  const  { return cnp_->data(); }$/;"	f	class:composition_chase	access:public	signature:() const
combination_emk	src/comb/combination-emk.h	/^    combination_emk(const combination_emk&);  \/\/ forbidden$/;"	p	class:combination_emk	access:private	signature:(const combination_emk&)
combination_emk	src/comb/combination-emk.h	/^    explicit combination_emk(ulong n, ulong k)$/;"	f	class:combination_emk	access:public	signature:(ulong n, ulong k)
combination_emk	src/comb/combination-emk.h	/^class combination_emk$/;"	c
combination_emk::a_	src/comb/combination-emk.h	/^    ulong *a_;  \/\/ aux: actual start position of moves$/;"	m	class:combination_emk	access:public
combination_emk::combination_emk	src/comb/combination-emk.h	/^    combination_emk(const combination_emk&);  \/\/ forbidden$/;"	p	class:combination_emk	access:private	signature:(const combination_emk&)
combination_emk::combination_emk	src/comb/combination-emk.h	/^    explicit combination_emk(ulong n, ulong k)$/;"	f	class:combination_emk	access:public	signature:(ulong n, ulong k)
combination_emk::data	src/comb/combination-emk.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_emk	access:public	signature:() const
combination_emk::first	src/comb/combination-emk.h	/^    void first()$/;"	f	class:combination_emk	access:public	signature:()
combination_emk::k_	src/comb/combination-emk.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_emk	access:public
combination_emk::n_	src/comb/combination-emk.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_emk	access:public
combination_emk::next	src/comb/combination-emk.h	/^    ulong next()$/;"	f	class:combination_emk	access:public	signature:()
combination_emk::operator =	src/comb/combination-emk.h	/^    combination_emk & operator = (const combination_emk&);  \/\/ forbidden$/;"	p	class:combination_emk	access:private	signature:(const combination_emk&)
combination_emk::s_	src/comb/combination-emk.h	/^    ulong *s_;  \/\/ aux: start of range for moves$/;"	m	class:combination_emk	access:public
combination_emk::x_	src/comb/combination-emk.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_emk	access:public
combination_emk::~combination_emk	src/comb/combination-emk.h	/^    ~combination_emk()$/;"	f	class:combination_emk	access:public	signature:()
combination_endo	src/comb/combination-endo.h	/^    combination_endo(const combination_endo&);  \/\/ forbidden$/;"	p	class:combination_endo	access:private	signature:(const combination_endo&)
combination_endo	src/comb/combination-endo.h	/^    explicit combination_endo(ulong n, ulong k)$/;"	f	class:combination_endo	access:public	signature:(ulong n, ulong k)
combination_endo	src/comb/combination-endo.h	/^class combination_endo$/;"	c
combination_endo::a_	src/comb/combination-endo.h	/^    ulong *a_;  \/\/ aux: actual start position of endo moves$/;"	m	class:combination_endo	access:public
combination_endo::combination_endo	src/comb/combination-endo.h	/^    combination_endo(const combination_endo&);  \/\/ forbidden$/;"	p	class:combination_endo	access:private	signature:(const combination_endo&)
combination_endo::combination_endo	src/comb/combination-endo.h	/^    explicit combination_endo(ulong n, ulong k)$/;"	f	class:combination_endo	access:public	signature:(ulong n, ulong k)
combination_endo::data	src/comb/combination-endo.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_endo	access:public	signature:() const
combination_endo::first	src/comb/combination-endo.h	/^    void first()$/;"	f	class:combination_endo	access:public	signature:()
combination_endo::k_	src/comb/combination-endo.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_endo	access:public
combination_endo::n_	src/comb/combination-endo.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_endo	access:public
combination_endo::next	src/comb/combination-endo.h	/^    ulong next()$/;"	f	class:combination_endo	access:public	signature:()
combination_endo::operator =	src/comb/combination-endo.h	/^    combination_endo & operator = (const combination_endo&);  \/\/ forbidden$/;"	p	class:combination_endo	access:private	signature:(const combination_endo&)
combination_endo::s_	src/comb/combination-endo.h	/^    ulong *s_;  \/\/ aux: start of range for endo moves$/;"	m	class:combination_endo	access:public
combination_endo::x_	src/comb/combination-endo.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_endo	access:public
combination_endo::~combination_endo	src/comb/combination-endo.h	/^    ~combination_endo()$/;"	f	class:combination_endo	access:public	signature:()
combination_enup	src/comb/combination-enup.h	/^    combination_enup(const combination_enup&);  \/\/ forbidden$/;"	p	class:combination_enup	access:private	signature:(const combination_enup&)
combination_enup	src/comb/combination-enup.h	/^    explicit combination_enup(ulong n, ulong k)$/;"	f	class:combination_enup	access:public	signature:(ulong n, ulong k)
combination_enup	src/comb/combination-enup.h	/^class combination_enup$/;"	c
combination_enup::a_	src/comb/combination-enup.h	/^    ulong *a_;  \/\/ aux: actual start position of enup moves$/;"	m	class:combination_enup	access:public
combination_enup::combination_enup	src/comb/combination-enup.h	/^    combination_enup(const combination_enup&);  \/\/ forbidden$/;"	p	class:combination_enup	access:private	signature:(const combination_enup&)
combination_enup::combination_enup	src/comb/combination-enup.h	/^    explicit combination_enup(ulong n, ulong k)$/;"	f	class:combination_enup	access:public	signature:(ulong n, ulong k)
combination_enup::data	src/comb/combination-enup.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_enup	access:public	signature:() const
combination_enup::first	src/comb/combination-enup.h	/^    void first()$/;"	f	class:combination_enup	access:public	signature:()
combination_enup::k_	src/comb/combination-enup.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_enup	access:public
combination_enup::n_	src/comb/combination-enup.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_enup	access:public
combination_enup::next	src/comb/combination-enup.h	/^    ulong next()$/;"	f	class:combination_enup	access:public	signature:()
combination_enup::operator =	src/comb/combination-enup.h	/^    combination_enup & operator = (const combination_enup&);  \/\/ forbidden$/;"	p	class:combination_enup	access:private	signature:(const combination_enup&)
combination_enup::s_	src/comb/combination-enup.h	/^    ulong *s_;  \/\/ aux: start of range for enup moves$/;"	m	class:combination_enup	access:public
combination_enup::x_	src/comb/combination-enup.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_enup	access:public
combination_enup::~combination_enup	src/comb/combination-enup.h	/^    ~combination_enup()$/;"	f	class:combination_enup	access:public	signature:()
combination_lex	src/comb/combination-lex.h	/^    combination_lex(const combination_lex&);  \/\/ forbidden$/;"	p	class:combination_lex	access:private	signature:(const combination_lex&)
combination_lex	src/comb/combination-lex.h	/^    explicit combination_lex(ulong n, ulong k)$/;"	f	class:combination_lex	access:public	signature:(ulong n, ulong k)
combination_lex	src/comb/combination-lex.h	/^class combination_lex$/;"	c
combination_lex::combination_lex	src/comb/combination-lex.h	/^    combination_lex(const combination_lex&);  \/\/ forbidden$/;"	p	class:combination_lex	access:private	signature:(const combination_lex&)
combination_lex::combination_lex	src/comb/combination-lex.h	/^    explicit combination_lex(ulong n, ulong k)$/;"	f	class:combination_lex	access:public	signature:(ulong n, ulong k)
combination_lex::data	src/comb/combination-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_lex	access:public	signature:() const
combination_lex::first	src/comb/combination-lex.h	/^    void first()$/;"	f	class:combination_lex	access:public	signature:()
combination_lex::k_	src/comb/combination-lex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_lex	access:public
combination_lex::last	src/comb/combination-lex.h	/^    void last()$/;"	f	class:combination_lex	access:public	signature:()
combination_lex::n_	src/comb/combination-lex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_lex	access:public
combination_lex::next	src/comb/combination-lex.h	/^    ulong next()$/;"	f	class:combination_lex	access:public	signature:()
combination_lex::operator =	src/comb/combination-lex.h	/^    combination_lex & operator = (const combination_lex&);  \/\/ forbidden$/;"	p	class:combination_lex	access:private	signature:(const combination_lex&)
combination_lex::prev	src/comb/combination-lex.h	/^    ulong prev()$/;"	f	class:combination_lex	access:public	signature:()
combination_lex::print_deltaset	src/comb/combination-lex.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_lex	access:public	signature:(const char *bla=0) const
combination_lex::print_set	src/comb/combination-lex.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_lex	access:public	signature:(const char *bla=0) const
combination_lex::x_	src/comb/combination-lex.h	/^    ulong *x_;    \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_lex	access:public
combination_lex::~combination_lex	src/comb/combination-lex.h	/^    ~combination_lex()  { delete [] x_; }$/;"	f	class:combination_lex	access:public	signature:()
combination_minchange	src/comb/attic/combination-minchange.h	/^    combination_minchange(ulong n, ulong k)$/;"	f	class:combination_minchange	access:public	signature:(ulong n, ulong k)
combination_minchange	src/comb/attic/combination-minchange.h	/^class combination_minchange$/;"	c
combination_minchange::bits_	src/comb/attic/combination-minchange.h	/^    ulong bits_;$/;"	m	class:combination_minchange	access:public
combination_minchange::combination_minchange	src/comb/attic/combination-minchange.h	/^    combination_minchange(ulong n, ulong k)$/;"	f	class:combination_minchange	access:public	signature:(ulong n, ulong k)
combination_minchange::data	src/comb/attic/combination-minchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_minchange	access:public	signature:() const
combination_minchange::first	src/comb/attic/combination-minchange.h	/^    ulong first()$/;"	f	class:combination_minchange	access:public	signature:()
combination_minchange::igc_bits_	src/comb/attic/combination-minchange.h	/^    ulong igc_bits_;$/;"	m	class:combination_minchange	access:public
combination_minchange::igc_first_	src/comb/attic/combination-minchange.h	/^    ulong igc_first_;$/;"	m	class:combination_minchange	access:public
combination_minchange::igc_last_	src/comb/attic/combination-minchange.h	/^    ulong igc_last_;$/;"	m	class:combination_minchange	access:public
combination_minchange::k_	src/comb/attic/combination-minchange.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:combination_minchange	access:public
combination_minchange::last	src/comb/attic/combination-minchange.h	/^    ulong last()$/;"	f	class:combination_minchange	access:public	signature:()
combination_minchange::n_	src/comb/attic/combination-minchange.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:combination_minchange	access:public
combination_minchange::next	src/comb/attic/combination-minchange.h	/^    ulong next()  \/\/ return zero if current combination is the last$/;"	f	class:combination_minchange	access:public	signature:()
combination_minchange::prev	src/comb/attic/combination-minchange.h	/^    ulong prev()  \/\/ return zero if current combination is the first$/;"	f	class:combination_minchange	access:public	signature:()
combination_minchange::sw1_	src/comb/attic/combination-minchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_minchange	access:public
combination_minchange::sw2_	src/comb/attic/combination-minchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_minchange	access:public
combination_minchange::sync_x	src/comb/attic/combination-minchange.h	/^    void sync_x()  \/\/ aux$/;"	f	class:combination_minchange	access:public	signature:()
combination_minchange::x_	src/comb/attic/combination-minchange.h	/^    ulong *x_;$/;"	m	class:combination_minchange	access:public
combination_minchange::~combination_minchange	src/comb/attic/combination-minchange.h	/^    ~combination_minchange()  { delete [] x_; }$/;"	f	class:combination_minchange	access:public	signature:()
combination_mod	src/comb/combination-mod.h	/^    combination_mod(const combination_mod&);  \/\/ forbidden$/;"	p	class:combination_mod	access:private	signature:(const combination_mod&)
combination_mod	src/comb/combination-mod.h	/^    explicit combination_mod(ulong n, ulong k)$/;"	f	class:combination_mod	access:public	signature:(ulong n, ulong k)
combination_mod	src/comb/combination-mod.h	/^class combination_mod$/;"	c
combination_mod::a_	src/comb/combination-mod.h	/^    ulong *a_;  \/\/ aux: actual start position of moves$/;"	m	class:combination_mod	access:public
combination_mod::combination_mod	src/comb/combination-mod.h	/^    combination_mod(const combination_mod&);  \/\/ forbidden$/;"	p	class:combination_mod	access:private	signature:(const combination_mod&)
combination_mod::combination_mod	src/comb/combination-mod.h	/^    explicit combination_mod(ulong n, ulong k)$/;"	f	class:combination_mod	access:public	signature:(ulong n, ulong k)
combination_mod::data	src/comb/combination-mod.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_mod	access:public	signature:() const
combination_mod::first	src/comb/combination-mod.h	/^    void first()$/;"	f	class:combination_mod	access:public	signature:()
combination_mod::k_	src/comb/combination-mod.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_mod	access:public
combination_mod::n_	src/comb/combination-mod.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_mod	access:public
combination_mod::next	src/comb/combination-mod.h	/^    ulong next()$/;"	f	class:combination_mod	access:public	signature:()
combination_mod::operator =	src/comb/combination-mod.h	/^    combination_mod & operator = (const combination_mod&);  \/\/ forbidden$/;"	p	class:combination_mod	access:private	signature:(const combination_mod&)
combination_mod::s_	src/comb/combination-mod.h	/^    ulong *s_;  \/\/ aux: start of range for moves$/;"	m	class:combination_mod	access:public
combination_mod::x_	src/comb/combination-mod.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_mod	access:public
combination_mod::~combination_mod	src/comb/combination-mod.h	/^    ~combination_mod()$/;"	f	class:combination_mod	access:public	signature:()
combination_pref	src/comb/combination-pref.h	/^    combination_pref(const combination_pref&);  \/\/ forbidden$/;"	p	class:combination_pref	access:private	signature:(const combination_pref&)
combination_pref	src/comb/combination-pref.h	/^    explicit combination_pref(ulong n, ulong k)$/;"	f	class:combination_pref	access:public	signature:(ulong n, ulong k)
combination_pref	src/comb/combination-pref.h	/^class combination_pref$/;"	c
combination_pref::b_	src/comb/combination-pref.h	/^    ulong *b_;  \/\/ data as delta set$/;"	m	class:combination_pref	access:public
combination_pref::combination_pref	src/comb/combination-pref.h	/^    combination_pref(const combination_pref&);  \/\/ forbidden$/;"	p	class:combination_pref	access:private	signature:(const combination_pref&)
combination_pref::combination_pref	src/comb/combination-pref.h	/^    explicit combination_pref(ulong n, ulong k)$/;"	f	class:combination_pref	access:public	signature:(ulong n, ulong k)
combination_pref::data	src/comb/combination-pref.h	/^    const ulong * data()  const  { return b_; }$/;"	f	class:combination_pref	access:public	signature:() const
combination_pref::first	src/comb/combination-pref.h	/^    void first()$/;"	f	class:combination_pref	access:public	signature:()
combination_pref::n_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
combination_pref::next	src/comb/combination-pref.h	/^    bool next()$/;"	f	class:combination_pref	access:public	signature:()
combination_pref::operator =	src/comb/combination-pref.h	/^    combination_pref & operator = (const combination_pref&);  \/\/ forbidden$/;"	p	class:combination_pref	access:private	signature:(const combination_pref&)
combination_pref::s_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
combination_pref::size	src/comb/combination-pref.h	/^    ulong size()  const  { return n_; }$/;"	f	class:combination_pref	access:public	signature:() const
combination_pref::t_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
combination_pref::x	src/comb/combination-pref.h	/^    ulong x, y;  \/\/ aux$/;"	m	class:combination_pref	access:private
combination_pref::y	src/comb/combination-pref.h	/^    ulong x, y;  \/\/ aux$/;"	m	class:combination_pref	access:private
combination_pref::~combination_pref	src/comb/combination-pref.h	/^    ~combination_pref()$/;"	f	class:combination_pref	access:public	signature:()
combination_revdoor	src/comb/combination-revdoor.h	/^    combination_revdoor(const combination_revdoor&);  \/\/ forbidden$/;"	p	class:combination_revdoor	access:private	signature:(const combination_revdoor&)
combination_revdoor	src/comb/combination-revdoor.h	/^    explicit combination_revdoor(ulong n, ulong k)$/;"	f	class:combination_revdoor	access:public	signature:(ulong n, ulong k)
combination_revdoor	src/comb/combination-revdoor.h	/^class combination_revdoor$/;"	c
combination_revdoor::c_	src/comb/combination-revdoor.h	/^    ulong *c_;  \/\/ delta set$/;"	m	class:combination_revdoor	access:public
combination_revdoor::combination_revdoor	src/comb/combination-revdoor.h	/^    combination_revdoor(const combination_revdoor&);  \/\/ forbidden$/;"	p	class:combination_revdoor	access:private	signature:(const combination_revdoor&)
combination_revdoor::combination_revdoor	src/comb/combination-revdoor.h	/^    explicit combination_revdoor(ulong n, ulong k)$/;"	f	class:combination_revdoor	access:public	signature:(ulong n, ulong k)
combination_revdoor::data	src/comb/combination-revdoor.h	/^    const ulong* data()  const  { return c_; }$/;"	f	class:combination_revdoor	access:public	signature:() const
combination_revdoor::first	src/comb/combination-revdoor.h	/^    void first()$/;"	f	class:combination_revdoor	access:public	signature:()
combination_revdoor::k_	src/comb/combination-revdoor.h	/^    ulong n_, k_;  \/\/ (n choose k)  n>=1,  1<=k<=n$/;"	m	class:combination_revdoor	access:public
combination_revdoor::n_	src/comb/combination-revdoor.h	/^    ulong n_, k_;  \/\/ (n choose k)  n>=1,  1<=k<=n$/;"	m	class:combination_revdoor	access:public
combination_revdoor::next	src/comb/combination-revdoor.h	/^    bool next()$/;"	f	class:combination_revdoor	access:public	signature:()
combination_revdoor::operator =	src/comb/combination-revdoor.h	/^    combination_revdoor & operator = (const combination_revdoor&);  \/\/ forbidden$/;"	p	class:combination_revdoor	access:private	signature:(const combination_revdoor&)
combination_revdoor::print_deltaset	src/comb/combination-revdoor.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_revdoor	access:public	signature:(const char *bla=0) const
combination_revdoor::print_set	src/comb/combination-revdoor.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_revdoor	access:public	signature:(const char *bla=0) const
combination_revdoor::~combination_revdoor	src/comb/combination-revdoor.h	/^    ~combination_revdoor()  { delete [] c_; }$/;"	f	class:combination_revdoor	access:public	signature:()
comp2comb	src/comb/comp2comb.h	/^inline void comp2comb(const ulong *p, ulong k, ulong *b)$/;"	f	signature:(const ulong *p, ulong k, ulong *b)
comp2comb_nk	src/comb/comp2comb.h	/^inline void comp2comb_nk(ulong n, ulong k, ulong &N, ulong &K)$/;"	f	signature:(ulong n, ulong k, ulong &N, ulong &K)
comp_rec	demo/comb/composition-gray-rec-demo.cc	/^void comp_rec(ulong k, ulong n, bool z)$/;"	f	signature:(ulong k, ulong n, bool z)
compare	demo/perm/perm-decomp-demo.cc	/^inline bool compare(const Type1 *f, const Type2 *g, ulong n)$/;"	f	signature:(const Type1 *f, const Type2 *g, ulong n)
compare	src/aux1/attic/misc.h	/^inline int compare(const Type *f, const Type *g, ulong n)$/;"	f	signature:(const Type *f, const Type *g, ulong n)
compl_fht_dif_core	demo/fft/fht-bench.cc	/^inline void compl_fht_dif_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
compl_fht_dit_core	demo/fft/fht-bench.cc	/^inline void compl_fht_dit_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
compl_fht_loc_dif2_core	demo/fft/fht-bench.cc	/^inline void compl_fht_loc_dif2_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
compl_fht_loc_dit2_core	demo/fft/fht-bench.cc	/^inline void compl_fht_loc_dit2_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
complement	demo/seq/A191755-demo.cc	/^static inline void complement(const ulong *x, ulong n, ulong *c)$/;"	f	file:	signature:(const ulong *x, ulong n, ulong *c)
complement	src/bits/bitsubset.h	/^    ulong complement()  { U ^= V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
complement_sequency	doc/bits-doc.txt	/^static inline ulong complement_sequency(ulong x);$/;"	p	file:	signature:(ulong x)
complement_sequency	src/bits/bitsequency.h	/^static inline ulong complement_sequency(ulong x)$/;"	f	signature:(ulong x)
complex_fft	doc/fft-doc.txt	/^void complex_fft(Complex *c, ulong ldn, int is);$/;"	p	file:	signature:(Complex *c, ulong ldn, int is)
complex_fft	src/fft/cfftwrap.cc	/^complex_fft(Complex *c, ulong ldn, int is)$/;"	f	signature:(Complex *c, ulong ldn, int is)
complex_fft	src/fft/fft.h	/^void complex_fft(Complex *c, ulong ldn, int is);$/;"	p	signature:(Complex *c, ulong ldn, int is)
complex_real_fft	doc/realfft-doc.txt	/^inline void complex_real_fft(double *f, ulong ldn, int is);$/;"	p	file:	signature:(double *f, ulong ldn, int is)
complex_real_fft	src/realfft/realfft.h	/^inline void complex_real_fft(double *f, ulong ldn, int is)$/;"	f	signature:(double *f, ulong ldn, int is)
complex_sort	demo/sort/sort-complex-demo.cc	/^complex_sort(Complex *f, ulong n)$/;"	f	signature:(Complex *f, ulong n)
complex_sort	src/sort/attic/sortcomplex.cc	/^complex_sort(Complex *f, ulong n)$/;"	f	signature:(Complex *f, ulong n)
complex_sort	src/sort/attic/sortcomplex.h	/^void complex_sort(Complex *f, ulong n);$/;"	p	signature:(Complex *f, ulong n)
complex_to_real_imag	doc/fft-doc.txt	/^void complex_to_real_imag(Complex *c, ulong n); \/\/ aux$/;"	p	file:	signature:(Complex *c, ulong n)
complex_to_real_imag	src/fft/cfftwrap.cc	/^complex_to_real_imag(Complex *c, ulong n)$/;"	f	signature:(Complex *c, ulong n)
complex_to_real_imag	src/fft/fft.h	/^void complex_to_real_imag(Complex *c, long ldn);  \/\/ aux$/;"	p	signature:(Complex *c, long ldn)
complq	demo/comb/composition-gray-rec-demo.cc	/^bool complq = false;$/;"	v
compo	src/comb/wfl-hilbert.h	/^    ulong compo(ulong e, ulong f)  const  \/\/ jj: want a better name for this method$/;"	f	class:wfl_hilbert	access:public	signature:(ulong e, ulong f) const
compose	doc/perm-doc.txt	/^void compose(const ulong *f, const ulong *g, ulong * restrict h, ulong n);$/;"	p	file:	signature:(const ulong *f, const ulong *g, ulong * restrict h, ulong n)
compose	doc/perm-doc.txt	/^void compose(const ulong *f, ulong * restrict g, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong * restrict g, ulong n)
compose	src/perm/permcompose.cc	/^compose(const ulong *f, const ulong *g, ulong * restrict h, ulong n)$/;"	f	signature:(const ulong *f, const ulong *g, ulong * restrict h, ulong n)
compose	src/perm/permcompose.cc	/^compose(const ulong *f, ulong * restrict g, ulong n)$/;"	f	signature:(const ulong *f, ulong * restrict g, ulong n)
compose	src/perm/permcompose.h	/^void compose(const ulong *f, const ulong *g, ulong *h, ulong n);$/;"	p	signature:(const ulong *f, const ulong *g, ulong *h, ulong n)
compose	src/perm/permcompose.h	/^void compose(const ulong *f, ulong *g, ulong n);$/;"	p	signature:(const ulong *f, ulong *g, ulong n)
composition2bit	src/bits/attic/bit2composition.h	/^static inline ulong composition2bit(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
composition_alt	src/comb/attic/compositionalt.h	/^    composition_alt(ulong k)$/;"	f	class:composition_alt	access:public	signature:(ulong k)
composition_alt	src/comb/attic/compositionalt.h	/^class composition_alt$/;"	c
composition_alt::bits_	src/comb/attic/compositionalt.h	/^    ulong bits_;$/;"	m	class:composition_alt	access:public
composition_alt::composition_alt	src/comb/attic/compositionalt.h	/^    composition_alt(ulong k)$/;"	f	class:composition_alt	access:public	signature:(ulong k)
composition_alt::data	src/comb/attic/compositionalt.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_alt	access:public	signature:() const
composition_alt::first	src/comb/attic/compositionalt.h	/^    ulong first()$/;"	f	class:composition_alt	access:public	signature:()
composition_alt::igc_bits_	src/comb/attic/compositionalt.h	/^    ulong igc_bits_;$/;"	m	class:composition_alt	access:public
composition_alt::igc_first_	src/comb/attic/compositionalt.h	/^    ulong igc_first_;$/;"	m	class:composition_alt	access:public
composition_alt::igc_last_	src/comb/attic/compositionalt.h	/^    ulong igc_last_;$/;"	m	class:composition_alt	access:public
composition_alt::k_	src/comb/attic/compositionalt.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:composition_alt	access:public
composition_alt::last	src/comb/attic/compositionalt.h	/^    ulong last()$/;"	f	class:composition_alt	access:public	signature:()
composition_alt::n_	src/comb/attic/compositionalt.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:composition_alt	access:public
composition_alt::next	src/comb/attic/compositionalt.h	/^    ulong next()  \/\/ return zero if current comb is the last$/;"	f	class:composition_alt	access:public	signature:()
composition_alt::prev	src/comb/attic/compositionalt.h	/^    ulong prev()  \/\/ return zero if current comb is the first$/;"	f	class:composition_alt	access:public	signature:()
composition_alt::sync_x	src/comb/attic/compositionalt.h	/^    void sync_x()  \/\/ aux$/;"	f	class:composition_alt	access:public	signature:()
composition_alt::x_	src/comb/attic/compositionalt.h	/^    ulong *x_;$/;"	m	class:composition_alt	access:public
composition_alt::~composition_alt	src/comb/attic/compositionalt.h	/^    ~composition_alt() { delete [] x_; }$/;"	f	class:composition_alt	access:public	signature:()
composition_chase	src/comb/attic/composition-chase.h	/^    composition_chase(ulong n, ulong k)$/;"	f	class:composition_chase	access:public	signature:(ulong n, ulong k)
composition_chase	src/comb/attic/composition-chase.h	/^class composition_chase$/;"	c
composition_chase::K_	src/comb/attic/composition-chase.h	/^    ulong N_, K_;  \/\/ N=n+k-1 choose K=n$/;"	m	class:composition_chase	access:public
composition_chase::N_	src/comb/attic/composition-chase.h	/^    ulong N_, K_;  \/\/ N=n+k-1 choose K=n$/;"	m	class:composition_chase	access:public
composition_chase::cnp_	src/comb/attic/composition-chase.h	/^    combination_chase *cnp_;$/;"	m	class:composition_chase	access:public
composition_chase::comb2comp	src/comb/attic/composition-chase.h	/^    void comb2comp()$/;"	f	class:composition_chase	access:public	signature:()
composition_chase::combination_data	src/comb/attic/composition-chase.h	/^    const ulong * combination_data()  const  { return cnp_->data(); }$/;"	f	class:composition_chase	access:public	signature:() const
composition_chase::composition_chase	src/comb/attic/composition-chase.h	/^    composition_chase(ulong n, ulong k)$/;"	f	class:composition_chase	access:public	signature:(ulong n, ulong k)
composition_chase::data	src/comb/attic/composition-chase.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:composition_chase	access:public	signature:() const
composition_chase::k_	src/comb/attic/composition-chase.h	/^    ulong n_, k_;  \/\/ k-composition of n$/;"	m	class:composition_chase	access:public
composition_chase::n_	src/comb/attic/composition-chase.h	/^    ulong n_, k_;  \/\/ k-composition of n$/;"	m	class:composition_chase	access:public
composition_chase::next	src/comb/attic/composition-chase.h	/^    bool next()$/;"	f	class:composition_chase	access:public	signature:()
composition_chase::p_	src/comb/attic/composition-chase.h	/^    ulong *p_; \/\/ data: composition$/;"	m	class:composition_chase	access:public
composition_chase::~composition_chase	src/comb/attic/composition-chase.h	/^    ~composition_chase()$/;"	f	class:composition_chase	access:public	signature:()
composition_colex	src/comb/composition-colex.h	/^    composition_colex(const composition_colex&);  \/\/ forbidden$/;"	p	class:composition_colex	access:private	signature:(const composition_colex&)
composition_colex	src/comb/composition-colex.h	/^    explicit composition_colex(ulong n, ulong k)$/;"	f	class:composition_colex	access:public	signature:(ulong n, ulong k)
composition_colex	src/comb/composition-colex.h	/^class composition_colex$/;"	c
composition_colex2	src/comb/composition-colex2.h	/^    composition_colex2(const composition_colex2&);  \/\/ forbidden$/;"	p	class:composition_colex2	access:private	signature:(const composition_colex2&)
composition_colex2	src/comb/composition-colex2.h	/^    explicit composition_colex2(ulong n, ulong k)$/;"	f	class:composition_colex2	access:public	signature:(ulong n, ulong k)
composition_colex2	src/comb/composition-colex2.h	/^class composition_colex2$/;"	c
composition_colex2::composition_colex2	src/comb/composition-colex2.h	/^    composition_colex2(const composition_colex2&);  \/\/ forbidden$/;"	p	class:composition_colex2	access:private	signature:(const composition_colex2&)
composition_colex2::composition_colex2	src/comb/composition-colex2.h	/^    explicit composition_colex2(ulong n, ulong k)$/;"	f	class:composition_colex2	access:public	signature:(ulong n, ulong k)
composition_colex2::data	src/comb/composition-colex2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_colex2	access:public	signature:() const
composition_colex2::first	src/comb/composition-colex2.h	/^    void first()$/;"	f	class:composition_colex2	access:public	signature:()
composition_colex2::k_	src/comb/composition-colex2.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex2	access:public
composition_colex2::n_	src/comb/composition-colex2.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex2	access:public
composition_colex2::next	src/comb/composition-colex2.h	/^    ulong next()$/;"	f	class:composition_colex2	access:public	signature:()
composition_colex2::operator =	src/comb/composition-colex2.h	/^    composition_colex2 & operator = (const composition_colex2&);  \/\/ forbidden$/;"	p	class:composition_colex2	access:private	signature:(const composition_colex2&)
composition_colex2::p0_	src/comb/composition-colex2.h	/^    ulong p0_;     \/\/ position of the first nonzero element$/;"	m	class:composition_colex2	access:public
composition_colex2::print	src/comb/composition-colex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_colex2	access:public	signature:(const char *bla, bool dfz=false) const
composition_colex2::x_	src/comb/composition-colex2.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_colex2	access:public
composition_colex2::x_	src/comb/composition-colex2.h	/^    ulong x_[COMP_COLEX2_MAX_ARRAY_LEN];$/;"	m	class:composition_colex2	access:public
composition_colex2::~composition_colex2	src/comb/composition-colex2.h	/^    ~composition_colex2()$/;"	f	class:composition_colex2	access:public	signature:()
composition_colex::composition_colex	src/comb/composition-colex.h	/^    composition_colex(const composition_colex&);  \/\/ forbidden$/;"	p	class:composition_colex	access:private	signature:(const composition_colex&)
composition_colex::composition_colex	src/comb/composition-colex.h	/^    explicit composition_colex(ulong n, ulong k)$/;"	f	class:composition_colex	access:public	signature:(ulong n, ulong k)
composition_colex::data	src/comb/composition-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_colex	access:public	signature:() const
composition_colex::first	src/comb/composition-colex.h	/^    void first()$/;"	f	class:composition_colex	access:public	signature:()
composition_colex::k_	src/comb/composition-colex.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex	access:public
composition_colex::last	src/comb/composition-colex.h	/^    void last()$/;"	f	class:composition_colex	access:public	signature:()
composition_colex::n_	src/comb/composition-colex.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex	access:public
composition_colex::next	src/comb/composition-colex.h	/^    ulong next()$/;"	f	class:composition_colex	access:public	signature:()
composition_colex::operator =	src/comb/composition-colex.h	/^    composition_colex & operator = (const composition_colex&);  \/\/ forbidden$/;"	p	class:composition_colex	access:private	signature:(const composition_colex&)
composition_colex::prev	src/comb/composition-colex.h	/^    ulong prev()$/;"	f	class:composition_colex	access:public	signature:()
composition_colex::print	src/comb/composition-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_colex	access:public	signature:(const char *bla, bool dfz=false) const
composition_colex::x_	src/comb/composition-colex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_colex	access:public
composition_colex::~composition_colex	src/comb/composition-colex.h	/^    ~composition_colex()$/;"	f	class:composition_colex	access:public	signature:()
composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    composition_dist_unimodal(const composition_dist_unimodal&);  \/\/ forbidden$/;"	p	class:composition_dist_unimodal	access:private	signature:(const composition_dist_unimodal&)
composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    explicit composition_dist_unimodal(ulong n)$/;"	f	class:composition_dist_unimodal	access:public	signature:(ulong n)
composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^class composition_dist_unimodal$/;"	c
composition_dist_unimodal::OK	src/comb/composition-dist-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
composition_dist_unimodal::a_	src/comb/composition-dist-unimodal.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_dist_unimodal	access:public
composition_dist_unimodal::composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    composition_dist_unimodal(const composition_dist_unimodal&);  \/\/ forbidden$/;"	p	class:composition_dist_unimodal	access:private	signature:(const composition_dist_unimodal&)
composition_dist_unimodal::composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    explicit composition_dist_unimodal(ulong n)$/;"	f	class:composition_dist_unimodal	access:public	signature:(ulong n)
composition_dist_unimodal::data	src/comb/composition-dist-unimodal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
composition_dist_unimodal::first	src/comb/composition-dist-unimodal.h	/^    void first()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
composition_dist_unimodal::m_	src/comb/composition-dist-unimodal.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:composition_dist_unimodal	access:public
composition_dist_unimodal::n_	src/comb/composition-dist-unimodal.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:composition_dist_unimodal	access:public
composition_dist_unimodal::next	src/comb/composition-dist-unimodal.h	/^    ulong next()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
composition_dist_unimodal::num_parts	src/comb/composition-dist-unimodal.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
composition_dist_unimodal::operator =	src/comb/composition-dist-unimodal.h	/^    composition_dist_unimodal & operator = (const composition_dist_unimodal&);  \/\/ forbidden$/;"	p	class:composition_dist_unimodal	access:private	signature:(const composition_dist_unimodal&)
composition_dist_unimodal::print	src/comb/composition-dist-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_dist_unimodal	access:public	signature:(const char *bla) const
composition_dist_unimodal::print_with_sorts	src/comb/composition-dist-unimodal.h	/^    void print_with_sorts(const char *bla)  const$/;"	f	class:composition_dist_unimodal	access:public	signature:(const char *bla) const
composition_dist_unimodal::s_	src/comb/composition-dist-unimodal.h	/^    ulong *s_;   \/\/ sorts of parts$/;"	m	class:composition_dist_unimodal	access:public
composition_dist_unimodal::sdata	src/comb/composition-dist-unimodal.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
composition_dist_unimodal::~composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    ~composition_dist_unimodal()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
composition_ex_colex	src/comb/composition-ex-colex.h	/^    composition_ex_colex(const composition_ex_colex&);  \/\/ forbidden$/;"	p	class:composition_ex_colex	access:private	signature:(const composition_ex_colex&)
composition_ex_colex	src/comb/composition-ex-colex.h	/^    explicit composition_ex_colex(ulong n, ulong k)$/;"	f	class:composition_ex_colex	access:public	signature:(ulong n, ulong k)
composition_ex_colex	src/comb/composition-ex-colex.h	/^class composition_ex_colex$/;"	c
composition_ex_colex::OK	src/comb/composition-ex-colex.h	/^    bool OK()  const$/;"	f	class:composition_ex_colex	access:public	signature:() const
composition_ex_colex::composition_ex_colex	src/comb/composition-ex-colex.h	/^    composition_ex_colex(const composition_ex_colex&);  \/\/ forbidden$/;"	p	class:composition_ex_colex	access:private	signature:(const composition_ex_colex&)
composition_ex_colex::composition_ex_colex	src/comb/composition-ex-colex.h	/^    explicit composition_ex_colex(ulong n, ulong k)$/;"	f	class:composition_ex_colex	access:public	signature:(ulong n, ulong k)
composition_ex_colex::data	src/comb/composition-ex-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_ex_colex	access:public	signature:() const
composition_ex_colex::first	src/comb/composition-ex-colex.h	/^    void first()$/;"	f	class:composition_ex_colex	access:public	signature:()
composition_ex_colex::k_	src/comb/composition-ex-colex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_colex	access:public
composition_ex_colex::last	src/comb/composition-ex-colex.h	/^    void last()$/;"	f	class:composition_ex_colex	access:public	signature:()
composition_ex_colex::n_	src/comb/composition-ex-colex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_colex	access:public
composition_ex_colex::next	src/comb/composition-ex-colex.h	/^    ulong next()$/;"	f	class:composition_ex_colex	access:public	signature:()
composition_ex_colex::nk1_	src/comb/composition-ex-colex.h	/^    ulong nk1_;    \/\/ == n - k + 1$/;"	m	class:composition_ex_colex	access:public
composition_ex_colex::num_parts	src/comb/composition-ex-colex.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_ex_colex	access:public	signature:() const
composition_ex_colex::operator =	src/comb/composition-ex-colex.h	/^    composition_ex_colex & operator = (const composition_ex_colex&);  \/\/ forbidden$/;"	p	class:composition_ex_colex	access:private	signature:(const composition_ex_colex&)
composition_ex_colex::prev	src/comb/composition-ex-colex.h	/^    ulong prev()$/;"	f	class:composition_ex_colex	access:public	signature:()
composition_ex_colex::print	src/comb/composition-ex-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_ex_colex	access:public	signature:(const char *bla, bool dfz=false) const
composition_ex_colex::x_	src/comb/composition-ex-colex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_ex_colex	access:public
composition_ex_colex::x_	src/comb/composition-ex-colex.h	/^    ulong x_[64];$/;"	m	class:composition_ex_colex	access:public
composition_ex_colex::~composition_ex_colex	src/comb/composition-ex-colex.h	/^    ~composition_ex_colex()$/;"	f	class:composition_ex_colex	access:public	signature:()
composition_ex_lex	src/comb/composition-ex-lex.h	/^    composition_ex_lex(const composition_ex_lex&);  \/\/ forbidden$/;"	p	class:composition_ex_lex	access:private	signature:(const composition_ex_lex&)
composition_ex_lex	src/comb/composition-ex-lex.h	/^    explicit composition_ex_lex(ulong n, ulong k)$/;"	f	class:composition_ex_lex	access:public	signature:(ulong n, ulong k)
composition_ex_lex	src/comb/composition-ex-lex.h	/^class composition_ex_lex$/;"	c
composition_ex_lex::OK	src/comb/composition-ex-lex.h	/^    bool OK()  const$/;"	f	class:composition_ex_lex	access:public	signature:() const
composition_ex_lex::composition_ex_lex	src/comb/composition-ex-lex.h	/^    composition_ex_lex(const composition_ex_lex&);  \/\/ forbidden$/;"	p	class:composition_ex_lex	access:private	signature:(const composition_ex_lex&)
composition_ex_lex::composition_ex_lex	src/comb/composition-ex-lex.h	/^    explicit composition_ex_lex(ulong n, ulong k)$/;"	f	class:composition_ex_lex	access:public	signature:(ulong n, ulong k)
composition_ex_lex::data	src/comb/composition-ex-lex.h	/^    const ulong * data()  const  { return x_ + 1; }$/;"	f	class:composition_ex_lex	access:public	signature:() const
composition_ex_lex::first	src/comb/composition-ex-lex.h	/^    void first()$/;"	f	class:composition_ex_lex	access:public	signature:()
composition_ex_lex::k_	src/comb/composition-ex-lex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_lex	access:public
composition_ex_lex::last	src/comb/composition-ex-lex.h	/^    void last()$/;"	f	class:composition_ex_lex	access:public	signature:()
composition_ex_lex::n_	src/comb/composition-ex-lex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_lex	access:public
composition_ex_lex::next	src/comb/composition-ex-lex.h	/^    ulong next()$/;"	f	class:composition_ex_lex	access:public	signature:()
composition_ex_lex::nk1_	src/comb/composition-ex-lex.h	/^    ulong nk1_;    \/\/ == n - k + 1$/;"	m	class:composition_ex_lex	access:public
composition_ex_lex::num_parts	src/comb/composition-ex-lex.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_ex_lex	access:public	signature:() const
composition_ex_lex::operator =	src/comb/composition-ex-lex.h	/^    composition_ex_lex & operator = (const composition_ex_lex&);  \/\/ forbidden$/;"	p	class:composition_ex_lex	access:private	signature:(const composition_ex_lex&)
composition_ex_lex::prev	src/comb/composition-ex-lex.h	/^    ulong prev()$/;"	f	class:composition_ex_lex	access:public	signature:()
composition_ex_lex::print	src/comb/composition-ex-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_ex_lex	access:public	signature:(const char *bla, bool dfz=false) const
composition_ex_lex::x_	src/comb/composition-ex-lex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_ex_lex	access:public
composition_ex_lex::x_	src/comb/composition-ex-lex.h	/^    ulong x_[64];$/;"	m	class:composition_ex_lex	access:public
composition_ex_lex::~composition_ex_lex	src/comb/composition-ex-lex.h	/^    ~composition_ex_lex()$/;"	f	class:composition_ex_lex	access:public	signature:()
composition_nz	src/comb/composition-nz.h	/^    composition_nz(const composition_nz&);  \/\/ forbidden$/;"	p	class:composition_nz	access:private	signature:(const composition_nz&)
composition_nz	src/comb/composition-nz.h	/^    explicit composition_nz(ulong n)$/;"	f	class:composition_nz	access:public	signature:(ulong n)
composition_nz	src/comb/composition-nz.h	/^class composition_nz$/;"	c
composition_nz::OK	src/comb/composition-nz.h	/^    bool OK()  const$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::a_	src/comb/composition-nz.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz	access:public
composition_nz::composition_nz	src/comb/composition-nz.h	/^    composition_nz(const composition_nz&);  \/\/ forbidden$/;"	p	class:composition_nz	access:private	signature:(const composition_nz&)
composition_nz::composition_nz	src/comb/composition-nz.h	/^    explicit composition_nz(ulong n)$/;"	f	class:composition_nz	access:public	signature:(ulong n)
composition_nz::data	src/comb/composition-nz.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::first	src/comb/composition-nz.h	/^    void first()$/;"	f	class:composition_nz	access:public	signature:()
composition_nz::first_part	src/comb/composition-nz.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::last	src/comb/composition-nz.h	/^    void last()$/;"	f	class:composition_nz	access:public	signature:()
composition_nz::last_part	src/comb/composition-nz.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::m_	src/comb/composition-nz.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz	access:public
composition_nz::n_	src/comb/composition-nz.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz	access:public
composition_nz::next	src/comb/composition-nz.h	/^    ulong next()$/;"	f	class:composition_nz	access:public	signature:()
composition_nz::num_parts	src/comb/composition-nz.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::operator =	src/comb/composition-nz.h	/^    composition_nz & operator = (const composition_nz&);  \/\/ forbidden$/;"	p	class:composition_nz	access:private	signature:(const composition_nz&)
composition_nz::prev	src/comb/composition-nz.h	/^    ulong prev()$/;"	f	class:composition_nz	access:public	signature:()
composition_nz::print	src/comb/composition-nz.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz	access:public	signature:(const char *bla) const
composition_nz::print_aa	src/comb/composition-nz.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::rank	src/comb/composition-nz.h	/^    ulong rank()  const$/;"	f	class:composition_nz	access:public	signature:() const
composition_nz::unrank	src/comb/composition-nz.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz	access:public	signature:(ulong r)
composition_nz::~composition_nz	src/comb/composition-nz.h	/^    ~composition_nz()$/;"	f	class:composition_nz	access:public	signature:()
composition_nz_binary	src/comb/composition-nz-binary.h	/^    composition_nz_binary(const composition_nz_binary&);  \/\/ forbidden$/;"	p	class:composition_nz_binary	access:private	signature:(const composition_nz_binary&)
composition_nz_binary	src/comb/composition-nz-binary.h	/^    explicit composition_nz_binary(ulong n)$/;"	f	class:composition_nz_binary	access:public	signature:(ulong n)
composition_nz_binary	src/comb/composition-nz-binary.h	/^class composition_nz_binary$/;"	c
composition_nz_binary::OK	src/comb/composition-nz-binary.h	/^    bool OK()  const$/;"	f	class:composition_nz_binary	access:public	signature:() const
composition_nz_binary::a_	src/comb/composition-nz-binary.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_binary	access:public
composition_nz_binary::composition_nz_binary	src/comb/composition-nz-binary.h	/^    composition_nz_binary(const composition_nz_binary&);  \/\/ forbidden$/;"	p	class:composition_nz_binary	access:private	signature:(const composition_nz_binary&)
composition_nz_binary::composition_nz_binary	src/comb/composition-nz-binary.h	/^    explicit composition_nz_binary(ulong n)$/;"	f	class:composition_nz_binary	access:public	signature:(ulong n)
composition_nz_binary::data	src/comb/composition-nz-binary.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
composition_nz_binary::first	src/comb/composition-nz-binary.h	/^    void first()$/;"	f	class:composition_nz_binary	access:public	signature:()
composition_nz_binary::first_part	src/comb/composition-nz-binary.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
composition_nz_binary::last_part	src/comb/composition-nz-binary.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
composition_nz_binary::m_	src/comb/composition-nz-binary.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_binary	access:public
composition_nz_binary::n_	src/comb/composition-nz-binary.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_binary	access:public
composition_nz_binary::next	src/comb/composition-nz-binary.h	/^    ulong next()$/;"	f	class:composition_nz_binary	access:public	signature:()
composition_nz_binary::num_parts	src/comb/composition-nz-binary.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
composition_nz_binary::operator =	src/comb/composition-nz-binary.h	/^    composition_nz_binary & operator = (const composition_nz_binary&);  \/\/ forbidden$/;"	p	class:composition_nz_binary	access:private	signature:(const composition_nz_binary&)
composition_nz_binary::print	src/comb/composition-nz-binary.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_binary	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_binary::~composition_nz_binary	src/comb/composition-nz-binary.h	/^    ~composition_nz_binary()$/;"	f	class:composition_nz_binary	access:public	signature:()
composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    composition_nz_carlitz(const composition_nz_carlitz&);  \/\/ forbidden$/;"	p	class:composition_nz_carlitz	access:private	signature:(const composition_nz_carlitz&)
composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    explicit composition_nz_carlitz(ulong n)$/;"	f	class:composition_nz_carlitz	access:public	signature:(ulong n)
composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^class composition_nz_carlitz$/;"	c
composition_nz_carlitz::OK	src/comb/composition-nz-carlitz.h	/^    bool OK()  const$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
composition_nz_carlitz::a_	src/comb/composition-nz-carlitz.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_carlitz	access:public
composition_nz_carlitz::composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    composition_nz_carlitz(const composition_nz_carlitz&);  \/\/ forbidden$/;"	p	class:composition_nz_carlitz	access:private	signature:(const composition_nz_carlitz&)
composition_nz_carlitz::composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    explicit composition_nz_carlitz(ulong n)$/;"	f	class:composition_nz_carlitz	access:public	signature:(ulong n)
composition_nz_carlitz::data	src/comb/composition-nz-carlitz.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
composition_nz_carlitz::first	src/comb/composition-nz-carlitz.h	/^    void first()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
composition_nz_carlitz::m_	src/comb/composition-nz-carlitz.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_carlitz	access:public
composition_nz_carlitz::n_	src/comb/composition-nz-carlitz.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_carlitz	access:public
composition_nz_carlitz::next	src/comb/composition-nz-carlitz.h	/^    ulong next()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
composition_nz_carlitz::num_parts	src/comb/composition-nz-carlitz.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
composition_nz_carlitz::operator =	src/comb/composition-nz-carlitz.h	/^    composition_nz_carlitz & operator = (const composition_nz_carlitz&);  \/\/ forbidden$/;"	p	class:composition_nz_carlitz	access:private	signature:(const composition_nz_carlitz&)
composition_nz_carlitz::print	src/comb/composition-nz-carlitz.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_carlitz	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_carlitz::write_tail	src/comb/composition-nz-carlitz.h	/^    ulong write_tail(ulong z, ulong k)$/;"	f	class:composition_nz_carlitz	access:private	signature:(ulong z, ulong k)
composition_nz_carlitz::~composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    ~composition_nz_carlitz()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
composition_nz_conj	src/comb/composition-nz-conj.h	/^inline ulong composition_nz_conj(const ulong *x, ulong m, ulong *c)$/;"	f	signature:(const ulong *x, ulong m, ulong *c)
composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    composition_nz_first_max(const composition_nz_first_max&);  \/\/ forbidden$/;"	p	class:composition_nz_first_max	access:private	signature:(const composition_nz_first_max&)
composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    explicit composition_nz_first_max(ulong n)$/;"	f	class:composition_nz_first_max	access:public	signature:(ulong n)
composition_nz_first_max	src/comb/composition-nz-first-max.h	/^class composition_nz_first_max$/;"	c
composition_nz_first_max::OK	src/comb/composition-nz-first-max.h	/^    bool OK()  const$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::a_	src/comb/composition-nz-first-max.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_first_max	access:public
composition_nz_first_max::composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    composition_nz_first_max(const composition_nz_first_max&);  \/\/ forbidden$/;"	p	class:composition_nz_first_max	access:private	signature:(const composition_nz_first_max&)
composition_nz_first_max::composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    explicit composition_nz_first_max(ulong n)$/;"	f	class:composition_nz_first_max	access:public	signature:(ulong n)
composition_nz_first_max::data	src/comb/composition-nz-first-max.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::first	src/comb/composition-nz-first-max.h	/^    void first()$/;"	f	class:composition_nz_first_max	access:public	signature:()
composition_nz_first_max::first_part	src/comb/composition-nz-first-max.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ also: max part$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::last_part	src/comb/composition-nz-first-max.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::m_	src/comb/composition-nz-first-max.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_first_max	access:public
composition_nz_first_max::n_	src/comb/composition-nz-first-max.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_first_max	access:public
composition_nz_first_max::next	src/comb/composition-nz-first-max.h	/^    ulong next()$/;"	f	class:composition_nz_first_max	access:public	signature:()
composition_nz_first_max::num_parts	src/comb/composition-nz-first-max.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::operator =	src/comb/composition-nz-first-max.h	/^    composition_nz_first_max & operator = (const composition_nz_first_max&);  \/\/ forbidden$/;"	p	class:composition_nz_first_max	access:private	signature:(const composition_nz_first_max&)
composition_nz_first_max::print	src/comb/composition-nz-first-max.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_first_max	access:public	signature:(const char *bla) const
composition_nz_first_max::print_aa	src/comb/composition-nz-first-max.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_first_max	access:public	signature:() const
composition_nz_first_max::print_tree_lev_seq	src/comb/composition-nz-first-max.h	/^    void print_tree_lev_seq(const char *bla)  const$/;"	f	class:composition_nz_first_max	access:public	signature:(const char *bla) const
composition_nz_first_max::~composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    ~composition_nz_first_max()$/;"	f	class:composition_nz_first_max	access:public	signature:()
composition_nz_gray	src/comb/composition-nz-gray.h	/^    composition_nz_gray(const composition_nz_gray&);  \/\/ forbidden$/;"	p	class:composition_nz_gray	access:private	signature:(const composition_nz_gray&)
composition_nz_gray	src/comb/composition-nz-gray.h	/^    explicit composition_nz_gray(ulong n)$/;"	f	class:composition_nz_gray	access:public	signature:(ulong n)
composition_nz_gray	src/comb/composition-nz-gray.h	/^class composition_nz_gray$/;"	c
composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    composition_nz_gray2(const composition_nz_gray2&);  \/\/ forbidden$/;"	p	class:composition_nz_gray2	access:private	signature:(const composition_nz_gray2&)
composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    explicit composition_nz_gray2(ulong n)$/;"	f	class:composition_nz_gray2	access:public	signature:(ulong n)
composition_nz_gray2	src/comb/composition-nz-gray2.h	/^class composition_nz_gray2$/;"	c
composition_nz_gray2::OK	src/comb/composition-nz-gray2.h	/^    bool OK()  const$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::a_	src/comb/composition-nz-gray2.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_gray2	access:public
composition_nz_gray2::composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    composition_nz_gray2(const composition_nz_gray2&);  \/\/ forbidden$/;"	p	class:composition_nz_gray2	access:private	signature:(const composition_nz_gray2&)
composition_nz_gray2::composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    explicit composition_nz_gray2(ulong n)$/;"	f	class:composition_nz_gray2	access:public	signature:(ulong n)
composition_nz_gray2::data	src/comb/composition-nz-gray2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::e_	src/comb/composition-nz-gray2.h	/^    ulong e_;   \/\/ aux: detection of last composition$/;"	m	class:composition_nz_gray2	access:public
composition_nz_gray2::evenq	src/comb/composition-nz-gray2.h	/^    bool evenq(ulong x)  const  { return  0 == ( x & 1UL ); }$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
composition_nz_gray2::first	src/comb/composition-nz-gray2.h	/^    void first()$/;"	f	class:composition_nz_gray2	access:public	signature:()
composition_nz_gray2::first_part	src/comb/composition-nz-gray2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::last_part	src/comb/composition-nz-gray2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::m_	src/comb/composition-nz-gray2.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_gray2	access:public
composition_nz_gray2::n_	src/comb/composition-nz-gray2.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_gray2	access:public
composition_nz_gray2::next	src/comb/composition-nz-gray2.h	/^    ulong next()$/;"	f	class:composition_nz_gray2	access:public	signature:()
composition_nz_gray2::next_zeq1	src/comb/composition-nz-gray2.h	/^    ulong next_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray2	access:protected	signature:()
composition_nz_gray2::next_zgt1	src/comb/composition-nz-gray2.h	/^    ulong next_zgt1()  \/\/ for Z > 1$/;"	f	class:composition_nz_gray2	access:protected	signature:()
composition_nz_gray2::num_parts	src/comb/composition-nz-gray2.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::oddq	src/comb/composition-nz-gray2.h	/^    bool oddq(ulong x)  const  { return  0 != ( x & 1UL ); }$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
composition_nz_gray2::operator =	src/comb/composition-nz-gray2.h	/^    composition_nz_gray2 & operator = (const composition_nz_gray2&);  \/\/ forbidden$/;"	p	class:composition_nz_gray2	access:private	signature:(const composition_nz_gray2&)
composition_nz_gray2::par_to_dir_even	src/comb/composition-nz-gray2.h	/^    ulong par_to_dir_even(ulong x)  const$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
composition_nz_gray2::par_to_dir_odd	src/comb/composition-nz-gray2.h	/^    ulong par_to_dir_odd(ulong x)  const$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
composition_nz_gray2::print	src/comb/composition-nz-gray2.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_gray2	access:public	signature:(const char *bla) const
composition_nz_gray2::print_aa	src/comb/composition-nz-gray2.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::rank	src/comb/composition-nz-gray2.h	/^    ulong rank()  const$/;"	f	class:composition_nz_gray2	access:public	signature:() const
composition_nz_gray2::unrank	src/comb/composition-nz-gray2.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_gray2	access:public	signature:(ulong r)
composition_nz_gray2::~composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    ~composition_nz_gray2()$/;"	f	class:composition_nz_gray2	access:public	signature:()
composition_nz_gray::OK	src/comb/composition-nz-gray.h	/^    bool OK()  const$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::a_	src/comb/composition-nz-gray.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_gray	access:public
composition_nz_gray::composition_nz_gray	src/comb/composition-nz-gray.h	/^    composition_nz_gray(const composition_nz_gray&);  \/\/ forbidden$/;"	p	class:composition_nz_gray	access:private	signature:(const composition_nz_gray&)
composition_nz_gray::composition_nz_gray	src/comb/composition-nz-gray.h	/^    explicit composition_nz_gray(ulong n)$/;"	f	class:composition_nz_gray	access:public	signature:(ulong n)
composition_nz_gray::data	src/comb/composition-nz-gray.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::evenq	src/comb/composition-nz-gray.h	/^    bool evenq(ulong x)  const  { return  0 == ( x & 1UL ); }$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
composition_nz_gray::first	src/comb/composition-nz-gray.h	/^    void first()$/;"	f	class:composition_nz_gray	access:public	signature:()
composition_nz_gray::first_part	src/comb/composition-nz-gray.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::last	src/comb/composition-nz-gray.h	/^    void last()$/;"	f	class:composition_nz_gray	access:public	signature:()
composition_nz_gray::last_part	src/comb/composition-nz-gray.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::m_	src/comb/composition-nz-gray.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_gray	access:public
composition_nz_gray::n_	src/comb/composition-nz-gray.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_gray	access:public
composition_nz_gray::next	src/comb/composition-nz-gray.h	/^    ulong next()$/;"	f	class:composition_nz_gray	access:public	signature:()
composition_nz_gray::next_even_zeq1	src/comb/composition-nz-gray.h	/^    ulong next_even_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray	access:protected	signature:()
composition_nz_gray::next_odd_zeq1	src/comb/composition-nz-gray.h	/^    ulong next_odd_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray	access:protected	signature:()
composition_nz_gray::next_zgt1	src/comb/composition-nz-gray.h	/^    ulong next_zgt1(bool qq)  \/\/ for Z > 1$/;"	f	class:composition_nz_gray	access:protected	signature:(bool qq)
composition_nz_gray::num_parts	src/comb/composition-nz-gray.h	/^    ulong num_parts()  const  {  return m_ - (n_==0); }$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::oddq	src/comb/composition-nz-gray.h	/^    bool oddq(ulong x)  const  { return  0 != ( x & 1UL ); }$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
composition_nz_gray::operator =	src/comb/composition-nz-gray.h	/^    composition_nz_gray & operator = (const composition_nz_gray&);  \/\/ forbidden$/;"	p	class:composition_nz_gray	access:private	signature:(const composition_nz_gray&)
composition_nz_gray::par_to_dir_even	src/comb/composition-nz-gray.h	/^    ulong par_to_dir_even(ulong x)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
composition_nz_gray::par_to_dir_odd	src/comb/composition-nz-gray.h	/^    ulong par_to_dir_odd(ulong x)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
composition_nz_gray::prev	src/comb/composition-nz-gray.h	/^    ulong prev()$/;"	f	class:composition_nz_gray	access:public	signature:()
composition_nz_gray::print	src/comb/composition-nz-gray.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_gray	access:public	signature:(const char *bla) const
composition_nz_gray::print_aa	src/comb/composition-nz-gray.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::rank	src/comb/composition-nz-gray.h	/^    ulong rank()  const$/;"	f	class:composition_nz_gray	access:public	signature:() const
composition_nz_gray::same_parity	src/comb/composition-nz-gray.h	/^    bool same_parity(ulong x, ulong y)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x, ulong y) const
composition_nz_gray::unrank	src/comb/composition-nz-gray.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_gray	access:public	signature:(ulong r)
composition_nz_gray::~composition_nz_gray	src/comb/composition-nz-gray.h	/^    ~composition_nz_gray()$/;"	f	class:composition_nz_gray	access:public	signature:()
composition_nz_gray_rank	src/comb/composition-nz-rank.cc	/^composition_nz_gray_rank(const ulong *x, ulong m, ulong n)$/;"	f	signature:(const ulong *x, ulong m, ulong n)
composition_nz_gray_rank	src/comb/composition-nz-rank.h	/^ulong composition_nz_gray_rank(const ulong *x, ulong m, ulong n);$/;"	p	signature:(const ulong *x, ulong m, ulong n)
composition_nz_gray_unrank	src/comb/composition-nz-rank.cc	/^composition_nz_gray_unrank(ulong r, ulong *x, ulong n)$/;"	f	signature:(ulong r, ulong *x, ulong n)
composition_nz_gray_unrank	src/comb/composition-nz-rank.h	/^ulong composition_nz_gray_unrank(ulong r, ulong *x, ulong n);$/;"	p	signature:(ulong r, ulong *x, ulong n)
composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    composition_nz_i_smooth(const composition_nz_i_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_i_smooth	access:private	signature:(const composition_nz_i_smooth&)
composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    explicit composition_nz_i_smooth(ulong n)$/;"	f	class:composition_nz_i_smooth	access:public	signature:(ulong n)
composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^class composition_nz_i_smooth$/;"	c
composition_nz_i_smooth::OK	src/comb/composition-nz-i-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
composition_nz_i_smooth::a_	src/comb/composition-nz-i-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    composition_nz_i_smooth(const composition_nz_i_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_i_smooth	access:private	signature:(const composition_nz_i_smooth&)
composition_nz_i_smooth::composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    explicit composition_nz_i_smooth(ulong n)$/;"	f	class:composition_nz_i_smooth	access:public	signature:(ulong n)
composition_nz_i_smooth::data	src/comb/composition-nz-i-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
composition_nz_i_smooth::easy3	src/comb/composition-nz-i-smooth.h	/^    ulong easy3(ulong y, ulong z)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong y, ulong z)
composition_nz_i_smooth::first	src/comb/composition-nz-i-smooth.h	/^    void first()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
composition_nz_i_smooth::m_	src/comb/composition-nz-i-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::mwrk_	src/comb/composition-nz-i-smooth.h	/^    ulong mwrk_;  \/\/ max work with last call of next() so far$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::n_	src/comb/composition-nz-i-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::next	src/comb/composition-nz-i-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
composition_nz_i_smooth::num_parts	src/comb/composition-nz-i-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
composition_nz_i_smooth::operator =	src/comb/composition-nz-i-smooth.h	/^    composition_nz_i_smooth & operator = (const composition_nz_i_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_i_smooth	access:private	signature:(const composition_nz_i_smooth&)
composition_nz_i_smooth::print	src/comb/composition-nz-i-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_i_smooth	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_i_smooth::print_aa	src/comb/composition-nz-i-smooth.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
composition_nz_i_smooth::try_write_tail	src/comb/composition-nz-i-smooth.h	/^    ulong try_write_tail(ulong j, ulong s, ulong p)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong j, ulong s, ulong p)
composition_nz_i_smooth::two_parts	src/comb/composition-nz-i-smooth.h	/^    ulong two_parts(ulong y, ulong z)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong y, ulong z)
composition_nz_i_smooth::twrk_	src/comb/composition-nz-i-smooth.h	/^    ulong twrk_;  \/\/ total work$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::wrk_	src/comb/composition-nz-i-smooth.h	/^    ulong wrk_;   \/\/ work with last call of next()$/;"	m	class:composition_nz_i_smooth	access:public
composition_nz_i_smooth::~composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    ~composition_nz_i_smooth()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    composition_nz_left_2smooth(const composition_nz_left_2smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_2smooth	access:private	signature:(const composition_nz_left_2smooth&)
composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    explicit composition_nz_left_2smooth(ulong n)$/;"	f	class:composition_nz_left_2smooth	access:public	signature:(ulong n)
composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^class composition_nz_left_2smooth$/;"	c
composition_nz_left_2smooth::OK	src/comb/composition-nz-left-2smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
composition_nz_left_2smooth::a_	src/comb/composition-nz-left-2smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_left_2smooth	access:public
composition_nz_left_2smooth::composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    composition_nz_left_2smooth(const composition_nz_left_2smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_2smooth	access:private	signature:(const composition_nz_left_2smooth&)
composition_nz_left_2smooth::composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    explicit composition_nz_left_2smooth(ulong n)$/;"	f	class:composition_nz_left_2smooth	access:public	signature:(ulong n)
composition_nz_left_2smooth::data	src/comb/composition-nz-left-2smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
composition_nz_left_2smooth::first	src/comb/composition-nz-left-2smooth.h	/^    void first()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
composition_nz_left_2smooth::m_	src/comb/composition-nz-left-2smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_left_2smooth	access:public
composition_nz_left_2smooth::n_	src/comb/composition-nz-left-2smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_left_2smooth	access:public
composition_nz_left_2smooth::next	src/comb/composition-nz-left-2smooth.h	/^    ulong next()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
composition_nz_left_2smooth::num_parts	src/comb/composition-nz-left-2smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
composition_nz_left_2smooth::operator =	src/comb/composition-nz-left-2smooth.h	/^    composition_nz_left_2smooth & operator = (const composition_nz_left_2smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_2smooth	access:private	signature:(const composition_nz_left_2smooth&)
composition_nz_left_2smooth::print	src/comb/composition-nz-left-2smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_left_2smooth	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_left_2smooth::print_composition_aa	src/comb/composition-nz-left-2smooth.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
composition_nz_left_2smooth::print_fountain_aa	src/comb/composition-nz-left-2smooth.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
composition_nz_left_2smooth::~composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    ~composition_nz_left_2smooth()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    composition_nz_left_smooth(const composition_nz_left_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_smooth	access:private	signature:(const composition_nz_left_smooth&)
composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    explicit composition_nz_left_smooth(ulong n)$/;"	f	class:composition_nz_left_smooth	access:public	signature:(ulong n)
composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^class composition_nz_left_smooth$/;"	c
composition_nz_left_smooth::OK	src/comb/composition-nz-left-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
composition_nz_left_smooth::a_	src/comb/composition-nz-left-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_left_smooth	access:public
composition_nz_left_smooth::composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    composition_nz_left_smooth(const composition_nz_left_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_smooth	access:private	signature:(const composition_nz_left_smooth&)
composition_nz_left_smooth::composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    explicit composition_nz_left_smooth(ulong n)$/;"	f	class:composition_nz_left_smooth	access:public	signature:(ulong n)
composition_nz_left_smooth::data	src/comb/composition-nz-left-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
composition_nz_left_smooth::first	src/comb/composition-nz-left-smooth.h	/^    void first()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
composition_nz_left_smooth::m_	src/comb/composition-nz-left-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_left_smooth	access:public
composition_nz_left_smooth::n_	src/comb/composition-nz-left-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_left_smooth	access:public
composition_nz_left_smooth::next	src/comb/composition-nz-left-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
composition_nz_left_smooth::num_parts	src/comb/composition-nz-left-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
composition_nz_left_smooth::operator =	src/comb/composition-nz-left-smooth.h	/^    composition_nz_left_smooth & operator = (const composition_nz_left_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_smooth	access:private	signature:(const composition_nz_left_smooth&)
composition_nz_left_smooth::print	src/comb/composition-nz-left-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_left_smooth	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_left_smooth::print_composition_aa	src/comb/composition-nz-left-smooth.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
composition_nz_left_smooth::print_fountain_aa	src/comb/composition-nz-left-smooth.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
composition_nz_left_smooth::~composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    ~composition_nz_left_smooth()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
composition_nz_max	src/comb/composition-nz-max.h	/^    composition_nz_max(const composition_nz_max&);  \/\/ forbidden$/;"	p	class:composition_nz_max	access:private	signature:(const composition_nz_max&)
composition_nz_max	src/comb/composition-nz-max.h	/^    explicit composition_nz_max(ulong n, ulong mx)$/;"	f	class:composition_nz_max	access:public	signature:(ulong n, ulong mx)
composition_nz_max	src/comb/composition-nz-max.h	/^class composition_nz_max$/;"	c
composition_nz_max::OK	src/comb/composition-nz-max.h	/^    bool OK()  const$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::a_	src/comb/composition-nz-max.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_max	access:public
composition_nz_max::composition_nz_max	src/comb/composition-nz-max.h	/^    composition_nz_max(const composition_nz_max&);  \/\/ forbidden$/;"	p	class:composition_nz_max	access:private	signature:(const composition_nz_max&)
composition_nz_max::composition_nz_max	src/comb/composition-nz-max.h	/^    explicit composition_nz_max(ulong n, ulong mx)$/;"	f	class:composition_nz_max	access:public	signature:(ulong n, ulong mx)
composition_nz_max::data	src/comb/composition-nz-max.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::first	src/comb/composition-nz-max.h	/^    void first()$/;"	f	class:composition_nz_max	access:public	signature:()
composition_nz_max::first_part	src/comb/composition-nz-max.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::last_part	src/comb/composition-nz-max.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::m_	src/comb/composition-nz-max.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_max	access:public
composition_nz_max::max_part	src/comb/composition-nz-max.h	/^    ulong max_part()  const$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::mx_	src/comb/composition-nz-max.h	/^    ulong mx_;  \/\/ all parts <= mx$/;"	m	class:composition_nz_max	access:public
composition_nz_max::n_	src/comb/composition-nz-max.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_max	access:public
composition_nz_max::next	src/comb/composition-nz-max.h	/^    ulong next()$/;"	f	class:composition_nz_max	access:public	signature:()
composition_nz_max::num_parts	src/comb/composition-nz-max.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_max	access:public	signature:() const
composition_nz_max::operator =	src/comb/composition-nz-max.h	/^    composition_nz_max & operator = (const composition_nz_max&);  \/\/ forbidden$/;"	p	class:composition_nz_max	access:private	signature:(const composition_nz_max&)
composition_nz_max::print	src/comb/composition-nz-max.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_max	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_max::~composition_nz_max	src/comb/composition-nz-max.h	/^    ~composition_nz_max()$/;"	f	class:composition_nz_max	access:public	signature:()
composition_nz_min	src/comb/composition-nz-min.h	/^    composition_nz_min(const composition_nz_min&);  \/\/ forbidden$/;"	p	class:composition_nz_min	access:private	signature:(const composition_nz_min&)
composition_nz_min	src/comb/composition-nz-min.h	/^    explicit composition_nz_min(ulong n, ulong mi)$/;"	f	class:composition_nz_min	access:public	signature:(ulong n, ulong mi)
composition_nz_min	src/comb/composition-nz-min.h	/^class composition_nz_min$/;"	c
composition_nz_min::OK	src/comb/composition-nz-min.h	/^    bool OK()  const$/;"	f	class:composition_nz_min	access:public	signature:() const
composition_nz_min::a_	src/comb/composition-nz-min.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_min	access:public
composition_nz_min::composition_nz_min	src/comb/composition-nz-min.h	/^    composition_nz_min(const composition_nz_min&);  \/\/ forbidden$/;"	p	class:composition_nz_min	access:private	signature:(const composition_nz_min&)
composition_nz_min::composition_nz_min	src/comb/composition-nz-min.h	/^    explicit composition_nz_min(ulong n, ulong mi)$/;"	f	class:composition_nz_min	access:public	signature:(ulong n, ulong mi)
composition_nz_min::data	src/comb/composition-nz-min.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_min	access:public	signature:() const
composition_nz_min::first	src/comb/composition-nz-min.h	/^    void first()$/;"	f	class:composition_nz_min	access:public	signature:()
composition_nz_min::m_	src/comb/composition-nz-min.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_min	access:public
composition_nz_min::mi_	src/comb/composition-nz-min.h	/^    ulong mi_;  \/\/ all parts <= mi$/;"	m	class:composition_nz_min	access:public
composition_nz_min::n_	src/comb/composition-nz-min.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_min	access:public
composition_nz_min::next	src/comb/composition-nz-min.h	/^    ulong next()$/;"	f	class:composition_nz_min	access:public	signature:()
composition_nz_min::num_parts	src/comb/composition-nz-min.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_min	access:public	signature:() const
composition_nz_min::operator =	src/comb/composition-nz-min.h	/^    composition_nz_min & operator = (const composition_nz_min&);  \/\/ forbidden$/;"	p	class:composition_nz_min	access:private	signature:(const composition_nz_min&)
composition_nz_min::print	src/comb/composition-nz-min.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_min	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_min::write_tail	src/comb/composition-nz-min.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:composition_nz_min	access:private	signature:(ulong s, ulong j)
composition_nz_min::~composition_nz_min	src/comb/composition-nz-min.h	/^    ~composition_nz_min()$/;"	f	class:composition_nz_min	access:public	signature:()
composition_nz_minc	src/comb/composition-nz-minc.h	/^    composition_nz_minc(const composition_nz_minc&);  \/\/ forbidden$/;"	p	class:composition_nz_minc	access:private	signature:(const composition_nz_minc&)
composition_nz_minc	src/comb/composition-nz-minc.h	/^    explicit composition_nz_minc(ulong n, ulong c, ulong f)$/;"	f	class:composition_nz_minc	access:public	signature:(ulong n, ulong c, ulong f)
composition_nz_minc	src/comb/composition-nz-minc.h	/^class composition_nz_minc$/;"	c
composition_nz_minc::OK	src/comb/composition-nz-minc.h	/^    bool OK()  const$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::a_	src/comb/composition-nz-minc.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_minc	access:public
composition_nz_minc::c_	src/comb/composition-nz-minc.h	/^    ulong c_;   \/\/ size of first part =a[1]$/;"	m	class:composition_nz_minc	access:public
composition_nz_minc::composition_nz_minc	src/comb/composition-nz-minc.h	/^    composition_nz_minc(const composition_nz_minc&);  \/\/ forbidden$/;"	p	class:composition_nz_minc	access:private	signature:(const composition_nz_minc&)
composition_nz_minc::composition_nz_minc	src/comb/composition-nz-minc.h	/^    explicit composition_nz_minc(ulong n, ulong c, ulong f)$/;"	f	class:composition_nz_minc	access:public	signature:(ulong n, ulong c, ulong f)
composition_nz_minc::data	src/comb/composition-nz-minc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::f_	src/comb/composition-nz-minc.h	/^    ulong f_;   \/\/ a[k] <= f * a[k-1]$/;"	m	class:composition_nz_minc	access:public
composition_nz_minc::first	src/comb/composition-nz-minc.h	/^    void first()$/;"	f	class:composition_nz_minc	access:public	signature:()
composition_nz_minc::first_part	src/comb/composition-nz-minc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::last_part	src/comb/composition-nz-minc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::m_	src/comb/composition-nz-minc.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_minc	access:public
composition_nz_minc::n_	src/comb/composition-nz-minc.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_minc	access:public
composition_nz_minc::next	src/comb/composition-nz-minc.h	/^    ulong next()$/;"	f	class:composition_nz_minc	access:public	signature:()
composition_nz_minc::num_parts	src/comb/composition-nz-minc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::operator =	src/comb/composition-nz-minc.h	/^    composition_nz_minc & operator = (const composition_nz_minc&);  \/\/ forbidden$/;"	p	class:composition_nz_minc	access:private	signature:(const composition_nz_minc&)
composition_nz_minc::print	src/comb/composition-nz-minc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_minc	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_minc::print_aa	src/comb/composition-nz-minc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_minc	access:public	signature:() const
composition_nz_minc::print_unit_partition	src/comb/composition-nz-minc.cc	/^composition_nz_minc::print_unit_partition(const char *bla, bool dfz\/*=false*\/)  const$/;"	f	class:composition_nz_minc	signature:(const char *bla, bool dfz ) const
composition_nz_minc::print_unit_partition	src/comb/composition-nz-minc.h	/^    void print_unit_partition(const char *bla, bool dfz=false)  const;$/;"	p	class:composition_nz_minc	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_minc::~composition_nz_minc	src/comb/composition-nz-minc.h	/^    ~composition_nz_minc()$/;"	f	class:composition_nz_minc	access:public	signature:()
composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    composition_nz_numparts(const composition_nz_numparts&);  \/\/ forbidden$/;"	p	class:composition_nz_numparts	access:private	signature:(const composition_nz_numparts&)
composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    explicit composition_nz_numparts(ulong n)$/;"	f	class:composition_nz_numparts	access:public	signature:(ulong n)
composition_nz_numparts	src/comb/composition-nz-numparts.h	/^class composition_nz_numparts$/;"	c
composition_nz_numparts::OK	src/comb/composition-nz-numparts.h	/^    bool OK()  const$/;"	f	class:composition_nz_numparts	access:public	signature:() const
composition_nz_numparts::composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    composition_nz_numparts(const composition_nz_numparts&);  \/\/ forbidden$/;"	p	class:composition_nz_numparts	access:private	signature:(const composition_nz_numparts&)
composition_nz_numparts::composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    explicit composition_nz_numparts(ulong n)$/;"	f	class:composition_nz_numparts	access:public	signature:(ulong n)
composition_nz_numparts::data	src/comb/composition-nz-numparts.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_nz_numparts	access:public	signature:() const
composition_nz_numparts::first	src/comb/composition-nz-numparts.h	/^    void first()  { first_k(1); }$/;"	f	class:composition_nz_numparts	access:public	signature:()
composition_nz_numparts::first_k	src/comb/composition-nz-numparts.h	/^    void first_k(ulong k)$/;"	f	class:composition_nz_numparts	access:private	signature:(ulong k)
composition_nz_numparts::k_	src/comb/composition-nz-numparts.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_nz_numparts	access:public
composition_nz_numparts::n_	src/comb/composition-nz-numparts.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_nz_numparts	access:public
composition_nz_numparts::next	src/comb/composition-nz-numparts.h	/^    ulong next()$/;"	f	class:composition_nz_numparts	access:public	signature:()
composition_nz_numparts::next_k	src/comb/composition-nz-numparts.h	/^    ulong next_k()$/;"	f	class:composition_nz_numparts	access:private	signature:()
composition_nz_numparts::nk1_	src/comb/composition-nz-numparts.h	/^    ulong nk1_;    \/\/ ==n-k+1$/;"	m	class:composition_nz_numparts	access:public
composition_nz_numparts::num_parts	src/comb/composition-nz-numparts.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_nz_numparts	access:public	signature:() const
composition_nz_numparts::operator =	src/comb/composition-nz-numparts.h	/^    composition_nz_numparts & operator = (const composition_nz_numparts&);  \/\/ forbidden$/;"	p	class:composition_nz_numparts	access:private	signature:(const composition_nz_numparts&)
composition_nz_numparts::print	src/comb/composition-nz-numparts.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_numparts	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_numparts::x_	src/comb/composition-nz-numparts.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_nz_numparts	access:public
composition_nz_numparts::~composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    ~composition_nz_numparts()  { delete [] x_; }$/;"	f	class:composition_nz_numparts	access:public	signature:()
composition_nz_odd	src/comb/composition-nz-odd.h	/^    composition_nz_odd(const composition_nz_odd&);  \/\/ forbidden$/;"	p	class:composition_nz_odd	access:private	signature:(const composition_nz_odd&)
composition_nz_odd	src/comb/composition-nz-odd.h	/^    explicit composition_nz_odd(ulong n)$/;"	f	class:composition_nz_odd	access:public	signature:(ulong n)
composition_nz_odd	src/comb/composition-nz-odd.h	/^class composition_nz_odd$/;"	c
composition_nz_odd::OK	src/comb/composition-nz-odd.h	/^    bool OK()  const$/;"	f	class:composition_nz_odd	access:public	signature:() const
composition_nz_odd::a_	src/comb/composition-nz-odd.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_odd	access:public
composition_nz_odd::composition_nz_odd	src/comb/composition-nz-odd.h	/^    composition_nz_odd(const composition_nz_odd&);  \/\/ forbidden$/;"	p	class:composition_nz_odd	access:private	signature:(const composition_nz_odd&)
composition_nz_odd::composition_nz_odd	src/comb/composition-nz-odd.h	/^    explicit composition_nz_odd(ulong n)$/;"	f	class:composition_nz_odd	access:public	signature:(ulong n)
composition_nz_odd::data	src/comb/composition-nz-odd.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
composition_nz_odd::first	src/comb/composition-nz-odd.h	/^    void first()$/;"	f	class:composition_nz_odd	access:public	signature:()
composition_nz_odd::first_part	src/comb/composition-nz-odd.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
composition_nz_odd::last_part	src/comb/composition-nz-odd.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
composition_nz_odd::m_	src/comb/composition-nz-odd.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_odd	access:public
composition_nz_odd::n_	src/comb/composition-nz-odd.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_odd	access:public
composition_nz_odd::next	src/comb/composition-nz-odd.h	/^    ulong next()$/;"	f	class:composition_nz_odd	access:public	signature:()
composition_nz_odd::num_parts	src/comb/composition-nz-odd.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
composition_nz_odd::operator =	src/comb/composition-nz-odd.h	/^    composition_nz_odd & operator = (const composition_nz_odd&);  \/\/ forbidden$/;"	p	class:composition_nz_odd	access:private	signature:(const composition_nz_odd&)
composition_nz_odd::print	src/comb/composition-nz-odd.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_odd	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_odd::~composition_nz_odd	src/comb/composition-nz-odd.h	/^    ~composition_nz_odd()$/;"	f	class:composition_nz_odd	access:public	signature:()
composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    composition_nz_odd_subset_lex(const composition_nz_odd_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_odd_subset_lex	access:private	signature:(const composition_nz_odd_subset_lex&)
composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    explicit composition_nz_odd_subset_lex(ulong n)$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:(ulong n)
composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^class composition_nz_odd_subset_lex$/;"	c
composition_nz_odd_subset_lex::OK	src/comb/composition-nz-odd-subset-lex.h	/^    bool OK()  const$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
composition_nz_odd_subset_lex::a_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_odd_subset_lex	access:public
composition_nz_odd_subset_lex::composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    composition_nz_odd_subset_lex(const composition_nz_odd_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_odd_subset_lex	access:private	signature:(const composition_nz_odd_subset_lex&)
composition_nz_odd_subset_lex::composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    explicit composition_nz_odd_subset_lex(ulong n)$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:(ulong n)
composition_nz_odd_subset_lex::data	src/comb/composition-nz-odd-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
composition_nz_odd_subset_lex::first	src/comb/composition-nz-odd-subset-lex.h	/^    void first()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
composition_nz_odd_subset_lex::m_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_odd_subset_lex	access:public
composition_nz_odd_subset_lex::n_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_odd_subset_lex	access:public
composition_nz_odd_subset_lex::next	src/comb/composition-nz-odd-subset-lex.h	/^    ulong next()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
composition_nz_odd_subset_lex::num_parts	src/comb/composition-nz-odd-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
composition_nz_odd_subset_lex::operator =	src/comb/composition-nz-odd-subset-lex.h	/^    composition_nz_odd_subset_lex & operator = (const composition_nz_odd_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_odd_subset_lex	access:private	signature:(const composition_nz_odd_subset_lex&)
composition_nz_odd_subset_lex::print	src/comb/composition-nz-odd-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_odd_subset_lex::~composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    ~composition_nz_odd_subset_lex()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
composition_nz_rank	src/comb/composition-nz-rank.cc	/^composition_nz_rank(const ulong *x, ulong m)$/;"	f	signature:(const ulong *x, ulong m)
composition_nz_rank	src/comb/composition-nz-rank.h	/^ulong composition_nz_rank(const ulong *x, ulong m);$/;"	p	signature:(const ulong *x, ulong m)
composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    composition_nz_restrpref(const composition_nz_restrpref&);  \/\/ forbidden$/;"	p	class:composition_nz_restrpref	access:private	signature:(const composition_nz_restrpref&)
composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    explicit composition_nz_restrpref(ulong n, cond_func cnd)$/;"	f	class:composition_nz_restrpref	access:public	signature:(ulong n, cond_func cnd)
composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^class composition_nz_restrpref$/;"	c
composition_nz_restrpref::OK	src/comb/composition-nz-restrpref.h	/^    bool OK()  const$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::a_	src/comb/composition-nz-restrpref.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_restrpref	access:public
composition_nz_restrpref::composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    composition_nz_restrpref(const composition_nz_restrpref&);  \/\/ forbidden$/;"	p	class:composition_nz_restrpref	access:private	signature:(const composition_nz_restrpref&)
composition_nz_restrpref::composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    explicit composition_nz_restrpref(ulong n, cond_func cnd)$/;"	f	class:composition_nz_restrpref	access:public	signature:(ulong n, cond_func cnd)
composition_nz_restrpref::cond	src/comb/composition-nz-restrpref.h	/^    cond_func cond;  \/\/ condition function$/;"	m	class:composition_nz_restrpref	access:public
composition_nz_restrpref::cond_func	src/comb/composition-nz-restrpref.h	/^    typedef bool (* cond_func)(const ulong*, ulong);$/;"	t	class:composition_nz_restrpref	access:public
composition_nz_restrpref::data	src/comb/composition-nz-restrpref.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::first	src/comb/composition-nz-restrpref.h	/^    void first(cond_func cnd = 0)$/;"	f	class:composition_nz_restrpref	access:public	signature:(cond_func cnd = 0)
composition_nz_restrpref::first_part	src/comb/composition-nz-restrpref.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::last_part	src/comb/composition-nz-restrpref.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::m_	src/comb/composition-nz-restrpref.h	/^    ulong m_;   \/\/ current composition has m parts (m!=0 if valid composition)$/;"	m	class:composition_nz_restrpref	access:public
composition_nz_restrpref::n_	src/comb/composition-nz-restrpref.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_restrpref	access:public
composition_nz_restrpref::next	src/comb/composition-nz-restrpref.h	/^    ulong next()$/;"	f	class:composition_nz_restrpref	access:public	signature:()
composition_nz_restrpref::num_parts	src/comb/composition-nz-restrpref.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::operator =	src/comb/composition-nz-restrpref.h	/^    composition_nz_restrpref & operator = (const composition_nz_restrpref&);  \/\/ forbidden$/;"	p	class:composition_nz_restrpref	access:private	signature:(const composition_nz_restrpref&)
composition_nz_restrpref::print	src/comb/composition-nz-restrpref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_restrpref	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_restrpref::print_composition_aa	src/comb/composition-nz-restrpref.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::print_fountain_aa	src/comb/composition-nz-restrpref.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::valid	src/comb/composition-nz-restrpref.h	/^    bool valid()  const { return  m_; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
composition_nz_restrpref::~composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    ~composition_nz_restrpref()$/;"	f	class:composition_nz_restrpref	access:public	signature:()
composition_nz_rl	src/comb/composition-nz-rl.h	/^    composition_nz_rl(const composition_nz_rl&);  \/\/ forbidden$/;"	p	class:composition_nz_rl	access:private	signature:(const composition_nz_rl&)
composition_nz_rl	src/comb/composition-nz-rl.h	/^    explicit composition_nz_rl(ulong n)$/;"	f	class:composition_nz_rl	access:public	signature:(ulong n)
composition_nz_rl	src/comb/composition-nz-rl.h	/^class composition_nz_rl$/;"	c
composition_nz_rl::OK	src/comb/composition-nz-rl.h	/^    bool OK()  const$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::a_	src/comb/composition-nz-rl.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_rl	access:public
composition_nz_rl::composition_nz_rl	src/comb/composition-nz-rl.h	/^    composition_nz_rl(const composition_nz_rl&);  \/\/ forbidden$/;"	p	class:composition_nz_rl	access:private	signature:(const composition_nz_rl&)
composition_nz_rl::composition_nz_rl	src/comb/composition-nz-rl.h	/^    explicit composition_nz_rl(ulong n)$/;"	f	class:composition_nz_rl	access:public	signature:(ulong n)
composition_nz_rl::data	src/comb/composition-nz-rl.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::first	src/comb/composition-nz-rl.h	/^    void first()$/;"	f	class:composition_nz_rl	access:public	signature:()
composition_nz_rl::first_part	src/comb/composition-nz-rl.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::last	src/comb/composition-nz-rl.h	/^    void last()$/;"	f	class:composition_nz_rl	access:public	signature:()
composition_nz_rl::last_part	src/comb/composition-nz-rl.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::m_	src/comb/composition-nz-rl.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_rl	access:public
composition_nz_rl::n_	src/comb/composition-nz-rl.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_rl	access:public
composition_nz_rl::next	src/comb/composition-nz-rl.h	/^    ulong next()$/;"	f	class:composition_nz_rl	access:public	signature:()
composition_nz_rl::num_parts	src/comb/composition-nz-rl.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::operator =	src/comb/composition-nz-rl.h	/^    composition_nz_rl & operator = (const composition_nz_rl&);  \/\/ forbidden$/;"	p	class:composition_nz_rl	access:private	signature:(const composition_nz_rl&)
composition_nz_rl::prev	src/comb/composition-nz-rl.h	/^    ulong prev()$/;"	f	class:composition_nz_rl	access:public	signature:()
composition_nz_rl::print	src/comb/composition-nz-rl.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_rl	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_rl::print_aa	src/comb/composition-nz-rl.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::rank	src/comb/composition-nz-rl.h	/^    ulong rank()  const$/;"	f	class:composition_nz_rl	access:public	signature:() const
composition_nz_rl::unrank	src/comb/composition-nz-rl.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_rl	access:public	signature:(ulong r)
composition_nz_rl::~composition_nz_rl	src/comb/composition-nz-rl.h	/^    ~composition_nz_rl()$/;"	f	class:composition_nz_rl	access:public	signature:()
composition_nz_rl_rank	src/comb/composition-nz-rank.cc	/^composition_nz_rl_rank(const ulong *x, ulong m)$/;"	f	signature:(const ulong *x, ulong m)
composition_nz_rl_rank	src/comb/composition-nz-rank.h	/^ulong composition_nz_rl_rank(const ulong *x, ulong m);$/;"	p	signature:(const ulong *x, ulong m)
composition_nz_rl_unrank	src/comb/composition-nz-rank.cc	/^composition_nz_rl_unrank(ulong r, ulong *x, ulong n)$/;"	f	signature:(ulong r, ulong *x, ulong n)
composition_nz_rl_unrank	src/comb/composition-nz-rank.h	/^ulong composition_nz_rl_unrank(ulong r, ulong *x, ulong n);$/;"	p	signature:(ulong r, ulong *x, ulong n)
composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    composition_nz_smooth(const composition_nz_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_smooth	access:private	signature:(const composition_nz_smooth&)
composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    explicit composition_nz_smooth(ulong n)$/;"	f	class:composition_nz_smooth	access:public	signature:(ulong n)
composition_nz_smooth	src/comb/composition-nz-smooth.h	/^class composition_nz_smooth$/;"	c
composition_nz_smooth::OK	src/comb/composition-nz-smooth.h	/^    bool OK()  const$/;"	f	class:composition_nz_smooth	access:public	signature:() const
composition_nz_smooth::a_	src/comb/composition-nz-smooth.h	/^    ulong *a_;  \/\/ parts of the composition: a[1] + a[2] + ... + a[m] == n$/;"	m	class:composition_nz_smooth	access:public
composition_nz_smooth::composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    composition_nz_smooth(const composition_nz_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_smooth	access:private	signature:(const composition_nz_smooth&)
composition_nz_smooth::composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    explicit composition_nz_smooth(ulong n)$/;"	f	class:composition_nz_smooth	access:public	signature:(ulong n)
composition_nz_smooth::data	src/comb/composition-nz-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_smooth	access:public	signature:() const
composition_nz_smooth::first	src/comb/composition-nz-smooth.h	/^    void first()$/;"	f	class:composition_nz_smooth	access:public	signature:()
composition_nz_smooth::m_	src/comb/composition-nz-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_smooth	access:public
composition_nz_smooth::n_	src/comb/composition-nz-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_smooth	access:public
composition_nz_smooth::next	src/comb/composition-nz-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_smooth	access:public	signature:()
composition_nz_smooth::num_parts	src/comb/composition-nz-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_smooth	access:public	signature:() const
composition_nz_smooth::operator =	src/comb/composition-nz-smooth.h	/^    composition_nz_smooth & operator = (const composition_nz_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_smooth	access:private	signature:(const composition_nz_smooth&)
composition_nz_smooth::print	src/comb/composition-nz-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_smooth	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_smooth::print_aa	src/comb/composition-nz-smooth.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_smooth	access:public	signature:() const
composition_nz_smooth::~composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    ~composition_nz_smooth()$/;"	f	class:composition_nz_smooth	access:public	signature:()
composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    composition_nz_sorts(const composition_nz_sorts&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts	access:private	signature:(const composition_nz_sorts&)
composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    explicit composition_nz_sorts(ulong n, ulong ns)$/;"	f	class:composition_nz_sorts	access:public	signature:(ulong n, ulong ns)
composition_nz_sorts	src/comb/composition-nz-sorts.h	/^class composition_nz_sorts$/;"	c
composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    composition_nz_sorts2(const composition_nz_sorts2&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2	access:private	signature:(const composition_nz_sorts2&)
composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    explicit composition_nz_sorts2(ulong n, ulong ns)$/;"	f	class:composition_nz_sorts2	access:public	signature:(ulong n, ulong ns)
composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^class composition_nz_sorts2$/;"	c
composition_nz_sorts2::OK	src/comb/composition-nz-sorts2.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::a_	src/comb/composition-nz-sorts2.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts2	access:public
composition_nz_sorts2::composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    composition_nz_sorts2(const composition_nz_sorts2&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2	access:private	signature:(const composition_nz_sorts2&)
composition_nz_sorts2::composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    explicit composition_nz_sorts2(ulong n, ulong ns)$/;"	f	class:composition_nz_sorts2	access:public	signature:(ulong n, ulong ns)
composition_nz_sorts2::data	src/comb/composition-nz-sorts2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::first	src/comb/composition-nz-sorts2.h	/^    void first()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
composition_nz_sorts2::first_part	src/comb/composition-nz-sorts2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::first_sort	src/comb/composition-nz-sorts2.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::last_part	src/comb/composition-nz-sorts2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::last_sort	src/comb/composition-nz-sorts2.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::m_	src/comb/composition-nz-sorts2.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts2	access:public
composition_nz_sorts2::n_	src/comb/composition-nz-sorts2.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts2	access:public
composition_nz_sorts2::next	src/comb/composition-nz-sorts2.h	/^    ulong next()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
composition_nz_sorts2::ns1_	src/comb/composition-nz-sorts2.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:composition_nz_sorts2	access:public
composition_nz_sorts2::num_parts	src/comb/composition-nz-sorts2.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::operator =	src/comb/composition-nz-sorts2.h	/^    composition_nz_sorts2 & operator = (const composition_nz_sorts2&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2	access:private	signature:(const composition_nz_sorts2&)
composition_nz_sorts2::print	src/comb/composition-nz-sorts2.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(const char *bla) const
composition_nz_sorts2::print_by_sorts	src/comb/composition-nz-sorts2.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(const char *bla) const
composition_nz_sorts2::s_	src/comb/composition-nz-sorts2.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts2	access:public
composition_nz_sorts2::sdata	src/comb/composition-nz-sorts2.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
composition_nz_sorts2::sorts_in_runs_sorted	src/comb/composition-nz-sorts2.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(bool aq=true) const
composition_nz_sorts2::~composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    ~composition_nz_sorts2()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    composition_nz_sorts2_pp(const composition_nz_sorts2_pp&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2_pp	access:private	signature:(const composition_nz_sorts2_pp&)
composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    explicit composition_nz_sorts2_pp(ulong n, ulong ns, const ulong *vns=0)$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(ulong n, ulong ns, const ulong *vns=0)
composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^class composition_nz_sorts2_pp$/;"	c
composition_nz_sorts2_pp::OK	src/comb/composition-nz-sorts2-pp.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::a_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts2_pp	access:public
composition_nz_sorts2_pp::composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    composition_nz_sorts2_pp(const composition_nz_sorts2_pp&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2_pp	access:private	signature:(const composition_nz_sorts2_pp&)
composition_nz_sorts2_pp::composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    explicit composition_nz_sorts2_pp(ulong n, ulong ns, const ulong *vns=0)$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(ulong n, ulong ns, const ulong *vns=0)
composition_nz_sorts2_pp::data	src/comb/composition-nz-sorts2-pp.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::first	src/comb/composition-nz-sorts2-pp.h	/^    void first()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
composition_nz_sorts2_pp::first_part	src/comb/composition-nz-sorts2-pp.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::first_sort	src/comb/composition-nz-sorts2-pp.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::last_part	src/comb/composition-nz-sorts2-pp.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::last_sort	src/comb/composition-nz-sorts2-pp.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::m_	src/comb/composition-nz-sorts2-pp.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts2_pp	access:public
composition_nz_sorts2_pp::n_	src/comb/composition-nz-sorts2-pp.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts2_pp	access:public
composition_nz_sorts2_pp::next	src/comb/composition-nz-sorts2-pp.h	/^    ulong next()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
composition_nz_sorts2_pp::ns1_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *ns1_;  \/\/ ns1[j] is sort of part a[j]$/;"	m	class:composition_nz_sorts2_pp	access:public
composition_nz_sorts2_pp::num_parts	src/comb/composition-nz-sorts2-pp.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::operator =	src/comb/composition-nz-sorts2-pp.h	/^    composition_nz_sorts2_pp & operator = (const composition_nz_sorts2_pp&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2_pp	access:private	signature:(const composition_nz_sorts2_pp&)
composition_nz_sorts2_pp::print	src/comb/composition-nz-sorts2-pp.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(const char *bla) const
composition_nz_sorts2_pp::print_by_sorts	src/comb/composition-nz-sorts2-pp.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(const char *bla) const
composition_nz_sorts2_pp::s_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts2_pp	access:public
composition_nz_sorts2_pp::sdata	src/comb/composition-nz-sorts2-pp.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
composition_nz_sorts2_pp::sorts_in_runs_sorted	src/comb/composition-nz-sorts2-pp.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(bool aq=true) const
composition_nz_sorts2_pp::~composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    ~composition_nz_sorts2_pp()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
composition_nz_sorts::OK	src/comb/composition-nz-sorts.h	/^    bool OK()  const$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::a_	src/comb/composition-nz-sorts.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_sorts	access:public
composition_nz_sorts::composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    composition_nz_sorts(const composition_nz_sorts&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts	access:private	signature:(const composition_nz_sorts&)
composition_nz_sorts::composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    explicit composition_nz_sorts(ulong n, ulong ns)$/;"	f	class:composition_nz_sorts	access:public	signature:(ulong n, ulong ns)
composition_nz_sorts::data	src/comb/composition-nz-sorts.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::first	src/comb/composition-nz-sorts.h	/^    void first()$/;"	f	class:composition_nz_sorts	access:public	signature:()
composition_nz_sorts::first_part	src/comb/composition-nz-sorts.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::first_sort	src/comb/composition-nz-sorts.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::last_part	src/comb/composition-nz-sorts.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::last_sort	src/comb/composition-nz-sorts.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::m_	src/comb/composition-nz-sorts.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts	access:public
composition_nz_sorts::n_	src/comb/composition-nz-sorts.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts	access:public
composition_nz_sorts::next	src/comb/composition-nz-sorts.h	/^    ulong next()$/;"	f	class:composition_nz_sorts	access:public	signature:()
composition_nz_sorts::ns1_	src/comb/composition-nz-sorts.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:composition_nz_sorts	access:public
composition_nz_sorts::num_parts	src/comb/composition-nz-sorts.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::operator =	src/comb/composition-nz-sorts.h	/^    composition_nz_sorts & operator = (const composition_nz_sorts&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts	access:private	signature:(const composition_nz_sorts&)
composition_nz_sorts::print	src/comb/composition-nz-sorts.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(const char *bla) const
composition_nz_sorts::print_by_sorts	src/comb/composition-nz-sorts.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(const char *bla) const
composition_nz_sorts::s_	src/comb/composition-nz-sorts.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts	access:public
composition_nz_sorts::sdata	src/comb/composition-nz-sorts.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
composition_nz_sorts::sorts_in_runs_sorted	src/comb/composition-nz-sorts.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(bool aq=true) const
composition_nz_sorts::~composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    ~composition_nz_sorts()$/;"	f	class:composition_nz_sorts	access:public	signature:()
composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    composition_nz_subset_lex(const composition_nz_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_subset_lex	access:private	signature:(const composition_nz_subset_lex&)
composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    explicit composition_nz_subset_lex(ulong n)$/;"	f	class:composition_nz_subset_lex	access:public	signature:(ulong n)
composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^class composition_nz_subset_lex$/;"	c
composition_nz_subset_lex::OK	src/comb/composition-nz-subset-lex.h	/^    bool OK()  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::a_	src/comb/composition-nz-subset-lex.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_subset_lex	access:public
composition_nz_subset_lex::composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    composition_nz_subset_lex(const composition_nz_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_subset_lex	access:private	signature:(const composition_nz_subset_lex&)
composition_nz_subset_lex::composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    explicit composition_nz_subset_lex(ulong n)$/;"	f	class:composition_nz_subset_lex	access:public	signature:(ulong n)
composition_nz_subset_lex::data	src/comb/composition-nz-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::first	src/comb/composition-nz-subset-lex.h	/^    void first()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
composition_nz_subset_lex::first_part	src/comb/composition-nz-subset-lex.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::last	src/comb/composition-nz-subset-lex.h	/^    void last()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
composition_nz_subset_lex::last_part	src/comb/composition-nz-subset-lex.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::m_	src/comb/composition-nz-subset-lex.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_subset_lex	access:public
composition_nz_subset_lex::n_	src/comb/composition-nz-subset-lex.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_subset_lex	access:public
composition_nz_subset_lex::next	src/comb/composition-nz-subset-lex.h	/^    ulong next()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
composition_nz_subset_lex::num_parts	src/comb/composition-nz-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::operator =	src/comb/composition-nz-subset-lex.h	/^    composition_nz_subset_lex & operator = (const composition_nz_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_subset_lex	access:private	signature:(const composition_nz_subset_lex&)
composition_nz_subset_lex::prev	src/comb/composition-nz-subset-lex.h	/^    ulong prev()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
composition_nz_subset_lex::print	src/comb/composition-nz-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_subset_lex::print_aa	src/comb/composition-nz-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::rank	src/comb/composition-nz-subset-lex.h	/^    ulong rank()  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
composition_nz_subset_lex::unrank	src/comb/composition-nz-subset-lex.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_subset_lex	access:public	signature:(ulong r)
composition_nz_subset_lex::~composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    ~composition_nz_subset_lex()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
composition_nz_subset_lex_rank	src/comb/composition-nz-rank.cc	/^composition_nz_subset_lex_rank(const ulong *x, ulong m, ulong n)$/;"	f	signature:(const ulong *x, ulong m, ulong n)
composition_nz_subset_lex_rank	src/comb/composition-nz-rank.h	/^ulong composition_nz_subset_lex_rank(const ulong *x, ulong m, ulong n);$/;"	p	signature:(const ulong *x, ulong m, ulong n)
composition_nz_subset_lex_unrank	src/comb/composition-nz-rank.cc	/^composition_nz_subset_lex_unrank(ulong r, ulong *x, ulong n)$/;"	f	signature:(ulong r, ulong *x, ulong n)
composition_nz_subset_lex_unrank	src/comb/composition-nz-rank.h	/^ulong composition_nz_subset_lex_unrank(ulong r, ulong *x, ulong n);$/;"	p	signature:(ulong r, ulong *x, ulong n)
composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    composition_nz_superdiagonal(const composition_nz_superdiagonal&);  \/\/ forbidden$/;"	p	class:composition_nz_superdiagonal	access:private	signature:(const composition_nz_superdiagonal&)
composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    explicit composition_nz_superdiagonal(ulong n)$/;"	f	class:composition_nz_superdiagonal	access:public	signature:(ulong n)
composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^class composition_nz_superdiagonal$/;"	c
composition_nz_superdiagonal::OK	src/comb/composition-nz-superdiagonal.h	/^    bool OK()  const$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
composition_nz_superdiagonal::a_	src/comb/composition-nz-superdiagonal.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_superdiagonal	access:public
composition_nz_superdiagonal::composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    composition_nz_superdiagonal(const composition_nz_superdiagonal&);  \/\/ forbidden$/;"	p	class:composition_nz_superdiagonal	access:private	signature:(const composition_nz_superdiagonal&)
composition_nz_superdiagonal::composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    explicit composition_nz_superdiagonal(ulong n)$/;"	f	class:composition_nz_superdiagonal	access:public	signature:(ulong n)
composition_nz_superdiagonal::data	src/comb/composition-nz-superdiagonal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
composition_nz_superdiagonal::first	src/comb/composition-nz-superdiagonal.h	/^    void first()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
composition_nz_superdiagonal::m_	src/comb/composition-nz-superdiagonal.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:composition_nz_superdiagonal	access:public
composition_nz_superdiagonal::n_	src/comb/composition-nz-superdiagonal.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_superdiagonal	access:public
composition_nz_superdiagonal::next	src/comb/composition-nz-superdiagonal.h	/^    ulong next()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
composition_nz_superdiagonal::num_parts	src/comb/composition-nz-superdiagonal.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
composition_nz_superdiagonal::operator =	src/comb/composition-nz-superdiagonal.h	/^    composition_nz_superdiagonal & operator = (const composition_nz_superdiagonal&);  \/\/ forbidden$/;"	p	class:composition_nz_superdiagonal	access:private	signature:(const composition_nz_superdiagonal&)
composition_nz_superdiagonal::print	src/comb/composition-nz-superdiagonal.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_superdiagonal	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_superdiagonal::print_aa	src/comb/composition-nz-superdiagonal.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
composition_nz_superdiagonal::write_tail	src/comb/composition-nz-superdiagonal.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:composition_nz_superdiagonal	access:private	signature:(ulong s, ulong j)
composition_nz_superdiagonal::~composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    ~composition_nz_superdiagonal()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
composition_nz_unrank	src/comb/composition-nz-rank.cc	/^composition_nz_unrank(ulong r, ulong *x, ulong n)$/;"	f	signature:(ulong r, ulong *x, ulong n)
composition_nz_unrank	src/comb/composition-nz-rank.h	/^ulong composition_nz_unrank(ulong r, ulong *x, ulong n);$/;"	p	signature:(ulong r, ulong *x, ulong n)
composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    composition_nz_upstep(const composition_nz_upstep&);  \/\/ forbidden$/;"	p	class:composition_nz_upstep	access:private	signature:(const composition_nz_upstep&)
composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    explicit composition_nz_upstep(ulong n, ulong u)$/;"	f	class:composition_nz_upstep	access:public	signature:(ulong n, ulong u)
composition_nz_upstep	src/comb/composition-nz-upstep.h	/^class composition_nz_upstep$/;"	c
composition_nz_upstep::OK	src/comb/composition-nz-upstep.h	/^    bool OK()  const$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::a_	src/comb/composition-nz-upstep.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_nz_upstep	access:public
composition_nz_upstep::composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    composition_nz_upstep(const composition_nz_upstep&);  \/\/ forbidden$/;"	p	class:composition_nz_upstep	access:private	signature:(const composition_nz_upstep&)
composition_nz_upstep::composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    explicit composition_nz_upstep(ulong n, ulong u)$/;"	f	class:composition_nz_upstep	access:public	signature:(ulong n, ulong u)
composition_nz_upstep::data	src/comb/composition-nz-upstep.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::first	src/comb/composition-nz-upstep.h	/^    void first()$/;"	f	class:composition_nz_upstep	access:public	signature:()
composition_nz_upstep::first_part	src/comb/composition-nz-upstep.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::last_part	src/comb/composition-nz-upstep.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::m_	src/comb/composition-nz-upstep.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_upstep	access:public
composition_nz_upstep::n_	src/comb/composition-nz-upstep.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_upstep	access:public
composition_nz_upstep::next	src/comb/composition-nz-upstep.h	/^    ulong next()$/;"	f	class:composition_nz_upstep	access:public	signature:()
composition_nz_upstep::num_parts	src/comb/composition-nz-upstep.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::operator =	src/comb/composition-nz-upstep.h	/^    composition_nz_upstep & operator = (const composition_nz_upstep&);  \/\/ forbidden$/;"	p	class:composition_nz_upstep	access:private	signature:(const composition_nz_upstep&)
composition_nz_upstep::print	src/comb/composition-nz-upstep.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_upstep	access:public	signature:(const char *bla, bool dfz=false) const
composition_nz_upstep::print_aa	src/comb/composition-nz-upstep.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_upstep	access:public	signature:() const
composition_nz_upstep::u_	src/comb/composition-nz-upstep.h	/^    ulong u_;   \/\/ maximal allowed up-step$/;"	m	class:composition_nz_upstep	access:public
composition_nz_upstep::~composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    ~composition_nz_upstep()$/;"	f	class:composition_nz_upstep	access:public	signature:()
composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    composition_nz_weakly_unimodal(const composition_nz_weakly_unimodal&);  \/\/ forbidden$/;"	p	class:composition_nz_weakly_unimodal	access:private	signature:(const composition_nz_weakly_unimodal&)
composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    explicit composition_nz_weakly_unimodal(ulong n)$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:(ulong n)
composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^class composition_nz_weakly_unimodal$/;"	c
composition_nz_weakly_unimodal::OK	src/comb/composition-nz-weakly-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
composition_nz_weakly_unimodal::a_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong *a_;  \/\/ composition: n = a[1] + a[2] + ... + a[m]$/;"	m	class:composition_nz_weakly_unimodal	access:public
composition_nz_weakly_unimodal::composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    composition_nz_weakly_unimodal(const composition_nz_weakly_unimodal&);  \/\/ forbidden$/;"	p	class:composition_nz_weakly_unimodal	access:private	signature:(const composition_nz_weakly_unimodal&)
composition_nz_weakly_unimodal::composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    explicit composition_nz_weakly_unimodal(ulong n)$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:(ulong n)
composition_nz_weakly_unimodal::data	src/comb/composition-nz-weakly-unimodal.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
composition_nz_weakly_unimodal::first	src/comb/composition-nz-weakly-unimodal.h	/^    void first()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
composition_nz_weakly_unimodal::m_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_weakly_unimodal	access:public
composition_nz_weakly_unimodal::max_part	src/comb/composition-nz-weakly-unimodal.h	/^    ulong max_part()  const  { return mv_; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
composition_nz_weakly_unimodal::mv_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong mv_;  \/\/ value of maximal digit(s)$/;"	m	class:composition_nz_weakly_unimodal	access:public
composition_nz_weakly_unimodal::n_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_weakly_unimodal	access:public
composition_nz_weakly_unimodal::next	src/comb/composition-nz-weakly-unimodal.h	/^    ulong next()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
composition_nz_weakly_unimodal::num_parts	src/comb/composition-nz-weakly-unimodal.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
composition_nz_weakly_unimodal::operator =	src/comb/composition-nz-weakly-unimodal.h	/^    composition_nz_weakly_unimodal & operator = (const composition_nz_weakly_unimodal&);  \/\/ forbidden$/;"	p	class:composition_nz_weakly_unimodal	access:private	signature:(const composition_nz_weakly_unimodal&)
composition_nz_weakly_unimodal::pg1_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong pg1_; \/\/ position of last part > 1 (initially == n + 1)$/;"	m	class:composition_nz_weakly_unimodal	access:public
composition_nz_weakly_unimodal::print	src/comb/composition-nz-weakly-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:(const char *bla) const
composition_nz_weakly_unimodal::print_aa	src/comb/composition-nz-weakly-unimodal.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
composition_nz_weakly_unimodal::~composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    ~composition_nz_weakly_unimodal()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
composition_rank	src/comb/composition-rank.h	/^    explicit composition_rank(ulong n, ulong k)$/;"	f	class:composition_rank	access:public	signature:(ulong n, ulong k)
composition_rank	src/comb/composition-rank.h	/^class composition_rank : public num_compositions$/;"	c	inherits:num_compositions
composition_rank::composition_rank	src/comb/composition-rank.h	/^    explicit composition_rank(ulong n, ulong k)$/;"	f	class:composition_rank	access:public	signature:(ulong n, ulong k)
composition_rank::is_comp	src/comb/composition-rank.h	/^    bool is_comp(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
composition_rank::print	src/comb/composition-rank.cc	/^composition_rank::print(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::print	src/comb/composition-rank.h	/^    void print(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::print_deltaset	src/comb/composition-rank.cc	/^composition_rank::print_deltaset(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::print_deltaset	src/comb/composition-rank.h	/^    void print_deltaset(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::print_deltaset_num	src/comb/composition-rank.cc	/^composition_rank::print_deltaset_num(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::print_deltaset_num	src/comb/composition-rank.h	/^    void print_deltaset_num(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
composition_rank::rank_enup	src/comb/composition-rank.h	/^    ulong rank_enup(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
composition_rank::rank_enup_rev	src/comb/composition-rank.h	/^    ulong rank_enup_rev(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
composition_rank::rank_gray	src/comb/composition-rank.h	/^    ulong rank_gray(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
composition_rank::rank_lex	src/comb/composition-rank.h	/^    ulong rank_lex(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
composition_rank::unrank_enup	src/comb/composition-rank.h	/^    void unrank_enup(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
composition_rank::unrank_get_el	src/comb/composition-rank.h	/^    ulong unrank_get_el(ulong n, ulong k, ulong &r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong n, ulong k, ulong &r) const
composition_rank::unrank_gray	src/comb/composition-rank.h	/^    void unrank_gray(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
composition_rank::unrank_lex	src/comb/composition-rank.h	/^    void unrank_lex(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
composition_rank::~composition_rank	src/comb/composition-rank.h	/^    ~composition_rank()$/;"	f	class:composition_rank	access:public	signature:()
composition_unimodal	src/comb/composition-unimodal.h	/^    composition_unimodal(const composition_unimodal&);  \/\/ forbidden$/;"	p	class:composition_unimodal	access:private	signature:(const composition_unimodal&)
composition_unimodal	src/comb/composition-unimodal.h	/^    explicit composition_unimodal(ulong n)$/;"	f	class:composition_unimodal	access:public	signature:(ulong n)
composition_unimodal	src/comb/composition-unimodal.h	/^class composition_unimodal$/;"	c
composition_unimodal::OK	src/comb/composition-unimodal.h	/^    bool OK()  const$/;"	f	class:composition_unimodal	access:public	signature:() const
composition_unimodal::a_	src/comb/composition-unimodal.h	/^    ulong *a_;  \/\/ composition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:composition_unimodal	access:public
composition_unimodal::composition_unimodal	src/comb/composition-unimodal.h	/^    composition_unimodal(const composition_unimodal&);  \/\/ forbidden$/;"	p	class:composition_unimodal	access:private	signature:(const composition_unimodal&)
composition_unimodal::composition_unimodal	src/comb/composition-unimodal.h	/^    explicit composition_unimodal(ulong n)$/;"	f	class:composition_unimodal	access:public	signature:(ulong n)
composition_unimodal::data	src/comb/composition-unimodal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_unimodal	access:public	signature:() const
composition_unimodal::first	src/comb/composition-unimodal.h	/^    void first()$/;"	f	class:composition_unimodal	access:public	signature:()
composition_unimodal::m_	src/comb/composition-unimodal.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_unimodal	access:public
composition_unimodal::n_	src/comb/composition-unimodal.h	/^    ulong n_;   \/\/ integer compositions of n$/;"	m	class:composition_unimodal	access:public
composition_unimodal::next	src/comb/composition-unimodal.h	/^    ulong next()$/;"	f	class:composition_unimodal	access:public	signature:()
composition_unimodal::num_parts	src/comb/composition-unimodal.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_unimodal	access:public	signature:() const
composition_unimodal::operator =	src/comb/composition-unimodal.h	/^    composition_unimodal & operator = (const composition_unimodal&);  \/\/ forbidden$/;"	p	class:composition_unimodal	access:private	signature:(const composition_unimodal&)
composition_unimodal::print	src/comb/composition-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_unimodal	access:public	signature:(const char *bla) const
composition_unimodal::print_with_sorts	src/comb/composition-unimodal.h	/^    void print_with_sorts(const char *bla)  const$/;"	f	class:composition_unimodal	access:public	signature:(const char *bla) const
composition_unimodal::s_	src/comb/composition-unimodal.h	/^    ulong *s_;  \/\/ sorts of parts$/;"	m	class:composition_unimodal	access:public
composition_unimodal::sdata	src/comb/composition-unimodal.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_unimodal	access:public	signature:() const
composition_unimodal::~composition_unimodal	src/comb/composition-unimodal.h	/^    ~composition_unimodal()$/;"	f	class:composition_unimodal	access:public	signature:()
compositions	fxt.lsm	/^                Combinatorial generation: combinations, compositions, permutations,$/;"	v
cond	src/comb/composition-nz-restrpref.h	/^    cond_func cond;  \/\/ condition function$/;"	m	class:composition_nz_restrpref	access:public
cond	src/comb/mixedradix-restrpref.h	/^    cond_func cond;  \/\/ condition function$/;"	m	class:mixedradix_restrpref	access:public
cond	src/comb/perm-restrpref.h	/^    bool (*cond)(const ulong*, ulong);  \/\/ condition function$/;"	m	class:perm_restrpref	access:protected
cond_0	demo/comb/perm-restrpref-demo.cc	/^bool cond_0(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_0	demo/seq/A178514-demo.cc	/^bool cond_0(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_12_dist	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_12_dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_1diff	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_1diff(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_2dist	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_2dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_2pow	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_2pow(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_aj_neq_akp1	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_aj_neq_akp1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_all	demo/seq/A000793-demo.cc	/^cond_all(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_arrange	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_arrange(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_arrange1	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_arrange1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_arrange2	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_arrange2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_asc	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_asc(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_asc_desc_geq_2	demo/comb/perm-restrpref-demo.cc	/^bool cond_asc_desc_geq_2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_ascent	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_ascent(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_ccf_map	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_ccf_map(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_change	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_change(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_change	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_change(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_consec	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_consec(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_cyc_dist	demo/comb/perm-restrpref-demo.cc	/^bool cond_cyc_dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_derange	demo/comb/perm-restrpref-demo.cc	/^bool cond_derange(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_derange	demo/seq/A178514-demo.cc	/^bool cond_derange(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_desc	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_desc(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_descent	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_descent(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_diff_growth	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_diff_growth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_diff_neq1	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_diff_neq1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist	demo/comb/perm-restrpref-demo.cc	/^bool cond_dist(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist2	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_dist2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist_set	demo/comb/perm-restrpref-demo.cc	/^bool cond_dist_set(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_dist_smooth	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_dist_smooth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_eq	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_eq(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_fall	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_fall(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_false	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_false(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_false	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_false(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_first_max	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_first_max(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_first_min	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_first_min(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_fp_ptr	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_fp_ptr(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_func	src/comb/composition-nz-restrpref.h	/^    typedef bool (* cond_func)(const ulong*, ulong);$/;"	t	class:composition_nz_restrpref	access:public
cond_func	src/comb/mixedradix-restrpref.h	/^    typedef bool (* cond_func)(const ulong*, ulong);$/;"	t	class:mixedradix_restrpref	access:public
cond_gray	demo/comb/perm-restrpref-demo.cc	/^bool cond_gray(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_gray	demo/seq/A003043-demo.cc	/^bool cond_gray(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_gray_path	demo/seq/A003043-demo.cc	/^bool cond_gray_path(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_growth	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_growth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_gt_k2	demo/comb/perm-restrpref-demo.cc	/^bool cond_gt_k2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_indecomp	demo/comb/perm-restrpref-demo.cc	/^bool cond_indecomp(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_indecomp	demo/seq/A178514-demo.cc	/^bool cond_indecomp(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_init	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^void cond_init()$/;"	f	signature:()
cond_init	demo/graph/graph-perm-star-transpositions-demo.cc	/^void cond_init()$/;"	f	signature:()
cond_inv	demo/seq/A178514-demo.cc	/^bool cond_inv(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_invol	demo/comb/perm-restrpref-demo.cc	/^bool cond_invol(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_invol_fp	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_invol_fp(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_leq_23	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_leq_23(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_mers	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_mers(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_mers_desc	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_mers_desc(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_min	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_min(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_no_2	demo/seq/A000793-demo.cc	/^cond_no_2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_no_3prog	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_no_3prog(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_no_n	demo/seq/A000793-demo.cc	/^cond_no_n(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_non_derange	demo/seq/A178514-demo.cc	/^bool cond_non_derange(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_nonadj	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_nonadj(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_odd	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_odd(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_par	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_par(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_par_diff	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_par_diff(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_perm	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_perm(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_perm_ncyc	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_perm_ncyc(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_pref_fixedpoints	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_pref_fixedpoints(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_pref_sum	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_pref_sum(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_setpart	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_setpart(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_setpart0	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_setpart0(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_setpart2	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_setpart2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_setpart3	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_setpart3(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_smooth	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_smooth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_smooth	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_smooth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_smooth_part	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_smooth_part(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_sorted	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_sorted(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_sorted_desc	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_sorted_desc(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_sorted_full	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_sorted_full(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_subdiag	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_subdiag(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_subdiag_growth	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_subdiag_growth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_superdiag	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_superdiag(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_superdiag_growth	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_superdiag_growth(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_test	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_test(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_test	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_test(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_total_ascent	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_total_ascent(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_true	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_true(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_true	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_true(const ulong *, ulong)$/;"	f	signature:(const ulong *, ulong)
cond_up_step	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_up_step(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_updown	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_updown(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_updown	demo/comb/perm-restrpref-demo.cc	/^bool cond_updown(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_updown	demo/seq/A178514-demo.cc	/^bool cond_updown(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_upstep	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_upstep(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_wiggly1	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_wiggly1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_wiggly2	demo/comb/composition-nz-restrpref-demo.cc	/^bool cond_wiggly2(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_xx1	demo/comb/perm-restrpref-demo.cc	/^bool cond_xx1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_xx1	demo/seq/A178514-demo.cc	/^bool cond_xx1(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
cond_zero_map_s	demo/comb/mixedradix-restrpref-demo.cc	/^bool cond_zero_map_s(const ulong *a, ulong k)$/;"	f	signature:(const ulong *a, ulong k)
conjugates	doc/wfl-hilbert-doc.txt	/^If A -> C then (AC)(BD) (EG)(FH)(IK)(JL) with 3 conjugates;$/;"	v
conjugates	doc/wfl-hilbert-doc.txt	/^If A -> E then (AEI) (CHJ) (BGL)(DFK) and inverse with 2x4 conjugates;$/;"	v
contains_zero_byte	doc/bits-doc.txt	/^static inline ulong contains_zero_byte(ulong x);$/;"	p	file:	signature:(ulong x)
contains_zero_byte	src/bits/zerobyte.h	/^static inline ulong contains_zero_byte(ulong x)$/;"	f	signature:(ulong x)
convolution	fxt.lsm	/^                convolution, negacyclic convolution, right angle convolution$/;"	v
copy	src/aux1/attic/array.h	/^    void copy(array<Type> a)  { acopy(a.f_, a.n_, f_, n_); }$/;"	f	class:array	access:public	signature:(array<Type> a)
copy	src/aux1/attic/array.h	/^void copy(const Type *src, array<Type> &dst)$/;"	f	signature:(const Type *src, array<Type> &dst)
copy	src/aux1/attic/array.h	/^void copy(const array<Type> &src, Type *dst)$/;"	f	signature:(const array<Type> &src, Type *dst)
copy	src/aux1/attic/array.h	/^void copy(const array<Type> &src, array<Type> &dst)$/;"	f	signature:(const array<Type> &src, array<Type> &dst)
copy	src/aux2/attic/copy2d.h	/^void copy(const Type1 *const*src, Type2 **dst, ulong nr, ulong nc)$/;"	f	signature:(const Type1 *const*src, Type2 **dst, ulong nr, ulong nc)
copy	src/mod/attic/auxfuncs.cc	/^copy(const mod *src, mod *dst, ulong n)$/;"	f	signature:(const mod *src, mod *dst, ulong n)
copy0	src/aux1/copy.h	/^inline void copy0(const Type1 *src, ulong ns,$/;"	f	signature:(const Type1 *src, ulong ns, Type2 *dst, ulong nd)
copy_bit	doc/bits-doc.txt	/^static inline ulong copy_bit(ulong a, ulong isrc, ulong idst);$/;"	p	file:	signature:(ulong a, ulong isrc, ulong idst)
copy_bit	src/bits/bitcopy.h	/^static inline ulong copy_bit(ulong a, ulong isrc, ulong idst)$/;"	f	signature:(ulong a, ulong isrc, ulong idst)
copy_cast	doc/aux1-doc.txt	/^inline void copy_cast(const Type1 *src, Type2 *dst, ulong n);$/;"	p	file:	signature:(const Type1 *src, Type2 *dst, ulong n)
copy_cast	src/aux1/copy.h	/^inline void copy_cast(const Type1 *src, Type2 *dst, ulong n)$/;"	f	signature:(const Type1 *src, Type2 *dst, ulong n)
copy_cyclic	doc/aux1-doc.txt	/^inline void copy_cyclic(const Type *src, Type *dst, ulong n, ulong s);$/;"	p	file:	signature:(const Type *src, Type *dst, ulong n, ulong s)
copy_cyclic	src/aux1/copy.h	/^inline void copy_cyclic(const Type *src, Type *dst, ulong n, ulong s)$/;"	f	signature:(const Type *src, Type *dst, ulong n, ulong s)
cordic_1K	demo/arith/cordic-circ-demo.cc	/^const double cordic_1K = 0.6072529350088812561694467525049282631123908521500897724;$/;"	v
cordic_1Kp	demo/arith/cordic-hyp-demo.cc	/^const double cordic_1Kp = 1.207497067763072128877721011310915836812783221769813422;$/;"	v
cordic_circ	demo/arith/cordic-circ-demo.cc	/^cordic_circ(double theta, double &s, double &c, ulong n)$/;"	f	signature:(double theta, double &s, double &c, ulong n)
cordic_ctab	demo/arith/cordic-circ-demo.cc	/^double *cordic_ctab;$/;"	v
cordic_htab	demo/arith/cordic-hyp-demo.cc	/^double *cordic_htab;$/;"	v
cordic_hyp	demo/arith/cordic-hyp-demo.cc	/^cordic_hyp(double theta, double &s, double &c, ulong n)$/;"	f	signature:(double theta, double &s, double &c, ulong n)
coroutine	src/ds/attic/coroutine.h	/^    coroutine(ulong maxdepth)$/;"	f	class:coroutine	access:public	signature:(ulong maxdepth)
coroutine	src/ds/attic/coroutine.h	/^class coroutine$/;"	c
coroutine::chk_dp	src/ds/attic/coroutine.h	/^    void chk_dp(ulong j=0)  const$/;"	f	class:coroutine	access:public	signature:(ulong j=0) const
coroutine::chk_tp	src/ds/attic/coroutine.h	/^    void chk_tp(ulong j=0)  const$/;"	f	class:coroutine	access:public	signature:(ulong j=0) const
coroutine::coroutine	src/ds/attic/coroutine.h	/^    coroutine(ulong maxdepth)$/;"	f	class:coroutine	access:public	signature:(ulong maxdepth)
coroutine::d_	src/ds/attic/coroutine.h	/^    Type  *d_;  \/\/ Data stack$/;"	m	class:coroutine	access:public
coroutine::dp_	src/ds/attic/coroutine.h	/^    ulong dp_;  \/\/ Data stack Pointer$/;"	m	class:coroutine	access:public
coroutine::init	src/ds/attic/coroutine.h	/^    void init()  { dp_=0; tp_=0; }$/;"	f	class:coroutine	access:public	signature:()
coroutine::more	src/ds/attic/coroutine.h	/^    bool more()  const  { return (tp_!=0); }$/;"	f	class:coroutine	access:public	signature:() const
coroutine::n_	src/ds/attic/coroutine.h	/^    ulong  n_;  \/\/ size of stacks$/;"	m	class:coroutine	access:public
coroutine::operator =	src/ds/attic/coroutine.h	/^    coroutine & operator = (const coroutine &);  \/\/ forbidden$/;"	p	class:coroutine	access:private	signature:(const coroutine &)
coroutine::peek	src/ds/attic/coroutine.h	/^    Type &peek()  { chk_dp(1); return d_[dp_-1]; }$/;"	f	class:coroutine	access:public	signature:()
coroutine::pop	src/ds/attic/coroutine.h	/^    void pop(ulong ct=1) { dp_-=ct; }$/;"	f	class:coroutine	access:public	signature:(ulong ct=1)
coroutine::push	src/ds/attic/coroutine.h	/^    void push(Type x)  {  chk_dp();  d_[dp_] = x;  ++dp_; }$/;"	f	class:coroutine	access:public	signature:(Type x)
coroutine::stnext	src/ds/attic/coroutine.h	/^    void stnext()  { chk_tp(1);  ++t_[tp_-1]; }$/;"	f	class:coroutine	access:public	signature:()
coroutine::stnext	src/ds/attic/coroutine.h	/^    void stnext(ulong x)  { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
coroutine::stpeek	src/ds/attic/coroutine.h	/^    ulong stpeek()  const  { chk_tp(1);  return  t_[tp_-1]; }$/;"	f	class:coroutine	access:public	signature:() const
coroutine::stpoke	src/ds/attic/coroutine.h	/^    void stpoke(ulong x)   { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
coroutine::stpop	src/ds/attic/coroutine.h	/^    void stpop(ulong ct=1)  { tp_-=ct; }$/;"	f	class:coroutine	access:public	signature:(ulong ct=1)
coroutine::stpush	src/ds/attic/coroutine.h	/^    void stpush(ulong x)   { chk_tp();  t_[tp_] = x;  ++tp_; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
coroutine::t_	src/ds/attic/coroutine.h	/^    ulong *t_;  \/\/ sTate stack$/;"	m	class:coroutine	access:public
coroutine::tp_	src/ds/attic/coroutine.h	/^    ulong tp_;  \/\/ sTate stack Pointer$/;"	m	class:coroutine	access:public
coroutine::~coroutine	src/ds/attic/coroutine.h	/^    ~coroutine()$/;"	f	class:coroutine	access:public	signature:()
correlation	fxt.lsm	/^                correlation, spectrum, mass storage FFT,$/;"	v
cos	src/mod/mod.cc	/^mod  * mod::cos = 0;$/;"	m	class:mod	file:
cos	src/mod/mod.h	/^    static mod *cos, *isin;  \/\/ [max2pow+1];   \/\/ cos\/i*sin corresponding to root_2pow$/;"	m	class:mod	access:public
cos2pow	src/mod/mod.cc	/^mod::cos2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
cos2pow	src/mod/mod.h	/^    static mod cos2pow(int ldorder);  \/\/ cos of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
cos_rot	doc/dctdst-doc.txt	/^void cos_rot(const double *x, double *y, ulong n); \/\/ aux$/;"	p	file:	signature:(const double *x, double *y, ulong n)
cos_rot	src/dctdst/cosrot.cc	/^cos_rot(const double *x, double *y, ulong n)$/;"	f	signature:(const double *x, double *y, ulong n)
cos_rot	src/dctdst/dctdst.h	/^void cos_rot(const double *x, double *y, ulong n);  \/\/ aux$/;"	p	signature:(const double *x, double *y, ulong n)
coseno	doc/dctdst-doc.txt	/^static void coseno(double *x, ulong ldn);$/;"	p	file:	signature:(double *x, ulong ldn)
coseno	src/dctdst/dctzapata.cc	/^coseno(double *x, ulong ldn)$/;"	f	file:	signature:(double *x, ulong ldn)
cosm	src/mod/mod.cc	/^mod  * mod::cosm = 0;$/;"	m	class:mod	file:
cosm	src/mod/mod.h	/^    static mod *cosm, *isinm;  \/\/ [max2pow+1];  \/\/ cos\/sin corresponding to root_m2pow$/;"	m	class:mod	access:public
costab	src/fht/fhtmayer.txt	/^static REAL costab[20]=$/;"	v	file:
coswrk	src/fht/fhtmayer.txt	/^static REAL coswrk[20]=$/;"	v	file:
count	src/comb/partition-gen.cc	/^partition_gen::count(ulong x)$/;"	f	class:partition_gen	signature:(ulong x)
count	src/comb/partition-gen.h	/^    ulong count(ulong x);  \/\/ count number of partitions$/;"	p	class:partition_gen	access:public	signature:(ulong x)
count	src/sort/attic/grep.h	/^inline ulong count(const Type *f, ulong n, bool (* func)(Type))$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type))
count_cycles	doc/perm-doc.txt	/^ulong count_cycles(const ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bitarray *bp )
count_cycles	src/perm/permq.cc	/^count_cycles(const ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong n, bitarray *bp )
count_cycles	src/perm/permq.h	/^ulong count_cycles(const ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(const ulong *f, ulong n, bitarray *bp=0)
count_descents	doc/perm-doc.txt	/^ulong count_descents(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
count_descents	src/perm/permq.cc	/^count_descents(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
count_descents	src/perm/permq.h	/^ulong count_descents(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
count_excedances	doc/perm-doc.txt	/^ulong count_excedances(const ulong *f, ulong n, bool eq\/*=true*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bool eq )
count_excedances	src/perm/permq.cc	/^count_excedances(const ulong *f, ulong n, bool eq\/*=true*\/)$/;"	f	signature:(const ulong *f, ulong n, bool eq )
count_excedances	src/perm/permq.h	/^ulong count_excedances(const ulong *f, ulong n, bool eq=true);$/;"	p	signature:(const ulong *f, ulong n, bool eq=true)
count_fixed_points	doc/perm-doc.txt	/^ulong count_fixed_points(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
count_fixed_points	src/perm/permq.cc	/^count_fixed_points(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
count_fixed_points	src/perm/permq.h	/^ulong count_fixed_points(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
count_func	src/comb/partition-gen.cc	/^partition_gen::count_func(ulong i)$/;"	f	class:partition_gen	signature:(ulong i)
count_func	src/comb/partition-gen.h	/^    ulong count_func(ulong i);  \/\/ aux$/;"	p	class:partition_gen	access:public	signature:(ulong i)
count_inversions	doc/perm-doc.txt	/^ulong count_inversions(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
count_inversions	doc/perm-doc.txt	/^ulong count_inversions(const ulong *f, ulong n, left_right_array *tLR);$/;"	p	file:	signature:(const ulong *f, ulong n, left_right_array *tLR)
count_inversions	src/perm/permq.cc	/^count_inversions(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
count_inversions	src/perm/permq.cc	/^count_inversions(const ulong *f, ulong n, left_right_array *tLR)$/;"	f	signature:(const ulong *f, ulong n, left_right_array *tLR)
count_inversions	src/perm/permq.h	/^ulong count_inversions(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
count_inversions	src/perm/permq.h	/^ulong count_inversions(const ulong *f, ulong n, left_right_array *tLR);$/;"	p	signature:(const ulong *f, ulong n, left_right_array *tLR)
count_ones	src/ds/bitarray.h	/^    ulong count_ones()  const$/;"	f	class:bitarray	access:public	signature:() const
count_transpositions	doc/perm-doc.txt	/^ulong count_transpositions(const ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bitarray *bp )
count_transpositions	src/perm/permq.cc	/^count_transpositions(const ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong n, bitarray *bp )
count_transpositions	src/perm/permq.h	/^ulong count_transpositions(const ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(const ulong *f, ulong n, bitarray *bp=0)
count_unique	doc/sort-doc.txt	/^ulong count_unique(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
count_unique	doc/sort-doc.txt	/^ulong count_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
count_unique	src/sort/unique.h	/^ulong count_unique(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
count_unique	src/sort/uniquefunc.h	/^ulong count_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
count_unique_approx	src/sort/attic/uniqueapprox.h	/^ulong count_unique_approx(const Type *f, ulong n, Type da)$/;"	f	signature:(const Type *f, ulong n, Type da)
count_zeros	src/ds/bitarray.h	/^    ulong count_zeros()  const$/;"	f	class:bitarray	access:public	signature:() const
counting_sort_core	doc/sort-doc.txt	/^void counting_sort_core(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m);$/;"	p	file:	signature:(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m)
counting_sort_core	src/sort/radixsort.cc	/^counting_sort_core(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m)$/;"	f	signature:(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m)
counting_sort_core	src/sort/radixsort.h	/^void counting_sort_core(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m);$/;"	p	signature:(const ulong * restrict f, ulong n, ulong * restrict g, ulong b0, ulong m)
cp2	src/aux0/cayley-dickson-mult.h	/^inline void cp2(ulong a, ulong b, ulong &u, ulong &v)  { u=a; v=b; }$/;"	f	signature:(ulong a, ulong b, ulong &u, ulong &v)
cp2	src/aux0/cayley-dickson-mult.h	104;"	d
cp2	src/aux0/cayley-dickson-mult.h	122;"	d
cp_append	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::cp_append(const signed char *src, signed char *dst, ulong k, ulong a)$/;"	f	class:all_set_partitions	signature:(const signed char *src, signed char *dst, ulong k, ulong a)
cp_append	src/comb/attic/allsetpartitions.h	/^    static void cp_append(const signed char *src, signed char *dst, ulong k, ulong a);$/;"	p	class:all_set_partitions	access:protected	signature:(const signed char *src, signed char *dst, ulong k, ulong a)
cp_append	src/comb/setpart.cc	/^setpart::cp_append(const int *src, int *dst, int k, int a)$/;"	f	class:setpart	signature:(const int *src, int *dst, int k, int a)
cp_append	src/comb/setpart.h	/^    int cp_append(const int *src, int *dst, int k, int a);$/;"	p	class:setpart	access:protected	signature:(const int *src, int *dst, int k, int a)
cq	demo/comb/perm-rec-demo.cc	/^bool cq;$/;"	v
cq_	src/graph/digraph-paths.h	/^    bool cq_;  \/\/ whether current path is a cycle$/;"	m	class:digraph_paths	access:public
cr_	src/ds/attic/coroutine-paren-demo.cc	/^    coroutine<vars> *cr_;$/;"	m	class:paren	file:	access:protected
crc32	src/bits/crc32.h	/^    explicit crc32(uint c=0)$/;"	f	class:crc32	access:public	signature:(uint c=0)
crc32	src/bits/crc32.h	/^class crc32$/;"	c
crc32::a_	src/bits/crc32.h	/^    uint a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:crc32	access:public
crc32::bit_in	src/bits/crc32.h	/^    uint bit_in(uchar b)$/;"	f	class:crc32	access:public	signature:(uchar b)
crc32::bits_in	src/bits/crc32.h	/^    uint bits_in(uint w, uchar k)$/;"	f	class:crc32	access:public	signature:(uint w, uchar k)
crc32::byte_in	src/bits/crc32.h	/^    uint byte_in(uchar b)$/;"	f	class:crc32	access:public	signature:(uchar b)
crc32::c_	src/bits/crc32.h	/^    uint c_;  \/\/ a binary primitive polynomial$/;"	m	class:crc32	access:public
crc32::cc	src/bits/crc32.cc	/^const uint crc32::cc[] = {$/;"	m	class:crc32	file:
crc32::cc	src/bits/crc32.h	/^    static const uint cc[];  \/\/ 16 "random" 32-bit primitive polynomials$/;"	m	class:crc32	access:public
crc32::crc32	src/bits/crc32.h	/^    explicit crc32(uint c=0)$/;"	f	class:crc32	access:public	signature:(uint c=0)
crc32::get_a	src/bits/crc32.h	/^    uint get_a()  const  { return a_; }$/;"	f	class:crc32	access:public	signature:() const
crc32::init	src/bits/crc32.h	/^    void init(uint c)$/;"	f	class:crc32	access:public	signature:(uint c)
crc32::reset	src/bits/crc32.h	/^    void reset()  { set_a(0U); }  \/\/ all ones$/;"	f	class:crc32	access:public	signature:()
crc32::set_a	src/bits/crc32.h	/^    void set_a(uint a)  { a_=a; }$/;"	f	class:crc32	access:public	signature:(uint a)
crc32::shift	src/bits/crc32.h	/^    void shift()$/;"	f	class:crc32	access:public	signature:()
crc32::word_in	src/bits/crc32.h	/^    uint word_in(uint w)$/;"	f	class:crc32	access:public	signature:(uint w)
crc32::~crc32	src/bits/crc32.h	/^    ~crc32()  {;}$/;"	f	class:crc32	access:public	signature:()
crc64	src/bits/crc64.h	/^    explicit crc64(uint64 c=0)$/;"	f	class:crc64	access:public	signature:(uint64 c=0)
crc64	src/bits/crc64.h	/^class crc64$/;"	c
crc64::a_	src/bits/crc64.h	/^    uint64 a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:crc64	access:public
crc64::bit_in	src/bits/crc64.h	/^    uint64 bit_in(uchar b)$/;"	f	class:crc64	access:public	signature:(uchar b)
crc64::bits_in	src/bits/crc64.h	/^    uint64 bits_in(uint64 w, uchar k)$/;"	f	class:crc64	access:public	signature:(uint64 w, uchar k)
crc64::byte_in	src/bits/crc64.h	/^    uint64 byte_in(uchar b)$/;"	f	class:crc64	access:public	signature:(uchar b)
crc64::c_	src/bits/crc64.h	/^    uint64 c_;  \/\/ a binary primitive polynomial$/;"	m	class:crc64	access:public
crc64::cc	src/bits/crc64.cc	/^const uint64 crc64::cc[] = {$/;"	m	class:crc64	file:
crc64::cc	src/bits/crc64.h	/^    static const uint64 cc[];  \/\/ 16 "random" 64-bit primitive polynomials$/;"	m	class:crc64	access:public
crc64::crc64	src/bits/crc64.h	/^    explicit crc64(uint64 c=0)$/;"	f	class:crc64	access:public	signature:(uint64 c=0)
crc64::get_a	src/bits/crc64.h	/^    uint64 get_a()  const  { return a_; }$/;"	f	class:crc64	access:public	signature:() const
crc64::init	src/bits/crc64.h	/^    void init(uint64 c)$/;"	f	class:crc64	access:public	signature:(uint64 c)
crc64::reset	src/bits/crc64.h	/^    void reset()  { set_a(~0ULL); }  \/\/ all ones$/;"	f	class:crc64	access:public	signature:()
crc64::set_a	src/bits/crc64.h	/^    void set_a(uint64 a)  { a_=a; }$/;"	f	class:crc64	access:public	signature:(uint64 a)
crc64::shift	src/bits/crc64.h	/^    void shift()$/;"	f	class:crc64	access:public	signature:()
crc64::word_in	src/bits/crc64.h	/^    uint64 word_in(uint64 w)$/;"	f	class:crc64	access:public	signature:(uint64 w)
crc64::~crc64	src/bits/crc64.h	/^    ~crc64()  {;}$/;"	f	class:crc64	access:public	signature:()
crsms_gen	demo/comb/necklace-cat-demo.cc	/^void crsms_gen(ulong n, ulong j)$/;"	f	signature:(ulong n, ulong j)
csn	demo/bits/dragon-curve-texpic-demo.cc	/^const ulong csn = 4;  \/\/ 90 degrees$/;"	v
csn	demo/bits/dragon-hex-texpic-demo.cc	/^const ulong csn = 6;  \/\/ 60 degrees$/;"	v
csn	demo/bits/dragon-r13-texpic-demo.cc	/^const ulong csn = 4;  \/\/ 90 degrees$/;"	v
csn	demo/bits/dragon-r4-texpic-demo.cc	/^const ulong csn = 3;  \/\/ 120 degrees$/;"	v
csn	demo/bits/dragon-r5-texpic-demo.cc	/^const ulong csn = 4;  \/\/ 90 degree$/;"	v
csn	demo/bits/dragon-r7-2-texpic-demo.cc	/^const ulong csn = 3;  \/\/ 120 degrees$/;"	v
csn	demo/bits/dragon-r7-texpic-demo.cc	/^const ulong csn = 3;  \/\/ 120 degrees$/;"	v
csn	demo/bits/dragon-r9-texpic-demo.cc	/^const ulong csn = 3;  \/\/ 120 degrees$/;"	v
csn	demo/bits/dragon3-texpic-demo.cc	/^const ulong csn = 3;  \/\/ 120 degree$/;"	v
csqr	doc/aux0-doc.txt	/^static inline void csqr(double &u, double &v);$/;"	p	file:	signature:(double &u, double &v)
csqr	src/aux0/cmult.h	/^static inline void csqr(double &u, double &v)$/;"	f	signature:(double &u, double &v)
csqr	src/aux0/cmult.h	/^static inline void csqr(double a, double b,$/;"	f	signature:(double a, double b, double &u, double &v)
csqr_n	doc/aux0-doc.txt	/^static inline void csqr_n(double &u, double &v, double dn);$/;"	p	file:	signature:(double &u, double &v, double dn)
csqr_n	src/aux0/cmult.h	/^static inline void csqr_n(double &u, double &v, double dn)$/;"	f	signature:(double &u, double &v, double dn)
cstep	src/comb/wfl-hilbert.h	/^    ulong cstep; \/\/ "step" counter n along walk, deflated by lv levels;$/;"	m	class:wfl_cell	access:public
cswap_gt	doc/bits-doc.txt	/^static inline void cswap_gt(ulong &a, ulong &b);$/;"	p	file:	signature:(ulong &a, ulong &b)
cswap_gt	src/bits/cswap.h	/^static inline void cswap_gt(ulong &a, ulong &b)$/;"	f	signature:(ulong &a, ulong &b)
cswap_lt	doc/bits-doc.txt	/^static inline void cswap_lt(ulong &a, ulong &b);$/;"	p	file:	signature:(ulong &a, ulong &b)
cswap_lt	src/bits/cswap.h	/^static inline void cswap_lt(ulong &a, ulong &b)$/;"	f	signature:(ulong &a, ulong &b)
ct	demo/arith/zero-divisors-demo.cc	/^ulong ct;$/;"	v
ct	demo/arith/zero-divisors-pairs-demo.cc	/^ulong ct;$/;"	v
ct	demo/bits/revbin-rec-demo.cc	/^ulong N, ct;$/;"	v
ct	demo/comb/combination-emk-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/combination-enup-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/combination-gray-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/combination-lam-demo.cc	/^ulong ct = 0;$/;"	v
ct	demo/comb/combination-pref-demo.cc	/^ulong ct = 0;$/;"	v
ct	demo/comb/composition-gray-rec-demo.cc	/^ulong ct;  \/\/ count objects$/;"	v
ct	demo/comb/fib-alt-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/fibgray-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/gexz-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/ksubset-twoclose-demo.cc	/^ulong ct;$/;"	v
ct	demo/comb/maxrep-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/naf-gray-rec-demo.cc	/^ulong ct;    \/\/ count objects$/;"	v
ct	demo/comb/naf-pos-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/necklace-gray-demo.cc	/^ulong ct;  \/\/ count objects$/;"	v
ct	demo/comb/necklace-gray3-demo.cc	/^long ct;$/;"	v
ct	demo/comb/necklace-sigma-tau-demo.cc	/^ulong n, ct;$/;"	v
ct	demo/comb/no111-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/no1111-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/no1x1-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/no1xy1-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/ntnz-gray-demo.cc	/^ulong ct;    \/\/ count objects$/;"	v
ct	demo/comb/ntz-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/paren-gray-rec-demo.cc	/^ulong ct;   \/\/ count combinations$/;"	v
ct	demo/comb/pellgen-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/pellgray-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/perm-dist1-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/perm-l1r2-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/perm-rec-demo.cc	/^static ulong ct = 0;$/;"	v	file:
ct	demo/comb/perm-right1-gray-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/rll-rec-demo.cc	/^ulong ct;   \/\/ count objects$/;"	v
ct	demo/comb/shift-subsets-demo.cc	/^ulong c, ct=1;$/;"	v
ct	demo/graph/sta-graph-acgray-demo.cc	/^ulong ct = 0;$/;"	v
ct	demo/graph/sta-graph-macgray-demo.cc	/^ulong ct = 0;$/;"	v
ct	src/comb/attic/combination-rec-demo.cc	/^ulong ct;   \/\/ count combinations$/;"	v
ct	src/comb/attic/partition-dist-lex-rec-demo.cc	/^ulong ct = 0;$/;"	v
ct	src/comb/attic/partition-lex-rec-demo.cc	/^ulong ct = 0;$/;"	v
ct	src/fht/attic/trigtable.cc	/^static double *ct = 0;$/;"	v	file:
ct1	src/comb/attic/binarydebruijn.h	/^    ulong ct1, ct2;$/;"	m	class:binary_debruijn	access:private
ct2	src/comb/attic/binarydebruijn.h	/^    ulong ct1, ct2;$/;"	m	class:binary_debruijn	access:private
ct_	src/comb/combination-rec.h	/^    ulong ct_;   \/\/ count combinations$/;"	m	class:comb_rec	access:public
ct_	src/comb/ksubset-rec.h	/^    ulong ct_;   \/\/ count subsets$/;"	m	class:ksubset_rec	access:public
ct_	src/comb/mset-perm-lex-rec.h	/^    ulong ct_;  \/\/ count objects$/;"	m	class:mset_perm_lex_rec	access:public
ct_	src/comb/partition-gen.h	/^    ulong ct_;  \/\/ Number of partitions found so far$/;"	m	class:partition_gen	access:public
ct_	src/comb/perm-heap2-swaps.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_heap2_swaps	access:public
ct_	src/comb/perm-heap2.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_heap2	access:public
ct_	src/comb/perm-rev2.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_rev2	access:public
ct_	src/comb/subset-gray-delta.h	/^    ulong ct_;  \/\/ gray_code(ct_) corresponds to the current subset$/;"	m	class:subset_gray_delta	access:public
ctc_	src/comb/attic/stringsubst.h	/^    ulong ctc_;  \/\/ count chars of result actually produced$/;"	m	class:string_subst	access:public
ctm0_	src/comb/perm-ives.h	/^    ulong ctm0_;  \/\/ aux: start value of ctm == n*(n-1)-1$/;"	m	class:perm_ives	access:public
ctm_	src/comb/perm-derange.h	/^    ulong ctm_;  \/\/ counter modulo n$/;"	m	class:perm_derange	access:public
ctm_	src/comb/perm-ives.h	/^    ulong ctm_;   \/\/ aux: counter for easy case$/;"	m	class:perm_ives	access:public
ctm_	src/comb/perm-trotter.h	/^    ulong ctm_;  \/\/ counter to detect easy case$/;"	m	class:perm_trotter	access:public
ctor_core	src/comb/string-subst.h	/^    void ctor_core(ulong nlev, ulong maxrlen)$/;"	f	class:string_subst	access:protected	signature:(ulong nlev, ulong maxrlen)
ctor_core	src/ds/bitarray.h	/^    ulong ctor_core(ulong nbits)$/;"	f	class:bitarray	access:private	signature:(ulong nbits)
ctor_core	src/mod/divisors.h	/^    void ctor_core(const factorization &F)$/;"	f	class:divisors	access:private	signature:(const factorization &F)
ctor_core	src/wavelet/waveletfilter.h	/^    void ctor_core()$/;"	f	class:wavelet_filter	access:public	signature:()
current	src/bits/bitsubset-gray.h	/^    ulong current()  const { return G; }$/;"	f	class:bit_subset_gray	access:public	signature:() const
current	src/bits/bitsubset.h	/^    ulong current()  const  { return U; }$/;"	f	class:bit_subset	access:public	signature:() const
current	src/bpol/mersenne-coprime.h	/^    bool current()  const { return j_ != pq_top(); }$/;"	f	class:mersenne_coprime	access:public	signature:() const
current	src/comb/attic/comblex.h	/^    const comb_lex &  current()  const  { return *this; }$/;"	f	class:comb_lex	access:public	signature:() const
current	src/comb/attic/permvisit.h	/^    ulong current()  const  { return idx; }$/;"	f	class:perm_visit	access:public	signature:() const
current	src/comb/string-subst.h	/^    char current()  const$/;"	f	class:string_subst	access:public	signature:() const
current	src/comb/string-subst.h	/^    char current(ulong lev)  const$/;"	f	class:string_subst	access:protected	signature:(ulong lev) const
current	src/comb/subset-gray-delta.h	/^    ulong current()  const  { return ct_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
current	src/ds/attic/coroutine-paren-demo.cc	/^    int current()  const  { return idx; }$/;"	f	class:paren	access:public	signature:() const
current_max	src/comb/gray-cycle-leaders.h	/^    ulong current_max()  const  { return B_.current() | za_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
current_min	src/comb/gray-cycle-leaders.h	/^    ulong current_min()  const  { return B_.current() | zi_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
cyc_match	src/graph/mk-lyndon-gray-digraph.cc	/^static inline ulong cyc_match(ulong v1, ulong v0, ulong nbits)$/;"	f	file:	signature:(ulong v1, ulong v0, ulong nbits)
cycle_length	src/comb/gray-cycle-leaders.h	/^    ulong cycle_length()  const  { return len_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
cycle_length	src/perm/attic/cycles.h	/^    ulong cycle_length(ulong k)  const \/\/ length of cycle starting at index k$/;"	f	class:cycles	access:public	signature:(ulong k) const
cycles	src/perm/attic/cycles.cc	/^cycles::cycles(ulong n)$/;"	f	class:cycles	signature:(ulong n)
cycles	src/perm/attic/cycles.h	/^    cycles(const cycles &c);$/;"	p	class:cycles	access:public	signature:(const cycles &c)
cycles	src/perm/attic/cycles.h	/^    cycles(ulong n);$/;"	p	class:cycles	access:public	signature:(ulong n)
cycles	src/perm/attic/cycles.h	/^class cycles$/;"	c
cycles::cycle_length	src/perm/attic/cycles.h	/^    ulong cycle_length(ulong k)  const \/\/ length of cycle starting at index k$/;"	f	class:cycles	access:public	signature:(ulong k) const
cycles::cycles	src/perm/attic/cycles.cc	/^cycles::cycles(ulong n)$/;"	f	class:cycles	signature:(ulong n)
cycles::cycles	src/perm/attic/cycles.h	/^    cycles(const cycles &c);$/;"	p	class:cycles	access:public	signature:(const cycles &c)
cycles::cycles	src/perm/attic/cycles.h	/^    cycles(ulong n);$/;"	p	class:cycles	access:public	signature:(ulong n)
cycles::f_	src/perm/attic/cycles.h	/^    ulong *f_;  \/\/ [nontrivial cycles] nce_ [fixed points] nn_ [unused] n_$/;"	m	class:cycles	access:public
cycles::get	src/perm/attic/cycles.h	/^    ulong get(ulong k)  const { return  f_[k]; }  \/\/ no range check$/;"	f	class:cycles	access:public	signature:(ulong k) const
cycles::get_cycle_maxima	src/perm/attic/cycles.cc	/^cycles::get_cycle_maxima(ulong *m) const$/;"	f	class:cycles	signature:(ulong *m) const
cycles::get_cycle_maxima	src/perm/attic/cycles.h	/^    ulong get_cycle_maxima(ulong *m)  const;$/;"	p	class:cycles	access:public	signature:(ulong *m) const
cycles::get_cycle_minima	src/perm/attic/cycles.cc	/^cycles::get_cycle_minima(ulong *m) const$/;"	f	class:cycles	signature:(ulong *m) const
cycles::get_cycle_minima	src/perm/attic/cycles.h	/^    ulong get_cycle_minima(ulong *m)  const;$/;"	p	class:cycles	access:public	signature:(ulong *m) const
cycles::invert	src/perm/attic/cycles.cc	/^cycles::invert()$/;"	f	class:cycles	signature:()
cycles::invert	src/perm/attic/cycles.h	/^    void invert();$/;"	p	class:cycles	access:public	signature:()
cycles::is_equivalent	src/perm/attic/cycles.h	/^    bool is_equivalent(const ulong *f, ulong n)  const$/;"	f	class:cycles	access:public	signature:(const ulong *f, ulong n) const
cycles::ma_	src/perm/attic/cycles.h	/^    ulong ma_, mi_; \/\/ max\/min length of cycles$/;"	m	class:cycles	access:public
cycles::make_cycles	src/perm/attic/cycles.cc	/^cycles::make_cycles(const ulong *f, ulong n)$/;"	f	class:cycles	signature:(const ulong *f, ulong n)
cycles::make_cycles	src/perm/attic/cycles.h	/^    int make_cycles(const ulong *f, ulong n);$/;"	p	class:cycles	access:public	signature:(const ulong *f, ulong n)
cycles::make_permutation	src/perm/attic/cycles.cc	/^cycles::make_permutation(ulong *f, ulong n)  const$/;"	f	class:cycles	signature:(ulong *f, ulong n) const
cycles::make_permutation	src/perm/attic/cycles.h	/^    int make_permutation(ulong *f, ulong n)  const;  \/\/ 'inverse' of make_cycles()$/;"	p	class:cycles	access:public	signature:(ulong *f, ulong n) const
cycles::mi_	src/perm/attic/cycles.h	/^    ulong ma_, mi_; \/\/ max\/min length of cycles$/;"	m	class:cycles	access:public
cycles::n_	src/perm/attic/cycles.h	/^    ulong n_;   \/\/ # of allocated elements$/;"	m	class:cycles	access:public
cycles::nc_	src/perm/attic/cycles.h	/^    ulong nc_;  \/\/ # of cycles$/;"	m	class:cycles	access:public
cycles::nce_	src/perm/attic/cycles.h	/^    ulong nce_; \/\/ # of elements in nontrivial cycles$/;"	m	class:cycles	access:public
cycles::next_cycle	src/perm/attic/cycles.cc	/^cycles::next_cycle(ulong &k)  const$/;"	f	class:cycles	signature:(ulong &k) const
cycles::next_cycle	src/perm/attic/cycles.h	/^    ulong next_cycle(ulong &k)  const;$/;"	p	class:cycles	access:public	signature:(ulong &k) const
cycles::nf_	src/perm/attic/cycles.h	/^    ulong nf_;  \/\/ # of fixed points (fixed points recorded at the end of f_[])$/;"	m	class:cycles	access:public
cycles::nn_	src/perm/attic/cycles.h	/^    ulong nn_;  \/\/ # of elements actually used == nce_ + nf_$/;"	m	class:cycles	access:public
cycles::print	src/perm/attic/cycles.cc	/^cycles::print(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
cycles::print	src/perm/attic/cycles.h	/^    void print(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
cycles::print_code	src/perm/attic/cycles.cc	/^cycles::print_code(const char *funcname, ulong n,$/;"	f	class:cycles	signature:(const char *funcname, ulong n, int use_swap , int use_stderr ) const
cycles::print_code	src/perm/attic/cycles.h	/^    void print_code(const char *funcname, ulong n,$/;"	p	class:cycles	access:public	signature:(const char *funcname, ulong n, int use_swap=0, int use_stderr=0) const
cycles::print_cycles	src/perm/attic/cycles.cc	/^cycles::print_cycles(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
cycles::print_cycles	src/perm/attic/cycles.h	/^    void print_cycles(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
cycles::print_cycles_short	src/perm/attic/cycles.cc	/^cycles::print_cycles_short()  const$/;"	f	class:cycles	signature:() const
cycles::print_cycles_short	src/perm/attic/cycles.h	/^    void print_cycles_short()  const;$/;"	p	class:cycles	access:public	signature:() const
cycles::print_fixed_points	src/perm/attic/cycles.cc	/^cycles::print_fixed_points(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
cycles::print_fixed_points	src/perm/attic/cycles.h	/^    void print_fixed_points(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
cycles::print_leaders	src/perm/attic/cycles.cc	/^cycles::print_leaders()  const$/;"	f	class:cycles	signature:() const
cycles::print_leaders	src/perm/attic/cycles.h	/^    void print_leaders()  const;$/;"	p	class:cycles	access:public	signature:() const
cycles::ta_	src/perm/attic/cycles.h	/^    bitarray *ta_;  \/\/ tag array to mark cycle ends$/;"	m	class:cycles	access:public
cycles::test_equivalent	src/perm/attic/cycles.cc	/^cycles::test_equivalent(const ulong *f, ulong n)  const$/;"	f	class:cycles	signature:(const ulong *f, ulong n) const
cycles::test_equivalent	src/perm/attic/cycles.h	/^    int test_equivalent(const ulong *f, ulong n)  const;$/;"	p	class:cycles	access:public	signature:(const ulong *f, ulong n) const
cycles::tt_	src/perm/attic/cycles.h	/^    bitarray *tt_;  \/\/ aux: tag array for creating cycles$/;"	m	class:cycles	access:public
cycles::~cycles	src/perm/attic/cycles.cc	/^cycles::~cycles()$/;"	f	class:cycles	signature:()
cycles::~cycles	src/perm/attic/cycles.h	/^    ~cycles();$/;"	p	class:cycles	access:public	signature:()
cyclic_bit_block	doc/bits-doc.txt	/^static inline ulong cyclic_bit_block(ulong p, ulong n);$/;"	p	file:	signature:(ulong p, ulong n)
cyclic_bit_block	src/bits/bitblock.h	/^static inline ulong cyclic_bit_block(ulong p, ulong n)$/;"	f	signature:(ulong p, ulong n)
cyclic_compare	src/comb/cyclic-words.h	/^int cyclic_compare(const Type * A, ulong ai, const Type * B, ulong bi, ulong n)$/;"	f	signature:(const Type * A, ulong ai, const Type * B, ulong bi, ulong n)
cyclic_compare_min	src/comb/cyclic-words.h	/^int cyclic_compare_min(const Type * A, const Type * B, ulong n)$/;"	f	signature:(const Type * A, const Type * B, ulong n)
cyclic_equal_p	src/comb/cyclic-words.h	/^bool cyclic_equal_p(const Type * A, const Type * B, ulong n)$/;"	f	signature:(const Type * A, const Type * B, ulong n)
cyclic_lex_min_idx	src/comb/cyclic-words.h	/^ulong cyclic_lex_min_idx(const Type *W, ulong n)$/;"	f	signature:(const Type *W, ulong n)
cyclic_lex_min_word	src/comb/cyclic-words.h	/^ulong cyclic_lex_min_word(const Type *W, ulong n, Type *M)$/;"	f	signature:(const Type *W, ulong n, Type *M)
cyclic_perm	src/comb/cyclic-perm.h	/^    cyclic_perm(const cyclic_perm&);  \/\/ forbidden$/;"	p	class:cyclic_perm	access:private	signature:(const cyclic_perm&)
cyclic_perm	src/comb/cyclic-perm.h	/^    explicit cyclic_perm(ulong n)$/;"	f	class:cyclic_perm	access:public	signature:(ulong n)
cyclic_perm	src/comb/cyclic-perm.h	/^class cyclic_perm$/;"	c
cyclic_perm::M_	src/comb/cyclic-perm.h	/^    mixedradix_gray *M_;$/;"	m	class:cyclic_perm	access:public
cyclic_perm::cyclic_perm	src/comb/cyclic-perm.h	/^    cyclic_perm(const cyclic_perm&);  \/\/ forbidden$/;"	p	class:cyclic_perm	access:private	signature:(const cyclic_perm&)
cyclic_perm::cyclic_perm	src/comb/cyclic-perm.h	/^    explicit cyclic_perm(ulong n)$/;"	f	class:cyclic_perm	access:public	signature:(ulong n)
cyclic_perm::data	src/comb/cyclic-perm.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:cyclic_perm	access:public	signature:() const
cyclic_perm::first	src/comb/cyclic-perm.h	/^    void first()$/;"	f	class:cyclic_perm	access:public	signature:()
cyclic_perm::invdata	src/comb/cyclic-perm.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:cyclic_perm	access:public	signature:() const
cyclic_perm::ix_	src/comb/cyclic-perm.h	/^    ulong *ix_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:cyclic_perm	access:public
cyclic_perm::n_	src/comb/cyclic-perm.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:cyclic_perm	access:public
cyclic_perm::next	src/comb/cyclic-perm.h	/^    bool next()$/;"	f	class:cyclic_perm	access:public	signature:()
cyclic_perm::operator =	src/comb/cyclic-perm.h	/^    cyclic_perm & operator = (const cyclic_perm&);  \/\/ forbidden$/;"	p	class:cyclic_perm	access:private	signature:(const cyclic_perm&)
cyclic_perm::setup	src/comb/cyclic-perm.h	/^    void setup()$/;"	f	class:cyclic_perm	access:private	signature:()
cyclic_perm::x_	src/comb/cyclic-perm.h	/^    ulong *x_;  \/\/ inverse permutation$/;"	m	class:cyclic_perm	access:public
cyclic_perm::~cyclic_perm	src/comb/cyclic-perm.h	/^    ~cyclic_perm()$/;"	f	class:cyclic_perm	access:public	signature:()
czi	demo/seq/A178514-demo.cc	/^ulong czi[32];$/;"	v
d	doc/wfl-hilbert-doc.txt	/^d = 3, l = 2 walk ---$/;"	v
d	doc/wfl-hilbert-doc.txt	/^vector  [n] ; when  d = 2  the walk is a scaled-up convergent to the classical$/;"	v
d	src/comb/hilbert-ndim-rec.h	/^    ulong d;  \/\/ number of dimensions 2<=d<=32$/;"	m	class:hilbert_ndim_rec	access:public
d	src/comb/hilbert-ndim.h	/^    ulong d;  \/\/ number of dimensions 2<=d<=32$/;"	m	class:hilbert_ndim	access:public
d	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
d0_	src/comb/perm-trotter.h	/^    ulong d0_;   \/\/ direction of element zero$/;"	m	class:perm_trotter	access:public
d_	src/aux0/attic/funcemu.h	/^    Type  *d_;  \/\/ Data stack$/;"	m	class:funcemu	access:public
d_	src/comb/attic/perm-minchange.h	/^    ulong *d_;  \/\/ aux$/;"	m	class:perm_minchange	access:public
d_	src/comb/attic/perm-trotter.h	/^    ulong *d_;  \/\/ auxiliary: directions$/;"	m	class:perm_trotter	access:public
d_	src/comb/catalan-rgs-gray.h	/^    ulong *d_;  \/\/ direction$/;"	m	class:catalan_rgs_gray	access:public
d_	src/comb/catalan.h	/^    int *d_;    \/\/ direction with recursion (+1 or -1)$/;"	m	class:catalan	access:public
d_	src/comb/kperm-gray.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, ..., 2]$/;"	m	class:kperm_gray	access:public
d_	src/comb/kperm-lex.h	/^    ulong *d_;  \/\/ falling factorial number$/;"	m	class:kperm_lex	access:public
d_	src/comb/mixedradix-gray2.h	/^    ulong *d_;  \/\/ direction$/;"	m	class:mixedradix_gray2	access:public
d_	src/comb/mixedradix-naf-gray.h	/^    ulong *d_;  \/\/ directions, or zero for track fixed at zero$/;"	m	class:mixedradix_naf_gray	access:public
d_	src/comb/mixedradix-sl-gray.h	/^    ulong *d_;   \/\/ directions (either +1 or -1)$/;"	m	class:mixedradix_sl_gray	access:public
d_	src/comb/partition-dist-d-asc.h	/^    ulong d_;   \/\/ minimal difference of parts$/;"	m	class:partition_dist_d_asc	access:public
d_	src/comb/perm-colex.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_colex	access:public
d_	src/comb/perm-gray-ffact.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, ..., 2]$/;"	m	class:perm_gray_ffact	access:public
d_	src/comb/perm-gray-lipski.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_gray_lipski	access:public
d_	src/comb/perm-gray-wells.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_gray_wells	access:public
d_	src/comb/perm-heap.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap	access:public
d_	src/comb/perm-heap2-swaps.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, 5, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap2_swaps	access:public
d_	src/comb/perm-heap2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, 5, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap2	access:public
d_	src/comb/perm-lex-inv.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_lex_inv	access:public
d_	src/comb/perm-lex2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_lex2	access:public
d_	src/comb/perm-mv0.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, n-3, ..., 2]$/;"	m	class:perm_mv0	access:public
d_	src/comb/perm-rev.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_rev	access:public
d_	src/comb/perm-rev2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_rev2	access:public
d_	src/comb/perm-st-pref.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_st_pref	access:public
d_	src/comb/perm-st.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_st	access:public
d_	src/comb/perm-trotter-lg.h	/^    ulong *d_;    \/\/ auxiliary: directions$/;"	m	class:perm_trotter_lg	access:public
d_	src/comb/perm-trotter.h	/^    ulong *d_;    \/\/ auxiliary: directions$/;"	m	class:perm_trotter	access:public
d_	src/comb/setpart-rgs-gray.h	/^    ulong *d_;   \/\/ direction with recursion (+1 or -1)$/;"	m	class:setpart_rgs_gray	access:public
d_	src/comb/setpart.h	/^    int *d_;    \/\/ direction with recursion (+1 or -1)$/;"	m	class:setpart	access:public
d_	src/comb/subset-deltalex.h	/^    ulong *d_;  \/\/ subset as delta set$/;"	m	class:subset_deltalex	access:public
d_	src/ds/attic/coroutine.h	/^    Type  *d_;  \/\/ Data stack$/;"	m	class:coroutine	access:public
d_	src/graph/lyndon-gray.h	/^    ulong d_;   \/\/ bit-wise difference to last pr_ (a word with one bit)$/;"	m	class:lyndon_gray	access:public
data	src/bits/bit-necklace.h	/^    ulong data() const { return  a_; }$/;"	f	class:bit_necklace	access:public	signature:() const
data	src/bits/bit-rll2.h	/^    ulong data()  const$/;"	f	class:bit_rll2	access:public	signature:() const
data	src/bits/bit-sl-gray.h	/^    ulong data()  const  { return x_; }$/;"	f	class:bit_sl_gray	access:public	signature:() const
data	src/bits/bitfibgray.h	/^    ulong data()  const  { return x_; }$/;"	f	class:bit_fibgray	access:public	signature:() const
data	src/bits/thue-morse.h	/^    ulong data()  { return tm_; }$/;"	f	class:thue_morse	access:public	signature:()
data	src/bpol/all-irredpoly.h	/^    ulong data() const { return  p_; }$/;"	f	class:all_irredpoly	access:public	signature:() const
data	src/comb/acyclic-map.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:acyclic_map	access:public	signature:() const
data	src/comb/arrangement-lex.h	/^    const ulong *data()  const  { return P.data(); }$/;"	f	class:arrangement_lex	access:public	signature:() const
data	src/comb/arrangement-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:arrangement_rgs	access:public	signature:() const
data	src/comb/ascent-alt-rgs.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:ascent_alt_rgs	access:public	signature:() const
data	src/comb/ascent-nonflat-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
data	src/comb/ascent-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
data	src/comb/ascent-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:ascent_rgs	access:public	signature:() const
data	src/comb/attic/ascent-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:ascent_rgs	access:public	signature:() const
data	src/comb/attic/combcolex.h	/^    const ulong * data()  { return x_; }$/;"	f	class:comb_colex	access:public	signature:()
data	src/comb/attic/combination-altminchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_altminchange	access:public	signature:() const
data	src/comb/attic/combination-minchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_minchange	access:public	signature:() const
data	src/comb/attic/comblex.h	/^    const ulong * data()  { return x_; }$/;"	f	class:comb_lex	access:public	signature:()
data	src/comb/attic/combminchange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:comb_minchange	access:public	signature:() const
data	src/comb/attic/composition-chase.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:composition_chase	access:public	signature:() const
data	src/comb/attic/compositionalt.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_alt	access:public	signature:() const
data	src/comb/attic/perm-minchange.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_minchange	access:public	signature:() const
data	src/comb/attic/perm-trotter.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter	access:public	signature:() const
data	src/comb/attic/permvisit.h	/^    const ulong *data()  const  { return x; }$/;"	f	class:perm_visit	access:public	signature:() const
data	src/comb/attic/subset-monotone.h	/^    const ulong * data()  const { return x; }$/;"	f	class:subset_monotone	access:public	signature:() const
data	src/comb/attic/subsetdebruijn.h	/^    const ulong * data()  { return x; }$/;"	f	class:subset_debruijn	access:public	signature:()
data	src/comb/balanced-ordered-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
data	src/comb/binary-huffman.h	/^    const ulong * data()  const  { return  a_; }$/;"	f	class:binary_huffman	access:public	signature:() const
data	src/comb/binary-necklace.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:binary_necklace	access:public	signature:() const
data	src/comb/binary-sl-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:binary_sl_gray	access:public	signature:() const
data	src/comb/catalan-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_path_lex	access:public	signature:() const
data	src/comb/catalan-rgs-gray.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_gray	access:public	signature:() const
data	src/comb/catalan-rgs-gslex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_gslex	access:public	signature:() const
data	src/comb/catalan-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:() const
data	src/comb/catalan-rgs.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:catalan_rgs	access:public	signature:() const
data	src/comb/catalan-step-rgs-colex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
data	src/comb/catalan-step-rgs-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
data	src/comb/catalan-step-rgs-subset-lexrev.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
data	src/comb/cayley-perm.h	/^    const ulong * data()  const { return a_; }$/;"	f	class:cayley_perm	access:public	signature:() const
data	src/comb/change-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:change_rgs	access:public	signature:() const
data	src/comb/combination-chase.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:combination_chase	access:public	signature:() const
data	src/comb/combination-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_colex	access:public	signature:() const
data	src/comb/combination-emk.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_emk	access:public	signature:() const
data	src/comb/combination-endo.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_endo	access:public	signature:() const
data	src/comb/combination-enup.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_enup	access:public	signature:() const
data	src/comb/combination-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_lex	access:public	signature:() const
data	src/comb/combination-mod.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:combination_mod	access:public	signature:() const
data	src/comb/combination-pref.h	/^    const ulong * data()  const  { return b_; }$/;"	f	class:combination_pref	access:public	signature:() const
data	src/comb/combination-revdoor.h	/^    const ulong* data()  const  { return c_; }$/;"	f	class:combination_revdoor	access:public	signature:() const
data	src/comb/composition-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_colex	access:public	signature:() const
data	src/comb/composition-colex2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_colex2	access:public	signature:() const
data	src/comb/composition-dist-unimodal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
data	src/comb/composition-ex-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_ex_colex	access:public	signature:() const
data	src/comb/composition-ex-lex.h	/^    const ulong * data()  const  { return x_ + 1; }$/;"	f	class:composition_ex_lex	access:public	signature:() const
data	src/comb/composition-nz-binary.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
data	src/comb/composition-nz-carlitz.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
data	src/comb/composition-nz-first-max.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
data	src/comb/composition-nz-gray.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
data	src/comb/composition-nz-gray2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
data	src/comb/composition-nz-i-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
data	src/comb/composition-nz-left-2smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
data	src/comb/composition-nz-left-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
data	src/comb/composition-nz-max.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_max	access:public	signature:() const
data	src/comb/composition-nz-min.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_min	access:public	signature:() const
data	src/comb/composition-nz-minc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
data	src/comb/composition-nz-numparts.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:composition_nz_numparts	access:public	signature:() const
data	src/comb/composition-nz-odd-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
data	src/comb/composition-nz-odd.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
data	src/comb/composition-nz-restrpref.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
data	src/comb/composition-nz-rl.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
data	src/comb/composition-nz-smooth.h	/^    const ulong *data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_smooth	access:public	signature:() const
data	src/comb/composition-nz-sorts.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
data	src/comb/composition-nz-sorts2-pp.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
data	src/comb/composition-nz-sorts2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
data	src/comb/composition-nz-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
data	src/comb/composition-nz-superdiagonal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
data	src/comb/composition-nz-upstep.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
data	src/comb/composition-nz-weakly-unimodal.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
data	src/comb/composition-nz.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_nz	access:public	signature:() const
data	src/comb/composition-unimodal.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:composition_unimodal	access:public	signature:() const
data	src/comb/cyclic-perm.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:cyclic_perm	access:public	signature:() const
data	src/comb/descent-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:descent_rgs	access:public	signature:() const
data	src/comb/dyck-gray.h	/^    const ulong * data()  const  { return sq_+1; }$/;"	f	class:dyck_gray	access:public	signature:() const
data	src/comb/dyck-gray2.h	/^    const ulong *data()  const  { return c_+1; }  \/\/ zero-based array$/;"	f	class:dyck_gray2	access:public	signature:() const
data	src/comb/dyck-pref.h	/^    const ulong * data()  const  { return B_+1; }$/;"	f	class:dyck_pref	access:public	signature:() const
data	src/comb/dyck-pref2.h	/^    const ulong * data()  const  { return B_+1; }$/;"	f	class:dyck_pref2	access:public	signature:() const
data	src/comb/dyck-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:() const
data	src/comb/dyck-rgs.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:dyck_rgs	access:public	signature:() const
data	src/comb/hilbert-ndim-rec.h	/^    const ulong *data()  const  { return &P[0]; }$/;"	f	class:hilbert_ndim_rec	access:public	signature:() const
data	src/comb/hilbert-ndim.h	/^    const ulong *data()  const  { return &P[0]; }$/;"	f	class:hilbert_ndim	access:public	signature:() const
data	src/comb/id-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
data	src/comb/involution-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:involution_zero_map_rgs	access:public	signature:() const
data	src/comb/isoscent-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:isoscent_rgs	access:public	signature:() const
data	src/comb/kperm-gray.h	/^    const ulong * data()  const  { return ix_; }$/;"	f	class:kperm_gray	access:public	signature:() const
data	src/comb/kperm-lex.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:kperm_lex	access:public	signature:() const
data	src/comb/ksubset-gray.h	/^    const ulong * data()  const  { return S_+1; }$/;"	f	class:ksubset_gray	access:public	signature:() const
data	src/comb/ksubset-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:ksubset_lex	access:public	signature:() const
data	src/comb/lyndon-words.h	/^    const ulong * data()  const  { return W + 1; }$/;"	f	class:lyndon_words	access:public	signature:() const
data	src/comb/map23-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:map23_rgs	access:public	signature:() const
data	src/comb/mixedradix-colex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:mixedradix_colex	access:public	signature:() const
data	src/comb/mixedradix-endo-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
data	src/comb/mixedradix-endo.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_endo	access:public	signature:() const
data	src/comb/mixedradix-gray.h	/^    const ulong * data()  const { return a_; }$/;"	f	class:mixedradix_gray	access:public	signature:() const
data	src/comb/mixedradix-gray2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gray2	access:public	signature:() const
data	src/comb/mixedradix-gslex-alt.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
data	src/comb/mixedradix-gslex-alt2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:() const
data	src/comb/mixedradix-gslex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex	access:public	signature:() const
data	src/comb/mixedradix-gslex2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
data	src/comb/mixedradix-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_lex	access:public	signature:() const
data	src/comb/mixedradix-modular-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
data	src/comb/mixedradix-modular-gray2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
data	src/comb/mixedradix-naf-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
data	src/comb/mixedradix-naf-subset-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
data	src/comb/mixedradix-naf.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf	access:public	signature:() const
data	src/comb/mixedradix-restrpref.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
data	src/comb/mixedradix-rfact.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_rfact	access:public	signature:() const
data	src/comb/mixedradix-sl-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
data	src/comb/mixedradix-sod-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
data	src/comb/mixedradix-subset-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
data	src/comb/mixedradix-subset-lexrev.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:() const
data	src/comb/motzkin-nonflat-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:() const
data	src/comb/motzkin-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:motzkin_path_lex	access:public	signature:() const
data	src/comb/motzkin-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:motzkin_rgs_lex	access:public	signature:() const
data	src/comb/motzkin-step-rgs-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
data	src/comb/mpartition.h	/^    const ulong * data()  const  { return x_+1; }$/;"	f	class:mpartition	access:public	signature:() const
data	src/comb/mpartition2.h	/^    const ulong * data()  const  { return x_+1; }$/;"	f	class:mpartition2	access:public	signature:() const
data	src/comb/mset-perm-gray.h	/^    const ulong * data()  const { return ms_+1; }$/;"	f	class:mset_perm_gray	access:public	signature:() const
data	src/comb/mset-perm-lex.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
data	src/comb/mset-perm-pref.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:mset_perm_pref	access:public	signature:() const
data	src/comb/necklace.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:necklace	access:public	signature:() const
data	src/comb/ordered-tree-branching-seq.h	/^    const ulong *data()  const  { return b_; }$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
data	src/comb/ordered-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
data	src/comb/paren-lex.h	/^    const ulong * data()  const  { return x_ + 1; }$/;"	f	class:paren_lex	access:public	signature:() const
data	src/comb/paren-pref.h	/^    const ulong * data()  const  { return b_+1; }$/;"	f	class:paren_pref	access:public	signature:() const
data	src/comb/paren-pref.h	/^    const ulong * data()  const  { return b_; }$/;"	f	class:paren_pref	access:public	signature:() const
data	src/comb/paren.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:paren	access:public	signature:() const
data	src/comb/partition-2fall-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
data	src/comb/partition-2fall-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_asc	access:public	signature:() const
data	src/comb/partition-2fall-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_desc	access:public	signature:() const
data	src/comb/partition-asc-2rep-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
data	src/comb/partition-asc-2rep.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_2rep	access:public	signature:() const
data	src/comb/partition-asc-perim.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
data	src/comb/partition-asc-sorts.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
data	src/comb/partition-asc-sorts2-pp.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
data	src/comb/partition-asc-sorts2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
data	src/comb/partition-asc-subset-lex-csh.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
data	src/comb/partition-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
data	src/comb/partition-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc	access:public	signature:() const
data	src/comb/partition-binary-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_binary_asc	access:public	signature:() const
data	src/comb/partition-binary-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_binary_desc	access:public	signature:() const
data	src/comb/partition-desc-bb.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
data	src/comb/partition-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_desc	access:public	signature:() const
data	src/comb/partition-dist-asc-len.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
data	src/comb/partition-dist-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
data	src/comb/partition-dist-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc	access:public	signature:() const
data	src/comb/partition-dist-d-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
data	src/comb/partition-dist-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_desc	access:public	signature:() const
data	src/comb/partition-nonsquashing-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
data	src/comb/partition-odd-asc-subset-lex-csh.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
data	src/comb/partition-odd-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
data	src/comb/partition-odd-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc	access:public	signature:() const
data	src/comb/partition-odd-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_desc	access:public	signature:() const
data	src/comb/partition-odd-nonsquashing-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
data	src/comb/partition-rgs-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:partition_rgs_lex	access:public	signature:() const
data	src/comb/partition-s-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_s_desc	access:public	signature:() const
data	src/comb/partition-strongly-decr-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
data	src/comb/partition.h	/^    const ulong * data()  const  { return c_; }  \/\/ one-based!$/;"	f	class:partition	access:public	signature:() const
data	src/comb/perm-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_colex	access:public	signature:() const
data	src/comb/perm-derange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_derange	access:public	signature:() const
data	src/comb/perm-gray-ffact.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_ffact	access:public	signature:() const
data	src/comb/perm-gray-ffact2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:() const
data	src/comb/perm-gray-lipski.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_gray_lipski	access:public	signature:() const
data	src/comb/perm-gray-rfact.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_rfact	access:public	signature:() const
data	src/comb/perm-gray-rot1.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_rot1	access:public	signature:() const
data	src/comb/perm-gray-wells.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_gray_wells	access:public	signature:() const
data	src/comb/perm-heap.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_heap	access:public	signature:() const
data	src/comb/perm-heap2.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_heap2	access:public	signature:() const
data	src/comb/perm-involution.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_involution	access:public	signature:() const
data	src/comb/perm-ives.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_ives	access:public	signature:() const
data	src/comb/perm-lex-inv.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
data	src/comb/perm-lex.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_lex	access:public	signature:() const
data	src/comb/perm-lex2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_lex2	access:public	signature:() const
data	src/comb/perm-mv0.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_mv0	access:public	signature:() const
data	src/comb/perm-pref.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:perm_pref	access:public	signature:() const
data	src/comb/perm-rec.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_rec	access:public	signature:() const
data	src/comb/perm-rev.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_rev	access:public	signature:() const
data	src/comb/perm-rev2.h	/^    const ulong * data()  const { return p_; }$/;"	f	class:perm_rev2	access:public	signature:() const
data	src/comb/perm-rot.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:perm_rot	access:public	signature:() const
data	src/comb/perm-st-gray.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_st_gray	access:public	signature:() const
data	src/comb/perm-st-pref.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_st_pref	access:public	signature:() const
data	src/comb/perm-st.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_st	access:public	signature:() const
data	src/comb/perm-star.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:perm_star	access:public	signature:() const
data	src/comb/perm-trotter-lg.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter_lg	access:public	signature:() const
data	src/comb/perm-trotter.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter	access:public	signature:() const
data	src/comb/rgs-fincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_fincr	access:public	signature:() const
data	src/comb/rgs-kincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_kincr	access:public	signature:() const
data	src/comb/rgs-maxincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_maxincr	access:public	signature:() const
data	src/comb/ruler-func-s.h	/^    ulong data()  const$/;"	f	class:ruler_func_s	access:public	signature:() const
data	src/comb/ruler-func1.h	/^    ulong data()  const$/;"	f	class:ruler_func1	access:public	signature:() const
data	src/comb/schroeder-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:schroeder_path_lex	access:public	signature:() const
data	src/comb/schroeder-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:schroeder_rgs_lex	access:public	signature:() const
data	src/comb/score-sequence.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:score_sequence	access:public	signature:() const
data	src/comb/setpart-ccf-rgs-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:() const
data	src/comb/setpart-ck-rgs.h	/^    const ulong * data()  const  { return  a_; }$/;"	f	class:setpart_ck_rgs	access:public	signature:() const
data	src/comb/setpart-p-rgs-lex.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_p_rgs_lex	access:public	signature:() const
data	src/comb/setpart-rgs-gray.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
data	src/comb/setpart-rgs-lex.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
data	src/comb/setpart-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
data	src/comb/setpart-s-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:() const
data	src/comb/setpart-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_zero_map_rgs	access:public	signature:() const
data	src/comb/setpart.h	/^    const int* data()  const  { return x_; }$/;"	f	class:setpart	access:public	signature:() const
data	src/comb/skew-binary.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:skew_binary	access:public	signature:() const
data	src/comb/smooth-rfact-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
data	src/comb/subset-debruijn.h	/^    const ulong * data()  const  { return x; }$/;"	f	class:subset_debruijn	access:public	signature:() const
data	src/comb/subset-deltalex.h	/^    const ulong * data()  const  { return d_; }$/;"	f	class:subset_deltalex	access:public	signature:() const
data	src/comb/subset-gray-delta.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
data	src/comb/subset-gray.h	/^    const ulong * data() const { return x_+1; }$/;"	f	class:subset_gray	access:public	signature:() const
data	src/comb/subset-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:subset_lex	access:public	signature:() const
data	src/comb/tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:tree_lev_seq	access:public	signature:() const
data	src/comb/weakly-unimodal-rgs-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:() const
data	src/comb/young-tab-rgs-subset-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
data	src/comb/young-tab-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:young_tab_rgs	access:public	signature:() const
data	src/ds/attic/coroutine-paren-demo.cc	/^    const int *data()  const  { return x; }$/;"	f	class:paren	access:public	signature:() const
data	src/ds/attic/rarray.h	/^    Type * data()  { return x_; }$/;"	f	class:rarray	access:public	signature:()
data	src/ds/attic/rset.h	/^    Type * data()  { return x_; }$/;"	f	class:rset	access:public	signature:()
data	src/perm/attic/partition.h	/^    const int *data()  const  { return x;}$/;"	f	class:partition	access:public	signature:() const
daub10	src/wavelet/attic/waveletfilter.cc	/^static const double daub10[] =$/;"	v	file:
daub12	src/wavelet/attic/waveletfilter.cc	/^static const double daub12[] =$/;"	v	file:
daub20	src/wavelet/attic/waveletfilter.cc	/^static const double daub20[] =$/;"	v	file:
daub4	src/wavelet/attic/waveletfilter.cc	/^static const double daub4[] =$/;"	v	file:
daub6	src/wavelet/attic/waveletfilter.cc	/^static const double daub6[] =$/;"	v	file:
daub8	src/wavelet/attic/waveletfilter.cc	/^static const double daub8[] =$/;"	v	file:
daub_filter_tab	src/wavelet/daubechies.cc	/^extern const double * const daub_filter_tab[] = {$/;"	v
daub_filter_tab_len	src/wavelet/daubechies.cc	/^extern const ulong daub_filter_tab_len = ARRAY_LEN(daub_filter_tab);$/;"	v
db	demo/bits/debruijn-lookup-demo.cc	/^const ulong db = 0x17UL;  \/\/ == 00010111$/;"	v
db	demo/bits/debruijn-lookup-demo.cc	/^const ulong db = 0x218A392CD3D5DBFUL;$/;"	v
db	demo/bits/debruijn-lookup-demo.cc	/^const ulong db = 0x4653ADFUL;$/;"	v
db_lowest_one_idx	demo/bits/debruijn-lookup-demo.cc	/^inline ulong db_lowest_one_idx(ulong x)$/;"	f	signature:(ulong x)
db_manip	demo/graph/graph-complementshift-demo.cc	/^db_manip(digraph &dg, ulong mq)$/;"	f	signature:(digraph &dg, ulong mq)
db_manip	demo/graph/graph-debruijn-demo.cc	/^db_manip(digraph &dg, ulong mq)$/;"	f	signature:(digraph &dg, ulong mq)
dbt	demo/bits/debruijn-lookup-demo.cc	/^ulong dbt[BITS_PER_LONG];$/;"	v
dbt_setup	demo/bits/debruijn-lookup-demo.cc	/^static void dbt_setup()$/;"	f	file:	signature:()
dct4	doc/dctdst-doc.txt	/^void dct4(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
dct4	src/dctdst/dct4.cc	/^dct4(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
dct4	src/dctdst/dctdst.h	/^void dct4(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
dct4_basis	doc/dctdst-doc.txt	/^void dct4_basis(double *f, ulong n, ulong k);$/;"	p	file:	signature:(double *f, ulong n, ulong k)
dct4_basis	src/dctdst/dct4.cc	/^dct4_basis(double *f, ulong n, ulong k)$/;"	f	signature:(double *f, ulong n, ulong k)
dct4_basis	src/dctdst/dctdst.h	/^void dct4_basis(double *f, ulong n, ulong k);$/;"	p	signature:(double *f, ulong n, ulong k)
dct_basis	src/dctdst/dct.cc	/^dct_basis(double *f, ulong n, ulong k)$/;"	f	signature:(double *f, ulong n, ulong k)
dcth	doc/dctdst-doc.txt	/^void dcth(double *x, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *x, ulong ldn, double *tmp )
dcth	src/dctdst/dctdst.h	/^void dcth(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
dcth	src/dctdst/dcth.cc	/^dcth(double *x, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *x, ulong ldn, double *tmp )
dcth_basis	doc/dctdst-doc.txt	/^void dcth_basis(double *f, ulong n, ulong k);$/;"	p	file:	signature:(double *f, ulong n, ulong k)
dcth_basis	src/dctdst/dctdst.h	/^void dcth_basis(double *f, ulong n, ulong k);$/;"	p	signature:(double *f, ulong n, ulong k)
dcth_basis	src/dctdst/dcth.cc	/^dcth_basis(double *f, ulong n, ulong k)$/;"	f	signature:(double *f, ulong n, ulong k)
dcth_zapata	doc/dctdst-doc.txt	/^void dcth_zapata(double *x, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *x, ulong ldn, double *tmp )
dcth_zapata	src/dctdst/dctdst.h	/^void dcth_zapata(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
dcth_zapata	src/dctdst/dctzapata.cc	/^dcth_zapata(double *x, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *x, ulong ldn, double *tmp )
dd	src/graph/mk-special-digraphs.h	/^    uchar *dd;  \/\/ delta sequence of Gray path$/;"	m	class:lyngray_dat	access:public
debruijn	src/comb/debruijn.h	/^    explicit debruijn(ulong m, ulong n)$/;"	f	class:debruijn	access:public	signature:(ulong m, ulong n)
debruijn	src/comb/debruijn.h	/^class debruijn : public necklace$/;"	c	inherits:necklace
debruijn::debruijn	src/comb/debruijn.h	/^    explicit debruijn(ulong m, ulong n)$/;"	f	class:debruijn	access:public	signature:(ulong m, ulong n)
debruijn::first_digit	src/comb/debruijn.h	/^    ulong first_digit()$/;"	f	class:debruijn	access:public	signature:()
debruijn::first_string	src/comb/debruijn.h	/^    ulong first_string()$/;"	f	class:debruijn	access:public	signature:()
debruijn::i_	src/comb/debruijn.h	/^    ulong i_;   \/\/ position of current digit in current string$/;"	m	class:debruijn	access:public
debruijn::next_digit	src/comb/debruijn.h	/^    ulong next_digit()$/;"	f	class:debruijn	access:public	signature:()
debruijn::next_string	src/comb/debruijn.h	/^    ulong next_string()  \/\/ make new string, return its length$/;"	f	class:debruijn	access:public	signature:()
debruijn::~debruijn	src/comb/debruijn.h	/^    ~debruijn()  { ; }$/;"	f	class:debruijn	access:public	signature:()
debruijn_cycles	src/graph/attic/debruijngraph.h	/^    debruijn_cycles(ulong n)$/;"	f	class:debruijn_cycles	access:public	signature:(ulong n)
debruijn_cycles	src/graph/attic/debruijngraph.h	/^class debruijn_cycles$/;"	c
debruijn_cycles::all_cycles	src/graph/attic/debruijngraph.h	/^    ulong all_cycles()$/;"	f	class:debruijn_cycles	access:public	signature:()
debruijn_cycles::cct_	src/graph/attic/debruijngraph.h	/^    ulong cct_;  \/\/ count Cycles$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::cfdone_	src/graph/attic/debruijngraph.h	/^    bool cfdone_;  \/\/ if set (by cfunc()) then search is stopped$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::cfunc_	src/graph/attic/debruijngraph.h	/^    void (*cfunc_)(debruijn_cycles &);  \/\/ function to call with each cycle found$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::debruijn_cycles	src/graph/attic/debruijngraph.h	/^    debruijn_cycles(ulong n)$/;"	f	class:debruijn_cycles	access:public	signature:(ulong n)
debruijn_cycles::g_	src/graph/attic/debruijngraph.h	/^    debruijn_graph g_;  \/\/ the graph$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::graph	src/graph/attic/debruijngraph.h	/^    debruijn_graph & graph()  { return g_; }$/;"	f	class:debruijn_cycles	access:public	signature:()
debruijn_cycles::init	src/graph/attic/debruijngraph.h	/^    void init()$/;"	f	class:debruijn_cycles	access:public	signature:()
debruijn_cycles::next_cycle	src/graph/attic/debruijngraph.cc	/^debruijn_cycles::next_cycle(ulong ns, ulong p)$/;"	f	class:debruijn_cycles	signature:(ulong ns, ulong p)
debruijn_cycles::next_cycle	src/graph/attic/debruijngraph.h	/^    void next_cycle(ulong ns, ulong p);$/;"	p	class:debruijn_cycles	access:public	signature:(ulong ns, ulong p)
debruijn_cycles::ng_	src/graph/attic/debruijngraph.h	/^    ulong & ng_; \/\/ == size of graph$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::ngbits_	src/graph/attic/debruijngraph.h	/^    ulong ngbits_; \/\/ number of bits in ng_, useful for printing$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::path_is_cycle	src/graph/attic/debruijngraph.h	/^    bool path_is_cycle()  const$/;"	f	class:debruijn_cycles	access:public	signature:() const
debruijn_cycles::print_bin_horiz_path	src/graph/attic/debruijngraph.h	/^    void print_bin_horiz_path()  const$/;"	f	class:debruijn_cycles	access:public	signature:() const
debruijn_cycles::print_bin_path	src/graph/attic/debruijngraph.h	/^    void print_bin_path() const$/;"	f	class:debruijn_cycles	access:public	signature:() const
debruijn_cycles::print_debruijn_seq	src/graph/attic/debruijngraph.cc	/^debruijn_cycles::print_debruijn_seq()  const$/;"	f	class:debruijn_cycles	signature:() const
debruijn_cycles::print_debruijn_seq	src/graph/attic/debruijngraph.h	/^    void print_debruijn_seq() const;$/;"	p	class:debruijn_cycles	access:public	signature:() const
debruijn_cycles::print_path	src/graph/attic/debruijngraph.h	/^    void print_path() const$/;"	f	class:debruijn_cycles	access:public	signature:() const
debruijn_cycles::qq_	src/graph/attic/debruijngraph.h	/^    ulong *qq_;  \/\/ qq[k] == whether node k has been visited yet$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::rv_	src/graph/attic/debruijngraph.h	/^    ulong *rv_;  \/\/ Record of Visits: rv[k] == node visited at step k$/;"	m	class:debruijn_cycles	access:public
debruijn_cycles::~debruijn_cycles	src/graph/attic/debruijngraph.h	/^    ~debruijn_cycles()$/;"	f	class:debruijn_cycles	access:public	signature:()
debruijn_graph	src/graph/attic/debruijngraph.h	/^    debruijn_graph(ulong n)$/;"	f	class:debruijn_graph	access:public	signature:(ulong n)
debruijn_graph	src/graph/attic/debruijngraph.h	/^class debruijn_graph$/;"	c
debruijn_graph::a0_	src/graph/attic/debruijngraph.h	/^    ulong *a0_, *a1_;  \/\/ every node has two outgoing connections (Arcs)$/;"	m	class:debruijn_graph	access:public
debruijn_graph::a1_	src/graph/attic/debruijngraph.h	/^    ulong *a0_, *a1_;  \/\/ every node has two outgoing connections (Arcs)$/;"	m	class:debruijn_graph	access:public
debruijn_graph::debruijn_graph	src/graph/attic/debruijngraph.h	/^    debruijn_graph(ulong n)$/;"	f	class:debruijn_graph	access:public	signature:(ulong n)
debruijn_graph::init	src/graph/attic/debruijngraph.h	/^    void init()$/;"	f	class:debruijn_graph	access:public	signature:()
debruijn_graph::ng_	src/graph/attic/debruijngraph.h	/^    ulong ng_;         \/\/ number of Nodes of Graph$/;"	m	class:debruijn_graph	access:public
debruijn_graph::print	src/graph/attic/debruijngraph.cc	/^debruijn_graph::print()  const$/;"	f	class:debruijn_graph	signature:() const
debruijn_graph::print	src/graph/attic/debruijngraph.h	/^    void print()  const;$/;"	p	class:debruijn_graph	access:public	signature:() const
debruijn_graph::~debruijn_graph	src/graph/attic/debruijngraph.h	/^    ~debruijn_graph()$/;"	f	class:debruijn_graph	access:public	signature:()
decor	src/comb/wfl-hilbert.h	/^    ulong decor(ulong j)  const  \/\/ jj: want a better name for this method$/;"	f	class:wfl_hilbert	access:public	signature:(ulong j) const
decr_mod	doc/mod-doc.txt	/^inline umod_t decr_mod(umod_t a, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t m)
decr_mod	src/mod/modarith.h	/^inline umod_t decr_mod(umod_t a, umod_t m)$/;"	f	signature:(umod_t a, umod_t m)
delta2gray	src/comb/delta2gray.cc	/^delta2gray(const unsigned char *d, ulong ldn, ulong *g, ulong g0\/*=0*\/)$/;"	f	signature:(const unsigned char *d, ulong ldn, ulong *g, ulong g0 )
delta2gray	src/comb/delta2gray.h	/^void delta2gray(const unsigned char *d, ulong ldn, ulong *g, ulong g0=0);$/;"	p	signature:(const unsigned char *d, ulong ldn, ulong *g, ulong g0=0)
delta_x	src/ds/bounding-box.h	/^    Type delta_x()  const  { return ax_ - ix_; }  \/\/ width$/;"	f	class:bounding_box	access:public	signature:() const
delta_y	src/ds/bounding-box.h	/^    Type delta_y()  const  { return ay_ - iy_; }  \/\/ height$/;"	f	class:bounding_box	access:public	signature:() const
deltaset2bitset	doc/bits-doc.txt	/^static inline ulong deltaset2bitset(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
deltaset2bitset	src/bits/bitset2set.h	/^static inline ulong deltaset2bitset(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
demo_merge_sort	demo/sort/merge-sort-demo.cc	/^void demo_merge_sort(Type *f, ulong n, Type *tmp=0)$/;"	f	signature:(Type *f, ulong n, Type *tmp=0)
demo_merge_sort4	demo/sort/merge-sort4-demo.cc	/^void demo_merge_sort4(Type *f, ulong n, Type *tmp=0)$/;"	f	signature:(Type *f, ulong n, Type *tmp=0)
demo_merge_sort_rec	demo/sort/merge-sort-demo.cc	/^void demo_merge_sort_rec(Type *f, ulong n, Type *t)$/;"	f	signature:(Type *f, ulong n, Type *t)
demo_merge_sort_rec4	demo/sort/merge-sort4-demo.cc	/^void demo_merge_sort_rec4(Type *f, ulong n, Type *t)$/;"	f	signature:(Type *f, ulong n, Type *t)
demo_selection_sort	demo/sort/selection-sort-demo.cc	/^void demo_selection_sort(char *f, ulong n)$/;"	f	signature:(char *f, ulong n)
demo_swap_blocks	demo/perm/swap-blocks-demo.cc	/^void demo_swap_blocks(char *f, ulong x1, ulong n1, ulong x2, ulong n2)$/;"	f	signature:(char *f, ulong x1, ulong n1, ulong x2, ulong n2)
deque	src/ds/deque.h	/^    deque(const deque&);  \/\/ forbidden$/;"	p	class:deque	access:private	signature:(const deque&)
deque	src/ds/deque.h	/^    explicit deque(ulong n, ulong growq=0)$/;"	f	class:deque	access:public	signature:(ulong n, ulong growq=0)
deque	src/ds/deque.h	/^class deque$/;"	c
deque::deque	src/ds/deque.h	/^    deque(const deque&);  \/\/ forbidden$/;"	p	class:deque	access:private	signature:(const deque&)
deque::deque	src/ds/deque.h	/^    explicit deque(ulong n, ulong growq=0)$/;"	f	class:deque	access:public	signature:(ulong n, ulong growq=0)
deque::extract_first	src/ds/deque.h	/^    ulong extract_first(Type & z)$/;"	f	class:deque	access:public	signature:(Type & z)
deque::extract_last	src/ds/deque.h	/^    ulong extract_last(Type & z)$/;"	f	class:deque	access:public	signature:(Type & z)
deque::fpos_	src/ds/deque.h	/^    ulong fpos_;  \/\/ position of first element in buffer$/;"	m	class:deque	access:public
deque::gq_	src/ds/deque.h	/^    ulong  gq_;  \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:deque	access:public
deque::grow	src/ds/deque.h	/^    void grow()$/;"	f	class:deque	access:private	signature:()
deque::insert_first	src/ds/deque.h	/^    ulong insert_first(const Type &z)$/;"	f	class:deque	access:public	signature:(const Type &z)
deque::insert_last	src/ds/deque.h	/^    ulong insert_last(const Type &z)$/;"	f	class:deque	access:public	signature:(const Type &z)
deque::lpos_	src/ds/deque.h	/^    ulong lpos_;  \/\/ position of last element in buffer plus one$/;"	m	class:deque	access:public
deque::n_	src/ds/deque.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:deque	access:public
deque::num	src/ds/deque.h	/^    ulong num()  const  { return n_; }$/;"	f	class:deque	access:public	signature:() const
deque::operator =	src/ds/deque.h	/^    deque & operator = (const deque&);  \/\/ forbidden$/;"	p	class:deque	access:private	signature:(const deque&)
deque::read	src/ds/deque.h	/^    ulong read(ulong k, Type & z)  const$/;"	f	class:deque	access:public	signature:(ulong k, Type & z) const
deque::read_first	src/ds/deque.h	/^    ulong read_first(Type & z)  const$/;"	f	class:deque	access:public	signature:(Type & z) const
deque::read_last	src/ds/deque.h	/^    ulong read_last(Type & z)  const$/;"	f	class:deque	access:public	signature:(Type & z) const
deque::s_	src/ds/deque.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:deque	access:public
deque::x_	src/ds/deque.h	/^    Type *x_;   \/\/ data (ring buffer)$/;"	m	class:deque	access:public
deque::~deque	src/ds/deque.h	/^    ~deque()  { delete [] x_; }$/;"	f	class:deque	access:public	signature:()
derange_branch_ratio	doc/perm-doc.txt	/^inline double derange_branch_ratio(const double *b, ulong n);$/;"	p	file:	signature:(const double *b, ulong n)
derange_branch_ratio	src/perm/permrand-derange.h	/^inline double derange_branch_ratio(const double *b, ulong n)$/;"	f	signature:(const double *b, ulong n)
descent_number	src/comb/young-tab-rgs.h	/^    ulong descent_number()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
descent_rgs	src/comb/descent-rgs.h	/^    descent_rgs(const descent_rgs&);  \/\/ forbidden$/;"	p	class:descent_rgs	access:private	signature:(const descent_rgs&)
descent_rgs	src/comb/descent-rgs.h	/^    explicit descent_rgs(ulong n)$/;"	f	class:descent_rgs	access:public	signature:(ulong n)
descent_rgs	src/comb/descent-rgs.h	/^class descent_rgs$/;"	c
descent_rgs::OK	src/comb/descent-rgs.h	/^    bool OK()  const$/;"	f	class:descent_rgs	access:public	signature:() const
descent_rgs::a_	src/comb/descent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:descent_rgs	access:public
descent_rgs::data	src/comb/descent-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:descent_rgs	access:public	signature:() const
descent_rgs::descent_rgs	src/comb/descent-rgs.h	/^    descent_rgs(const descent_rgs&);  \/\/ forbidden$/;"	p	class:descent_rgs	access:private	signature:(const descent_rgs&)
descent_rgs::descent_rgs	src/comb/descent-rgs.h	/^    explicit descent_rgs(ulong n)$/;"	f	class:descent_rgs	access:public	signature:(ulong n)
descent_rgs::first	src/comb/descent-rgs.h	/^    void first()$/;"	f	class:descent_rgs	access:public	signature:()
descent_rgs::last	src/comb/descent-rgs.h	/^    void last()$/;"	f	class:descent_rgs	access:public	signature:()
descent_rgs::m_	src/comb/descent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of descents in prefix a[0,1,..,k]$/;"	m	class:descent_rgs	access:public
descent_rgs::n_	src/comb/descent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:descent_rgs	access:public
descent_rgs::next	src/comb/descent-rgs.h	/^    ulong next()$/;"	f	class:descent_rgs	access:public	signature:()
descent_rgs::num_descents	src/comb/descent-rgs.h	/^    ulong num_descents()  const$/;"	f	class:descent_rgs	access:public	signature:() const
descent_rgs::operator =	src/comb/descent-rgs.h	/^    descent_rgs & operator = (const descent_rgs&);  \/\/ forbidden$/;"	p	class:descent_rgs	access:private	signature:(const descent_rgs&)
descent_rgs::prev	src/comb/descent-rgs.h	/^    ulong prev()$/;"	f	class:descent_rgs	access:public	signature:()
descent_rgs::print	src/comb/descent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:descent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
descent_rgs::~descent_rgs	src/comb/descent-rgs.h	/^    ~descent_rgs()$/;"	f	class:descent_rgs	access:public	signature:()
descent_set	src/comb/young-tab-rgs.h	/^    ulong descent_set(ulong *d)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong *d) const
dfz	demo/comb/mset-perm-lex-rec-demo.cc	/^const bool dfz = true;  \/\/ whether to print dots for zeros$/;"	v
dfz	demo/comb/mset-perm-lex-rec2-demo.cc	/^const bool dfz = true;  \/\/ whether to print dots for zeros$/;"	v
diag_add_val	src/matrix/matrix.h	/^    void diag_add_val(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
diag_subtract_val	src/matrix/matrix.h	/^    void diag_subtract_val(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
dif2_walsh_wak_slow	src/walsh/attic/slowwalsh.cc	/^dif2_walsh_wak_slow(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
diff	src/aux1/attic/diff.h	/^inline void diff(Type *f, ulong n, Type (*func)(Type, Type), ulong j=1)$/;"	f	signature:(Type *f, ulong n, Type (*func)(Type, Type), ulong j=1)
diff	src/aux1/attic/diff.h	/^inline void diff(Type *f, ulong n, ulong j=1)$/;"	f	signature:(Type *f, ulong n, ulong j=1)
difflen	demo/graph/graph-perm-pref-rev-demo.cc	/^static inline ulong difflen(const ulong *p, const ulong *p2)$/;"	f	file:	signature:(const ulong *p, const ulong *p2)
difflen	demo/graph/graph-perm-pref-rot-demo.cc	/^static inline ulong difflen(const ulong *p, const ulong *p2)$/;"	f	file:	signature:(const ulong *p, const ulong *p2)
diffsum	doc/aux0-doc.txt	/^static inline void diffsum(Type &a, Type &b);$/;"	p	file:	signature:(Type &a, Type &b)
diffsum	src/aux0/sumdiff.h	/^static inline void diffsum(Type &a, Type &b)$/;"	f	signature:(Type &a, Type &b)
diffsum3	doc/aux0-doc.txt	/^static inline void diffsum3(Type a, Type &b, Type &s);$/;"	p	file:	signature:(Type a, Type &b, Type &s)
diffsum3	src/aux0/sumdiff.h	/^static inline void diffsum3(Type a, Type &b, Type &s)$/;"	f	signature:(Type a, Type &b, Type &s)
diffsum3_r	doc/aux0-doc.txt	/^static inline void diffsum3_r(Type a, Type &b, Type &s);$/;"	p	file:	signature:(Type a, Type &b, Type &s)
diffsum3_r	src/aux0/sumdiff.h	/^static inline void diffsum3_r(Type a, Type &b, Type &s)$/;"	f	signature:(Type a, Type &b, Type &s)
digraph	src/graph/digraph.h	/^    digraph(const digraph&);  \/\/ forbidden$/;"	p	class:digraph	access:private	signature:(const digraph&)
digraph	src/graph/digraph.h	/^    explicit digraph(ulong ng, ulong ne, ulong *&ep, ulong *&e, bool vnq=false)$/;"	f	class:digraph	access:public	signature:(ulong ng, ulong ne, ulong *&ep, ulong *&e, bool vnq=false)
digraph	src/graph/digraph.h	/^class digraph$/;"	c
digraph::OK	src/graph/digraph.h	/^    bool OK()  const  { return (0==test()); }$/;"	f	class:digraph	access:public	signature:() const
digraph::digraph	src/graph/digraph.h	/^    digraph(const digraph&);  \/\/ forbidden$/;"	p	class:digraph	access:private	signature:(const digraph&)
digraph::digraph	src/graph/digraph.h	/^    explicit digraph(ulong ng, ulong ne, ulong *&ep, ulong *&e, bool vnq=false)$/;"	f	class:digraph	access:public	signature:(ulong ng, ulong ne, ulong *&ep, ulong *&e, bool vnq=false)
digraph::e_	src/graph/digraph.h	/^    ulong *e_;   \/\/ outgoing connections (Edges)$/;"	m	class:digraph	access:public
digraph::edge_idx	src/graph/digraph.cc	/^digraph::edge_idx(ulong p, ulong pn)  const$/;"	f	class:digraph	signature:(ulong p, ulong pn) const
digraph::edge_idx	src/graph/digraph.h	/^    ulong edge_idx(ulong p, ulong pn)  const;$/;"	p	class:digraph	access:public	signature:(ulong p, ulong pn) const
digraph::ep_	src/graph/digraph.h	/^    ulong *ep_;  \/\/ e[ep[k]], ..., e[ep[k+1]-1]: outgoing connections of node k$/;"	m	class:digraph	access:public
digraph::get_edge_idx	src/graph/digraph.h	/^    void get_edge_idx(ulong p, ulong &fe, ulong &en)  const$/;"	f	class:digraph	access:public	signature:(ulong p, ulong &fe, ulong &en) const
digraph::has_edge	src/graph/digraph.h	/^    bool  has_edge(ulong p, ulong pn)  const  \/\/ Return whether edge from p to pn exists$/;"	f	class:digraph	access:public	signature:(ulong p, ulong pn) const
digraph::is_edge_sorted	src/graph/digraph.cc	/^digraph::is_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &)) const
digraph::is_edge_sorted	src/graph/digraph.h	/^    bool is_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const;$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &)) const
digraph::max_edges	src/graph/digraph.cc	/^digraph::max_edges()  const$/;"	f	class:digraph	signature:() const
digraph::max_edges	src/graph/digraph.h	/^    ulong max_edges()  const;$/;"	p	class:digraph	access:public	signature:() const
digraph::ng_	src/graph/digraph.h	/^    ulong ng_;   \/\/ number of Nodes of Graph$/;"	m	class:digraph	access:public
digraph::num_edges	src/graph/digraph.cc	/^digraph::num_edges(ulong p)  const$/;"	f	class:digraph	signature:(ulong p) const
digraph::num_edges	src/graph/digraph.h	/^    ulong num_edges()  const  { return ep_[num_nodes()]; }$/;"	f	class:digraph	access:public	signature:() const
digraph::num_edges	src/graph/digraph.h	/^    ulong num_edges(ulong p)  const;$/;"	p	class:digraph	access:public	signature:(ulong p) const
digraph::num_nodes	src/graph/digraph.h	/^    ulong num_nodes()  const  { return ng_; }$/;"	f	class:digraph	access:public	signature:() const
digraph::operator =	src/graph/digraph.h	/^    digraph & operator = (const digraph&);  \/\/ forbidden$/;"	p	class:digraph	access:private	signature:(const digraph&)
digraph::print	src/graph/digraph.cc	/^digraph::print(const char *bla\/*=0*\/)  const$/;"	f	class:digraph	signature:(const char *bla ) const
digraph::print	src/graph/digraph.h	/^    void print(const char *bla=0)  const;$/;"	p	class:digraph	access:public	signature:(const char *bla=0) const
digraph::print_horiz	src/graph/digraph.cc	/^digraph::print_horiz(const char *bla\/*=0*\/)  const$/;"	f	class:digraph	signature:(const char *bla ) const
digraph::print_horiz	src/graph/digraph.h	/^    void print_horiz(const char *bla=0)  const;$/;"	p	class:digraph	access:public	signature:(const char *bla=0) const
digraph::randomize_edge_order	src/graph/digraph.cc	/^digraph::randomize_edge_order(ulong p0, ulong p1\/*=0*\/)$/;"	f	class:digraph	signature:(ulong p0, ulong p1 )
digraph::randomize_edge_order	src/graph/digraph.h	/^    void randomize_edge_order()  { randomize_edge_order(0, ng_-1); }$/;"	f	class:digraph	access:public	signature:()
digraph::randomize_edge_order	src/graph/digraph.h	/^    void randomize_edge_order(ulong p0, ulong p1=0);$/;"	p	class:digraph	access:public	signature:(ulong p0, ulong p1=0)
digraph::reverse_edge_order	src/graph/digraph.cc	/^digraph::reverse_edge_order(ulong p0, ulong p1\/*=0*\/)$/;"	f	class:digraph	signature:(ulong p0, ulong p1 )
digraph::reverse_edge_order	src/graph/digraph.h	/^    void reverse_edge_order()  { reverse_edge_order(0, ng_-1); }$/;"	f	class:digraph	access:public	signature:()
digraph::reverse_edge_order	src/graph/digraph.h	/^    void reverse_edge_order(ulong p0, ulong p1=0);$/;"	p	class:digraph	access:public	signature:(ulong p0, ulong p1=0)
digraph::sort_edges	src/graph/digraph.cc	/^digraph::sort_edges(int (*cmp)(const ulong &, const ulong &))$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &))
digraph::sort_edges	src/graph/digraph.cc	/^digraph::sort_edges(int rq\/*=1*\/)$/;"	f	class:digraph	signature:(int rq )
digraph::sort_edges	src/graph/digraph.h	/^    void  sort_edges(int (*cmp)(const ulong &, const ulong &));$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &))
digraph::sort_edges	src/graph/digraph.h	/^    void  sort_edges(int rq=1);$/;"	p	class:digraph	access:public	signature:(int rq=1)
digraph::test	src/graph/digraph.cc	/^digraph::test()  const$/;"	f	class:digraph	signature:() const
digraph::test	src/graph/digraph.h	/^    ulong test()  const;$/;"	p	class:digraph	access:public	signature:() const
digraph::test_edge_sorted	src/graph/digraph.cc	/^digraph::test_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &)) const
digraph::test_edge_sorted	src/graph/digraph.h	/^    ulong test_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const;$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &)) const
digraph::vn_	src/graph/digraph.h	/^    ulong *vn_;  \/\/ optional: sorted values for nodes$/;"	m	class:digraph	access:public
digraph::~digraph	src/graph/digraph.h	/^    ~digraph()$/;"	f	class:digraph	access:public	signature:()
digraph_paths	src/graph/digraph-paths.cc	/^digraph_paths::digraph_paths(digraph &g)$/;"	f	class:digraph_paths	signature:(digraph &g)
digraph_paths	src/graph/digraph-paths.h	/^    digraph_paths(const digraph_paths&);  \/\/ forbidden$/;"	p	class:digraph_paths	access:private	signature:(const digraph_paths&)
digraph_paths	src/graph/digraph-paths.h	/^    explicit digraph_paths(digraph &g);$/;"	p	class:digraph_paths	access:public	signature:(digraph &g)
digraph_paths	src/graph/digraph-paths.h	/^class digraph_paths$/;"	c
digraph_paths::all_cond_paths	src/graph/digraph-paths.h	/^    ulong all_cond_paths(ulong (*pfunc)(const digraph_paths &),$/;"	p	class:digraph_paths	access:public	signature:(ulong (pfunc)const digraph_paths &), bool (*cfunc)(digraph_paths &, ulong), ulong ns=0, ulong p=0, ulong maxnp=0)
digraph_paths::all_cond_paths	src/graph/search-digraph-cond.cc	/^digraph_paths::all_cond_paths(ulong (*pfunc)(const digraph_paths &),$/;"	f	class:digraph_paths	signature:(ulong (pfunc)const digraph_paths &), bool (*cfunc)(digraph_paths &, ulong), ulong ns , ulong p , ulong maxnp )
digraph_paths::all_paths	src/graph/digraph-paths.h	/^    ulong all_paths(ulong (*pfunc)(const digraph_paths &),$/;"	p	class:digraph_paths	access:public	signature:(ulong (pfunc)const digraph_paths &), ulong ns=0, ulong p=0, ulong maxnp=0)
digraph_paths::all_paths	src/graph/search-digraph.cc	/^digraph_paths::all_paths(ulong (*pfunc)(const digraph_paths &),$/;"	f	class:digraph_paths	signature:(ulong (pfunc)const digraph_paths &), ulong ns , ulong p , ulong maxnp )
digraph_paths::cct_	src/graph/digraph-paths.h	/^    ulong cct_;  \/\/ count Cycles$/;"	m	class:digraph_paths	access:public
digraph_paths::cfunc_	src/graph/digraph-paths.h	/^    bool (*cfunc_)(digraph_paths &, ulong ns);  \/\/ can set pfdone_$/;"	m	class:digraph_paths	access:public
digraph_paths::cq_	src/graph/digraph-paths.h	/^    bool cq_;  \/\/ whether current path is a cycle$/;"	m	class:digraph_paths	access:public
digraph_paths::digraph_paths	src/graph/digraph-paths.cc	/^digraph_paths::digraph_paths(digraph &g)$/;"	f	class:digraph_paths	signature:(digraph &g)
digraph_paths::digraph_paths	src/graph/digraph-paths.h	/^    digraph_paths(const digraph_paths&);  \/\/ forbidden$/;"	p	class:digraph_paths	access:private	signature:(const digraph_paths&)
digraph_paths::digraph_paths	src/graph/digraph-paths.h	/^    explicit digraph_paths(digraph &g);$/;"	p	class:digraph_paths	access:public	signature:(digraph &g)
digraph_paths::g_	src/graph/digraph-paths.h	/^    digraph &g_;  \/\/ the graph$/;"	m	class:digraph_paths	access:public
digraph_paths::graph	src/graph/digraph-paths.h	/^    const digraph & graph()  const  { return g_; }$/;"	f	class:digraph_paths	access:public	signature:() const
digraph_paths::init	src/graph/digraph-paths.cc	/^digraph_paths::init()$/;"	f	class:digraph_paths	signature:()
digraph_paths::init	src/graph/digraph-paths.h	/^    void init();$/;"	p	class:digraph_paths	access:public	signature:()
digraph_paths::mark	src/graph/digraph-paths.cc	/^digraph_paths::mark(ulong p, ulong &ns)$/;"	f	class:digraph_paths	signature:(ulong p, ulong &ns)
digraph_paths::mark	src/graph/digraph-paths.h	/^    bool mark(ulong p, ulong &ns);$/;"	p	class:digraph_paths	access:public	signature:(ulong p, ulong &ns)
digraph_paths::maxnp_	src/graph/digraph-paths.h	/^    ulong maxnp_;  \/\/ stop after maxnp times that pfunc returned one (0==forever)$/;"	m	class:digraph_paths	access:public
digraph_paths::next_cond_path	src/graph/digraph-paths.h	/^    void next_cond_path(ulong ns, ulong p);  \/\/ called by all_cond_paths()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
digraph_paths::next_cond_path	src/graph/search-digraph-cond.cc	/^digraph_paths::next_cond_path(ulong ns, ulong p)$/;"	f	class:digraph_paths	signature:(ulong ns, ulong p)
digraph_paths::next_lucky	src/graph/digraph-paths.h	/^    void next_lucky(ulong ns, ulong p);  \/\/ called by try_lucky_path()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
digraph_paths::next_path	src/graph/digraph-paths.h	/^    void next_path(ulong ns, ulong p);  \/\/ called by all_paths()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
digraph_paths::next_path	src/graph/search-digraph.cc	/^digraph_paths::next_path(ulong ns, ulong p)$/;"	f	class:digraph_paths	signature:(ulong ns, ulong p)
digraph_paths::ng_	src/graph/digraph-paths.h	/^    ulong ng_;  \/\/ == g_.ng_$/;"	m	class:digraph_paths	access:public
digraph_paths::ngbits_	src/graph/digraph-paths.h	/^    ulong ngbits_;  \/\/ number of bits in ng_, used for printing$/;"	m	class:digraph_paths	access:public
digraph_paths::operator =	src/graph/digraph-paths.h	/^    digraph_paths & operator = (const digraph_paths&);  \/\/ forbidden$/;"	p	class:digraph_paths	access:private	signature:(const digraph_paths&)
digraph_paths::pany_	src/graph/digraph-paths.h	/^    bool pany_;    \/\/ whether to print anything (set automatically)$/;"	m	class:digraph_paths	access:public
digraph_paths::path_is_cycle	src/graph/digraph-paths.cc	/^digraph_paths::path_is_cycle()  const$/;"	f	class:digraph_paths	signature:() const
digraph_paths::path_is_cycle	src/graph/digraph-paths.h	/^    bool path_is_cycle()  const;$/;"	p	class:digraph_paths	access:public	signature:() const
digraph_paths::pct_	src/graph/digraph-paths.h	/^    ulong pct_;  \/\/ count Paths$/;"	m	class:digraph_paths	access:public
digraph_paths::pfct_	src/graph/digraph-paths.h	/^    ulong pfct_;  \/\/ count Paths where pfunc() returns 1$/;"	m	class:digraph_paths	access:public
digraph_paths::pfdone_	src/graph/digraph-paths.h	/^    bool pfdone_;  \/\/ if set (by pfunc()) then search is stopped$/;"	m	class:digraph_paths	access:public
digraph_paths::pfunc_	src/graph/digraph-paths.h	/^    ulong (*pfunc_)(const digraph_paths &);$/;"	m	class:digraph_paths	access:public
digraph_paths::print_bin_horiz_path	src/graph/digraph-paths.h	/^    void print_bin_horiz_path()  const$/;"	f	class:digraph_paths	access:public	signature:() const
digraph_paths::print_bin_path	src/graph/digraph-paths.h	/^    void print_bin_path() const$/;"	f	class:digraph_paths	access:public	signature:() const
digraph_paths::print_path	src/graph/digraph-paths.h	/^    void print_path() const$/;"	f	class:digraph_paths	access:public	signature:() const
digraph_paths::print_turns	src/graph/digraph-paths.cc	/^digraph_paths::print_turns(bool shortq\/*=true*\/) const$/;"	f	class:digraph_paths	signature:(bool shortq ) const
digraph_paths::print_turns	src/graph/digraph-paths.h	/^    void print_turns(bool shortq=true) const;$/;"	p	class:digraph_paths	access:public	signature:(bool shortq=true) const
digraph_paths::qq_	src/graph/digraph-paths.h	/^    ulong *qq_;  \/\/ qq[k] == whether node k has been visited yet$/;"	m	class:digraph_paths	access:public
digraph_paths::rv_	src/graph/digraph-paths.h	/^    ulong *rv_;  \/\/ Record of Visits: rv[k] == node visited at step k$/;"	m	class:digraph_paths	access:public
digraph_paths::test_lucky_path	src/graph/digraph-paths.cc	/^digraph_paths::test_lucky_path()  const$/;"	f	class:digraph_paths	signature:() const
digraph_paths::test_lucky_path	src/graph/digraph-paths.h	/^    ulong test_lucky_path()  const;$/;"	p	class:digraph_paths	access:public	signature:() const
digraph_paths::try_lucky_path	src/graph/digraph-paths.h	/^    ulong try_lucky_path(ulong ns=0, ulong p=0);$/;"	p	class:digraph_paths	access:public	signature:(ulong ns=0, ulong p=0)
digraph_paths::try_lucky_path	src/graph/search-digraph-trylucky.cc	/^digraph_paths::try_lucky_path(ulong ns\/*=0*\/, ulong p\/*=0*\/)$/;"	f	class:digraph_paths	signature:(ulong ns , ulong p )
digraph_paths::~digraph_paths	src/graph/digraph-paths.cc	/^digraph_paths::~digraph_paths()$/;"	f	class:digraph_paths	signature:()
digraph_paths::~digraph_paths	src/graph/digraph-paths.h	/^    ~digraph_paths();$/;"	p	class:digraph_paths	access:public	signature:()
dim	src/comb/wfl-hilbert.h	/^    ulong dim; \/\/ dimension d of walk: d >= 2, constant along branch$/;"	m	class:wfl_hilbert	access:public
dimension	doc/wfl-hilbert-doc.txt	/^  d equals the dimension; l indexes the level of a cell;$/;"	v
dir	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong dir[32];  \/\/ directions in recursion$/;"	v
dir	src/comb/binary-sl-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:binary_sl_gray	access:public	signature:() const
dir	src/comb/mixedradix-endo-gray.h	/^    int dir()  const  { return dm_; }  \/\/ direction of last change$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
dir	src/comb/mixedradix-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:mixedradix_gray	access:public	signature:() const
dir	src/comb/mixedradix-gray2.h	/^    int dir()  const  { return dm_; }$/;"	f	class:mixedradix_gray2	access:public	signature:() const
dir	src/comb/mixedradix-naf-gray.h	/^    int dir()  const  { return dm_; }  \/\/ direction of last change$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
dir	src/comb/mixedradix-sl-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
dit2_butterfly	demo/fft/butterfly-texpic-demo.cc	/^void dit2_butterfly(ulong ldn, bool pm)$/;"	f	signature:(ulong ldn, bool pm)
dit2_fht_localized	src/fht/attic/fhtdit2loc.cc	/^dit2_fht_localized(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
dit2_walsh_wak_slow	src/walsh/attic/slowwalsh.cc	/^dit2_walsh_wak_slow(double *f, ulong ldn)  \/\/ nonlocal ==> SLOW!$/;"	f	signature:(double *f, ulong ldn)
divide	src/aux2/attic/arith2d.h	/^inline void divide(Type **f, ulong nr, ulong nc, const Type *const*g)$/;"	f	signature:(Type **f, ulong nr, ulong nc, const Type *const*g)
divide_out_factor	doc/mod-doc.txt	/^ulong divide_out_factor(umod_t &n, umod_t v);$/;"	p	file:	signature:(umod_t &n, umod_t v)
divide_out_factor	src/mod/factor.cc	/^divide_out_factor(umod_t &n, umod_t v)$/;"	f	signature:(umod_t &n, umod_t v)
divide_out_factor	src/mod/factor.h	/^ulong divide_out_factor(umod_t &n, umod_t v);$/;"	p	signature:(umod_t &n, umod_t v)
divisors	src/mod/divisors.h	/^    divisors(const divisors&);  \/\/ forbidden$/;"	p	class:divisors	access:private	signature:(const divisors&)
divisors	src/mod/divisors.h	/^    explicit divisors(const factorization &F)$/;"	f	class:divisors	access:public	signature:(const factorization &F)
divisors	src/mod/divisors.h	/^    explicit divisors(umod_t x, const umod_t *f=0)$/;"	f	class:divisors	access:public	signature:(umod_t x, const umod_t *f=0)
divisors	src/mod/divisors.h	/^class divisors$/;"	c
divisors::ctor_core	src/mod/divisors.h	/^    void ctor_core(const factorization &F)$/;"	f	class:divisors	access:private	signature:(const factorization &F)
divisors::divisors	src/mod/divisors.h	/^    divisors(const divisors&);  \/\/ forbidden$/;"	p	class:divisors	access:private	signature:(const divisors&)
divisors::divisors	src/mod/divisors.h	/^    explicit divisors(const factorization &F)$/;"	f	class:divisors	access:public	signature:(const factorization &F)
divisors::divisors	src/mod/divisors.h	/^    explicit divisors(umod_t x, const umod_t *f=0)$/;"	f	class:divisors	access:public	signature:(umod_t x, const umod_t *f=0)
divisors::first	src/mod/divisors.h	/^    umod_t first()$/;"	f	class:divisors	access:public	signature:()
divisors::mr_	src/mod/divisors.h	/^    mixedradix_lex *mr_;  \/\/ exponents + 1  as radices$/;"	m	class:divisors	access:public
divisors::n_	src/mod/divisors.h	/^    ulong n_;    \/\/ number of prime factors$/;"	m	class:divisors	access:public
divisors::next	src/mod/divisors.h	/^    umod_t next()  \/\/ current is last?$/;"	f	class:divisors	access:public	signature:()
divisors::operator =	src/mod/divisors.h	/^    divisors & operator = (const divisors&);  \/\/ forbidden$/;"	p	class:divisors	access:private	signature:(const divisors&)
divisors::p_	src/mod/divisors.h	/^    umod_t *p_;   \/\/ primes$/;"	m	class:divisors	access:public
divisors::t_	src/mod/divisors.h	/^    umod_t *t_;   \/\/ aux (products)$/;"	m	class:divisors	access:public
divisors::~divisors	src/mod/divisors.h	/^    ~divisors()$/;"	f	class:divisors	access:public	signature:()
dlt	demo/comb/no111-gray-demo.cc	/^long *dlt;  \/\/ transitions$/;"	v
dlt	demo/comb/no1111-gray-demo.cc	/^long *dlt;  \/\/ transitions$/;"	v
dlt	demo/comb/no1xy1-gray-demo.cc	/^long *dlt;  \/\/ transitions$/;"	v
dm_	src/comb/binary-sl-gray.h	/^    int dm_;    \/\/ direction of last change; returned by dir()$/;"	m	class:binary_sl_gray	access:public
dm_	src/comb/mixedradix-endo-gray.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_endo_gray	access:public
dm_	src/comb/mixedradix-gray.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_gray	access:public
dm_	src/comb/mixedradix-gray2.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_gray2	access:public
dm_	src/comb/mixedradix-naf-gray.h	/^    int dm_;    \/\/ direction of last change$/;"	m	class:mixedradix_naf_gray	access:public
dm_	src/comb/mixedradix-sl-gray.h	/^    int dm_;     \/\/ direction of last change; returned by dir()$/;"	m	class:mixedradix_sl_gray	access:public
do_init_perfpow	src/mod/perfpow.cc	/^static init_perfpow do_init_perfpow(small_perfpow_limit);$/;"	p	file:	signature:(small_perfpow_limit)
do_init_small_primes	src/mod/primes.cc	/^static init_small_primes do_init_small_primes(small_prime_limit);$/;"	p	file:	signature:(small_prime_limit)
do_some_tests	test/test-bits.cc	/^do_some_tests(ulong v)$/;"	f	signature:(ulong v)
do_subst	src/comb/attic/stringsubst.h	/^    void do_subst(ulong n, const char *rule)$/;"	f	class:string_subst	access:private	signature:(ulong n, const char *rule)
do_the_show	demo/bits/bitdemos.h	/^void do_the_show(ulong v);$/;"	p	signature:(ulong v)
do_the_show	demo/bits/bithilo-demo.cc	/^do_the_show(ulong v)$/;"	f	signature:(ulong v)
do_the_show	demo/bits/bitmisc-demo.cc	/^do_the_show(ulong v)$/;"	f	signature:(ulong v)
do_the_show	demo/bits/bitmisc2-demo.cc	/^do_the_show(ulong v)$/;"	f	signature:(ulong v)
doit	demo/comb/conference-quadres-demo.cc	/^doit(ulong q)$/;"	f	signature:(ulong q)
doit	demo/comb/necklaces-via-gray-leaders-demo.cc	/^void doit(ulong ldn, bool cq)$/;"	f	signature:(ulong ldn, bool cq)
doit	demo/gf2n/gf2n-normal-demo.cc	/^doit(ulong n)$/;"	f	signature:(ulong n)
doit	demo/graph/lyndon-gray-demo.cc	/^doit(ulong n, ulong wh, ulong ncmp)$/;"	f	signature:(ulong n, ulong wh, ulong ncmp)
doit	demo/perm/permgray-leaders-demo.cc	/^void doit(ulong ldn, bool cq, bool miq)$/;"	f	signature:(ulong ldn, bool cq, bool miq)
done	src/comb/subset-debruijn.h	/^    int done()  const;  \/\/ forbidden (exists in base class)$/;"	p	class:subset_debruijn	access:private	signature:() const
dp_	src/aux0/attic/funcemu.h	/^    ulong dp_;  \/\/ Data stack Pointer$/;"	m	class:funcemu	access:public
dp_	src/ds/attic/coroutine.h	/^    ulong dp_;  \/\/ Data stack Pointer$/;"	m	class:coroutine	access:public
dq	demo/graph/graph-mtl-demo.cc	/^static bool dq;  \/\/  whther to only print delta seq$/;"	v	file:
dr0_	src/comb/catalan.h	/^    int dr0_;   \/\/ dr0: starting direction in each recursive step:$/;"	m	class:catalan	access:public
dr0_	src/comb/setpart.h	/^    int dr0_;   \/\/ dr0: starting direction in each recursive step:$/;"	m	class:setpart	access:public
dr_	src/comb/dyck-gray.h	/^    ulong *dr_;  \/\/ aux: direction            (dir[])$/;"	m	class:dyck_gray	access:public
dst	doc/dctdst-doc.txt	/^void dst(double *f, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *f, ulong ldn, double *tmp )
dst	src/dctdst/dctdst.h	/^void dst(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
dst	src/dctdst/dst.cc	/^dst(double *f, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *f, ulong ldn, double *tmp )
dst_basis	doc/dctdst-doc.txt	/^void dst_basis(double *f, ulong n, ulong k);$/;"	p	file:	signature:(double *f, ulong n, ulong k)
dst_basis	src/dctdst/dctdst.h	/^void dst_basis(double *f, ulong n, ulong k);$/;"	p	signature:(double *f, ulong n, ulong k)
dst_basis	src/dctdst/dst.cc	/^dst_basis(double *f, ulong n, ulong k)$/;"	f	signature:(double *f, ulong n, ulong k)
dsth	doc/dctdst-doc.txt	/^void dsth(double *x, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *x, ulong ldn, double *tmp )
dsth	src/dctdst/dctdst.h	/^void dsth(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
dsth	src/dctdst/dsth.cc	/^dsth(double *x, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *x, ulong ldn, double *tmp )
dsth_basis	doc/dctdst-doc.txt	/^void dsth_basis(double *f, ulong n, ulong k);$/;"	p	file:	signature:(double *f, ulong n, ulong k)
dsth_basis	src/dctdst/dctdst.h	/^void dsth_basis(double *f, ulong n, ulong k);$/;"	p	signature:(double *f, ulong n, ulong k)
dsth_basis	src/dctdst/dsth.cc	/^dsth_basis(double *f, ulong n, ulong k)$/;"	f	signature:(double *f, ulong n, ulong k)
dt_	src/bits/bit-sl-gray.h	/^    bool dt_;   \/\/ direction track tries to move in: true== try move right$/;"	m	class:bit_sl_gray	access:public
dt_	src/comb/binary-sl-gray.h	/^    ulong dt_;  \/\/ aux: direction in which track tries to move$/;"	m	class:binary_sl_gray	access:public
dtor_core	src/comb/string-subst.h	/^    void dtor_core()$/;"	f	class:string_subst	access:protected	signature:()
dump	src/ds/bitarray.cc	/^bitarray::dump()  const$/;"	f	class:bitarray	signature:() const
dump	src/ds/bitarray.h	/^    void dump()  const;$/;"	p	class:bitarray	access:public	signature:() const
dump_bits	src/ds/bitarray.cc	/^bitarray::dump_bits(ulong prettyq\/*=0*\/)  const$/;"	f	class:bitarray	signature:(ulong prettyq ) const
dump_bits	src/ds/bitarray.h	/^    void dump_bits(ulong prettyq=0)  const;$/;"	p	class:bitarray	access:public	signature:(ulong prettyq=0) const
durfee_n	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
durfee_n	src/comb/partition-asc-2rep.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc_2rep	access:public	signature:() const
durfee_n	src/comb/partition-asc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc	access:public	signature:() const
durfee_n	src/comb/partition-desc-bb.h	/^    ulong durfee_n()  const$/;"	f	class:partition_desc_bb	access:public	signature:() const
durfee_n	src/comb/partition-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_desc	access:public	signature:() const
durfee_n	src/comb/partition-odd-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_odd_desc	access:public	signature:() const
durfee_n	src/comb/partition-s-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_s_desc	access:public	signature:() const
dv_	src/comb/binary-necklace.h	/^    ulong *dv_;  \/\/ delta sequence of divisors of n$/;"	m	class:binary_necklace	access:public
dv_	src/comb/necklace.h	/^    ulong *dv_;  \/\/ delta sequence of divisors of n$/;"	m	class:necklace	access:public
dyadic_auto_convolution	doc/walsh-doc.txt	/^void dyadic_auto_convolution(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
dyadic_auto_convolution	src/walsh/dyadiccnvl.h	/^void dyadic_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
dyadic_auto_convolution0	src/walsh/attic/walsh0.cc	/^dyadic_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
dyadic_convolution	doc/walsh-doc.txt	/^void dyadic_convolution(Type * restrict f, Type * restrict g, ulong ldn);$/;"	p	file:	signature:(Type * restrict f, Type * restrict g, ulong ldn)
dyadic_convolution	src/walsh/dyadiccnvl.h	/^void dyadic_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
dyadic_convolution0	src/walsh/attic/walsh0.cc	/^dyadic_convolution0(double *f, double *g, ulong ldn)$/;"	f	signature:(double *f, double *g, ulong ldn)
dyck_gray	src/comb/dyck-gray.h	/^    dyck_gray(const dyck_gray&);  \/\/ forbidden$/;"	p	class:dyck_gray	access:private	signature:(const dyck_gray&)
dyck_gray	src/comb/dyck-gray.h	/^    explicit dyck_gray(ulong n, ulong k)$/;"	f	class:dyck_gray	access:public	signature:(ulong n, ulong k)
dyck_gray	src/comb/dyck-gray.h	/^class dyck_gray$/;"	c
dyck_gray2	src/comb/dyck-gray2.h	/^    dyck_gray2(const dyck_gray2&);  \/\/ forbidden$/;"	p	class:dyck_gray2	access:private	signature:(const dyck_gray2&)
dyck_gray2	src/comb/dyck-gray2.h	/^    explicit dyck_gray2(ulong tk, ulong tm)$/;"	f	class:dyck_gray2	access:public	signature:(ulong tk, ulong tm)
dyck_gray2	src/comb/dyck-gray2.h	/^class dyck_gray2$/;"	c
dyck_gray2::c_	src/comb/dyck-gray2.h	/^    ulong *c_;   \/\/ positions of ones (1-based)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::data	src/comb/dyck-gray2.h	/^    const ulong *data()  const  { return c_+1; }  \/\/ zero-based array$/;"	f	class:dyck_gray2	access:public	signature:() const
dyck_gray2::dyck_gray2	src/comb/dyck-gray2.h	/^    dyck_gray2(const dyck_gray2&);  \/\/ forbidden$/;"	p	class:dyck_gray2	access:private	signature:(const dyck_gray2&)
dyck_gray2::dyck_gray2	src/comb/dyck-gray2.h	/^    explicit dyck_gray2(ulong tk, ulong tm)$/;"	f	class:dyck_gray2	access:public	signature:(ulong tk, ulong tm)
dyck_gray2::e_	src/comb/dyck-gray2.h	/^    ulong *e_;   \/\/ Ehrlich array (focus pointers)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::first	src/comb/dyck-gray2.h	/^    void first()$/;"	f	class:dyck_gray2	access:public	signature:()
dyck_gray2::k	src/comb/dyck-gray2.h	/^    ulong m, k;  \/\/ m ones (and m*(k-1) zeros)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::m	src/comb/dyck-gray2.h	/^    ulong m, k;  \/\/ m ones (and m*(k-1) zeros)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::next	src/comb/dyck-gray2.h	/^    ulong next()$/;"	f	class:dyck_gray2	access:public	signature:()
dyck_gray2::operator =	src/comb/dyck-gray2.h	/^    dyck_gray2 & operator = (const dyck_gray2&);  \/\/ forbidden$/;"	p	class:dyck_gray2	access:private	signature:(const dyck_gray2&)
dyck_gray2::p_	src/comb/dyck-gray2.h	/^    bool *p_;    \/\/ parity (1-based)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::ptt	src/comb/dyck-gray2.h	/^    bool ptt;    \/\/ Parity of Total number of Tories (variable 'Odd' in paper)$/;"	m	class:dyck_gray2	access:public
dyck_gray2::s_	src/comb/dyck-gray2.h	/^    ulong *s_;     \/\/ directions: whether last\/first (==0) or$/;"	m	class:dyck_gray2	access:public
dyck_gray2::~dyck_gray2	src/comb/dyck-gray2.h	/^    ~dyck_gray2()$/;"	f	class:dyck_gray2	access:public	signature:()
dyck_gray::data	src/comb/dyck-gray.h	/^    const ulong * data()  const  { return sq_+1; }$/;"	f	class:dyck_gray	access:public	signature:() const
dyck_gray::dr_	src/comb/dyck-gray.h	/^    ulong *dr_;  \/\/ aux: direction            (dir[])$/;"	m	class:dyck_gray	access:public
dyck_gray::dyck_gray	src/comb/dyck-gray.h	/^    dyck_gray(const dyck_gray&);  \/\/ forbidden$/;"	p	class:dyck_gray	access:private	signature:(const dyck_gray&)
dyck_gray::dyck_gray	src/comb/dyck-gray.h	/^    explicit dyck_gray(ulong n, ulong k)$/;"	f	class:dyck_gray	access:public	signature:(ulong n, ulong k)
dyck_gray::first	src/comb/dyck-gray.h	/^    void first(ulong k=0)$/;"	f	class:dyck_gray	access:public	signature:(ulong k=0)
dyck_gray::k_	src/comb/dyck-gray.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_gray	access:public
dyck_gray::mx_	src/comb/dyck-gray.h	/^    ulong *mx_;  \/\/ aux: max position         (max[])$/;"	m	class:dyck_gray	access:public
dyck_gray::n_	src/comb/dyck-gray.h	/^    ulong n_;    \/\/ n (internal) nodes$/;"	m	class:dyck_gray	access:public
dyck_gray::next	src/comb/dyck-gray.h	/^    ulong next()$/;"	f	class:dyck_gray	access:public	signature:()
dyck_gray::np_	src/comb/dyck-gray.h	/^    ulong *np_;  \/\/ aux: next position        (nextPos[])$/;"	m	class:dyck_gray	access:public
dyck_gray::operator =	src/comb/dyck-gray.h	/^    dyck_gray & operator = (const dyck_gray&);  \/\/ forbidden$/;"	p	class:dyck_gray	access:private	signature:(const dyck_gray&)
dyck_gray::sq_	src/comb/dyck-gray.h	/^    ulong *sq_;  \/\/ sequence of bit positions (seq[])  elements \\in {1,2,...,n}$/;"	m	class:dyck_gray	access:public
dyck_gray::~dyck_gray	src/comb/dyck-gray.h	/^    ~dyck_gray()$/;"	f	class:dyck_gray	access:public	signature:()
dyck_pref	src/comb/dyck-pref.h	/^    dyck_pref(const dyck_pref&);  \/\/ forbidden$/;"	p	class:dyck_pref	access:private	signature:(const dyck_pref&)
dyck_pref	src/comb/dyck-pref.h	/^    explicit dyck_pref(ulong n, ulong k)$/;"	f	class:dyck_pref	access:public	signature:(ulong n, ulong k)
dyck_pref	src/comb/dyck-pref.h	/^class dyck_pref$/;"	c
dyck_pref2	src/comb/dyck-pref2.h	/^    dyck_pref2(const dyck_pref2&);  \/\/ forbidden$/;"	p	class:dyck_pref2	access:private	signature:(const dyck_pref2&)
dyck_pref2	src/comb/dyck-pref2.h	/^    explicit dyck_pref2(ulong n, ulong k)$/;"	f	class:dyck_pref2	access:public	signature:(ulong n, ulong k)
dyck_pref2	src/comb/dyck-pref2.h	/^class dyck_pref2$/;"	c
dyck_pref2::A_	src/comb/dyck-pref2.h	/^    ulong *A_;   \/\/ aux., length n-2$/;"	m	class:dyck_pref2	access:public
dyck_pref2::B_	src/comb/dyck-pref2.h	/^    ulong *B_;   \/\/ Dyck word as delta set (length=k*n=len); one-based array!$/;"	m	class:dyck_pref2	access:public
dyck_pref2::data	src/comb/dyck-pref2.h	/^    const ulong * data()  const  { return B_+1; }$/;"	f	class:dyck_pref2	access:public	signature:() const
dyck_pref2::dyck_pref2	src/comb/dyck-pref2.h	/^    dyck_pref2(const dyck_pref2&);  \/\/ forbidden$/;"	p	class:dyck_pref2	access:private	signature:(const dyck_pref2&)
dyck_pref2::dyck_pref2	src/comb/dyck-pref2.h	/^    explicit dyck_pref2(ulong n, ulong k)$/;"	f	class:dyck_pref2	access:public	signature:(ulong n, ulong k)
dyck_pref2::first	src/comb/dyck-pref2.h	/^    void first()$/;"	f	class:dyck_pref2	access:public	signature:()
dyck_pref2::k_	src/comb/dyck-pref2.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_pref2	access:public
dyck_pref2::len_	src/comb/dyck-pref2.h	/^    ulong len_;  \/\/ == k*n (length of Dyck words)$/;"	m	class:dyck_pref2	access:public
dyck_pref2::n1k_	src/comb/dyck-pref2.h	/^    ulong n1k_;  \/\/ ==k*(n-1), aux$/;"	m	class:dyck_pref2	access:public
dyck_pref2::n_	src/comb/dyck-pref2.h	/^    ulong n_;    \/\/ number of ones (variable t in the paper)$/;"	m	class:dyck_pref2	access:public
dyck_pref2::next	src/comb/dyck-pref2.h	/^    bool next()$/;"	f	class:dyck_pref2	access:public	signature:()
dyck_pref2::operator =	src/comb/dyck-pref2.h	/^    dyck_pref2 & operator = (const dyck_pref2&);  \/\/ forbidden$/;"	p	class:dyck_pref2	access:private	signature:(const dyck_pref2&)
dyck_pref2::x_	src/comb/dyck-pref2.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref2	access:public
dyck_pref2::y_	src/comb/dyck-pref2.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref2	access:public
dyck_pref2::~dyck_pref2	src/comb/dyck-pref2.h	/^    ~dyck_pref2()$/;"	f	class:dyck_pref2	access:public	signature:()
dyck_pref::B_	src/comb/dyck-pref.h	/^    ulong *B_;   \/\/ Dyck word as delta set (length=k*n=len); one-based array!$/;"	m	class:dyck_pref	access:public
dyck_pref::data	src/comb/dyck-pref.h	/^    const ulong * data()  const  { return B_+1; }$/;"	f	class:dyck_pref	access:public	signature:() const
dyck_pref::dyck_pref	src/comb/dyck-pref.h	/^    dyck_pref(const dyck_pref&);  \/\/ forbidden$/;"	p	class:dyck_pref	access:private	signature:(const dyck_pref&)
dyck_pref::dyck_pref	src/comb/dyck-pref.h	/^    explicit dyck_pref(ulong n, ulong k)$/;"	f	class:dyck_pref	access:public	signature:(ulong n, ulong k)
dyck_pref::first	src/comb/dyck-pref.h	/^    void first()$/;"	f	class:dyck_pref	access:public	signature:()
dyck_pref::k_	src/comb/dyck-pref.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_pref	access:public
dyck_pref::len_	src/comb/dyck-pref.h	/^    ulong len_;  \/\/ == k*n (length of Dyck words)$/;"	m	class:dyck_pref	access:public
dyck_pref::n1k_	src/comb/dyck-pref.h	/^    ulong n1k_;  \/\/ ==k*(n-1), aux$/;"	m	class:dyck_pref	access:public
dyck_pref::n_	src/comb/dyck-pref.h	/^    ulong n_;    \/\/ number of ones (variable t in the paper)$/;"	m	class:dyck_pref	access:public
dyck_pref::next	src/comb/dyck-pref.h	/^    bool next()$/;"	f	class:dyck_pref	access:public	signature:()
dyck_pref::operator =	src/comb/dyck-pref.h	/^    dyck_pref & operator = (const dyck_pref&);  \/\/ forbidden$/;"	p	class:dyck_pref	access:private	signature:(const dyck_pref&)
dyck_pref::x_	src/comb/dyck-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref	access:public
dyck_pref::y_	src/comb/dyck-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref	access:public
dyck_pref::~dyck_pref	src/comb/dyck-pref.h	/^    ~dyck_pref()$/;"	f	class:dyck_pref	access:public	signature:()
dyck_rgs	src/comb/dyck-rgs.h	/^    dyck_rgs(const dyck_rgs&);  \/\/ forbidden$/;"	p	class:dyck_rgs	access:private	signature:(const dyck_rgs&)
dyck_rgs	src/comb/dyck-rgs.h	/^    explicit dyck_rgs(ulong n, ulong i=1)$/;"	f	class:dyck_rgs	access:public	signature:(ulong n, ulong i=1)
dyck_rgs	src/comb/dyck-rgs.h	/^class dyck_rgs$/;"	c
dyck_rgs::OK	src/comb/dyck-rgs.h	/^    bool OK()  const$/;"	f	class:dyck_rgs	access:public	signature:() const
dyck_rgs::data	src/comb/dyck-rgs.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:dyck_rgs	access:public	signature:() const
dyck_rgs::dyck_rgs	src/comb/dyck-rgs.h	/^    dyck_rgs(const dyck_rgs&);  \/\/ forbidden$/;"	p	class:dyck_rgs	access:private	signature:(const dyck_rgs&)
dyck_rgs::dyck_rgs	src/comb/dyck-rgs.h	/^    explicit dyck_rgs(ulong n, ulong i=1)$/;"	f	class:dyck_rgs	access:public	signature:(ulong n, ulong i=1)
dyck_rgs::first	src/comb/dyck-rgs.h	/^    void first()$/;"	f	class:dyck_rgs	access:public	signature:()
dyck_rgs::i_	src/comb/dyck-rgs.h	/^    ulong i_;   \/\/ s[k] <= s[k-1]+i$/;"	m	class:dyck_rgs	access:public
dyck_rgs::last	src/comb/dyck-rgs.h	/^    void last()$/;"	f	class:dyck_rgs	access:public	signature:()
dyck_rgs::n_	src/comb/dyck-rgs.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:dyck_rgs	access:public
dyck_rgs::next	src/comb/dyck-rgs.h	/^    ulong next()$/;"	f	class:dyck_rgs	access:public	signature:()
dyck_rgs::operator =	src/comb/dyck-rgs.h	/^    dyck_rgs & operator = (const dyck_rgs&);  \/\/ forbidden$/;"	p	class:dyck_rgs	access:private	signature:(const dyck_rgs&)
dyck_rgs::prev	src/comb/dyck-rgs.h	/^    ulong prev()$/;"	f	class:dyck_rgs	access:public	signature:()
dyck_rgs::print	src/comb/dyck-rgs.h	/^    void print(const char *bla=0, bool dfz=true)  const$/;"	f	class:dyck_rgs	access:public	signature:(const char *bla=0, bool dfz=true) const
dyck_rgs::s_	src/comb/dyck-rgs.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:dyck_rgs	access:public
dyck_rgs::~dyck_rgs	src/comb/dyck-rgs.h	/^    ~dyck_rgs()$/;"	f	class:dyck_rgs	access:public	signature:()
dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    dyck_rgs_subset_lex(const dyck_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:dyck_rgs_subset_lex	access:private	signature:(const dyck_rgs_subset_lex&)
dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    explicit dyck_rgs_subset_lex(ulong n, ulong k)$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:(ulong n, ulong k)
dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^class dyck_rgs_subset_lex$/;"	c
dyck_rgs_subset_lex::OK	src/comb/dyck-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:() const
dyck_rgs_subset_lex::a_	src/comb/dyck-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= as[k-1] + 1$/;"	m	class:dyck_rgs_subset_lex	access:public
dyck_rgs_subset_lex::bit_string	src/comb/dyck-rgs-subset-lex.h	/^    const char* bit_string()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
dyck_rgs_subset_lex::data	src/comb/dyck-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:() const
dyck_rgs_subset_lex::dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    dyck_rgs_subset_lex(const dyck_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:dyck_rgs_subset_lex	access:private	signature:(const dyck_rgs_subset_lex&)
dyck_rgs_subset_lex::dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    explicit dyck_rgs_subset_lex(ulong n, ulong k)$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:(ulong n, ulong k)
dyck_rgs_subset_lex::first	src/comb/dyck-rgs-subset-lex.h	/^    void first()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
dyck_rgs_subset_lex::i_	src/comb/dyck-rgs-subset-lex.h	/^    ulong i_;   \/\/ k-ary Dyck words: i = k - 1$/;"	m	class:dyck_rgs_subset_lex	access:public
dyck_rgs_subset_lex::last	src/comb/dyck-rgs-subset-lex.h	/^    void last()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
dyck_rgs_subset_lex::n_	src/comb/dyck-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits in RGS$/;"	m	class:dyck_rgs_subset_lex	access:public
dyck_rgs_subset_lex::next	src/comb/dyck-rgs-subset-lex.h	/^    bool next()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
dyck_rgs_subset_lex::operator =	src/comb/dyck-rgs-subset-lex.h	/^    dyck_rgs_subset_lex & operator = (const dyck_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:dyck_rgs_subset_lex	access:private	signature:(const dyck_rgs_subset_lex&)
dyck_rgs_subset_lex::prev	src/comb/dyck-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
dyck_rgs_subset_lex::print	src/comb/dyck-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
dyck_rgs_subset_lex::str_	src/comb/dyck-rgs-subset-lex.h	/^    char *str_; \/\/ Dyck word$/;"	m	class:dyck_rgs_subset_lex	access:public
dyck_rgs_subset_lex::tr_	src/comb/dyck-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:dyck_rgs_subset_lex	access:public
dyck_rgs_subset_lex::~dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    ~dyck_rgs_subset_lex()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
e	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
e1_	src/ds/priorityqueue.h	/^    Type2 *e1_;  \/\/ events: e1[1..s]  one-based array!$/;"	m	class:priority_queue	access:public
e_	src/bpol/mersenne-coprime.h	/^    ulong e_;    \/\/ exponent$/;"	m	class:mersenne_coprime	access:public
e_	src/bpol/necklace2bitpol.h	/^    ulong e_;  \/\/ a^b$/;"	m	class:necklace2bitpol	access:public
e_	src/comb/arrangement-lex.h	/^    ulong e_;  \/\/ length of current arrangement$/;"	m	class:arrangement_lex	access:private
e_	src/comb/composition-nz-gray2.h	/^    ulong e_;   \/\/ aux: detection of last composition$/;"	m	class:composition_nz_gray2	access:public
e_	src/comb/dyck-gray2.h	/^    ulong *e_;   \/\/ Ehrlich array (focus pointers)$/;"	m	class:dyck_gray2	access:public
e_	src/comb/mixedradix-gslex-alt.h	/^    ulong e_;   \/\/ aux$/;"	m	class:mixedradix_gslex_alt	access:public
e_	src/comb/ordered-tree-branching-seq.h	/^    ulong e_;  \/\/ index last nonzero value; set to 0 for n==0$/;"	m	class:ordered_tree_branching_seq	access:public
e_	src/graph/digraph.h	/^    ulong *e_;   \/\/ outgoing connections (Edges)$/;"	m	class:digraph	access:public
easy3	src/comb/composition-nz-i-smooth.h	/^    ulong easy3(ulong y, ulong z)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong y, ulong z)
easy_ordering_complex_real_fft	doc/realfft-doc.txt	/^void easy_ordering_complex_real_fft(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
easy_ordering_complex_real_fft	src/realfft/realfft.h	/^void easy_ordering_complex_real_fft(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
easy_ordering_complex_real_fft	src/realfft/realffteasyord.cc	/^easy_ordering_complex_real_fft(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
easy_ordering_real_complex_fft	doc/realfft-doc.txt	/^void easy_ordering_real_complex_fft(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
easy_ordering_real_complex_fft	src/realfft/realfft.h	/^void easy_ordering_real_complex_fft(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
easy_ordering_real_complex_fft	src/realfft/realffteasyord.cc	/^easy_ordering_real_complex_fft(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
easy_ordering_real_complex_fft0	doc/realfft-doc.txt	/^void easy_ordering_real_complex_fft0(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
easy_ordering_real_complex_fft0	src/realfft/realfft.h	/^void easy_ordering_real_complex_fft0(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
easy_ordering_real_complex_fft0	src/realfft/realffteasyord.cc	/^easy_ordering_real_complex_fft0(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
echo	scripts/bench.zsh	/^        echo '------------------------------------------------------------';$/;"	v
echo	scripts/chkifdef.sh	/^echo;  echo 'OK.'$/;"	v
echo	scripts/chkxfiles.sh	/^    echo " *** SPURIOUS FILE\/DIR: [$t]" 1>&2;$/;"	v
echo	scripts/chkxfiles.sh	/^    echo " *** remove file(s) or edit OKFILES OKDIRS in makefile!" 1>&2;$/;"	v
echo	scripts/demo.zsh	/^    if [ -z "$DSRC" ]; then echo "Pattern did not match"; fi;$/;"	v
echo	scripts/demo.zsh	/^    if [ -z "$PAT" ]; then echo "Empty pattern"; exit 1; fi;$/;"	v
echo	scripts/diff-old.zsh	/^    echo;$/;"	v
echo	scripts/make-demo-list.sh	/^    echo "<a href=\\"$sg\\">$sg<\/a> is the output of <a href=\\"$sf\\">$sf<\/a>.";$/;"	v
echo	scripts/replace	/^            echo "can't use '-o' with multiple filenames.  (exiting)";$/;"	v
echo	scripts/replace	/^            echo "cannot open file $DIFFFILENAME";$/;"	v
echo	scripts/replace	/^    echo "# $0 $@" >> "$DIFFFILENAME";$/;"	v
ect_	src/comb/perm-mv0.h	/^    ulong ect_;  \/\/ counter for easy case$/;"	m	class:perm_mv0	access:public
edge_idx	src/graph/digraph.cc	/^digraph::edge_idx(ulong p, ulong pn)  const$/;"	f	class:digraph	signature:(ulong p, ulong pn) const
edge_idx	src/graph/digraph.h	/^    ulong edge_idx(ulong p, ulong pn)  const;$/;"	p	class:digraph	access:public	signature:(ulong p, ulong pn) const
egcd	doc/aux0-doc.txt	/^Type egcd(Type u, Type v, Type &tu1, Type &tu2);$/;"	p	file:	signature:(Type u, Type v, Type &tu1, Type &tu2)
egcd	src/aux0/attic/gcd.cc	/^egcd(long u, long v, long &u1, long &u2)$/;"	f	signature:(long u, long v, long &u1, long &u2)
egcd	src/aux0/gcd.h	/^Type egcd(Type u, Type v, Type &tu1, Type &tu2)$/;"	f	signature:(Type u, Type v, Type &tu1, Type &tu2)
egcd	src/mod/attic/gcd.cc	/^egcd(smod_t u, smod_t v, smod_t &u1, smod_t &u2)$/;"	f	signature:(smod_t u, smod_t v, smod_t &u1, smod_t &u2)
el_	src/comb/subset-debruijn.h	/^    ulong el_;  \/\/ new element to be shifted in$/;"	m	class:subset_debruijn	access:protected
end_map_ptr_	src/comb/string-subst.h	/^    uchar *end_map_ptr_;  \/\/ position in maps_[] after last map$/;"	m	class:string_subst	access:public
endo_idx	src/comb/endo-enup.h	/^static inline ulong endo_idx(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
endo_num	src/comb/endo-enup.h	/^static inline ulong endo_num(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
enup_idx	src/comb/endo-enup.h	/^static inline ulong enup_idx(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
enup_num	src/comb/endo-enup.h	/^static inline ulong enup_num(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
eo	demo/seq/A278479-demo.cc	/^    ulong eo(ulong y)  const$/;"	f	class:triang_num	file:	access:private	signature:(ulong y) const
ep_	src/graph/digraph.h	/^    ulong *ep_;  \/\/ e[ep[k]], ..., e[ep[k+1]-1]: outgoing connections of node k$/;"	m	class:digraph	access:public
eq_count	src/sort/attic/ucount.h	/^inline ulong eq_count(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
equals	doc/wfl-hilbert-doc.txt	/^the node  1  or  [1,0] , and new coordinate equals  2[0,1] + [1,0] = [1,2] .$/;"	v
equivalence_classes	doc/sort-doc.txt	/^void equivalence_classes(const Type *s, ulong n, bool (*equiv_q)(Type, Type), ulong *q);$/;"	p	file:	signature:(const Type *s, ulong n, bool (*equiv_q)(Type, Type), ulong *q)
equivalence_classes	src/sort/equivclasses.h	/^void equivalence_classes(const Type *s, ulong n, bool (*equiv_q)(Type, Type), ulong *q)$/;"	f	signature:(const Type *s, ulong n, bool (*equiv_q)(Type, Type), ulong *q)
erastothenes	demo/mod/eratosthenes-demo.cc	/^erastothenes(bitarray &B)$/;"	f	signature:(bitarray &B)
erastothenes_opt	demo/mod/eratosthenes-demo.cc	/^erastothenes_opt(bitarray &B)$/;"	f	signature:(bitarray &B)
err_msg_head	src/comb/lindenmayer-system.cc	/^static const char * const err_msg_head = "Error in lindenmayer_system:";$/;"	v	file:
err_msg_head	src/comb/string-subst.cc	/^static const char * const err_msg_head = "Error in string_subst:";$/;"	v	file:
euler_phi	doc/mod-doc.txt	/^umod_t euler_phi(const factorization &ff);$/;"	p	file:	signature:(const factorization &ff)
euler_phi	doc/mod-doc.txt	/^umod_t euler_phi(umod_t n);$/;"	p	file:	signature:(umod_t n)
euler_phi	doc/mod-doc.txt	/^umod_t euler_phi(umod_t pr, ulong ex);$/;"	p	file:	signature:(umod_t pr, ulong ex)
euler_phi	src/mod/euler-phi.cc	/^euler_phi(const factorization &ff)$/;"	f	signature:(const factorization &ff)
euler_phi	src/mod/euler-phi.cc	/^euler_phi(umod_t n)$/;"	f	signature:(umod_t n)
euler_phi	src/mod/euler-phi.cc	/^euler_phi(umod_t pr, ulong ex)$/;"	f	signature:(umod_t pr, ulong ex)
euler_phi	src/mod/numtheory.h	/^umod_t euler_phi(const factorization &ff);$/;"	p	signature:(const factorization &ff)
euler_phi	src/mod/numtheory.h	/^umod_t euler_phi(umod_t n);$/;"	p	signature:(umod_t n)
euler_phi	src/mod/numtheory.h	/^umod_t euler_phi(umod_t pr, ulong ex);$/;"	p	signature:(umod_t pr, ulong ex)
eval_rad2i	demo/bits/radix-2i-demo.cc	/^Cplx eval_rad2i(ulong x)$/;"	f	signature:(ulong x)
eval_rad2i	demo/bits/radix-2i-to-z-demo.cc	/^Cplx eval_rad2i(ulong x)$/;"	f	signature:(ulong x)
eval_radm1pi	demo/bits/radix-m1pi-demo.cc	/^Cplx eval_radm1pi(ulong x)$/;"	f	signature:(ulong x)
eval_radm1pi	demo/bits/radix-m1pi-to-z-demo.cc	/^Cplx eval_radm1pi(ulong x)$/;"	f	signature:(ulong x)
eval_radm4	demo/bits/radix-m4-demo.cc	/^long eval_radm4(ulong x)$/;"	f	signature:(ulong x)
even	doc/wfl-hilbert-doc.txt	/^    A  if  l  is even,  B  if  l  is odd.$/;"	v
even2lower	doc/perm-doc.txt	/^inline void even2lower(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
even2lower	src/perm/even2lower.h	/^inline void even2lower(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
even2lower_rev	doc/perm-doc.txt	/^inline void even2lower_rev(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
even2lower_rev	src/perm/even2lower.h	/^inline void even2lower_rev(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
evenq	src/comb/composition-nz-gray.h	/^    bool evenq(ulong x)  const  { return  0 == ( x & 1UL ); }$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
evenq	src/comb/composition-nz-gray2.h	/^    bool evenq(ulong x)  const  { return  0 == ( x & 1UL ); }$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
exit	scripts/attic/whohas	/^exit 0;$/;"	v
exit	scripts/autodoc.pl	/^exit 0;$/;"	v
exit	scripts/build-old.zsh	/^    make lib || exit 3;$/;"	v
exit	scripts/build-old.zsh	/^    tar xzf ${MYZBAKDIR}\/$V || exit 2;$/;"	v
exit	scripts/build-old.zsh	/^exit 0;$/;"	v
exit	scripts/bw2web.zsh	/^if [ "$WEBDIR" = "" ]; then exit 1; fi$/;"	v
exit	scripts/chk-bessel.zsh	/^exit 0;$/;"	v
exit	scripts/chk-cf.zsh	/^exit 0;$/;"	v
exit	scripts/chkifdef.sh	/^            exit 1;  ## fail$/;"	v
exit	scripts/diff-old.zsh	/^    tar xzf ${MYZBAKDIR}\/$V || exit 2;$/;"	v
exit	scripts/mkcompl.sh	/^exit 0;$/;"	v
exit	scripts/replace	/^            exit 0;$/;"	v
exit	scripts/whodep.sh	/^exit 0;$/;"	v
exit	scripts/whodep.sh	/^exit 1;$/;"	v
exit	scripts/x.zsh	/^exit 0;$/;"	v
exit	tags	/^exit	scripts\/build-old.zsh	\/^    tar xzf ${MYZBAKDIR}\\\/$V || exit 2;$\/;"	v$/;"	v
exit	tags	/^exit	scripts\/diff-old.zsh	\/^    tar xzf ${MYZBAKDIR}\\\/$V || exit 2;$\/;"	v$/;"	v
expon_	src/mod/factor.h	/^    ulong  expon_[16];$/;"	m	class:factorization	access:protected
expon_	src/mod/factor.h	/^    ulong  expon_[32];$/;"	m	class:factorization	access:protected
exponent	src/mod/factor.h	/^    ulong  exponent(ulong i) const  { return expon_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
exponent_of	src/mod/factor.cc	/^factorization::exponent_of(umod_t p) const$/;"	f	class:factorization	signature:(umod_t p) const
exponent_of	src/mod/factor.h	/^    ulong  exponent_of(umod_t p) const;  \/\/ exponent of prime p$/;"	p	class:factorization	access:public	signature:(umod_t p) const
extr3_estimate	src/aux0/attic/aux0double.cc	/^extr3_estimate(const double *f)$/;"	f	signature:(const double *f)
extr3_estimate	src/aux0/attic/aux0double.cc	/^extr3_estimate(const double *f, double &xval)$/;"	f	signature:(const double *f, double &xval)
extr3_estimate	src/aux0/attic/aux0double.h	/^double extr3_estimate(const double *f);$/;"	p	signature:(const double *f)
extr3_estimate	src/aux0/attic/aux0double.h	/^double extr3_estimate(const double *f, double &xval);$/;"	p	signature:(const double *f, double &xval)
extract_first	src/ds/deque.h	/^    ulong extract_first(Type & z)$/;"	f	class:deque	access:public	signature:(Type & z)
extract_last	src/ds/deque.h	/^    ulong extract_last(Type & z)$/;"	f	class:deque	access:public	signature:(Type & z)
extract_next	src/ds/attic/priorityqueue1.h	/^    bool extract_next(Type1 &t)$/;"	f	class:priority_queue1	access:public	signature:(Type1 &t)
extract_next	src/ds/priorityqueue.h	/^    bool extract_next(Type1 &t, Type2 &e)$/;"	f	class:priority_queue	access:public	signature:(Type1 &t, Type2 &e)
f	demo/comb/hanoi-rec-demo.cc	/^ulong f[3];  \/\/ the three piles$/;"	v
f	demo/comb/necklace-cat-demo.cc	/^ulong *f;  \/\/ data in f[1..N],  f[0] = 0$/;"	v
f	demo/comb/necklace-gray-demo.cc	/^ulong *f;  \/\/ data in f[1..N],  f[0] = 0$/;"	v
f	demo/comb/necklace-gray3-demo.cc	/^long *f;  \/\/ data in f[1..m],  f[0] = 0$/;"	v
f_	src/aux1/attic/array.h	/^    Type *f_;  \/\/ pointer to data$/;"	m	class:array	access:public
f_	src/comb/composition-nz-minc.h	/^    ulong f_;   \/\/ a[k] <= f * a[k-1]$/;"	m	class:composition_nz_minc	access:public
f_	src/comb/mixedradix-gray2.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:mixedradix_gray2	access:public
f_	src/comb/mixedradix-modular-gray.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:mixedradix_modular_gray	access:public
f_	src/comb/rgs-fincr.h	/^    ulong *f_;  \/\/ values F(k)$/;"	m	class:rgs_fincr	access:public
f_	src/comb/ruler-func.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:ruler_func	access:public
f_	src/ds/array2d.h	/^    Type *f_;        \/\/ pointer to data$/;"	m	class:array2d	access:protected
f_	src/ds/array3d.h	/^    Type *f_;        \/\/ pointer to data$/;"	m	class:array3d	access:protected
f_	src/ds/bitarray.h	/^    ulong *f_;   \/\/ bit bucket$/;"	m	class:bitarray	access:public
f_	src/ds/left-right-array.h	/^    ulong f_;    \/\/ number of free indices$/;"	m	class:left_right_array	access:public
f_	src/matrix/vector.h	/^    Type *f_;  \/\/ pointer to data$/;"	m	class:vector	access:public
f_	src/perm/attic/cycles.h	/^    ulong *f_;  \/\/ [nontrivial cycles] nce_ [fixed points] nn_ [unused] n_$/;"	m	class:cycles	access:public
factorial	doc/aux0-doc.txt	/^inline Type factorial(Type n);$/;"	p	file:	signature:(Type n)
factorial	src/aux0/factorial.h	/^inline Type factorial(Type n)$/;"	f	signature:(Type n)
factorization	src/mod/factor.cc	/^factorization::factorization()$/;"	f	class:factorization	signature:()
factorization	src/mod/factor.cc	/^factorization::factorization(umod_t n, const umod_t *f\/*=0*\/)$/;"	f	class:factorization	signature:(umod_t n, const umod_t *f )
factorization	src/mod/factor.h	/^    explicit factorization();$/;"	p	class:factorization	access:public	signature:()
factorization	src/mod/factor.h	/^    explicit factorization(umod_t n, const umod_t* f=0);$/;"	p	class:factorization	access:public	signature:(umod_t n, const umod_t* f=0)
factorization	src/mod/factor.h	/^    factorization(const factorization &);  \/\/ forbidden$/;"	p	class:factorization	access:private	signature:(const factorization &)
factorization	src/mod/factor.h	/^class  factorization$/;"	c
factorization::check	src/mod/factor.cc	/^factorization::check()  const$/;"	f	class:factorization	signature:() const
factorization::check	src/mod/factor.h	/^    bool  check()  const;$/;"	p	class:factorization	access:public	signature:() const
factorization::expon_	src/mod/factor.h	/^    ulong  expon_[16];$/;"	m	class:factorization	access:protected
factorization::expon_	src/mod/factor.h	/^    ulong  expon_[32];$/;"	m	class:factorization	access:protected
factorization::exponent	src/mod/factor.h	/^    ulong  exponent(ulong i) const  { return expon_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
factorization::exponent_of	src/mod/factor.cc	/^factorization::exponent_of(umod_t p) const$/;"	f	class:factorization	signature:(umod_t p) const
factorization::exponent_of	src/mod/factor.h	/^    ulong  exponent_of(umod_t p) const;  \/\/ exponent of prime p$/;"	p	class:factorization	access:public	signature:(umod_t p) const
factorization::factorization	src/mod/factor.cc	/^factorization::factorization()$/;"	f	class:factorization	signature:()
factorization::factorization	src/mod/factor.cc	/^factorization::factorization(umod_t n, const umod_t *f\/*=0*\/)$/;"	f	class:factorization	signature:(umod_t n, const umod_t *f )
factorization::factorization	src/mod/factor.h	/^    explicit factorization();$/;"	p	class:factorization	access:public	signature:()
factorization::factorization	src/mod/factor.h	/^    explicit factorization(umod_t n, const umod_t* f=0);$/;"	p	class:factorization	access:public	signature:(umod_t n, const umod_t* f=0)
factorization::factorization	src/mod/factor.h	/^    factorization(const factorization &);  \/\/ forbidden$/;"	p	class:factorization	access:private	signature:(const factorization &)
factorization::is_factorization_of	src/mod/factor.h	/^    bool is_factorization_of(umod_t n) const  { return  ( n == product() ); }$/;"	f	class:factorization	access:public	signature:(umod_t n) const
factorization::is_prime	src/mod/factor.cc	/^bool factorization::is_prime() const$/;"	f	class:factorization	signature:() const
factorization::is_prime	src/mod/factor.h	/^    bool  is_prime() const;$/;"	p	class:factorization	access:public	signature:() const
factorization::make_factorization	src/mod/factor.h	/^    bool make_factorization(umod_t n);$/;"	p	class:factorization	access:public	signature:(umod_t n)
factorization::make_factorization	src/mod/factor.h	/^    bool make_factorization(umod_t n, const umod_t *f);$/;"	p	class:factorization	access:public	signature:(umod_t n, const umod_t *f)
factorization::make_factorization	src/mod/factormake.cc	/^factorization::make_factorization(umod_t n)$/;"	f	class:factorization	signature:(umod_t n)
factorization::make_factorization	src/mod/factormake.cc	/^factorization::make_factorization(umod_t n,  const umod_t *f)$/;"	f	class:factorization	signature:(umod_t n, const umod_t *f)
factorization::maxprimes	src/mod/factor.cc	/^const ulong factorization::maxprimes = 16;$/;"	m	class:factorization	file:
factorization::maxprimes	src/mod/factor.cc	/^const ulong factorization::maxprimes = 32;$/;"	m	class:factorization	file:
factorization::maxprimes	src/mod/factor.h	/^    static const ulong  maxprimes;$/;"	m	class:factorization	access:public
factorization::npr_	src/mod/factor.h	/^    ulong  npr_;$/;"	m	class:factorization	access:protected
factorization::nprimes	src/mod/factor.h	/^    ulong nprimes()  const  { return npr_; }$/;"	f	class:factorization	access:public	signature:() const
factorization::numdiv	src/mod/factor.cc	/^ulong factorization::numdiv() const$/;"	f	class:factorization	signature:() const
factorization::numdiv	src/mod/factor.h	/^    ulong  numdiv() const;$/;"	p	class:factorization	access:public	signature:() const
factorization::operator =	src/mod/factor.h	/^    const factorization & operator = (const factorization &);  \/\/ forbidden$/;"	p	class:factorization	access:private	signature:(const factorization &)
factorization::prime	src/mod/factor.h	/^    umod_t prime(ulong i) const  { return prime_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
factorization::prime_	src/mod/factor.h	/^    umod_t prime_[16];$/;"	m	class:factorization	access:protected
factorization::prime_	src/mod/factor.h	/^    umod_t prime_[32];$/;"	m	class:factorization	access:protected
factorization::primepow	src/mod/factor.h	/^    umod_t primepow(ulong i) const  { return prpow_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
factorization::print	src/mod/factor.cc	/^factorization::print(const char *bla, std::ostream &os) const$/;"	f	class:factorization	signature:(const char *bla, std::ostream &os) const
factorization::print	src/mod/factor.h	/^    void print(const char *bla, std::ostream &os) const;$/;"	p	class:factorization	access:public	signature:(const char *bla, std::ostream &os) const
factorization::prod_	src/mod/factor.h	/^    umod_t  prod_;$/;"	m	class:factorization	access:protected
factorization::product	src/mod/factor.h	/^    umod_t product() const  { return prod_; }$/;"	f	class:factorization	access:public	signature:() const
factorization::prpow_	src/mod/factor.h	/^    umod_t prpow_[16];$/;"	m	class:factorization	access:protected
factorization::prpow_	src/mod/factor.h	/^    umod_t prpow_[32];$/;"	m	class:factorization	access:protected
factorization::reset	src/mod/factor.cc	/^factorization::reset()$/;"	f	class:factorization	signature:()
factorization::reset	src/mod/factor.h	/^    void reset();$/;"	p	class:factorization	access:public	signature:()
factorization::sort_by_primes	src/mod/factor.cc	/^factorization::sort_by_primes()$/;"	f	class:factorization	signature:()
factorization::sort_by_primes	src/mod/factor.h	/^    void sort_by_primes();$/;"	p	class:factorization	access:protected	signature:()
factorization::~factorization	src/mod/factor.cc	/^factorization::~factorization()$/;"	f	class:factorization	signature:()
factorization::~factorization	src/mod/factor.h	/^    ~factorization();$/;"	p	class:factorization	access:public	signature:()
fail_action	src/aux0/jjassert.cc	/^static int fail_action = JJ_ASSERT_DEFAULT;$/;"	v	file:
fc	demo/comb/perm-restrpref-demo.cc	/^ulong *fc;$/;"	v
fcsr	src/bpol/fcsr.h	/^    explicit fcsr(ulong c)$/;"	f	class:fcsr	access:public	signature:(ulong c)
fcsr	src/bpol/fcsr.h	/^class fcsr$/;"	c
fcsr::a_	src/bpol/fcsr.h	/^    ulong a_;     \/\/ internal state (a_0*2**k modulo c),  1 <= a < c$/;"	m	class:fcsr	access:public
fcsr::c_	src/bpol/fcsr.h	/^    ulong c_;     \/\/ a prime with primitive root 2, e.g. 37 = 1..1.1$/;"	m	class:fcsr	access:public
fcsr::fcsr	src/bpol/fcsr.h	/^    explicit fcsr(ulong c)$/;"	f	class:fcsr	access:public	signature:(ulong c)
fcsr::get_a	src/bpol/fcsr.h	/^    ulong get_a()  const  { return a_; }$/;"	f	class:fcsr	access:public	signature:() const
fcsr::get_w	src/bpol/fcsr.h	/^    ulong get_w()  const  { return w_; }$/;"	f	class:fcsr	access:public	signature:() const
fcsr::mask_	src/bpol/fcsr.h	/^    ulong mask_;  \/\/ mask  e.g. (with above)    mask == 63 == 111111$/;"	m	class:fcsr	access:public
fcsr::next	src/bpol/fcsr.h	/^    ulong next()$/;"	f	class:fcsr	access:public	signature:()
fcsr::next_w	src/bpol/fcsr.h	/^    void next_w()$/;"	f	class:fcsr	access:public	signature:()
fcsr::set_a	src/bpol/fcsr.h	/^    void set_a(ulong a)$/;"	f	class:fcsr	access:public	signature:(ulong a)
fcsr::w_	src/bpol/fcsr.h	/^    ulong w_;     \/\/ word of the SRS,  1 <= w <= mask$/;"	m	class:fcsr	access:public
fcsr::~fcsr	src/bpol/fcsr.h	/^    ~fcsr()  { ; }$/;"	f	class:fcsr	access:public	signature:()
fe	src/comb/attic/permvisit.h	/^    funcemu<ulong> *fe;$/;"	m	class:perm_visit	access:protected
fe_	src/comb/attic/combminchange.h	/^    funcemu<ulong> *fe_;$/;"	m	class:comb_minchange	access:public
ff	demo/comb/perm-dist1-gray-demo.cc	/^ulong *ff;  \/\/ digits of the word (falling factorial power)$/;"	v
ff	demo/comb/perm-l1r2-gray-demo.cc	/^ulong *ff;  \/\/ digits of the word (falling factorial power)$/;"	v
ff	demo/comb/perm-right1-gray-demo.cc	/^ulong *ff;  \/\/ digits of the word (falling factorial power)$/;"	v
ff	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong ff[32];  \/\/ aux (factorial number)$/;"	v
ff	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong ff[32];  \/\/ aux (factorial number)$/;"	v
ff	demo/sort/merge-sort-demo.cc	/^char *ff;$/;"	v
ff	demo/sort/merge-sort4-demo.cc	/^char *ff;$/;"	v
ffact2cyclic	src/comb/fact2cyclic.cc	/^ffact2cyclic(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2cyclic	src/comb/fact2perm.h	/^void ffact2cyclic(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2invperm	doc/comb-doc.txt	/^void ffact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	file:	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2invperm	src/comb/big-fact2perm.cc	/^ffact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2invperm	src/comb/big-fact2perm.h	/^void ffact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2invperm	src/comb/fact2perm.cc	/^ffact2invperm(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2invperm	src/comb/fact2perm.h	/^void ffact2invperm(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2invperm_swp	src/comb/fact2perm-swp.cc	/^ffact2invperm_swp(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2invperm_swp	src/comb/fact2perm.h	/^void ffact2invperm_swp(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2invperm_swp_apply	doc/perm-doc.txt	/^void ffact2invperm_swp_apply(const ulong *fc, ulong n, Type *x);$/;"	p	file:	signature:(const ulong *fc, ulong n, Type *x)
ffact2invperm_swp_apply	src/perm/fact2perm-swp-apply.h	/^void ffact2invperm_swp_apply(const ulong *fc, ulong n, Type *x)$/;"	f	signature:(const ulong *fc, ulong n, Type *x)
ffact2num	src/comb/fact2num.cc	/^ffact2num(const ulong *fc, ulong n)$/;"	f	signature:(const ulong *fc, ulong n)
ffact2num	src/comb/fact2num.h	/^ulong ffact2num(const ulong *fc, ulong n);$/;"	p	signature:(const ulong *fc, ulong n)
ffact2perm	doc/comb-doc.txt	/^void ffact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	file:	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2perm	src/comb/big-fact2perm.cc	/^ffact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2perm	src/comb/big-fact2perm.h	/^void ffact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
ffact2perm	src/comb/fact2perm.cc	/^ffact2perm(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2perm	src/comb/fact2perm.h	/^void ffact2perm(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2perm_rev	src/comb/fact2perm-rev.cc	/^ffact2perm_rev(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2perm_rev	src/comb/fact2perm.h	/^void ffact2perm_rev(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2perm_rot	demo/comb/perm-rot-unrank-demo.cc	/^ffact2perm_rot(const ulong *fc, ulong n, ulong *x)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x)
ffact2perm_rot	src/comb/fact2perm-rot.cc	/^ffact2perm_rot(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2perm_rot	src/comb/fact2perm.h	/^void ffact2perm_rot(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2perm_swp	src/comb/fact2perm-swp.cc	/^ffact2perm_swp(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
ffact2perm_swp	src/comb/fact2perm.h	/^void ffact2perm_swp(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
ffact2perm_swp_apply	doc/perm-doc.txt	/^void ffact2perm_swp_apply(const ulong *fc, ulong n, Type *x);$/;"	p	file:	signature:(const ulong *fc, ulong n, Type *x)
ffact2perm_swp_apply	src/perm/fact2perm-swp-apply.h	/^void ffact2perm_swp_apply(const ulong *fc, ulong n, Type *x)$/;"	f	signature:(const ulong *fc, ulong n, Type *x)
ffact_naf_to_invol	demo/comb/perm-involution-naf-demo.cc	/^void ffact_naf_to_invol(const ulong *x, ulong nd, ulong *p)$/;"	f	signature:(const ulong *x, ulong nd, ulong *p)
ffactpow	doc/aux0-doc.txt	/^inline Type ffactpow(Type x, Type n);$/;"	p	file:	signature:(Type x, Type n)
ffactpow	src/aux0/factorial.h	/^inline Type ffactpow(Type x, Type n)$/;"	f	signature:(Type x, Type n)
ffi	demo/comb/perm-dist1-gray-demo.cc	/^ulong *ffi;  \/\/ falling factorial word for inverse permutation$/;"	v
ffi	demo/comb/perm-l1r2-gray-demo.cc	/^ulong *ffi;  \/\/ falling factorial word for inverse permutation$/;"	v
ffi	demo/comb/perm-right1-gray-demo.cc	/^ulong *ffi;  \/\/ falling factorial word for inverse permutation$/;"	v
ffo	demo/comb/perm-dist1-gray-demo.cc	/^ulong *ffo;  \/\/ last string$/;"	v
ffo	demo/comb/perm-l1r2-gray-demo.cc	/^ulong *ffo;  \/\/ last string$/;"	v
ffo	demo/comb/perm-right1-gray-demo.cc	/^ulong *ffo;  \/\/ last string$/;"	v
fft	doc/fft-doc.txt	/^inline void fft(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft	doc/fft-doc.txt	/^inline void fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fft	src/fft/fft-default.h	/^inline void fft(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft	src/fft/fft-default.h	/^inline void fft(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fft8_dif_core_m1	doc/fft-doc.txt	/^inline void fft8_dif_core_m1(double *fr, double *fi);$/;"	p	file:	signature:(double *fr, double *fi)
fft8_dif_core_m1	doc/fft-doc.txt	/^void fft8_dif_core_m1(Complex *f);$/;"	p	file:	signature:(Complex *f)
fft8_dif_core_m1	src/fft/fft8difcore.cc	/^fft8_dif_core_m1(Complex *f)$/;"	f	signature:(Complex *f)
fft8_dif_core_m1	src/fft/shortfft.h	/^inline void fft8_dif_core_m1(double *fr, double *fi)$/;"	f	signature:(double *fr, double *fi)
fft8_dif_core_m1	src/fft/shortfft.h	/^void fft8_dif_core_m1(Complex *f);$/;"	p	signature:(Complex *f)
fft8_dif_core_p1	doc/fft-doc.txt	/^void fft8_dif_core_p1(Complex *f);$/;"	p	file:	signature:(Complex *f)
fft8_dif_core_p1	doc/fft-doc.txt	/^void fft8_dif_core_p1(double *fr, double *fi);$/;"	p	file:	signature:(double *fr, double *fi)
fft8_dif_core_p1	src/fft/fft8difcore.cc	/^fft8_dif_core_p1(Complex *f)$/;"	f	signature:(Complex *f)
fft8_dif_core_p1	src/fft/fft8difcore.cc	/^fft8_dif_core_p1(double *fr, double *fi)$/;"	f	signature:(double *fr, double *fi)
fft8_dif_core_p1	src/fft/shortfft.h	/^void fft8_dif_core_p1(Complex *f);$/;"	p	signature:(Complex *f)
fft8_dif_core_p1	src/fft/shortfft.h	/^void fft8_dif_core_p1(double *fr, double *fi);$/;"	p	signature:(double *fr, double *fi)
fft8_dit_core_m1	doc/fft-doc.txt	/^inline void fft8_dit_core_m1(double *fr, double *fi);$/;"	p	file:	signature:(double *fr, double *fi)
fft8_dit_core_m1	doc/fft-doc.txt	/^void fft8_dit_core_m1(Complex *f);$/;"	p	file:	signature:(Complex *f)
fft8_dit_core_m1	src/fft/fft8ditcore.cc	/^fft8_dit_core_m1(Complex *f)$/;"	f	signature:(Complex *f)
fft8_dit_core_m1	src/fft/shortfft.h	/^inline void fft8_dit_core_m1(double *fr, double *fi)$/;"	f	signature:(double *fr, double *fi)
fft8_dit_core_m1	src/fft/shortfft.h	/^void fft8_dit_core_m1(Complex *f);$/;"	p	signature:(Complex *f)
fft8_dit_core_p1	doc/fft-doc.txt	/^void fft8_dit_core_p1(Complex *f);$/;"	p	file:	signature:(Complex *f)
fft8_dit_core_p1	doc/fft-doc.txt	/^void fft8_dit_core_p1(double *fr, double *fi);$/;"	p	file:	signature:(double *fr, double *fi)
fft8_dit_core_p1	src/fft/fft8ditcore.cc	/^fft8_dit_core_p1(Complex *f)$/;"	f	signature:(Complex *f)
fft8_dit_core_p1	src/fft/fft8ditcore.cc	/^fft8_dit_core_p1(double *fr, double *fi)$/;"	f	signature:(double *fr, double *fi)
fft8_dit_core_p1	src/fft/shortfft.h	/^void fft8_dit_core_p1(Complex *f);$/;"	p	signature:(Complex *f)
fft8_dit_core_p1	src/fft/shortfft.h	/^void fft8_dit_core_p1(double *fr, double *fi);$/;"	p	signature:(double *fr, double *fi)
fft9_m1	doc/fft-doc.txt	/^void fft9_m1(Complex *x);$/;"	p	file:	signature:(Complex *x)
fft9_m1	doc/fft-doc.txt	/^void fft9_m1(double *xr, double *xi);$/;"	p	file:	signature:(double *xr, double *xi)
fft9_m1	src/fft/fft9.cc	/^fft9_m1(Complex *x)$/;"	f	signature:(Complex *x)
fft9_m1	src/fft/fft9.cc	/^fft9_m1(double *xr, double *xi)$/;"	f	signature:(double *xr, double *xi)
fft9_m1	src/fft/shortfft.h	/^void fft9_m1(Complex *x);$/;"	p	signature:(Complex *x)
fft9_m1	src/fft/shortfft.h	/^void fft9_m1(double *xr, double *xi);$/;"	p	signature:(double *xr, double *xi)
fft9_p1	doc/fft-doc.txt	/^void fft9_p1(Complex *x);$/;"	p	file:	signature:(Complex *x)
fft9_p1	doc/fft-doc.txt	/^void fft9_p1(double *xr, double *xi);$/;"	p	file:	signature:(double *xr, double *xi)
fft9_p1	src/fft/fft9.cc	/^fft9_p1(Complex *x)$/;"	f	signature:(Complex *x)
fft9_p1	src/fft/fft9.cc	/^fft9_p1(double *xr, double *xi)$/;"	f	signature:(double *xr, double *xi)
fft9_p1	src/fft/shortfft.h	/^void fft9_p1(Complex *x);$/;"	p	signature:(Complex *x)
fft9_p1	src/fft/shortfft.h	/^void fft9_p1(double *xr, double *xi);$/;"	p	signature:(double *xr, double *xi)
fft_2dim	src/fft/attic/ndimfft.cc	/^fft_2dim(double *fr, double *fi,$/;"	f	signature:(double *fr, double *fi, ulong d1, ulong d2, int is)
fft_2dim	src/fft/attic/ndimfft.cc	/^void fft_2dim(double *fr, double *fi, ulong d1, ulong d2, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong d1, ulong d2, int is)
fft_3dim	src/fft/attic/ndimfft.cc	/^fft_3dim(double *fr, double *fi,$/;"	f	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, int is)
fft_3dim	src/fft/attic/ndimfft.cc	/^void fft_3dim(double *fr, double *fi, ulong d1, ulong d2, ulong d3, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, int is)
fft_4dim	src/fft/attic/ndimfft.cc	/^fft_4dim(double *fr, double *fi,$/;"	f	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, int is)
fft_4dim	src/fft/attic/ndimfft.cc	/^void fft_4dim(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, int is)
fft_5dim	src/fft/attic/ndimfft.cc	/^fft_5dim(double *fr, double *fi,$/;"	f	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is)
fft_5dim	src/fft/attic/ndimfft.cc	/^void fft_5dim(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is)
fft_arblen	doc/chirpzt-doc.txt	/^void fft_arblen(Complex *x, ulong n, int is);$/;"	p	file:	signature:(Complex *x, ulong n, int is)
fft_arblen	src/chirpzt/chirpzt.h	/^void fft_arblen(Complex *f, ulong n, int is);$/;"	p	signature:(Complex *f, ulong n, int is)
fft_arblen	src/chirpzt/fftarblen.cc	/^fft_arblen(Complex *x, ulong n, int is)$/;"	f	signature:(Complex *x, ulong n, int is)
fft_auto_convolution_core1	doc/convolution-doc.txt	/^void fft_auto_convolution_core1(double *f, ulong ldn, double v\/*=0.0*\/); \/\/ aux$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fft_auto_convolution_core1	src/convolution/fftcnvla.cc	/^fft_auto_convolution_core1(double *f, ulong ldn, double v\/*=0.0*\/)$/;"	f	signature:(double *f, ulong ldn, double v )
fft_auto_convolution_core1	src/convolution/realconvolution.h	/^void fft_auto_convolution_core1(double *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn, double v=0.0)
fft_auto_convolution_core2	doc/convolution-doc.txt	/^void fft_auto_convolution_core2(double *f, ulong ldn, double v\/*=0.0*\/); \/\/ aux$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fft_auto_convolution_core2	src/convolution/fftcnvla.cc	/^fft_auto_convolution_core2(double *f, ulong ldn, double v\/*=0.0*\/)$/;"	f	signature:(double *f, ulong ldn, double v )
fft_auto_convolution_core2	src/convolution/realconvolution.h	/^void fft_auto_convolution_core2(double *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn, double v=0.0)
fft_auto_correlation	doc/correlation-doc.txt	/^void fft_auto_correlation(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fft_auto_correlation	src/correlation/correlation.h	/^void fft_auto_correlation(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fft_auto_correlation	src/correlation/fftcorr.cc	/^fft_auto_correlation(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fft_auto_correlation0	doc/correlation-doc.txt	/^void fft_auto_correlation0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fft_auto_correlation0	src/correlation/correlation.h	/^void fft_auto_correlation0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fft_auto_correlation0	src/correlation/fftcorr.cc	/^fft_auto_correlation0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fft_complex_auto_convolution	doc/convolution-doc.txt	/^void fft_complex_auto_convolution(Complex *f, ulong ldn,$/;"	p	file:	signature:(Complex *f, ulong ldn, double v )
fft_complex_auto_convolution	doc/convolution-doc.txt	/^void fft_complex_auto_convolution(double * restrict fr, double * restrict fi,$/;"	p	file:	signature:(double * restrict fr, double * restrict fi, ulong ldn, double v )
fft_complex_auto_convolution	src/convolution/complexconvolution.h	/^void fft_complex_auto_convolution(Complex *f, ulong ldn, double v=0.0);$/;"	p	signature:(Complex *f, ulong ldn, double v=0.0)
fft_complex_auto_convolution	src/convolution/complexconvolution.h	/^void fft_complex_auto_convolution(double *fr, double *fi, ulong ldn, double v=0.0);$/;"	p	signature:(double *fr, double *fi, ulong ldn, double v=0.0)
fft_complex_auto_convolution	src/convolution/fftcocnvl.cc	/^fft_complex_auto_convolution(Complex *f, ulong ldn,$/;"	f	signature:(Complex *f, ulong ldn, double v )
fft_complex_auto_convolution	src/convolution/fftcocnvl.cc	/^fft_complex_auto_convolution(double * restrict fr, double * restrict fi,$/;"	f	signature:(double * restrict fr, double * restrict fi, ulong ldn, double v )
fft_complex_auto_correlation	doc/correlation-doc.txt	/^void fft_complex_auto_correlation(double * restrict fr, double * restrict fi, ulong ldn);$/;"	p	file:	signature:(double * restrict fr, double * restrict fi, ulong ldn)
fft_complex_auto_correlation	src/correlation/correlation.h	/^void fft_complex_auto_correlation(double *fr, double *fi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, ulong ldn)
fft_complex_auto_correlation	src/correlation/fftcocorr.cc	/^fft_complex_auto_correlation(double * restrict fr, double * restrict fi, ulong ldn)$/;"	f	signature:(double * restrict fr, double * restrict fi, ulong ldn)
fft_complex_convolution	doc/convolution-doc.txt	/^void fft_complex_convolution(Complex * restrict f, Complex * restrict g,$/;"	p	file:	signature:(Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fft_complex_convolution	doc/convolution-doc.txt	/^void fft_complex_convolution(double * restrict fr, double * restrict fi,$/;"	p	file:	signature:(double * restrict fr, double * restrict fi, double * restrict gr, double * restrict gi, ulong ldn, double v )
fft_complex_convolution	src/convolution/complexconvolution.h	/^void fft_complex_convolution(Complex *f, Complex *g, ulong ldn, double v=0.0);$/;"	p	signature:(Complex *f, Complex *g, ulong ldn, double v=0.0)
fft_complex_convolution	src/convolution/complexconvolution.h	/^void fft_complex_convolution(double *fr, double *fi, double *gr, double *gi, ulong ldn, double v=0.0);$/;"	p	signature:(double *fr, double *fi, double *gr, double *gi, ulong ldn, double v=0.0)
fft_complex_convolution	src/convolution/fftcocnvl.cc	/^fft_complex_convolution(Complex * restrict f, Complex * restrict g,$/;"	f	signature:(Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fft_complex_convolution	src/convolution/fftcocnvl.cc	/^fft_complex_convolution(double * restrict fr, double * restrict fi,$/;"	f	signature:(double * restrict fr, double * restrict fi, double * restrict gr, double * restrict gi, ulong ldn, double v )
fft_complex_correlation	doc/correlation-doc.txt	/^void fft_complex_correlation(double * restrict fr, double * restrict fi,$/;"	p	file:	signature:(double * restrict fr, double * restrict fi, double * restrict gr, double * restrict gi, ulong ldn)
fft_complex_correlation	src/correlation/correlation.h	/^void fft_complex_correlation(double *fr, double *fi, double *gr, double *gi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, double *gr, double *gi, ulong ldn)
fft_complex_correlation	src/correlation/fftcocorr.cc	/^fft_complex_correlation(double * restrict fr, double * restrict fi,$/;"	f	signature:(double * restrict fr, double * restrict fi, double * restrict gr, double * restrict gi, ulong ldn)
fft_convolution_core1	doc/convolution-doc.txt	/^void fft_convolution_core1(const double * restrict f, double * restrict g,$/;"	p	file:	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fft_convolution_core1	src/convolution/fftcnvl.cc	/^fft_convolution_core1(const double * restrict f, double * restrict g,$/;"	f	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fft_convolution_core1	src/convolution/realconvolution.h	/^void fft_convolution_core1(const double *x, double *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const double *x, double *y, ulong ldn, double v=0.0)
fft_convolution_core2	doc/convolution-doc.txt	/^void fft_convolution_core2(const double * restrict f, double * restrict g,$/;"	p	file:	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fft_convolution_core2	src/convolution/fftcnvl.cc	/^fft_convolution_core2(const double * restrict f, double * restrict g,$/;"	f	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fft_convolution_core2	src/convolution/realconvolution.h	/^void fft_convolution_core2(const double *x, double *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const double *x, double *y, ulong ldn, double v=0.0)
fft_correlation	doc/correlation-doc.txt	/^void fft_correlation(double *f, double *g, ulong ldn);$/;"	p	file:	signature:(double *f, double *g, ulong ldn)
fft_correlation	src/correlation/correlation.h	/^void fft_correlation(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fft_correlation	src/correlation/fftcorr.cc	/^fft_correlation(double *f, double *g, ulong ldn)$/;"	f	signature:(double *f, double *g, ulong ldn)
fft_correlation0	doc/correlation-doc.txt	/^void fft_correlation0(double *f, double *g, ulong ldn);$/;"	p	file:	signature:(double *f, double *g, ulong ldn)
fft_correlation0	src/correlation/correlation.h	/^void fft_correlation0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fft_correlation0	src/correlation/fftcorr.cc	/^fft_correlation0(double *f, double *g, ulong ldn)$/;"	f	signature:(double *f, double *g, ulong ldn)
fft_depth_first_dif2	doc/fft-doc.txt	/^void fft_depth_first_dif2(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_depth_first_dif2	src/fft/fft.h	/^void fft_depth_first_dif2(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_depth_first_dif2	src/fft/fftdif2.cc	/^fft_depth_first_dif2(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_depth_first_dit2	doc/fft-doc.txt	/^void fft_depth_first_dit2(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_depth_first_dit2	src/fft/fft.h	/^void fft_depth_first_dit2(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_depth_first_dit2	src/fft/fftdit2.cc	/^fft_depth_first_dit2(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dif2	doc/fft-doc.txt	/^void fft_dif2(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dif2	src/fft/fft.h	/^void fft_dif2(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dif2	src/fft/fftdif2.cc	/^fft_dif2(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dif4	doc/fft-doc.txt	/^void fft_dif4(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dif4	doc/fft-doc.txt	/^void fft_dif4(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dif4	src/fft/cfftdif4.cc	/^fft_dif4(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dif4	src/fft/fft.h	/^void fft_dif4(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dif4	src/fft/fft.h	/^void fft_dif4(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dif4	src/fft/fftdif4.cc	/^fft_dif4(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dif4_core_m1	doc/fft-doc.txt	/^void fft_dif4_core_m1(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fft_dif4_core_m1	src/fft/cfftdif4.cc	/^fft_dif4_core_m1(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fft_dif4_core_m1	src/fft/fft.h	/^void fft_dif4_core_m1(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fft_dif4_core_p1	doc/fft-doc.txt	/^void fft_dif4_core_p1(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fft_dif4_core_p1	doc/fft-doc.txt	/^void fft_dif4_core_p1(double *fr, double *fi, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
fft_dif4_core_p1	src/fft/cfftdif4.cc	/^fft_dif4_core_p1(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fft_dif4_core_p1	src/fft/fft.h	/^void fft_dif4_core_p1(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fft_dif4_core_p1	src/fft/fft.h	/^void fft_dif4_core_p1(double *fr, double *fi, ulong ldn);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong ldn)
fft_dif4_core_p1	src/fft/fftdif4.cc	/^fft_dif4_core_p1(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
fft_dif4l	doc/fft-doc.txt	/^void fft_dif4l(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dif4l	src/fft/fft.h	/^void fft_dif4l(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dif4l	src/fft/fftdif4l.cc	/^fft_dif4l(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dit2	doc/fft-doc.txt	/^void fft_dit2(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dit2	src/fft/fft.h	/^void fft_dit2(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dit2	src/fft/fftdit2.cc	/^fft_dit2(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dit4	doc/fft-doc.txt	/^void fft_dit4(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dit4	doc/fft-doc.txt	/^void fft_dit4(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dit4	src/fft/cfftdit4.cc	/^fft_dit4(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_dit4	src/fft/fft.h	/^void fft_dit4(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dit4	src/fft/fft.h	/^void fft_dit4(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dit4	src/fft/fftdit4.cc	/^fft_dit4(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fft_dit4_core_m1	doc/fft-doc.txt	/^void fft_dit4_core_m1(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fft_dit4_core_m1	src/fft/cfftdit4.cc	/^fft_dit4_core_m1(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fft_dit4_core_m1	src/fft/fft.h	/^void fft_dit4_core_m1(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fft_dit4_core_p1	doc/fft-doc.txt	/^void fft_dit4_core_p1(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fft_dit4_core_p1	doc/fft-doc.txt	/^void fft_dit4_core_p1(double *fr, double *fi, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
fft_dit4_core_p1	src/fft/cfftdit4.cc	/^fft_dit4_core_p1(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fft_dit4_core_p1	src/fft/fft.h	/^void fft_dit4_core_p1(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fft_dit4_core_p1	src/fft/fft.h	/^void fft_dit4_core_p1(double *fr, double *fi, ulong ldn);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong ldn)
fft_dit4_core_p1	src/fft/fftdit4.cc	/^fft_dit4_core_p1(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
fft_dit4l	doc/fft-doc.txt	/^void fft_dit4l(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fft_dit4l	src/fft/fft.h	/^void fft_dit4l(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fft_dit4l	src/fft/fftdit4l.cc	/^fft_dit4l(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fft_fract	doc/chirpzt-doc.txt	/^void fft_fract(Complex *x, ulong n, double v);$/;"	p	file:	signature:(Complex *x, ulong n, double v)
fft_fract	doc/chirpzt-doc.txt	/^void fft_fract(double *x, double *y, ulong n, double v);$/;"	p	file:	signature:(double *x, double *y, ulong n, double v)
fft_fract	src/chirpzt/chirpzt.h	/^void fft_fract(Complex *x, ulong n, double v);$/;"	p	signature:(Complex *x, ulong n, double v)
fft_fract	src/chirpzt/chirpzt.h	/^void fft_fract(double *x, double *y, ulong n, double v);$/;"	p	signature:(double *x, double *y, ulong n, double v)
fft_fract	src/chirpzt/fftfract.cc	/^fft_fract(Complex *x, ulong n, double v)$/;"	f	signature:(Complex *x, ulong n, double v)
fft_fract	src/chirpzt/fftfract.cc	/^fft_fract(double *x, double *y, ulong n, double v)$/;"	f	signature:(double *x, double *y, ulong n, double v)
fft_spectrum	doc/fft-doc.txt	/^void fft_spectrum(double *f, ulong ldn, int phasesq\/*=0*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int phasesq )
fft_spectrum	src/fft/fft.h	/^void fft_spectrum(double *f, ulong ldn, int phasesq=0);$/;"	p	signature:(double *f, ulong ldn, int phasesq=0)
fft_spectrum	src/fft/fftspect.cc	/^fft_spectrum(double *f, ulong ldn, int phasesq\/*=0*\/)$/;"	f	signature:(double *f, ulong ldn, int phasesq )
fht	doc/fht-doc.txt	/^inline void fht(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht	doc/fht-doc.txt	/^inline void fht(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht	src/fht/fht-default.h	/^inline void fht(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht	src/fht/fht-default.h	/^inline void fht(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht0	doc/fht-doc.txt	/^inline void fht0(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht0	doc/fht-doc.txt	/^inline void fht0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht0	src/fht/fht-default.h	/^inline void fht0(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht0	src/fht/fht-default.h	/^inline void fht0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht0_dit	doc/fht-doc.txt	/^void fht0_dit(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht0_dit	doc/fht-doc.txt	/^void fht0_dit(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht0_dit	src/fht/cfht0.cc	/^fht0_dit(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht0_dit	src/fht/fht.h	/^void fht0_dit(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
fht0_dit	src/fht/fht.h	/^void fht0_dit(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht0_dit	src/fht/fht0.cc	/^fht0_dit(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht0_loc	doc/fht-doc.txt	/^inline void fht0_loc(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
fht0_loc	src/fht/fhtloc2.h	/^inline void fht0_loc(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
fht_auto_convolution	doc/convolution-doc.txt	/^void fht_auto_convolution(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_auto_convolution	doc/convolution-doc.txt	/^void fht_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_auto_convolution	src/convolution/cfhtcnvla.cc	/^fht_auto_convolution(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_auto_convolution	src/convolution/complexconvolution.h	/^void fht_auto_convolution(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
fht_auto_convolution	src/convolution/fhtcnvla.cc	/^fht_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_auto_convolution	src/convolution/realconvolution.h	/^void fht_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_auto_convolution0	doc/convolution-doc.txt	/^void fht_auto_convolution0(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_auto_convolution0	doc/convolution-doc.txt	/^void fht_auto_convolution0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_auto_convolution0	src/convolution/cfhtcnvla.cc	/^fht_auto_convolution0(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_auto_convolution0	src/convolution/complexconvolution.h	/^void fht_auto_convolution0(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
fht_auto_convolution0	src/convolution/fhtcnvla.cc	/^fht_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_auto_convolution0	src/convolution/realconvolution.h	/^void fht_auto_convolution0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_auto_convolution_core	doc/convolution-doc.txt	/^void fht_auto_convolution_core(Complex *f, ulong ldn,$/;"	p	file:	signature:(Complex *f, ulong ldn, double v )
fht_auto_convolution_core	doc/convolution-doc.txt	/^void fht_auto_convolution_core(double *f, ulong ldn,$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fht_auto_convolution_core	src/convolution/cfhtcnvlacore.cc	/^fht_auto_convolution_core(Complex *f, ulong ldn,$/;"	f	signature:(Complex *f, ulong ldn, double v )
fht_auto_convolution_core	src/convolution/complexconvolution.h	/^void fht_auto_convolution_core(Complex *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(Complex *x, ulong ldn, double v=0.0)
fht_auto_convolution_core	src/convolution/fhtcnvlacore.cc	/^fht_auto_convolution_core(double *f, ulong ldn,$/;"	f	signature:(double *f, ulong ldn, double v )
fht_auto_convolution_core	src/convolution/realconvolution.h	/^void fht_auto_convolution_core(double *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn, double v=0.0)
fht_auto_convolution_revbin_permuted_core	doc/convolution-doc.txt	/^void fht_auto_convolution_revbin_permuted_core(Complex *f, ulong ldn,$/;"	p	file:	signature:(Complex *f, ulong ldn, double v )
fht_auto_convolution_revbin_permuted_core	doc/convolution-doc.txt	/^void fht_auto_convolution_revbin_permuted_core(double *f, ulong ldn,$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fht_auto_convolution_revbin_permuted_core	src/convolution/cfhtcnvlacore.cc	/^fht_auto_convolution_revbin_permuted_core(Complex *f, ulong ldn,$/;"	f	signature:(Complex *f, ulong ldn, double v )
fht_auto_convolution_revbin_permuted_core	src/convolution/complexconvolution.h	/^void fht_auto_convolution_revbin_permuted_core(Complex *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(Complex *x, ulong ldn, double v=0.0)
fht_auto_convolution_revbin_permuted_core	src/convolution/fhtcnvlacore.cc	/^fht_auto_convolution_revbin_permuted_core(double *f, ulong ldn,$/;"	f	signature:(double *f, ulong ldn, double v )
fht_auto_convolution_revbin_permuted_core	src/convolution/realconvolution.h	/^void fht_auto_convolution_revbin_permuted_core(double *x, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn, double v=0.0)
fht_auto_correlation	doc/correlation-doc.txt	/^void fht_auto_correlation(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_auto_correlation	src/correlation/correlation.h	/^void fht_auto_correlation(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_auto_correlation	src/correlation/fhtcorr.cc	/^fht_auto_correlation(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_auto_correlation0	doc/correlation-doc.txt	/^void fht_auto_correlation0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_auto_correlation0	src/correlation/correlation.h	/^void fht_auto_correlation0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_auto_correlation0	src/correlation/fhtcorr.cc	/^fht_auto_correlation0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_auto_correlation_core	doc/correlation-doc.txt	/^void fht_auto_correlation_core(double *f, ulong ldn,$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fht_auto_correlation_core	src/correlation/correlation.h	/^void fht_auto_correlation_core(double *f, ulong ldn, double v=0.0);$/;"	p	signature:(double *f, ulong ldn, double v=0.0)
fht_auto_correlation_core	src/correlation/fhtcorr.cc	/^fht_auto_correlation_core(double *f, ulong ldn,$/;"	f	signature:(double *f, ulong ldn, double v )
fht_cnvl_core_core	doc/convolution-doc.txt	/^inline void fht_cnvl_core_core(const double *fp, const double *fm, double *gp, double *gm); \/\/ aux$/;"	p	file:	signature:(const double *fp, const double *fm, double *gp, double *gm)
fht_cnvl_core_core	src/convolution/twodimfhtcnvl.cc	/^fht_cnvl_core_core(const double *fp, const double *fm, double *gp, double *gm)$/;"	f	signature:(const double *fp, const double *fm, double *gp, double *gm)
fht_complex_real_fft	doc/realfft-doc.txt	/^void fht_complex_real_fft(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
fht_complex_real_fft	src/realfft/realfft.h	/^void fht_complex_real_fft(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
fht_complex_real_fft	src/realfft/realfftbyfht.cc	/^fht_complex_real_fft(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
fht_convolution	doc/convolution-doc.txt	/^void fht_convolution(Complex * restrict f, Complex * restrict g, ulong ldn);$/;"	p	file:	signature:(Complex * restrict f, Complex * restrict g, ulong ldn)
fht_convolution	doc/convolution-doc.txt	/^void fht_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_convolution	src/convolution/cfhtcnvl.cc	/^fht_convolution(Complex * restrict f, Complex * restrict g, ulong ldn)$/;"	f	signature:(Complex * restrict f, Complex * restrict g, ulong ldn)
fht_convolution	src/convolution/complexconvolution.h	/^void fht_convolution(Complex *f, Complex *g, ulong ldn);$/;"	p	signature:(Complex *f, Complex *g, ulong ldn)
fht_convolution	src/convolution/fhtcnvl.cc	/^fht_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_convolution	src/convolution/realconvolution.h	/^void fht_convolution(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_convolution0	doc/convolution-doc.txt	/^void fht_convolution0(Complex * restrict f, Complex * restrict g, ulong ldn);$/;"	p	file:	signature:(Complex * restrict f, Complex * restrict g, ulong ldn)
fht_convolution0	doc/convolution-doc.txt	/^void fht_convolution0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_convolution0	src/convolution/cfhtcnvl.cc	/^fht_convolution0(Complex * restrict f, Complex * restrict g, ulong ldn)$/;"	f	signature:(Complex * restrict f, Complex * restrict g, ulong ldn)
fht_convolution0	src/convolution/complexconvolution.h	/^void fht_convolution0(Complex *f, Complex *g, ulong ldn);$/;"	p	signature:(Complex *f, Complex *g, ulong ldn)
fht_convolution0	src/convolution/fhtcnvl.cc	/^fht_convolution0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_convolution0	src/convolution/realconvolution.h	/^void fht_convolution0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_convolution_core	doc/convolution-doc.txt	/^void fht_convolution_core(const Complex * restrict f, Complex * restrict g, ulong ldn,$/;"	p	file:	signature:(const Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fht_convolution_core	doc/convolution-doc.txt	/^void fht_convolution_core(const double * restrict f, double * restrict g, ulong ldn,$/;"	p	file:	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fht_convolution_core	src/convolution/cfhtcnvlcore.cc	/^fht_convolution_core(const Complex * restrict f, Complex * restrict g, ulong ldn,$/;"	f	signature:(const Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fht_convolution_core	src/convolution/complexconvolution.h	/^void fht_convolution_core(const Complex *x, Complex *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const Complex *x, Complex *y, ulong ldn, double v=0.0)
fht_convolution_core	src/convolution/fhtcnvlcore.cc	/^fht_convolution_core(const double * restrict f, double * restrict g, ulong ldn,$/;"	f	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fht_convolution_core	src/convolution/realconvolution.h	/^void fht_convolution_core(const double *x, double *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const double *x, double *y, ulong ldn, double v=0.0)
fht_convolution_revbin_permuted_core	doc/convolution-doc.txt	/^void fht_convolution_revbin_permuted_core(const Complex * restrict f,$/;"	p	file:	signature:(const Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fht_convolution_revbin_permuted_core	doc/convolution-doc.txt	/^void fht_convolution_revbin_permuted_core(const double * restrict f,$/;"	p	file:	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fht_convolution_revbin_permuted_core	src/convolution/cfhtcnvlcore.cc	/^fht_convolution_revbin_permuted_core(const Complex * restrict f,$/;"	f	signature:(const Complex * restrict f, Complex * restrict g, ulong ldn, double v )
fht_convolution_revbin_permuted_core	src/convolution/complexconvolution.h	/^void fht_convolution_revbin_permuted_core(const Complex *x, Complex *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const Complex *x, Complex *y, ulong ldn, double v=0.0)
fht_convolution_revbin_permuted_core	src/convolution/fhtcnvlcore.cc	/^fht_convolution_revbin_permuted_core(const double * restrict f,$/;"	f	signature:(const double * restrict f, double * restrict g, ulong ldn, double v )
fht_convolution_revbin_permuted_core	src/convolution/realconvolution.h	/^void fht_convolution_revbin_permuted_core(const double *x, double *y, ulong ldn, double v=0.0);  \/\/ aux$/;"	p	signature:(const double *x, double *y, ulong ldn, double v=0.0)
fht_correlation	doc/correlation-doc.txt	/^void fht_correlation(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_correlation	src/correlation/correlation.h	/^void fht_correlation(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_correlation	src/correlation/fhtcorr.cc	/^fht_correlation(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_correlation0	doc/correlation-doc.txt	/^void fht_correlation0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_correlation0	src/correlation/correlation.h	/^void fht_correlation0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_correlation0	src/correlation/fhtcorr.cc	/^fht_correlation0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_depth_first_dif2	doc/fht-doc.txt	/^void fht_depth_first_dif2(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_depth_first_dif2	src/fht/fht.h	/^void fht_depth_first_dif2(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_depth_first_dif2	src/fht/fhtdif2.cc	/^fht_depth_first_dif2(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_depth_first_dit2	doc/fht-doc.txt	/^void fht_depth_first_dit2(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_depth_first_dit2	src/fht/fht.h	/^void fht_depth_first_dit2(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_depth_first_dit2	src/fht/fhtdit2.cc	/^fht_depth_first_dit2(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dif	doc/fht-doc.txt	/^void fht_dif(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_dif	doc/fht-doc.txt	/^void fht_dif(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dif	src/fht/cfhtdif.cc	/^fht_dif(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_dif	src/fht/fht.h	/^void fht_dif(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
fht_dif	src/fht/fht.h	/^void fht_dif(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_dif	src/fht/fhtdif.cc	/^fht_dif(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dif2	doc/fht-doc.txt	/^void fht_dif2(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dif2	src/fht/fht.h	/^void fht_dif2(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_dif2	src/fht/fhtdif2.cc	/^fht_dif2(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dif_core	doc/fht-doc.txt	/^void fht_dif_core(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_dif_core	doc/fht-doc.txt	/^void fht_dif_core(double *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dif_core	src/fht/cfhtdif.cc	/^fht_dif_core(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_dif_core	src/fht/fht.h	/^void fht_dif_core(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fht_dif_core	src/fht/fht.h	/^void fht_dif_core(double *f, ulong ldn);  \/\/ aux$/;"	p	signature:(double *f, ulong ldn)
fht_dif_core	src/fht/fhtdif.cc	/^fht_dif_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dif_core_16	doc/fht-doc.txt	/^inline void fht_dif_core_16(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_16	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_16(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_2	doc/fht-doc.txt	/^inline void fht_dif_core_2(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_2	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_2(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_32	doc/fht-doc.txt	/^inline void fht_dif_core_32(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_32	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_32(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_4	doc/fht-doc.txt	/^inline void fht_dif_core_4(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_4	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_4(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_64	doc/fht-doc.txt	/^inline void fht_dif_core_64(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_64	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_64(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_8	doc/fht-doc.txt	/^inline void fht_dif_core_8(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dif_core_8	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_8(Type *f)$/;"	f	signature:(Type *f)
fht_dif_core_leq_64	doc/fht-doc.txt	/^inline void fht_dif_core_leq_64(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
fht_dif_core_leq_64	src/fht/shortfhtdifcore.h	/^inline void fht_dif_core_leq_64(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
fht_dit	doc/fht-doc.txt	/^void fht_dit(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_dit	doc/fht-doc.txt	/^void fht_dit(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dit	src/fht/cfhtdit.cc	/^fht_dit(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_dit	src/fht/fht.h	/^void fht_dit(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
fht_dit	src/fht/fht.h	/^void fht_dit(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_dit	src/fht/fhtdit.cc	/^fht_dit(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dit2	doc/fht-doc.txt	/^void fht_dit2(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dit2	src/fht/fht.h	/^void fht_dit2(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_dit2	src/fht/fhtdit2.cc	/^fht_dit2(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dit_core	doc/fht-doc.txt	/^void fht_dit_core(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
fht_dit_core	doc/fht-doc.txt	/^void fht_dit_core(double *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *f, ulong ldn)
fht_dit_core	src/fht/cfhtdit.cc	/^fht_dit_core(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
fht_dit_core	src/fht/fht.h	/^void fht_dit_core(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
fht_dit_core	src/fht/fht.h	/^void fht_dit_core(double *f, ulong ldn);  \/\/ aux$/;"	p	signature:(double *f, ulong ldn)
fht_dit_core	src/fht/fhtdit.cc	/^fht_dit_core(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_dit_core_16	doc/fht-doc.txt	/^inline void fht_dit_core_16(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_16	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_16(Type *f)$/;"	f	signature:(Type *f)
fht_dit_core_2	doc/fht-doc.txt	/^inline void fht_dit_core_2(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_2	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_2(Type *f)$/;"	f	signature:(Type *f)
fht_dit_core_32	doc/fht-doc.txt	/^inline void fht_dit_core_32(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_32	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_32(Type *f)$/;"	f	signature:(Type *f)
fht_dit_core_4	doc/fht-doc.txt	/^inline void fht_dit_core_4(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_4	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_4(Type *f)$/;"	f	signature:(Type *f)
fht_dit_core_64	doc/fht-doc.txt	/^inline void fht_dit_core_64(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_64	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_64(Type *f)$/;"	f	signature:(Type *f)
fht_dit_core_8	doc/fht-doc.txt	/^inline void fht_dit_core_8(Type *f);$/;"	p	file:	signature:(Type *f)
fht_dit_core_8	src/fht/shortfhtditcore.h	/^inline void fht_dit_core_8(Type *f)$/;"	f	signature:(Type *f)
fht_fft	doc/fft-doc.txt	/^void fht_fft(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fht_fft	doc/fft-doc.txt	/^void fht_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft	src/fft/fft.h	/^void fht_fft(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fht_fft	src/fft/fft.h	/^void fht_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft	src/fft/fhtcfft.cc	/^fht_fft(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fht_fft	src/fft/fhtfft.cc	/^fht_fft(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft0	doc/fft-doc.txt	/^void fht_fft0(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fht_fft0	doc/fft-doc.txt	/^void fht_fft0(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft0	src/fft/fft.h	/^void fht_fft0(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
fht_fft0	src/fft/fft.h	/^void fht_fft0(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft0	src/fft/fhtcfft.cc	/^fht_fft0(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fht_fft0	src/fft/fhtfft.cc	/^fht_fft0(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft_auto_convolution	doc/convolution-doc.txt	/^void fht_fft_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_fft_auto_convolution	src/convolution/fftcnvla.cc	/^fht_fft_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_fft_auto_convolution	src/convolution/realconvolution.h	/^void fht_fft_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_fft_auto_convolution0	doc/convolution-doc.txt	/^void fht_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
fht_fft_auto_convolution0	src/convolution/fftcnvla.cc	/^fht_fft_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
fht_fft_auto_convolution0	src/convolution/realconvolution.h	/^void fht_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
fht_fft_conversion	doc/fft-doc.txt	/^void fht_fft_conversion(Complex *f, ulong ldn, int is); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
fht_fft_conversion	doc/fft-doc.txt	/^void fht_fft_conversion(double *fr, double *fi, ulong ldn, int is); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft_conversion	src/fft/fft.h	/^void fht_fft_conversion(Complex *f, ulong ldn, int is);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn, int is)
fht_fft_conversion	src/fft/fft.h	/^void fht_fft_conversion(double *fr, double *fi, ulong ldn, int is);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft_conversion	src/fft/fhtcfft.cc	/^fht_fft_conversion(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
fht_fft_conversion	src/fft/fhtfft.cc	/^fht_fft_conversion(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
fht_fft_convolution	doc/convolution-doc.txt	/^void fht_fft_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_fft_convolution	src/convolution/fftcnvl.cc	/^fht_fft_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_fft_convolution	src/convolution/realconvolution.h	/^void fht_fft_convolution(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_fft_convolution0	doc/convolution-doc.txt	/^void fht_fft_convolution0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_fft_convolution0	src/convolution/fftcnvl.cc	/^fht_fft_convolution0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_fft_convolution0	src/convolution/realconvolution.h	/^void fht_fft_convolution0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
fht_loc	doc/fht-doc.txt	/^inline void fht_loc(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
fht_loc	src/fht/fhtloc2.h	/^inline void fht_loc(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
fht_loc_dif2_core	doc/fht-doc.txt	/^void fht_loc_dif2_core(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
fht_loc_dif2_core	src/fht/fhtloc2.h	/^void fht_loc_dif2_core(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
fht_loc_dit2_core	doc/fht-doc.txt	/^void fht_loc_dit2_core(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
fht_loc_dit2_core	src/fht/fhtloc2.h	/^void fht_loc_dit2_core(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
fht_mul	doc/convolution-doc.txt	/^static inline  void fht_mul(Type xi, Type xj, Type &yi, Type &yj, double v);$/;"	p	file:	signature:(Type xi, Type xj, Type &yi, Type &yj, double v)
fht_mul	src/convolution/fhtmulsqr.h	/^static inline  void fht_mul(Type xi, Type xj, Type &yi, Type &yj, double v)$/;"	f	signature:(Type xi, Type xj, Type &yi, Type &yj, double v)
fht_negacyclic_auto_convolution	doc/convolution-doc.txt	/^void fht_negacyclic_auto_convolution(double *f, ulong ldn, double v\/*=0.0*\/);$/;"	p	file:	signature:(double *f, ulong ldn, double v )
fht_negacyclic_auto_convolution	src/convolution/fhtnegacnvl.cc	/^fht_negacyclic_auto_convolution(double *f, ulong ldn, double v\/*=0.0*\/)$/;"	f	signature:(double *f, ulong ldn, double v )
fht_negacyclic_auto_convolution	src/convolution/weightedconvolution.h	/^void fht_negacyclic_auto_convolution(double *x, ulong ldn, double v=0.0);$/;"	p	signature:(double *x, ulong ldn, double v=0.0)
fht_negacyclic_convolution	doc/convolution-doc.txt	/^void fht_negacyclic_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_negacyclic_convolution	src/convolution/fhtnegacnvl.cc	/^fht_negacyclic_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_negacyclic_convolution	src/convolution/weightedconvolution.h	/^void fht_negacyclic_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	signature:(double * restrict f, double * restrict g, ulong ldn)
fht_real_complex_fft	doc/realfft-doc.txt	/^void fht_real_complex_fft(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
fht_real_complex_fft	src/realfft/realfft.h	/^void fht_real_complex_fft(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
fht_real_complex_fft	src/realfft/realfftbyfht.cc	/^fht_real_complex_fft(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
fht_real_complex_fft0	doc/realfft-doc.txt	/^void fht_real_complex_fft0(double *f, ulong ldn, int is\/*=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int is )
fht_real_complex_fft0	src/realfft/realfft.h	/^void fht_real_complex_fft0(double *f, ulong ldn, int is=+1);$/;"	p	signature:(double *f, ulong ldn, int is=+1)
fht_real_complex_fft0	src/realfft/realfftbyfht.cc	/^fht_real_complex_fft0(double *f, ulong ldn, int is\/*=+1*\/)$/;"	f	signature:(double *f, ulong ldn, int is )
fht_spectrum	doc/fht-doc.txt	/^void fht_spectrum(double *f, ulong ldn, int phasesq\/*=0*\/);$/;"	p	file:	signature:(double *f, ulong ldn, int phasesq )
fht_spectrum	src/fht/fht.h	/^void fht_spectrum(double *f, ulong ldn, int phasesq=0);$/;"	p	signature:(double *f, ulong ldn, int phasesq=0)
fht_spectrum	src/fht/fhtspect.cc	/^fht_spectrum(double *f, ulong ldn, int phasesq\/*=0*\/)$/;"	f	signature:(double *f, ulong ldn, int phasesq )
fht_sqr	doc/convolution-doc.txt	/^static inline  void fht_sqr(Type &xi, Type &xj, double v);$/;"	p	file:	signature:(Type &xi, Type &xj, double v)
fht_sqr	src/convolution/fhtmulsqr.h	/^static inline  void fht_sqr(Type &xi, Type &xj, double v)$/;"	f	signature:(Type &xi, Type &xj, double v)
fht_version	src/fht/fhtmayer.txt	/^char fht_version[] = "Brcwl-Hrtly-Ron-dbld";$/;"	v
fib	src/bits/bit-rll2.h	/^    ulong fib()  const$/;"	f	class:bit_rll2	access:public	signature:() const
fib_rec	demo/comb/fibgray-rec-demo.cc	/^void fib_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
fibonacci	doc/aux0-doc.txt	/^inline ulong fibonacci(ulong n);$/;"	p	file:	signature:(ulong n)
fibonacci	src/aux0/fibonacci.h	/^inline ulong fibonacci(ulong n)$/;"	f	signature:(ulong n)
fibonacci_haar	doc/haar-doc.txt	/^inline void fibonacci_haar(double *a, ulong f0, ulong f1);$/;"	p	file:	signature:(double *a, ulong f0, ulong f1)
fibonacci_haar	src/haar/fib-haar.h	/^inline void fibonacci_haar(double *a, ulong f0, ulong f1)$/;"	f	signature:(double *a, ulong f0, ulong f1)
fibonacci_haar_nn	doc/haar-doc.txt	/^inline void fibonacci_haar_nn(double *a, ulong f0, ulong f1);$/;"	p	file:	signature:(double *a, ulong f0, ulong f1)
fibonacci_haar_nn	src/haar/fib-haar.h	/^inline void fibonacci_haar_nn(double *a, ulong f0, ulong f1)$/;"	f	signature:(double *a, ulong f0, ulong f1)
fibonacci_left	demo/gf2n/lfsr-fibonacci-demo.cc	/^ulong fibonacci_left(ulong x, ulong c, ulong h)$/;"	f	signature:(ulong x, ulong c, ulong h)
fibonacci_pair	doc/aux0-doc.txt	/^inline void fibonacci_pair(ulong n, ulong &f0, ulong &f1);$/;"	p	file:	signature:(ulong n, ulong &f0, ulong &f1)
fibonacci_pair	src/aux0/fibonacci.h	/^inline void fibonacci_pair(ulong n, ulong &f0, ulong &f1)$/;"	f	signature:(ulong n, ulong &f0, ulong &f1)
fibonacci_right	demo/gf2n/lfsr-fibonacci-demo.cc	/^ulong fibonacci_right(ulong x, ulong c, ulong h)$/;"	f	signature:(ulong x, ulong c, ulong h)
fibonacci_walsh	doc/walsh-doc.txt	/^inline void fibonacci_walsh(double *a, ulong f0, ulong f1);$/;"	p	file:	signature:(double *a, ulong f0, ulong f1)
fibonacci_walsh	src/walsh/fib-walsh.h	/^inline void fibonacci_walsh(double *a, ulong f0, ulong f1)$/;"	f	signature:(double *a, ulong f0, ulong f1)
fibonacci_walsh_nn	doc/walsh-doc.txt	/^inline void fibonacci_walsh_nn(double *a, ulong f0, ulong f1);$/;"	p	file:	signature:(double *a, ulong f0, ulong f1)
fibonacci_walsh_nn	src/walsh/fib-walsh.h	/^inline void fibonacci_walsh_nn(double *a, ulong f0, ulong f1)$/;"	f	signature:(double *a, ulong f0, ulong f1)
fibrep2bin	doc/bits-doc.txt	/^static inline ulong fibrep2bin(ulong f);$/;"	p	file:	signature:(ulong f)
fibrep2bin	src/bits/fibrep.h	/^static inline ulong fibrep2bin(ulong f)$/;"	f	signature:(ulong f)
file$	tags	/^$hlinect	scripts\/autodoc.pl	\/^$hlinect = 0;     # count lines in header file$\/;"	v$/;"	v
fill	doc/aux1-doc.txt	/^inline void fill(Type *dst, ulong n, Type v);$/;"	p	file:	signature:(Type *dst, ulong n, Type v)
fill	src/aux1/copy.h	/^inline void fill(Type *dst, ulong n, Type v)$/;"	f	signature:(Type *dst, ulong n, Type v)
fill	src/aux2/attic/copy2d.h	/^void fill(Type **f, ulong nr, ulong nc, Type v)$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type v)
fill	src/ds/array2d.h	/^    void fill(Type v)$/;"	f	class:array2d	access:public	signature:(Type v)
fill	src/ds/array3d.h	/^    void fill(Type v)$/;"	f	class:array3d	access:public	signature:(Type v)
fill1	demo/fft/fht-bench.cc	/^inline void fill1(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
fill1	demo/fft/walsh-bench.cc	/^inline void fill1(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
find_mark_idx	demo/comb/perm-involution-naf-demo.cc	/^ulong find_mark_idx(ulong d)$/;"	f	signature:(ulong d)
first	src/bits/bit-necklace.h	/^    void first()$/;"	f	class:bit_necklace	access:public	signature:()
first	src/bits/bit-rll2.h	/^    void first()$/;"	f	class:bit_rll2	access:public	signature:()
first	src/bits/bit-sl-gray.h	/^    void first(ulong n)$/;"	f	class:bit_sl_gray	access:public	signature:(ulong n)
first	src/bits/bitcombshifts.h	/^    ulong first()  { return first(n_, k_); }$/;"	f	class:bit_comb_shifts	access:public	signature:()
first	src/bits/bitcombshifts.h	/^    ulong first(ulong n, ulong k)$/;"	f	class:bit_comb_shifts	access:public	signature:(ulong n, ulong k)
first	src/bits/bitsubset-gray.h	/^    ulong first()$/;"	f	class:bit_subset_gray	access:public	signature:()
first	src/bits/bitsubset-gray.h	/^    ulong first(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
first	src/bits/bitsubset.h	/^    ulong first()  { first(V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
first	src/bits/bitsubset.h	/^    ulong first(ulong v)  { V=v;  U=0;  return U; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
first	src/bits/kolakoski-seq.h	/^    void first()$/;"	f	class:kolakoski_seq	access:public	signature:()
first	src/bpol/mersenne-coprime.h	/^    void first(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
first	src/comb/acyclic-map.h	/^    void first()$/;"	f	class:acyclic_map	access:public	signature:()
first	src/comb/arrangement-lex.h	/^    void first()$/;"	f	class:arrangement_lex	access:public	signature:()
first	src/comb/arrangement-rgs.h	/^    void first()$/;"	f	class:arrangement_rgs	access:public	signature:()
first	src/comb/ascent-alt-rgs.h	/^    void first()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
first	src/comb/ascent-nonflat-rgs.h	/^    void first()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
first	src/comb/ascent-rgs-subset-lex.h	/^    void first()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
first	src/comb/ascent-rgs.h	/^    void first()$/;"	f	class:ascent_rgs	access:public	signature:()
first	src/comb/attic/ascent-rgs.h	/^    void first()$/;"	f	class:ascent_rgs	access:public	signature:()
first	src/comb/attic/combcolex.h	/^    ulong first()$/;"	f	class:comb_colex	access:public	signature:()
first	src/comb/attic/combination-altminchange.h	/^    ulong first()$/;"	f	class:combination_altminchange	access:public	signature:()
first	src/comb/attic/combination-minchange.h	/^    ulong first()$/;"	f	class:combination_minchange	access:public	signature:()
first	src/comb/attic/comblex.h	/^    ulong first()$/;"	f	class:comb_lex	access:public	signature:()
first	src/comb/attic/combminchange.h	/^    ulong first()$/;"	f	class:comb_minchange	access:public	signature:()
first	src/comb/attic/compositionalt.h	/^    ulong first()$/;"	f	class:composition_alt	access:public	signature:()
first	src/comb/attic/perm-minchange.h	/^    void first()$/;"	f	class:perm_minchange	access:public	signature:()
first	src/comb/attic/perm-trotter.h	/^    void first()$/;"	f	class:perm_trotter	access:public	signature:()
first	src/comb/attic/permvisit.cc	/^perm_visit::first()$/;"	f	class:perm_visit	signature:()
first	src/comb/attic/permvisit.h	/^    void first();$/;"	p	class:perm_visit	access:protected	signature:()
first	src/comb/attic/subset-monotone.h	/^    ulong first()$/;"	f	class:subset_monotone	access:public	signature:()
first	src/comb/balanced-ordered-tree-lev-seq.h	/^    void first()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
first	src/comb/binary-huffman.h	/^    void first()$/;"	f	class:binary_huffman	access:public	signature:()
first	src/comb/binary-necklace.h	/^    void first()$/;"	f	class:binary_necklace	access:public	signature:()
first	src/comb/binary-sl-gray.h	/^    void first()$/;"	f	class:binary_sl_gray	access:public	signature:()
first	src/comb/catalan-path-lex.h	/^    void first()$/;"	f	class:catalan_path_lex	access:public	signature:()
first	src/comb/catalan-rgs-gray.h	/^    void first(bool dr0=true)$/;"	f	class:catalan_rgs_gray	access:public	signature:(bool dr0=true)
first	src/comb/catalan-rgs-gslex.h	/^    void first()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
first	src/comb/catalan-rgs-subset-lex.h	/^    void first()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
first	src/comb/catalan-rgs.h	/^    void first()$/;"	f	class:catalan_rgs	access:public	signature:()
first	src/comb/catalan-step-rgs-colex.h	/^    void first()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
first	src/comb/catalan-step-rgs-lex.h	/^    void first()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
first	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void first()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
first	src/comb/catalan.h	/^    void first(bool xdr, int dr0)$/;"	f	class:catalan	access:public	signature:(bool xdr, int dr0)
first	src/comb/cayley-perm.h	/^    void first()$/;"	f	class:cayley_perm	access:public	signature:()
first	src/comb/cayley-perm.h	/^    void first(ulong mi, ulong mx)$/;"	f	class:cayley_perm	access:public	signature:(ulong mi, ulong mx)
first	src/comb/change-rgs.h	/^    void first()$/;"	f	class:change_rgs	access:public	signature:()
first	src/comb/check-kpermgen.h	/^    void first(const ulong *x)$/;"	f	class:check_kpermgen	access:public	signature:(const ulong *x)
first	src/comb/check-mixedradix.h	/^    void first(const ulong *x)$/;"	f	class:check_mixedradix	access:public	signature:(const ulong *x)
first	src/comb/check-permgen.h	/^    void first(const ulong *x)$/;"	f	class:check_permgen	access:public	signature:(const ulong *x)
first	src/comb/combination-chase.h	/^    void first()$/;"	f	class:combination_chase	access:public	signature:()
first	src/comb/combination-colex.h	/^    void first()$/;"	f	class:combination_colex	access:public	signature:()
first	src/comb/combination-emk.h	/^    void first()$/;"	f	class:combination_emk	access:public	signature:()
first	src/comb/combination-endo.h	/^    void first()$/;"	f	class:combination_endo	access:public	signature:()
first	src/comb/combination-enup.h	/^    void first()$/;"	f	class:combination_enup	access:public	signature:()
first	src/comb/combination-lex.h	/^    void first()$/;"	f	class:combination_lex	access:public	signature:()
first	src/comb/combination-mod.h	/^    void first()$/;"	f	class:combination_mod	access:public	signature:()
first	src/comb/combination-pref.h	/^    void first()$/;"	f	class:combination_pref	access:public	signature:()
first	src/comb/combination-revdoor.h	/^    void first()$/;"	f	class:combination_revdoor	access:public	signature:()
first	src/comb/composition-colex.h	/^    void first()$/;"	f	class:composition_colex	access:public	signature:()
first	src/comb/composition-colex2.h	/^    void first()$/;"	f	class:composition_colex2	access:public	signature:()
first	src/comb/composition-dist-unimodal.h	/^    void first()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
first	src/comb/composition-ex-colex.h	/^    void first()$/;"	f	class:composition_ex_colex	access:public	signature:()
first	src/comb/composition-ex-lex.h	/^    void first()$/;"	f	class:composition_ex_lex	access:public	signature:()
first	src/comb/composition-nz-binary.h	/^    void first()$/;"	f	class:composition_nz_binary	access:public	signature:()
first	src/comb/composition-nz-carlitz.h	/^    void first()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
first	src/comb/composition-nz-first-max.h	/^    void first()$/;"	f	class:composition_nz_first_max	access:public	signature:()
first	src/comb/composition-nz-gray.h	/^    void first()$/;"	f	class:composition_nz_gray	access:public	signature:()
first	src/comb/composition-nz-gray2.h	/^    void first()$/;"	f	class:composition_nz_gray2	access:public	signature:()
first	src/comb/composition-nz-i-smooth.h	/^    void first()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
first	src/comb/composition-nz-left-2smooth.h	/^    void first()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
first	src/comb/composition-nz-left-smooth.h	/^    void first()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
first	src/comb/composition-nz-max.h	/^    void first()$/;"	f	class:composition_nz_max	access:public	signature:()
first	src/comb/composition-nz-min.h	/^    void first()$/;"	f	class:composition_nz_min	access:public	signature:()
first	src/comb/composition-nz-minc.h	/^    void first()$/;"	f	class:composition_nz_minc	access:public	signature:()
first	src/comb/composition-nz-numparts.h	/^    void first()  { first_k(1); }$/;"	f	class:composition_nz_numparts	access:public	signature:()
first	src/comb/composition-nz-odd-subset-lex.h	/^    void first()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
first	src/comb/composition-nz-odd.h	/^    void first()$/;"	f	class:composition_nz_odd	access:public	signature:()
first	src/comb/composition-nz-restrpref.h	/^    void first(cond_func cnd = 0)$/;"	f	class:composition_nz_restrpref	access:public	signature:(cond_func cnd = 0)
first	src/comb/composition-nz-rl.h	/^    void first()$/;"	f	class:composition_nz_rl	access:public	signature:()
first	src/comb/composition-nz-smooth.h	/^    void first()$/;"	f	class:composition_nz_smooth	access:public	signature:()
first	src/comb/composition-nz-sorts.h	/^    void first()$/;"	f	class:composition_nz_sorts	access:public	signature:()
first	src/comb/composition-nz-sorts2-pp.h	/^    void first()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
first	src/comb/composition-nz-sorts2.h	/^    void first()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
first	src/comb/composition-nz-subset-lex.h	/^    void first()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
first	src/comb/composition-nz-superdiagonal.h	/^    void first()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
first	src/comb/composition-nz-upstep.h	/^    void first()$/;"	f	class:composition_nz_upstep	access:public	signature:()
first	src/comb/composition-nz-weakly-unimodal.h	/^    void first()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
first	src/comb/composition-nz.h	/^    void first()$/;"	f	class:composition_nz	access:public	signature:()
first	src/comb/composition-unimodal.h	/^    void first()$/;"	f	class:composition_unimodal	access:public	signature:()
first	src/comb/cyclic-perm.h	/^    void first()$/;"	f	class:cyclic_perm	access:public	signature:()
first	src/comb/descent-rgs.h	/^    void first()$/;"	f	class:descent_rgs	access:public	signature:()
first	src/comb/dyck-gray.h	/^    void first(ulong k=0)$/;"	f	class:dyck_gray	access:public	signature:(ulong k=0)
first	src/comb/dyck-gray2.h	/^    void first()$/;"	f	class:dyck_gray2	access:public	signature:()
first	src/comb/dyck-pref.h	/^    void first()$/;"	f	class:dyck_pref	access:public	signature:()
first	src/comb/dyck-pref2.h	/^    void first()$/;"	f	class:dyck_pref2	access:public	signature:()
first	src/comb/dyck-rgs-subset-lex.h	/^    void first()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
first	src/comb/dyck-rgs.h	/^    void first()$/;"	f	class:dyck_rgs	access:public	signature:()
first	src/comb/id-tree-lev-seq.h	/^    void first()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
first	src/comb/involution-zero-map-rgs.h	/^    void first()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
first	src/comb/isoscent-rgs.h	/^    void first()$/;"	f	class:isoscent_rgs	access:public	signature:()
first	src/comb/kperm-gray.h	/^    void first(ulong k)$/;"	f	class:kperm_gray	access:public	signature:(ulong k)
first	src/comb/kperm-lex.h	/^    void first(ulong k)$/;"	f	class:kperm_lex	access:public	signature:(ulong k)
first	src/comb/ksubset-gray.h	/^    ulong first()$/;"	f	class:ksubset_gray	access:public	signature:()
first	src/comb/ksubset-lex.h	/^    ulong first()$/;"	f	class:ksubset_lex	access:public	signature:()
first	src/comb/lyndon-words.h	/^    ulong first()$/;"	f	class:lyndon_words	access:public	signature:()
first	src/comb/map23-rgs.h	/^    void first()$/;"	f	class:map23_rgs	access:public	signature:()
first	src/comb/mixedradix-colex.h	/^    void first()$/;"	f	class:mixedradix_colex	access:public	signature:()
first	src/comb/mixedradix-endo-gray.h	/^    void first()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
first	src/comb/mixedradix-endo.h	/^    void first()$/;"	f	class:mixedradix_endo	access:public	signature:()
first	src/comb/mixedradix-gray.h	/^    void first()$/;"	f	class:mixedradix_gray	access:public	signature:()
first	src/comb/mixedradix-gray2.h	/^    void first()$/;"	f	class:mixedradix_gray2	access:public	signature:()
first	src/comb/mixedradix-gslex-alt.h	/^    void first()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
first	src/comb/mixedradix-gslex-alt2.h	/^    void first()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
first	src/comb/mixedradix-gslex.h	/^    void first()$/;"	f	class:mixedradix_gslex	access:public	signature:()
first	src/comb/mixedradix-gslex2.h	/^    void first()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
first	src/comb/mixedradix-lex.h	/^    void first()$/;"	f	class:mixedradix_lex	access:public	signature:()
first	src/comb/mixedradix-modular-gray.h	/^    void first()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
first	src/comb/mixedradix-modular-gray2.h	/^    void first()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
first	src/comb/mixedradix-naf-gray.h	/^    void first()  { init_vals(+1); }$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
first	src/comb/mixedradix-naf-subset-lex.h	/^    void first()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
first	src/comb/mixedradix-naf.h	/^    void first()$/;"	f	class:mixedradix_naf	access:public	signature:()
first	src/comb/mixedradix-restrpref.h	/^    void first( cond_func cnd = 0 )$/;"	f	class:mixedradix_restrpref	access:public	signature:( cond_func cnd = 0 )
first	src/comb/mixedradix-rfact.h	/^    void first()$/;"	f	class:mixedradix_rfact	access:public	signature:()
first	src/comb/mixedradix-sl-gray.h	/^    void first()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
first	src/comb/mixedradix-sod-lex.h	/^    bool first(ulong k)$/;"	f	class:mixedradix_sod_lex	access:public	signature:(ulong k)
first	src/comb/mixedradix-subset-lex.h	/^    void first()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
first	src/comb/mixedradix-subset-lexrev.h	/^    void first()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
first	src/comb/motzkin-nonflat-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
first	src/comb/motzkin-path-lex.h	/^    void first()$/;"	f	class:motzkin_path_lex	access:public	signature:()
first	src/comb/motzkin-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
first	src/comb/motzkin-step-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
first	src/comb/mpartition.h	/^    void first()$/;"	f	class:mpartition	access:public	signature:()
first	src/comb/mpartition2.h	/^    void first()$/;"	f	class:mpartition2	access:public	signature:()
first	src/comb/mset-perm-gray.h	/^    void first()$/;"	f	class:mset_perm_gray	access:public	signature:()
first	src/comb/mset-perm-lex.h	/^    void first()$/;"	f	class:mset_perm_lex	access:public	signature:()
first	src/comb/mset-perm-pref.h	/^    void first()$/;"	f	class:mset_perm_pref	access:public	signature:()
first	src/comb/necklace.h	/^    void first()$/;"	f	class:necklace	access:public	signature:()
first	src/comb/ordered-tree-branches.h	/^    void first()$/;"	f	class:ordered_tree_branches	access:public	signature:()
first	src/comb/ordered-tree-branching-seq.h	/^    void first()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
first	src/comb/ordered-tree-lev-seq.h	/^    void first()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
first	src/comb/paren-gray.h	/^    void first()$/;"	f	class:paren_gray	access:public	signature:()
first	src/comb/paren-lex.h	/^    void first()  { for (ulong i=1; i<=k_; ++i)  x_[i] = i - 1; }$/;"	f	class:paren_lex	access:public	signature:()
first	src/comb/paren-pref.h	/^    void first()$/;"	f	class:paren_pref	access:public	signature:()
first	src/comb/paren.h	/^    void first()  { for (ulong i=0; i<k_; ++i)  x_[i] = i; }$/;"	f	class:paren	access:public	signature:()
first	src/comb/partition-2fall-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
first	src/comb/partition-2fall-asc.h	/^    void first()$/;"	f	class:partition_2fall_asc	access:public	signature:()
first	src/comb/partition-2fall-desc.h	/^    void first()$/;"	f	class:partition_2fall_desc	access:public	signature:()
first	src/comb/partition-asc-2rep-subset-lex.h	/^    void first()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
first	src/comb/partition-asc-2rep.h	/^    void first()$/;"	f	class:partition_asc_2rep	access:public	signature:()
first	src/comb/partition-asc-perim.h	/^    void first()$/;"	f	class:partition_asc_perim	access:public	signature:()
first	src/comb/partition-asc-sorts.h	/^    void first()$/;"	f	class:partition_asc_sorts	access:public	signature:()
first	src/comb/partition-asc-sorts2-pp.h	/^    void first()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
first	src/comb/partition-asc-sorts2.h	/^    void first()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
first	src/comb/partition-asc-subset-lex-csh.h	/^    void first()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
first	src/comb/partition-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
first	src/comb/partition-asc.h	/^    void first()$/;"	f	class:partition_asc	access:public	signature:()
first	src/comb/partition-binary-asc.h	/^    void first()$/;"	f	class:partition_binary_asc	access:public	signature:()
first	src/comb/partition-binary-desc.h	/^    void first()$/;"	f	class:partition_binary_desc	access:public	signature:()
first	src/comb/partition-desc-bb.h	/^    bool first()$/;"	f	class:partition_desc_bb	access:public	signature:()
first	src/comb/partition-desc.h	/^    void first()$/;"	f	class:partition_desc	access:public	signature:()
first	src/comb/partition-dist-asc-len.h	/^    bool first(ulong m=1)$/;"	f	class:partition_dist_asc_len	access:public	signature:(ulong m=1)
first	src/comb/partition-dist-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
first	src/comb/partition-dist-asc.h	/^    void first()$/;"	f	class:partition_dist_asc	access:public	signature:()
first	src/comb/partition-dist-d-asc.h	/^    void first()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
first	src/comb/partition-dist-desc.h	/^    void first()$/;"	f	class:partition_dist_desc	access:public	signature:()
first	src/comb/partition-gen.h	/^    void first(ulong x)$/;"	f	class:partition_gen	access:public	signature:(ulong x)
first	src/comb/partition-nonsquashing-desc.h	/^    void first()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
first	src/comb/partition-odd-asc-subset-lex-csh.h	/^    void first()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
first	src/comb/partition-odd-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
first	src/comb/partition-odd-asc.h	/^    void first()$/;"	f	class:partition_odd_asc	access:public	signature:()
first	src/comb/partition-odd-desc.h	/^    void first()$/;"	f	class:partition_odd_desc	access:public	signature:()
first	src/comb/partition-odd-nonsquashing-desc.h	/^    void first()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
first	src/comb/partition-rgs-lex.h	/^    void first()$/;"	f	class:partition_rgs_lex	access:public	signature:()
first	src/comb/partition-s-desc.h	/^    void first()$/;"	f	class:partition_s_desc	access:public	signature:()
first	src/comb/partition-strongly-decr-desc.h	/^    void first()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
first	src/comb/partition.h	/^    void first()$/;"	f	class:partition	access:public	signature:()
first	src/comb/perm-colex.h	/^    void first()$/;"	f	class:perm_colex	access:public	signature:()
first	src/comb/perm-derange.h	/^    void first()$/;"	f	class:perm_derange	access:public	signature:()
first	src/comb/perm-gray-ffact.h	/^    void first()$/;"	f	class:perm_gray_ffact	access:public	signature:()
first	src/comb/perm-gray-ffact2.h	/^    void first()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
first	src/comb/perm-gray-lipski.h	/^    void first()$/;"	f	class:perm_gray_lipski	access:public	signature:()
first	src/comb/perm-gray-rfact.h	/^    void first()$/;"	f	class:perm_gray_rfact	access:public	signature:()
first	src/comb/perm-gray-rot1.h	/^    void first()$/;"	f	class:perm_gray_rot1	access:public	signature:()
first	src/comb/perm-gray-wells.h	/^    void first()$/;"	f	class:perm_gray_wells	access:public	signature:()
first	src/comb/perm-heap.h	/^    void first()$/;"	f	class:perm_heap	access:public	signature:()
first	src/comb/perm-heap2-swaps.h	/^    void first()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
first	src/comb/perm-heap2.h	/^    void first()$/;"	f	class:perm_heap2	access:public	signature:()
first	src/comb/perm-involution.h	/^    void first()$/;"	f	class:perm_involution	access:public	signature:()
first	src/comb/perm-ives.h	/^    void first()$/;"	f	class:perm_ives	access:public	signature:()
first	src/comb/perm-lex-inv.h	/^    void first()$/;"	f	class:perm_lex_inv	access:public	signature:()
first	src/comb/perm-lex.h	/^    void first()$/;"	f	class:perm_lex	access:public	signature:()
first	src/comb/perm-lex2.h	/^    void first()$/;"	f	class:perm_lex2	access:public	signature:()
first	src/comb/perm-mv0.h	/^    void first()$/;"	f	class:perm_mv0	access:public	signature:()
first	src/comb/perm-pref.h	/^    void first()$/;"	f	class:perm_pref	access:public	signature:()
first	src/comb/perm-rec.h	/^    void first()$/;"	f	class:perm_rec	access:public	signature:()
first	src/comb/perm-rev.h	/^    void first()$/;"	f	class:perm_rev	access:public	signature:()
first	src/comb/perm-rev2.h	/^    void first()$/;"	f	class:perm_rev2	access:public	signature:()
first	src/comb/perm-rot.h	/^    void first()$/;"	f	class:perm_rot	access:public	signature:()
first	src/comb/perm-st-gray.h	/^    void first()$/;"	f	class:perm_st_gray	access:public	signature:()
first	src/comb/perm-st-pref.h	/^    void first()$/;"	f	class:perm_st_pref	access:public	signature:()
first	src/comb/perm-st.h	/^    void first()$/;"	f	class:perm_st	access:public	signature:()
first	src/comb/perm-star-swaps.h	/^    void first()$/;"	f	class:perm_star_swaps	access:public	signature:()
first	src/comb/perm-star.h	/^    void first()$/;"	f	class:perm_star	access:public	signature:()
first	src/comb/perm-trotter-lg.h	/^    void first()$/;"	f	class:perm_trotter_lg	access:public	signature:()
first	src/comb/perm-trotter.h	/^    void first()$/;"	f	class:perm_trotter	access:public	signature:()
first	src/comb/rgs-fincr.h	/^    void first()$/;"	f	class:rgs_fincr	access:public	signature:()
first	src/comb/rgs-kincr.h	/^    void first()$/;"	f	class:rgs_kincr	access:public	signature:()
first	src/comb/rgs-maxincr.h	/^    void first()$/;"	f	class:rgs_maxincr	access:public	signature:()
first	src/comb/ruler-func-s.h	/^    void first()$/;"	f	class:ruler_func_s	access:public	signature:()
first	src/comb/ruler-func.h	/^    void first()$/;"	f	class:ruler_func	access:public	signature:()
first	src/comb/ruler-func1.h	/^    void first()$/;"	f	class:ruler_func1	access:public	signature:()
first	src/comb/schroeder-path-lex.h	/^    void first()$/;"	f	class:schroeder_path_lex	access:public	signature:()
first	src/comb/schroeder-rgs-lex.h	/^    void first()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
first	src/comb/score-sequence.h	/^    void first()$/;"	f	class:score_sequence	access:public	signature:()
first	src/comb/setpart-ccf-rgs-lex.h	/^    void first()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
first	src/comb/setpart-ck-rgs.h	/^    void first()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
first	src/comb/setpart-p-rgs-lex.h	/^    void first(ulong p)$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(ulong p)
first	src/comb/setpart-rgs-gray.h	/^    void first(int dr0)$/;"	f	class:setpart_rgs_gray	access:public	signature:(int dr0)
first	src/comb/setpart-rgs-lex.h	/^    void first()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
first	src/comb/setpart-rgs-subset-lex.h	/^    void first()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
first	src/comb/setpart-s-zero-map-rgs.h	/^    void first()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
first	src/comb/setpart-zero-map-rgs.h	/^    void first()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
first	src/comb/setpart.cc	/^setpart::first(bool xdr, int dr0)$/;"	f	class:setpart	signature:(bool xdr, int dr0)
first	src/comb/setpart.h	/^    void first(bool xdr, int dr0);$/;"	p	class:setpart	access:public	signature:(bool xdr, int dr0)
first	src/comb/skew-binary.h	/^    void first()$/;"	f	class:skew_binary	access:public	signature:()
first	src/comb/smooth-rfact-rgs.h	/^    void first( )$/;"	f	class:smooth_rfact_rgs	access:public	signature:( )
first	src/comb/string-subst.h	/^    bool first()$/;"	f	class:string_subst	access:public	signature:()
first	src/comb/subset-debruijn.h	/^    void first()$/;"	f	class:subset_debruijn	access:public	signature:()
first	src/comb/subset-deltalex.h	/^    void first()$/;"	f	class:subset_deltalex	access:public	signature:()
first	src/comb/subset-gray-delta.h	/^    void first(ulong v=0)$/;"	f	class:subset_gray_delta	access:public	signature:(ulong v=0)
first	src/comb/subset-gray.h	/^    ulong first()  { k_ = 0;  return k_; }$/;"	f	class:subset_gray	access:public	signature:()
first	src/comb/subset-lex.h	/^    ulong first()$/;"	f	class:subset_lex	access:public	signature:()
first	src/comb/tree-lev-seq.h	/^    void first()$/;"	f	class:tree_lev_seq	access:public	signature:()
first	src/comb/weakly-unimodal-rgs-lex.h	/^    void first()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
first	src/comb/young-tab-rgs-subset-lex.h	/^    void first()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
first	src/comb/young-tab-rgs.h	/^    void first()$/;"	f	class:young_tab_rgs	access:public	signature:()
first	src/mod/divisors.h	/^    umod_t first()$/;"	f	class:divisors	access:public	signature:()
first_ascent_idx	src/comb/word-stats.h	/^    ulong first_ascent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
first_clear	src/ds/bitarray.h	/^    ulong first_clear()$/;"	f	class:bitarray	access:public	signature:()
first_comb	doc/bits-doc.txt	/^static inline ulong first_comb(ulong k);$/;"	p	file:	signature:(ulong k)
first_comb	src/bits/bitcombcolex.h	/^static inline ulong first_comb(ulong k)$/;"	f	signature:(ulong k)
first_descent_idx	src/comb/word-stats.h	/^    ulong first_descent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
first_digit	src/comb/binary-debruijn.h	/^    ulong first_digit()$/;"	f	class:binary_debruijn	access:public	signature:()
first_digit	src/comb/debruijn.h	/^    ulong first_digit()$/;"	f	class:debruijn	access:public	signature:()
first_eq_idx	doc/sort-doc.txt	/^inline ulong first_eq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
first_eq_idx	src/sort/usearch.h	/^inline ulong first_eq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
first_eq_idx_large	doc/sort-doc.txt	/^inline ulong first_eq_idx_large(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
first_eq_idx_large	src/sort/usearch.h	/^inline ulong first_eq_idx_large(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
first_flat_step_idx	src/comb/word-stats.h	/^    ulong first_flat_step_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
first_geq_idx	doc/sort-doc.txt	/^inline ulong first_geq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
first_geq_idx	src/sort/usearch.h	/^inline ulong first_geq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
first_geq_sumbox_idx	src/aux1/attic/scanbox.h	/^ulong first_geq_sumbox_idx(const Type *f, ulong n, Type v, ulong boxlen)$/;"	f	signature:(const Type *f, ulong n, Type v, ulong boxlen)
first_id	src/comb/perm-st-pref.h	/^    void first_id()  \/\/ start with identical permutation$/;"	f	class:perm_st_pref	access:public	signature:()
first_id	src/comb/perm-st.h	/^    void first_id()  \/\/ start with identical permutation$/;"	f	class:perm_st	access:public	signature:()
first_idx	src/comb/young-tab-rgs-subset-lex.h	/^    ulong first_idx(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong d) const
first_idx	src/comb/young-tab-rgs.h	/^    ulong first_idx(ulong d)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong d) const
first_idx	src/sort/attic/usearchfunc.h	/^inline ulong first_idx(const Type *f, ulong n, bool (* func)(Type))$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type))
first_k	src/comb/composition-nz-numparts.h	/^    void first_k(ulong k)$/;"	f	class:composition_nz_numparts	access:private	signature:(ulong k)
first_leq_idx	doc/sort-doc.txt	/^inline ulong first_leq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
first_leq_idx	src/sort/usearch.h	/^inline ulong first_leq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
first_leq_sumbox_idx	src/aux1/attic/scanbox.h	/^ulong first_leq_sumbox_idx(const Type *f, ulong n, Type v, ulong boxlen)$/;"	f	signature:(const Type *f, ulong n, Type v, ulong boxlen)
first_max_idx	src/comb/word-stats.h	/^    ulong first_max_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
first_min_idx	src/comb/word-stats.h	/^    ulong first_min_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
first_neq_idx	doc/sort-doc.txt	/^inline ulong first_neq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
first_neq_idx	src/sort/usearch.h	/^inline ulong first_neq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
first_parenword	doc/bits-doc.txt	/^static inline ulong first_parenword(ulong n);$/;"	p	file:	signature:(ulong n)
first_parenword	src/bits/parenwords.h	/^static inline ulong first_parenword(ulong n)$/;"	f	signature:(ulong n)
first_part	src/comb/composition-nz-binary.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
first_part	src/comb/composition-nz-first-max.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ also: max part$/;"	f	class:composition_nz_first_max	access:public	signature:() const
first_part	src/comb/composition-nz-gray.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
first_part	src/comb/composition-nz-gray2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
first_part	src/comb/composition-nz-max.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_max	access:public	signature:() const
first_part	src/comb/composition-nz-minc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
first_part	src/comb/composition-nz-odd.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
first_part	src/comb/composition-nz-restrpref.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
first_part	src/comb/composition-nz-rl.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
first_part	src/comb/composition-nz-sorts.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
first_part	src/comb/composition-nz-sorts2-pp.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
first_part	src/comb/composition-nz-sorts2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
first_part	src/comb/composition-nz-subset-lex.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
first_part	src/comb/composition-nz-upstep.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
first_part	src/comb/composition-nz.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:composition_nz	access:public	signature:() const
first_part	src/comb/partition-asc-perim.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
first_part	src/comb/partition-asc-sorts.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
first_part	src/comb/partition-asc-sorts2-pp.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
first_part	src/comb/partition-asc-sorts2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
first_part	src/comb/partition-asc-subset-lex-csh.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
first_part	src/comb/partition-asc-subset-lex.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
first_part	src/comb/partition-asc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc	access:public	signature:() const
first_part	src/comb/partition-desc-bb.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
first_part	src/comb/partition-desc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_desc	access:public	signature:() const
first_part	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong first_part()  const  {  return a_[1]; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
first_part	src/comb/partition-odd-asc-subset-lex.h	/^    ulong first_part()  const  {  return a_[1]; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
first_partition	src/comb/partition-dist-desc.h	/^    ulong first_partition(ulong s, ulong j)$/;"	f	class:partition_dist_desc	access:private	signature:(ulong s, ulong j)
first_sequency	doc/bits-doc.txt	/^static inline ulong first_sequency(ulong k);$/;"	p	file:	signature:(ulong k)
first_sequency	src/bits/bitsequency.h	/^static inline ulong first_sequency(ulong k)$/;"	f	signature:(ulong k)
first_set	src/ds/bitarray.h	/^    ulong first_set()$/;"	f	class:bitarray	access:public	signature:()
first_sort	src/comb/composition-nz-sorts.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
first_sort	src/comb/composition-nz-sorts2-pp.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
first_sort	src/comb/composition-nz-sorts2.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
first_sort	src/comb/partition-asc-perim.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
first_sort	src/comb/partition-asc-sorts.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
first_sort	src/comb/partition-asc-sorts2-pp.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
first_sort	src/comb/partition-asc-sorts2.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
first_string	src/comb/binary-debruijn.h	/^    ulong first_string()$/;"	f	class:binary_debruijn	access:public	signature:()
first_string	src/comb/debruijn.h	/^    ulong first_string()$/;"	f	class:debruijn	access:public	signature:()
first_val	src/comb/word-stats.h	/^    ulong first_val()  const$/;"	f	class:word_stats	access:public	signature:() const
first_val_idx	src/comb/word-stats.h	/^    ulong first_val_idx(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
first_zero_idx	src/comb/word-stats.h	/^    ulong first_zero_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
fl_	src/ds/left-right-array.h	/^    ulong *fl_;  \/\/ Free indices Left (including current element) in bsearch interval$/;"	m	class:left_right_array	access:public
fl_ccolor11	doc/bits-doc.txt	/^static inline uint fl_ccolor11(uint c, double v);$/;"	p	file:	signature:(uint c, double v)
fl_ccolor11	src/bits/colormix-fl.h	/^static inline uint fl_ccolor11(uint c, double v)$/;"	f	signature:(uint c, double v)
fl_color01	doc/bits-doc.txt	/^static inline uint fl_color01(uint c, double v);$/;"	p	file:	signature:(uint c, double v)
fl_color01	src/bits/colormix-fl.h	/^static inline uint fl_color01(uint c, double v)$/;"	f	signature:(uint c, double v)
fl_color_mix_11	doc/bits-doc.txt	/^static inline uint fl_color_mix_11(uint c1, uint c2, double v);$/;"	p	file:	signature:(uint c1, uint c2, double v)
fl_color_mix_11	src/bits/colormix-fl.h	/^static inline uint fl_color_mix_11(uint c1, uint c2, double v)$/;"	f	signature:(uint c1, uint c2, double v)
fl_color_mix_1b1	doc/bits-doc.txt	/^static inline uint fl_color_mix_1b1(uint c1, uint c2, double v);$/;"	p	file:	signature:(uint c1, uint c2, double v)
fl_color_mix_1b1	src/bits/colormix-fl.h	/^static inline uint fl_color_mix_1b1(uint c1, uint c2, double v)$/;"	f	signature:(uint c1, uint c2, double v)
fl_swaps	src/comb/perm-trotter.h	/^    void fl_swaps()$/;"	f	class:perm_trotter	access:private	signature:()
fo	demo/comb/necklace-gray-demo.cc	/^ulong *fo;  \/\/ aux: detect extra transitions$/;"	v
fo	demo/comb/necklace-gray3-demo.cc	/^long *fo;  \/\/ aux: detect extra transitions$/;"	v
follows	INSTALL.txt	/^The install directory can be changed as follows,$/;"	v
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
fourier_shift	doc/fft-doc.txt	/^void fourier_shift(Complex *a, ulong n, double v); \/\/ aux$/;"	p	file:	signature:(Complex *a, ulong n, double v)
fourier_shift	doc/fft-doc.txt	/^void fourier_shift(double *fr, double *fi, ulong n, double v); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift	doc/fft-doc.txt	/^void fourier_shift(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fourier_shift	src/fft/fft.h	/^void fourier_shift(Complex *a, ulong n, double v);  \/\/ aux$/;"	p	signature:(Complex *a, ulong n, double v)
fourier_shift	src/fft/fft.h	/^void fourier_shift(double *fr, double *fi, ulong n, double v);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift	src/fft/fft.h	/^void fourier_shift(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fourier_shift	src/fft/fouriershift.cc	/^fourier_shift(Complex *a, ulong n, double v)$/;"	f	signature:(Complex *a, ulong n, double v)
fourier_shift	src/fft/fouriershift.cc	/^fourier_shift(double *fr, double *fi, ulong n, double v)$/;"	f	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift	src/fft/fouriershift.cc	/^fourier_shift(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)$/;"	f	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fourier_shift_imag0	doc/fft-doc.txt	/^void fourier_shift_imag0(double *fr, double *fi, ulong n, double v); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift_imag0	doc/fft-doc.txt	/^void fourier_shift_imag0(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fourier_shift_imag0	src/fft/fft.h	/^void fourier_shift_imag0(double *fr, double *fi, ulong n, double v);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift_imag0	src/fft/fft.h	/^void fourier_shift_imag0(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fourier_shift_imag0	src/fft/fouriershift.cc	/^fourier_shift_imag0(double *fr, double *fi, ulong n, double v)$/;"	f	signature:(double *fr, double *fi, ulong n, double v)
fourier_shift_imag0	src/fft/fouriershift.cc	/^fourier_shift_imag0(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)$/;"	f	signature:(double *fr, double *fi, ulong n, double v, ulong k0, ulong kn)
fpos_	src/ds/deque.h	/^    ulong fpos_;  \/\/ position of first element in buffer$/;"	m	class:deque	access:public
fpos_	src/ds/ringbuffer.h	/^    ulong fpos_;  \/\/ first position to read in buffer$/;"	m	class:ringbuffer	access:public
free_all	src/ds/left-right-array.h	/^    void free_all()$/;"	f	class:left_right_array	access:public	signature:()
full_set	src/bits/bitsubset-gray.h	/^    ulong full_set()  const { return S.full_set(); }$/;"	f	class:bit_subset_gray	access:public	signature:() const
full_set	src/bits/bitsubset.h	/^    ulong full_set()  const  { return V; }$/;"	f	class:bit_subset	access:public	signature:() const
func	demo/fft/walsh-basis-demo.cc	/^func(double *f, ulong ldn, bool q=true)$/;"	f	signature:(double *f, ulong ldn, bool q=true)
func	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::func(ulong n)$/;"	f	class:binary_debruijn	signature:(ulong n)
func	src/comb/attic/binarydebruijn.h	/^    ulong func(ulong n);$/;"	p	class:binary_debruijn	access:public	signature:(ulong n)
func1	src/comb/attic/binarydebruijn.h	/^    ulong func1()  \/\/ output 01010101...$/;"	f	class:binary_debruijn	access:public	signature:()
func2	src/comb/attic/binarydebruijn.h	/^    ulong func2()  \/\/ output 001100110011...$/;"	f	class:binary_debruijn	access:public	signature:()
funcemu	src/aux0/attic/funcemu.h	/^    funcemu(ulong maxdepth, ulong ndata)$/;"	f	class:funcemu	access:public	signature:(ulong maxdepth, ulong ndata)
funcemu	src/aux0/attic/funcemu.h	/^class funcemu$/;"	c
funcemu::chk_dp	src/aux0/attic/funcemu.h	/^    void chk_dp(ulong j=0)  const$/;"	f	class:funcemu	access:public	signature:(ulong j=0) const
funcemu::chk_tp	src/aux0/attic/funcemu.h	/^    void chk_tp(ulong j=0)  const$/;"	f	class:funcemu	access:public	signature:(ulong j=0) const
funcemu::d_	src/aux0/attic/funcemu.h	/^    Type  *d_;  \/\/ Data stack$/;"	m	class:funcemu	access:public
funcemu::dp_	src/aux0/attic/funcemu.h	/^    ulong dp_;  \/\/ Data stack Pointer$/;"	m	class:funcemu	access:public
funcemu::funcemu	src/aux0/attic/funcemu.h	/^    funcemu(ulong maxdepth, ulong ndata)$/;"	f	class:funcemu	access:public	signature:(ulong maxdepth, ulong ndata)
funcemu::init	src/aux0/attic/funcemu.h	/^    void init()  { dp_=0; tp_=0; }$/;"	f	class:funcemu	access:public	signature:()
funcemu::more	src/aux0/attic/funcemu.h	/^    bool more()  const  { return (tp_!=0); }$/;"	f	class:funcemu	access:public	signature:() const
funcemu::nd	src/aux0/attic/funcemu.h	/^    ulong  nd;  \/\/ size of data stack$/;"	m	class:funcemu	access:public
funcemu::npeek	src/aux0/attic/funcemu.h	/^    void npeek(Type &x, ulong n)  { chk_dp(n);  x = d_[dp_-n]; }$/;"	f	class:funcemu	access:public	signature:(Type &x, ulong n)
funcemu::npoke	src/aux0/attic/funcemu.h	/^    void npoke(Type &x, ulong n)  { chk_dp(n);  d_[dp_-n] = x; }$/;"	f	class:funcemu	access:public	signature:(Type &x, ulong n)
funcemu::nt	src/aux0/attic/funcemu.h	/^    ulong  nt;  \/\/ size of state stack$/;"	m	class:funcemu	access:public
funcemu::operator =	src/aux0/attic/funcemu.h	/^    funcemu & operator = (const funcemu &);  \/\/ forbidden$/;"	p	class:funcemu	access:private	signature:(const funcemu &)
funcemu::peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x)  { npeek(x, 1); }$/;"	f	class:funcemu	access:public	signature:(Type &x)
funcemu::peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y) { npeek(y, 1); npeek(x, 2); }$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y)
funcemu::peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y, Type &z) { npeek(z, 1); npeek(y, 2); npeek(x, 3); }$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y, Type &z)
funcemu::peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y, Type &z, Type &u)$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y, Type &z, Type &u)
funcemu::poke	src/aux0/attic/funcemu.h	/^    void poke(Type x)  { npoke(x, 1); }$/;"	f	class:funcemu	access:public	signature:(Type x)
funcemu::poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y)  { npoke(y, 1); npoke(x, 2); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y)
funcemu::poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y, Type z)  { npoke(z, 1); npoke(y, 2); npoke(x, 3); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z)
funcemu::poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y, Type z, Type u)$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z, Type u)
funcemu::pop	src/aux0/attic/funcemu.h	/^    void pop(ulong ct=1) { dp_-=ct; }$/;"	f	class:funcemu	access:public	signature:(ulong ct=1)
funcemu::push	src/aux0/attic/funcemu.h	/^    void push(Type x)  {  chk_dp();  d_[dp_] = x; ++dp_; }$/;"	f	class:funcemu	access:public	signature:(Type x)
funcemu::push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y)  { push(x); push(y); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y)
funcemu::push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y, Type z)  { push(x); push(y); push(z); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z)
funcemu::push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y, Type z, Type u)  { push(x); push(y); push(z); push(u); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z, Type u)
funcemu::stnext	src/aux0/attic/funcemu.h	/^    void stnext()  { chk_tp(1);  ++t_[tp_-1]; }$/;"	f	class:funcemu	access:public	signature:()
funcemu::stnext	src/aux0/attic/funcemu.h	/^    void stnext(ulong x)  { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
funcemu::stpeek	src/aux0/attic/funcemu.h	/^    ulong stpeek()  const  { chk_tp(1);  return  t_[tp_-1]; }$/;"	f	class:funcemu	access:public	signature:() const
funcemu::stpoke	src/aux0/attic/funcemu.h	/^    void stpoke(ulong x)   { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
funcemu::stpop	src/aux0/attic/funcemu.h	/^    void stpop(ulong ct=1)  { tp_-=ct; }$/;"	f	class:funcemu	access:public	signature:(ulong ct=1)
funcemu::stpush	src/aux0/attic/funcemu.h	/^    void stpush(ulong x)   { chk_tp();  t_[tp_] = x;  ++tp_; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
funcemu::t_	src/aux0/attic/funcemu.h	/^    ulong *t_;  \/\/ sTate stack$/;"	m	class:funcemu	access:public
funcemu::tp_	src/aux0/attic/funcemu.h	/^    ulong tp_;  \/\/ sTate stack Pointer$/;"	m	class:funcemu	access:public
funcemu::~funcemu	src/aux0/attic/funcemu.h	/^    ~funcemu()$/;"	f	class:funcemu	access:public	signature:()
fw_	src/bits/bitfibgray.h	/^    ulong fw_, lw_;  \/\/ first and last Fibonacci word in Gray code$/;"	m	class:bit_fibgray	access:public
fz	src/fht/fhtmayer.txt	/^REAL *fz;$/;"	v
g03	src/graph/lyndon-gray.h	/^    static inline ulong g03(ulong x) { X(1); X(2); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
g05	src/graph/lyndon-gray.h	/^    static inline ulong g05(ulong x) { X(1); X(4); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
g21	src/graph/lyndon-cmp.cc	/^static inline ulong g21(ulong x)$/;"	f	file:	signature:(ulong x)
g21	src/graph/lyndon-gray.h	/^    static inline ulong g21(ulong x) { X(1); X(4); X(16); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
g29	src/graph/lyndon-gray.h	/^    static inline ulong g29(ulong x) { X(1); X(4); X(8); X(16); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
g_	src/bpol/gf2n.cc	/^ulong GF2n::g_ = 0;  \/\/ a generator$/;"	m	class:GF2n	file:
g_	src/bpol/gf2n.h	/^    static ulong g_;  \/\/ a generator (element of maximal order)$/;"	m	class:GF2n	access:public
g_	src/graph/attic/debruijngraph.h	/^    debruijn_graph g_;  \/\/ the graph$/;"	m	class:debruijn_cycles	access:public
g_	src/graph/digraph-paths.h	/^    digraph &g_;  \/\/ the graph$/;"	m	class:digraph_paths	access:public
g_	src/wavelet/waveletfilter.h	/^    double *g_;  \/\/ high-pass filter$/;"	m	class:wavelet_filter	access:public
g_dyadic_auto_convolution	test/test-convolution.cc	/^void g_dyadic_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
g_dyadic_convolution	test/test-convolution.cc	/^void g_dyadic_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
galois_left	demo/gf2n/lfsr-galois-demo.cc	/^ulong galois_left(ulong x, ulong c, ulong h)$/;"	f	signature:(ulong x, ulong c, ulong h)
galois_right	demo/gf2n/lfsr-galois-demo.cc	/^ulong galois_right(ulong x, ulong c)$/;"	f	signature:(ulong x, ulong c)
gcd	doc/aux0-doc.txt	/^Type gcd(Type a, Type b);$/;"	p	file:	signature:(Type a, Type b)
gcd	src/aux0/gcd.h	/^Type gcd(Type a, Type b)$/;"	f	signature:(Type a, Type b)
gct	demo/graph/graph-fibrepgray-demo.cc	/^uint64 gct;$/;"	v
ge_count	src/sort/attic/ucount.h	/^inline ulong ge_count(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
gen3	demo/comb/necklace-gray3-demo.cc	/^void gen3(long z, long t, long j)$/;"	f	signature:(long z, long t, long j)
gen_walsh_wak	demo/fft/gen-walsh-demo.cc	/^void gen_walsh_wak(const char *f, ulong ldn, bool difq, const char *skip=0)$/;"	f	signature:(const char *f, ulong ldn, bool difq, const char *skip=0)
generate	src/comb/combination-rec.h	/^    void generate(void (*visit)(const comb_rec &), ulong rq, ulong nq=0)$/;"	f	class:comb_rec	access:public	signature:(void (*visit)(const comb_rec &), ulong rq, ulong nq=0)
generate	src/comb/ksubset-rec.h	/^    void generate(void (*visit)(const ksubset_rec &, ulong),$/;"	f	class:ksubset_rec	access:public	signature:(void (*visit)(const ksubset_rec &, ulong), ulong kmin, ulong kmax, ulong rq, ulong nq=0)
generate	src/comb/ksubset-twoclose.h	/^    void generate(void (*visit)(const ksubset_twoclose &),$/;"	f	class:ksubset_twoclose	access:public	signature:(void (*visit)(const ksubset_twoclose &), ulong kmin, ulong kmax)
generate	src/comb/mset-perm-lex-rec.h	/^    void generate(void (*visit)(const mset_perm_lex_rec &))$/;"	f	class:mset_perm_lex_rec	access:public	signature:(void (*visit)(const mset_perm_lex_rec &))
generate	src/comb/perm-rec.h	/^    void generate(void (*visit)(const perm_rec &))$/;"	f	class:perm_rec	access:public	signature:(void (*visit)(const perm_rec &))
generate_cyclic	src/comb/perm-rec.h	/^    void generate_cyclic(void (*visit)(const perm_rec &))$/;"	f	class:perm_rec	access:public	signature:(void (*visit)(const perm_rec &))
genus0_perm_to_paren	src/perm/perm-genus.h	/^inline void genus0_perm_to_paren(const ulong *p, ulong n,$/;"	f	signature:(const ulong *p, ulong n, char *c, const char s[2]=Ó)
get	src/aux1/attic/array.h	/^    Type get(ulong k)  const  { return f_[k]; }$/;"	f	class:array	access:public	signature:(ulong k) const
get	src/comb/attic/all-compositions-minchange.h	/^    uchar *get(ulong z)  const$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong z) const
get	src/comb/attic/allsetpartitions.h	/^    bool get(ulong k, signed char *dst)  const$/;"	f	class:all_set_partitions	access:public	signature:(ulong k, signed char *dst) const
get	src/comb/catalan.h	/^    const int *get()  const  { return as_; }$/;"	f	class:catalan	access:public	signature:() const
get	src/graph/mk-special-digraphs.h	/^    ulong get(ulong *&w, uchar *&r, uchar *&d)$/;"	f	class:lyngray_dat	access:public	signature:(ulong *&w, uchar *&r, uchar *&d)
get	src/perm/attic/cycles.h	/^    ulong get(ulong k)  const { return  f_[k]; }  \/\/ no range check$/;"	f	class:cycles	access:public	signature:(ulong k) const
get_a	src/bits/crc32.h	/^    uint get_a()  const  { return a_; }$/;"	f	class:crc32	access:public	signature:() const
get_a	src/bits/crc64.h	/^    uint64 get_a()  const  { return a_; }$/;"	f	class:crc64	access:public	signature:() const
get_a	src/bits/tcrc64.h	/^    uint64 get_a()  const  { return a_; }$/;"	f	class:tcrc64	access:public	signature:() const
get_a	src/bpol/fcsr.h	/^    ulong get_a()  const  { return a_; }$/;"	f	class:fcsr	access:public	signature:() const
get_a	src/bpol/lfsr.h	/^    ulong get_a()  const  { return a_; }$/;"	f	class:lfsr	access:public	signature:() const
get_a	src/bpol/lfsr64.h	/^    unsigned long long get_a()  const  { return a_; }$/;"	f	class:lfsr64	access:public	signature:() const
get_circulant_v	src/matrix/attic/toeplitz.h	/^void get_circulant_v(const MAT &A, Type *v)$/;"	f	signature:(const MAT &A, Type *v)
get_coord	src/comb/wfl-hilbert.h	/^    const ulong * get_coord()  const$/;"	f	class:wfl_hilbert	access:public	signature:() const
get_cycle_maxima	src/perm/attic/cycles.cc	/^cycles::get_cycle_maxima(ulong *m) const$/;"	f	class:cycles	signature:(ulong *m) const
get_cycle_maxima	src/perm/attic/cycles.h	/^    ulong get_cycle_maxima(ulong *m)  const;$/;"	p	class:cycles	access:public	signature:(ulong *m) const
get_cycle_minima	src/perm/attic/cycles.cc	/^cycles::get_cycle_minima(ulong *m) const$/;"	f	class:cycles	signature:(ulong *m) const
get_cycle_minima	src/perm/attic/cycles.h	/^    ulong get_cycle_minima(ulong *m)  const;$/;"	p	class:cycles	access:public	signature:(ulong *m) const
get_edge_idx	src/graph/digraph.h	/^    void get_edge_idx(ulong p, ulong &fe, ulong &en)  const$/;"	f	class:digraph	access:public	signature:(ulong p, ulong &fe, ulong &en) const
get_factor_q	doc/mod-doc.txt	/^umod_t get_factor_q(umod_t n, umod_t f);$/;"	p	file:	signature:(umod_t n, umod_t f)
get_factor_q	src/mod/factor.cc	/^get_factor_q(umod_t n, umod_t f)$/;"	f	signature:(umod_t n, umod_t f)
get_factor_q	src/mod/factor.h	/^umod_t get_factor_q(umod_t n, umod_t f);$/;"	p	signature:(umod_t n, umod_t f)
get_free_idx	src/ds/left-right-array.h	/^    ulong get_free_idx(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
get_free_idx_chg	src/ds/left-right-array.h	/^    ulong get_free_idx_chg(ulong k)$/;"	f	class:left_right_array	access:public	signature:(ulong k)
get_free_idx_dumb	src/ds/left-right-array.h	/^    ulong get_free_idx_dumb(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
get_index	doc/perm-doc.txt	/^ulong get_index(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
get_index	src/perm/permq.cc	/^get_index(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
get_index	src/perm/permq.h	/^ulong get_index(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
get_next	src/ds/attic/priorityqueue1.h	/^    bool get_next(Type1 &t)  const$/;"	f	class:priority_queue1	access:public	signature:(Type1 &t) const
get_next	src/ds/priorityqueue.h	/^    bool get_next(Type1 &t, Type2 &e)  const$/;"	f	class:priority_queue	access:public	signature:(Type1 &t, Type2 &e) const
get_next_e	src/ds/priorityqueue.h	/^    bool get_next_e(Type2 &e)  const$/;"	f	class:priority_queue	access:public	signature:(Type2 &e) const
get_next_t	src/ds/priorityqueue.h	/^    bool get_next_t(Type1 &t)  const$/;"	f	class:priority_queue	access:public	signature:(Type1 &t) const
get_normal	src/bpol/gf2n.h	/^    ulong get_normal()  const  { return p2n(v_); }$/;"	f	class:GF2n	access:public	signature:() const
get_repstr	src/comb/attic/stringsubst.h	/^    const char *get_repstr(char c)  const$/;"	f	class:string_subst	access:private	signature:(char c) const
get_set_idx	src/ds/left-right-array.h	/^    ulong get_set_idx(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
get_set_idx_chg	src/ds/left-right-array.h	/^    ulong get_set_idx_chg(ulong k)$/;"	f	class:left_right_array	access:public	signature:(ulong k)
get_set_idx_dumb	src/ds/left-right-array.h	/^    ulong get_set_idx_dumb(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
get_step	src/comb/wfl-hilbert.h	/^    ulong get_step()  const$/;"	f	class:wfl_hilbert	access:public	signature:() const
get_swap	src/comb/attic/perm-minchange.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_minchange	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/attic/perm-trotter.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/kperm-gray.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:kperm_gray	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-ffact.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_ffact	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-ffact2.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-lipski.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_lipski	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-rfact.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_rfact	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-rot1.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_rot1	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-gray-wells.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_wells	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-heap.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-heap2-swaps.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap2_swaps	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-heap2.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap2	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-star-swaps.h	/^    ulong get_swap()  const  { return swp_; }$/;"	f	class:perm_star_swaps	access:public	signature:() const
get_swap	src/comb/perm-star-swaps.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=0; s2=swp_; }$/;"	f	class:perm_star_swaps	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-star.h	/^    ulong get_swap()  const  { return swp_; }$/;"	f	class:perm_star	access:public	signature:() const
get_swap	src/comb/perm-star.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=0; s2=swp_; }$/;"	f	class:perm_star	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-trotter-lg.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter_lg	access:public	signature:(ulong &s1, ulong &s2) const
get_swap	src/comb/perm-trotter.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter	access:public	signature:(ulong &s1, ulong &s2) const
get_swaps	src/comb/mset-perm-gray.h	/^    void get_swaps(ulong &sw1, ulong &sw2)  const { sw1=sw1_;  sw2=sw2_; }$/;"	f	class:mset_perm_gray	access:public	signature:(ulong &sw1, ulong &sw2) const
get_toeplitz_v	src/matrix/attic/toeplitz.h	/^void get_toeplitz_v(const MAT &A, Type *v)$/;"	f	signature:(const MAT &A, Type *v)
get_w	src/bpol/fcsr.h	/^    ulong get_w()  const  { return w_; }$/;"	f	class:fcsr	access:public	signature:() const
get_w	src/bpol/lfsr.h	/^    ulong get_w()  const  { return w_; }$/;"	f	class:lfsr	access:public	signature:() const
get_w	src/bpol/lfsr64.h	/^    unsigned long long get_w()  const  { return w_; }$/;"	f	class:lfsr64	access:public	signature:() const
gexz_rec	demo/comb/gexz-gray-demo.cc	/^void gexz_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
gf2n_dual_normal	doc/bpol-doc.txt	/^ulong gf2n_dual_normal(ulong c, ulong deg, ulong ntc\/*=0*\/, ulong *ntd\/*=0*\/);$/;"	p	file:	signature:(ulong c, ulong deg, ulong ntc , ulong *ntd )
gf2n_dual_normal	src/bpol/normalpoly-dual.cc	/^gf2n_dual_normal(ulong c, ulong deg, ulong ntc\/*=0*\/, ulong *ntd\/*=0*\/)$/;"	f	signature:(ulong c, ulong deg, ulong ntc , ulong *ntd )
gf2n_dual_normal	src/bpol/normalpoly-dual.h	/^ulong gf2n_dual_normal(ulong c, ulong deg, ulong t=0, ulong *dt=0);$/;"	p	signature:(ulong c, ulong deg, ulong t=0, ulong *dt=0)
gf2n_eval_poly	doc/bpol-doc.txt	/^GF2n gf2n_eval_poly(GF2n a, ulong bp);$/;"	p	file:	signature:(GF2n a, ulong bp)
gf2n_eval_poly	src/bpol/gf2n-minpoly.cc	/^gf2n_eval_poly(GF2n a, ulong bp)$/;"	f	signature:(GF2n a, ulong bp)
gf2n_eval_poly	src/bpol/gf2n.h	/^GF2n gf2n_eval_poly(GF2n a, ulong bp);$/;"	p	signature:(GF2n a, ulong bp)
gf2n_fast_trace	doc/bpol-doc.txt	/^inline ulong gf2n_fast_trace(ulong a, ulong tv);$/;"	p	file:	signature:(ulong a, ulong tv)
gf2n_fast_trace	src/bpol/gf2n-trace.h	/^inline ulong gf2n_fast_trace(ulong a, ulong tv)$/;"	f	signature:(ulong a, ulong tv)
gf2n_half_trace	doc/bpol-doc.txt	/^ulong gf2n_half_trace(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
gf2n_half_trace	src/bpol/gf2n-trace.cc	/^gf2n_half_trace(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
gf2n_half_trace	src/bpol/gf2n-trace.h	/^ulong gf2n_half_trace(ulong a, ulong c, ulong h);$/;"	p	signature:(ulong a, ulong c, ulong h)
gf2n_minpoly	doc/bpol-doc.txt	/^ulong gf2n_minpoly(GF2n a, ulong &bp);$/;"	p	file:	signature:(GF2n a, ulong &bp)
gf2n_minpoly	src/bpol/gf2n-minpoly.cc	/^gf2n_minpoly(GF2n a, ulong &bp)$/;"	f	signature:(GF2n a, ulong &bp)
gf2n_minpoly	src/bpol/gf2n.h	/^ulong gf2n_minpoly(GF2n a, ulong &bp);$/;"	p	signature:(GF2n a, ulong &bp)
gf2n_minpoly2	doc/bpol-doc.txt	/^ulong gf2n_minpoly2(GF2n a, ulong &bp);$/;"	p	file:	signature:(GF2n a, ulong &bp)
gf2n_minpoly2	src/bpol/gf2n-minpoly.cc	/^gf2n_minpoly2(GF2n a, ulong &bp)$/;"	f	signature:(GF2n a, ulong &bp)
gf2n_minpoly2	src/bpol/gf2n.h	/^ulong gf2n_minpoly2(GF2n a, ulong &bp);$/;"	p	signature:(GF2n a, ulong &bp)
gf2n_order	doc/bpol-doc.txt	/^ulong gf2n_order(ulong g, ulong c, ulong h, const factorization &mfact);$/;"	p	file:	signature:(ulong g, ulong c, ulong h, const factorization &mfact)
gf2n_order	src/bpol/gf2n-order.cc	/^gf2n_order(ulong g, ulong c, ulong h, const factorization &mfact)$/;"	f	signature:(ulong g, ulong c, ulong h, const factorization &mfact)
gf2n_order	src/bpol/gf2n.h	/^ulong gf2n_order(ulong g, ulong c, ulong h, const factorization &mfact);$/;"	p	signature:(ulong g, ulong c, ulong h, const factorization &mfact)
gf2n_solve_quadratic	doc/bpol-doc.txt	/^bool gf2n_solve_quadratic(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1);$/;"	p	file:	signature:(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1)
gf2n_solve_quadratic	src/bpol/gf2n-solvequadratic.cc	/^gf2n_solve_quadratic(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1)$/;"	f	signature:(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1)
gf2n_solve_quadratic	src/bpol/gf2n.h	/^bool gf2n_solve_quadratic(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1);$/;"	p	signature:(GF2n a, GF2n b, GF2n c, GF2n& r0, GF2n& r1)
gf2n_solve_reduced_quadratic	doc/bpol-doc.txt	/^bool gf2n_solve_reduced_quadratic(GF2n c, GF2n& r);$/;"	p	file:	signature:(GF2n c, GF2n& r)
gf2n_solve_reduced_quadratic	src/bpol/gf2n-solvequadratic.cc	/^gf2n_solve_reduced_quadratic(GF2n c, GF2n& r)$/;"	f	signature:(GF2n c, GF2n& r)
gf2n_solve_reduced_quadratic	src/bpol/gf2n.h	/^bool gf2n_solve_reduced_quadratic(GF2n c, GF2n& r);$/;"	p	signature:(GF2n c, GF2n& r)
gf2n_trace	doc/bpol-doc.txt	/^ulong gf2n_trace(ulong a, ulong c, ulong h);$/;"	p	file:	signature:(ulong a, ulong c, ulong h)
gf2n_trace	src/bpol/gf2n-trace.cc	/^gf2n_trace(ulong a, ulong c, ulong h)$/;"	f	signature:(ulong a, ulong c, ulong h)
gf2n_trace	src/bpol/gf2n-trace.h	/^ulong gf2n_trace(ulong a, ulong c, ulong h);$/;"	p	signature:(ulong a, ulong c, ulong h)
gf2n_trace_vector	doc/bpol-doc.txt	/^ulong gf2n_trace_vector(ulong g, ulong c, ulong h);$/;"	p	file:	signature:(ulong g, ulong c, ulong h)
gf2n_trace_vector	src/bpol/gf2n-trace.cc	/^gf2n_trace_vector(ulong g, ulong c, ulong h)$/;"	f	signature:(ulong g, ulong c, ulong h)
gf2n_trace_vector	src/bpol/gf2n-trace.h	/^ulong gf2n_trace_vector(ulong g, ulong c, ulong h);$/;"	p	signature:(ulong g, ulong c, ulong h)
gf2n_trace_vector_x	doc/bpol-doc.txt	/^ulong gf2n_trace_vector_x(ulong c, ulong n);$/;"	p	file:	signature:(ulong c, ulong n)
gf2n_trace_vector_x	src/bpol/gf2n-trace.cc	/^gf2n_trace_vector_x(ulong c, ulong n)$/;"	f	signature:(ulong c, ulong n)
gf2n_trace_vector_x	src/bpol/gf2n-trace.h	/^ulong gf2n_trace_vector_x(ulong c, ulong n);$/;"	p	signature:(ulong c, ulong n)
gf2n_xx2k_trace	doc/bpol-doc.txt	/^ulong gf2n_xx2k_trace(ulong c, ulong deg);$/;"	p	file:	signature:(ulong c, ulong deg)
gf2n_xx2k_trace	src/bpol/normalpoly-dual.cc	/^gf2n_xx2k_trace(ulong c, ulong deg)$/;"	f	signature:(ulong c, ulong deg)
gf2n_xx2k_trace	src/bpol/normalpoly-dual.h	/^ulong gf2n_xx2k_trace(ulong c, ulong deg);$/;"	p	signature:(ulong c, ulong deg)
gfft	src/fft/attic/gfft.cc	/^gfft(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
gfft_auto_convolution	src/fft/attic/gfft.cc	/^gfft_auto_convolution(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
gfft_convolution	src/fft/attic/gfft.cc	/^gfft_convolution(Complex *f, Complex *g, ulong ldn)$/;"	f	signature:(Complex *f, Complex *g, ulong ldn)
gfft_dif2_core	src/fft/attic/gfft.cc	/^gfft_dif2_core(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
gfft_dit2_core	src/fft/attic/gfft.cc	/^gfft_dit2_core(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
goto_ffact	src/comb/perm-rot.h	/^    void goto_ffact(const ulong *d)$/;"	f	class:perm_rot	access:public	signature:(const ulong *d)
goto_rfact	src/comb/perm-rev.h	/^    void goto_rfact(const ulong *d)$/;"	f	class:perm_rev	access:public	signature:(const ulong *d)
gpq	demo/comb/fib-alt-gray-demo.cc	/^bool gpq;$/;"	v
gq_	src/ds/attic/priorityqueue1.h	/^    ulong gq_;   \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:priority_queue1	access:public
gq_	src/ds/attic/rarray.h	/^    ulong  gq_; \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:rarray	access:public
gq_	src/ds/attic/rset.h	/^    ulong  gq_; \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:rset	access:public
gq_	src/ds/deque.h	/^    ulong  gq_;  \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:deque	access:public
gq_	src/ds/priorityqueue.h	/^    ulong gq_;   \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:priority_queue	access:public
gq_	src/ds/queue.h	/^    ulong gq_;  \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:queue	access:public
gq_	src/ds/stack.h	/^    ulong  gq_;  \/\/ grow by gq elements if necessary, 0 for "never grow"$/;"	m	class:stack	access:public
graph	src/graph/attic/debruijngraph.h	/^    debruijn_graph & graph()  { return g_; }$/;"	f	class:debruijn_cycles	access:public	signature:()
graph	src/graph/digraph-paths.h	/^    const digraph & graph()  const  { return g_; }$/;"	f	class:digraph_paths	access:public	signature:() const
graph_print	src/aux1/attic/auxprint.h	/^void graph_print(const char *bla, const double *f, ulong n, ulong width=60, double eps=0.0);$/;"	p	signature:(const char *bla, const double *f, ulong n, ulong width=60, double eps=0.0)
graph_print	src/aux1/attic/graph-print.cc	/^graph_print(const char *bla, const double *f, ulong n, ulong width\/*=60*\/, double eps\/*=0.0*\/)$/;"	f	signature:(const char *bla, const double *f, ulong n, ulong width , double eps )
graph_print	src/aux1/attic/graph-print.h	/^void graph_print(const char *bla, const double *f, ulong n, ulong width=60, double eps=0.0);$/;"	p	signature:(const char *bla, const double *f, ulong n, ulong width=60, double eps=0.0)
gray	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::gray(ulong k)$/;"	f	class:all_compositions_minchange	signature:(ulong k)
gray	src/comb/attic/all-compositions-minchange.h	/^    void gray(ulong k);$/;"	p	class:all_compositions_minchange	access:protected	signature:(ulong k)
gray	src/comb/wfl-hilbert.h	/^    ulong gray(ulong j)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong j) const
gray2delta	src/comb/delta2gray.cc	/^gray2delta(ulong ldn, const ulong *g, unsigned char *d)$/;"	f	signature:(ulong ldn, const ulong *g, unsigned char *d)
gray2delta	src/comb/delta2gray.h	/^void gray2delta(ulong ldn, const ulong *g, unsigned char *d);$/;"	p	signature:(ulong ldn, const ulong *g, unsigned char *d)
gray_b	demo/bits/gray-rec-demo.cc	/^void gray_b(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
gray_b	demo/bits/gray-rec-demo.cc	/^void gray_b(ulong f, ulong n);$/;"	p	file:	signature:(ulong f, ulong n)
gray_code	doc/bits-doc.txt	/^static inline ulong gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
gray_code	src/bits/graycode.h	/^static inline ulong gray_code(ulong x)$/;"	f	signature:(ulong x)
gray_compare	src/comb/gray-compare.h	/^inline int gray_compare(const Type *a, ulong na, const Type *b, ulong nb)$/;"	f	signature:(const Type *a, ulong na, const Type *b, ulong nb)
gray_cycle_leaders	src/comb/gray-cycle-leaders.h	/^    explicit gray_cycle_leaders(ulong ldn)  \/\/ 0<=ldn<BITS_PER_LONG$/;"	f	class:gray_cycle_leaders	access:public	signature:(ulong ldn)
gray_cycle_leaders	src/comb/gray-cycle-leaders.h	/^class gray_cycle_leaders$/;"	c
gray_cycle_leaders::B_	src/comb/gray-cycle-leaders.h	/^    bit_subset B_;$/;"	m	class:gray_cycle_leaders	access:public
gray_cycle_leaders::current_max	src/comb/gray-cycle-leaders.h	/^    ulong current_max()  const  { return B_.current() | za_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
gray_cycle_leaders::current_min	src/comb/gray-cycle-leaders.h	/^    ulong current_min()  const  { return B_.current() | zi_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
gray_cycle_leaders::cycle_length	src/comb/gray-cycle-leaders.h	/^    ulong cycle_length()  const  { return len_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
gray_cycle_leaders::gray_cycle_leaders	src/comb/gray-cycle-leaders.h	/^    explicit gray_cycle_leaders(ulong ldn)  \/\/ 0<=ldn<BITS_PER_LONG$/;"	f	class:gray_cycle_leaders	access:public	signature:(ulong ldn)
gray_cycle_leaders::init	src/comb/gray-cycle-leaders.h	/^    void init(ulong ldn)$/;"	f	class:gray_cycle_leaders	access:public	signature:(ulong ldn)
gray_cycle_leaders::len_	src/comb/gray-cycle-leaders.h	/^    ulong len_;  \/\/ cycle length$/;"	m	class:gray_cycle_leaders	access:public
gray_cycle_leaders::next	src/comb/gray-cycle-leaders.h	/^    bool next()  { return ( 0 != B_.next() ); }$/;"	f	class:gray_cycle_leaders	access:public	signature:()
gray_cycle_leaders::num_	src/comb/gray-cycle-leaders.h	/^    ulong num_;  \/\/ number of cycles$/;"	m	class:gray_cycle_leaders	access:public
gray_cycle_leaders::num_cycles	src/comb/gray-cycle-leaders.h	/^    ulong num_cycles()  const  { return num_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
gray_cycle_leaders::za_	src/comb/gray-cycle-leaders.h	/^    ulong za_;  \/\/ mask for cycle maxima$/;"	m	class:gray_cycle_leaders	access:public
gray_cycle_leaders::zi_	src/comb/gray-cycle-leaders.h	/^    ulong zi_;  \/\/ mask for cycle minima$/;"	m	class:gray_cycle_leaders	access:public
gray_cycle_leaders::~gray_cycle_leaders	src/comb/gray-cycle-leaders.h	/^    ~gray_cycle_leaders() {;}$/;"	f	class:gray_cycle_leaders	access:public	signature:()
gray_f	demo/bits/gray-rec-demo.cc	/^void gray_f(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
gray_permute	doc/perm-doc.txt	/^inline void gray_permute(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
gray_permute	doc/perm-doc.txt	/^void gray_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
gray_permute	src/perm/attic/graypermute.cc	/^gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
gray_permute	src/perm/attic/graypermute.h	/^gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
gray_permute	src/perm/graypermute.h	/^inline void gray_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
gray_permute	src/perm/graypermute.h	/^void gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
gray_permute_16	doc/perm-doc.txt	/^inline void gray_permute_16(Type *f);$/;"	p	file:	signature:(Type *f)
gray_permute_16	src/perm/shortgraypermute.h	/^inline void gray_permute_16(Type *f)$/;"	f	signature:(Type *f)
gray_permute_2	doc/perm-doc.txt	/^inline void gray_permute_2(Type *\/*f*\/);$/;"	p	file:	signature:(Type * )
gray_permute_2	src/perm/shortgraypermute.h	/^inline void gray_permute_2(Type *\/*f*\/)$/;"	f	signature:(Type * )
gray_permute_32	doc/perm-doc.txt	/^inline void gray_permute_32(Type *f);$/;"	p	file:	signature:(Type *f)
gray_permute_32	src/perm/shortgraypermute.h	/^inline void gray_permute_32(Type *f)$/;"	f	signature:(Type *f)
gray_permute_4	doc/perm-doc.txt	/^inline void gray_permute_4(Type *f);$/;"	p	file:	signature:(Type *f)
gray_permute_4	src/perm/shortgraypermute.h	/^inline void gray_permute_4(Type *f)$/;"	f	signature:(Type *f)
gray_permute_64	doc/perm-doc.txt	/^inline void gray_permute_64(Type *f);$/;"	p	file:	signature:(Type *f)
gray_permute_64	src/perm/shortgraypermute.h	/^inline void gray_permute_64(Type *f)$/;"	f	signature:(Type *f)
gray_permute_8	doc/perm-doc.txt	/^inline void gray_permute_8(Type *f);$/;"	p	file:	signature:(Type *f)
gray_permute_8	src/perm/shortgraypermute.h	/^inline void gray_permute_8(Type *f)$/;"	f	signature:(Type *f)
gray_permute_cycle	src/perm/attic/graypermute.h	/^gray_permute_cycle(Type *f, ulong s, ulong len)$/;"	f	signature:(Type *f, ulong s, ulong len)
gray_permute_ge_512	src/perm/attic/graypermute.h	/^gray_permute_ge_512(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
gray_permute_index_cache	src/perm/attic/graypermute.cc	/^ulong gray_permute_index_cache[BITS_PER_LONG];$/;"	v
gray_permute_update_masks	src/perm/attic/graypermute.cc	/^ulong gray_permute_update_masks[BITS_PER_LONG];$/;"	v
gray_pow	doc/bits-doc.txt	/^static inline ulong gray_pow(ulong x, ulong e);$/;"	p	file:	signature:(ulong x, ulong e)
gray_pow	src/bits/graypower.h	/^static inline ulong gray_pow(ulong x, ulong e)$/;"	f	signature:(ulong x, ulong e)
gray_rev_permute	doc/perm-doc.txt	/^inline void gray_rev_permute(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
gray_rev_permute	doc/perm-doc.txt	/^void gray_rev_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
gray_rev_permute	src/perm/grayrevpermute.h	/^inline void gray_rev_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
gray_rev_permute	src/perm/grayrevpermute.h	/^void gray_rev_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
green_code	doc/bits-doc.txt	/^static inline ulong green_code(ulong a);$/;"	p	file:	signature:(ulong a)
green_code	src/bits/bittransforms.h	/^static inline ulong green_code(ulong a)$/;"	f	signature:(ulong a)
green_permute	src/perm/attic/greenpermute.h	/^inline void green_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
green_permute	src/perm/attic/greenpermute.h	/^inline void green_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
green_rev_permute	src/perm/attic/greenrevpermute.h	/^inline void green_rev_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
green_rev_permute	src/perm/attic/greenrevpermute.h	/^void green_rev_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
green_xcode	doc/bits-doc.txt	/^static inline ulong green_xcode(ulong a, ulong x);$/;"	p	file:	signature:(ulong a, ulong x)
green_xcode	src/bits/bitxtransforms.h	/^static inline ulong green_xcode(ulong a, ulong x)$/;"	f	signature:(ulong a, ulong x)
grep	src/sort/attic/grep.h	/^inline ulong grep(Type *f, ulong n, bool (* func)(Type))$/;"	f	signature:(Type *f, ulong n, bool (* func)(Type))
grep	src/sort/attic/grep.h	/^inline ulong grep(const Type *f, ulong n, bool (* func)(Type), Type *g)$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type), Type *g)
grep_idx	src/sort/attic/grep.h	/^inline ulong grep_idx(const Type *f, ulong n, bool (* func)(Type), ulong *x)$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type), ulong *x)
grow	src/ds/attic/priorityqueue1.h	/^    void grow()$/;"	f	class:priority_queue1	access:private	signature:()
grow	src/ds/attic/rarray.h	/^    void grow()$/;"	f	class:rarray	access:private	signature:()
grow	src/ds/attic/rset.h	/^    void grow()$/;"	f	class:rset	access:private	signature:()
grow	src/ds/deque.h	/^    void grow()$/;"	f	class:deque	access:private	signature:()
grow	src/ds/priorityqueue.h	/^    void grow()$/;"	f	class:priority_queue	access:private	signature:()
grow	src/ds/queue.h	/^    void grow()$/;"	f	class:queue	access:private	signature:()
grow	src/ds/stack.h	/^    void grow()$/;"	f	class:stack	access:private	signature:()
grs_negate	doc/walsh-doc.txt	/^void grs_negate(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
grs_negate	src/walsh/grsnegate.h	/^void grs_negate(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
grs_negative_q	doc/bits-doc.txt	/^static inline ulong grs_negative_q(ulong x);$/;"	p	file:	signature:(ulong x)
grs_negative_q	src/bits/grsnegative.h	/^static inline ulong grs_negative_q(ulong x)$/;"	f	signature:(ulong x)
grs_next	doc/bits-doc.txt	/^static inline ulong grs_next(ulong k, ulong g);$/;"	p	file:	signature:(ulong k, ulong g)
grs_next	src/bits/grsnegative.h	/^static inline ulong grs_next(ulong k, ulong g)$/;"	f	signature:(ulong k, ulong g)
h	scripts/make-demo-list.sh	/^        h=include\/$h;$/;"	v
h	src/comb/word-stats.h	/^    ulong *h;  \/\/ aux for histogram$/;"	m	class:word_stats	access:private
h_	src/bits/bit-sl-gray.h	/^    ulong h_;   \/\/ highest allowed track$/;"	m	class:bit_sl_gray	access:public
h_	src/bpol/gf2n.cc	/^ulong GF2n::h_ = 0;  \/\/ auxiliary bit-mask for computations$/;"	m	class:GF2n	file:
h_	src/bpol/gf2n.h	/^    static ulong h_;  \/\/ auxiliary bit-mask for computations$/;"	m	class:GF2n	access:public
h_	src/bpol/lfsr.h	/^    ulong h_;  \/\/ highest bit in SRS word  e.g. (above) == 16 = 1...$/;"	m	class:lfsr	access:public
h_	src/bpol/necklace2bitpol.h	/^    ulong h_;  \/\/ mask used for computation$/;"	m	class:necklace2bitpol	access:public
h_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong h_;   \/\/ height: number of different digits used in a[] (==1 + max digit)$/;"	m	class:young_tab_rgs_subset_lex	access:public
h_	src/comb/young-tab-rgs.h	/^    ulong h_;   \/\/ height: number of different digits used in a[] (==1 + max digit)$/;"	m	class:young_tab_rgs	access:public
h_	src/wavelet/waveletfilter.h	/^    double *h_;  \/\/ low-pass filter$/;"	m	class:wavelet_filter	access:public
haar	doc/haar-doc.txt	/^void haar(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
haar	src/haar/haar.h	/^void haar(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
haar2	src/wavelet/attic/waveletfilter.cc	/^static const double haar2[] =$/;"	v	file:
haar_I	demo/fft/walsh-basis-demo.cc	/^void haar_I(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
haar_i2i	src/haar/attic/haari2i.cc	/^haar_i2i(double *f, ulong ldn, double *ws\/*=0*\/)$/;"	f	signature:(double *f, ulong ldn, double *ws )
haar_i2i	src/haar/attic/haari2i.h	/^void haar_i2i(double *f, ulong ldn, double *ws=0);$/;"	p	signature:(double *f, ulong ldn, double *ws=0)
haar_inplace	doc/haar-doc.txt	/^void haar_inplace(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
haar_inplace	src/haar/haar.h	/^void haar_inplace(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
haar_inplace_nn	doc/haar-doc.txt	/^void haar_inplace_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
haar_inplace_nn	src/haar/haarnn.h	/^void haar_inplace_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
haar_nn	doc/haar-doc.txt	/^void haar_nn(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
haar_nn	src/haar/haarnn.h	/^void haar_nn(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
haar_permute	doc/perm-doc.txt	/^void haar_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
haar_permute	src/perm/haarpermute.h	/^void haar_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
haar_rev_nn	doc/haar-doc.txt	/^void haar_rev_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
haar_rev_nn	src/haar/haarrevnn.h	/^void haar_rev_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
half_gray_permute	src/perm/attic/graypermute.h	/^half_gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
half_trace	src/bpol/gf2n.h	/^    GF2n half_trace()  const$/;"	f	class:GF2n	access:public	signature:() const
halsec	src/fht/fhtmayer.txt	/^static REAL halsec[20]=$/;"	v	file:
hanoi	demo/bits/hanoi-demo.cc	/^hanoi(ulong n)$/;"	f	signature:(ulong n)
hanoi	demo/comb/hanoi-rec-demo.cc	/^hanoi(ulong k, ulong A, ulong B, ulong C)$/;"	f	signature:(ulong k, ulong A, ulong B, ulong C)
harmonic_wavelet	doc/wavelet-doc.txt	/^void harmonic_wavelet(double *fr, double *fi, ulong ldn);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
harmonic_wavelet	src/wavelet/harmonic-wavelet.cc	/^harmonic_wavelet(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
harmonic_wavelet	src/wavelet/harmonic-wavelet.h	/^void harmonic_wavelet(double *fr, double *fi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, ulong ldn)
hartley_shift_05	doc/fht-doc.txt	/^inline void hartley_shift_05(Type *a, ulong n);$/;"	p	file:	signature:(Type *a, ulong n)
hartley_shift_05	src/fht/hartleyshift.h	/^inline void hartley_shift_05(Type *a, ulong n)$/;"	f	signature:(Type *a, ulong n)
hartley_shift_05_v1	doc/fht-doc.txt	/^inline void hartley_shift_05_v1(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
hartley_shift_05_v1	src/fht/hartleyshift.h	/^inline void hartley_shift_05_v1(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
hartley_shift_05_v1rec	doc/fht-doc.txt	/^inline void hartley_shift_05_v1rec(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
hartley_shift_05_v1rec	src/fht/hartleyshift.h	/^inline void hartley_shift_05_v1rec(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
hartley_shift_05_v2	doc/fht-doc.txt	/^inline void hartley_shift_05_v2(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
hartley_shift_05_v2	src/fht/hartleyshift.h	/^inline void hartley_shift_05_v2(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
hartley_shift_05_v2rec	doc/fht-doc.txt	/^inline void hartley_shift_05_v2rec(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
hartley_shift_05_v2rec	src/fht/hartleyshift.h	/^inline void hartley_shift_05_v2rec(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
has_arith_3_progression	doc/comb-doc.txt	/^inline bool has_arith_3_progression(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
has_arith_3_progression	src/comb/arith-3-progression.h	/^inline bool has_arith_3_progression(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
has_arith_3_progression_consec	doc/comb-doc.txt	/^inline bool has_arith_3_progression_consec(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
has_arith_3_progression_consec	src/comb/arith-3-progression.h	/^inline bool has_arith_3_progression_consec(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
has_arith_3_progression_eqd	doc/comb-doc.txt	/^inline bool has_arith_3_progression_eqd(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
has_arith_3_progression_eqd	src/comb/arith-3-progression.h	/^inline bool has_arith_3_progression_eqd(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
has_edge	src/graph/digraph.h	/^    bool  has_edge(ulong p, ulong pn)  const  \/\/ Return whether edge from p to pn exists$/;"	f	class:digraph	access:public	signature:(ulong p, ulong pn) const
has_fixed_points	doc/perm-doc.txt	/^bool has_fixed_points(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
has_fixed_points	src/perm/permq.cc	/^has_fixed_points(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
has_fixed_points	src/perm/permq.h	/^bool has_fixed_points(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
has_shape	src/comb/young-tab-rgs-subset-lex.h	/^    bool has_shape(const ulong *st, ulong h)$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const ulong *st, ulong h)
has_shape	src/comb/young-tab-rgs.h	/^    bool has_shape(const ulong *st, ulong h)$/;"	f	class:young_tab_rgs	access:public	signature:(const ulong *st, ulong h)
have_all	src/comb/check-kpermgen.h	/^    bool have_all()  const$/;"	f	class:check_kpermgen	access:public	signature:() const
header$	tags	/^$srcfile	scripts\/autodoc.pl	\/^$srcfile = '';    # source file name given in header$\/;"	v$/;"	v
heap_extract_max	doc/ds-doc.txt	/^Type heap_extract_max(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
heap_extract_max	src/ds/heap.h	/^Type heap_extract_max(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
heap_insert	doc/ds-doc.txt	/^bool heap_insert(Type *x, ulong n, ulong s, Type t);$/;"	p	file:	signature:(Type *x, ulong n, ulong s, Type t)
heap_insert	src/ds/heap.h	/^bool heap_insert(Type *x, ulong n, ulong s, Type t)$/;"	f	signature:(Type *x, ulong n, ulong s, Type t)
heap_sort	doc/sort-doc.txt	/^void heap_sort(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
heap_sort	src/sort/heapsort.h	/^void heap_sort(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
heap_sort_descending	doc/sort-doc.txt	/^void heap_sort_descending(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
heap_sort_descending	src/sort/heapsort.h	/^void heap_sort_descending(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
heapify	doc/ds-doc.txt	/^void heapify(Type *z, ulong n, ulong k);$/;"	p	file:	signature:(Type *z, ulong n, ulong k)
heapify	src/ds/attic/priorityqueue1.h	/^    void heapify(ulong k)$/;"	f	class:priority_queue1	access:private	signature:(ulong k)
heapify	src/ds/heap.h	/^void heapify(Type *z, ulong n, ulong k)$/;"	f	signature:(Type *z, ulong n, ulong k)
heapify	src/ds/priorityqueue.h	/^    void heapify(ulong k)$/;"	f	class:priority_queue	access:private	signature:(ulong k)
height	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
height	src/comb/id-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
height	src/comb/ordered-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
height	src/comb/tree-lev-seq-aux.h	/^    ulong height(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
height	src/comb/tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
height	src/comb/young-tab-rgs-subset-lex.h	/^    ulong height()  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
height	src/comb/young-tab-rgs.h	/^    ulong height()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
height_data	src/comb/ordered-tree-branches.h	/^    const ulong * height_data()  const  { return  b_ + 1; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
high_block_border_ones	doc/bits-doc.txt	/^static inline ulong high_block_border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
high_block_border_ones	src/bits/bit-isolate.h	/^static inline ulong high_block_border_ones(ulong x)$/;"	f	signature:(ulong x)
high_border_ones	doc/bits-doc.txt	/^static inline ulong high_border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
high_border_ones	src/bits/bit-isolate.h	/^static inline ulong high_border_ones(ulong x)$/;"	f	signature:(ulong x)
high_ones	doc/bits-doc.txt	/^static inline ulong high_ones(ulong x);$/;"	p	file:	signature:(ulong x)
high_ones	src/bits/bithigh.h	/^static inline ulong high_ones(ulong x)$/;"	f	signature:(ulong x)
high_zeros	doc/bits-doc.txt	/^static inline ulong high_zeros(ulong x);$/;"	p	file:	signature:(ulong x)
high_zeros	src/bits/bithigh.h	/^static inline ulong high_zeros(ulong x)$/;"	f	signature:(ulong x)
highbit_normal_irredpoly	src/bpol/normal-irredpoly.cc	/^extern const ulong highbit_normal_irredpoly[]=$/;"	v
highbit_normal_irredpoly_len	src/bpol/normal-irredpoly.cc	/^extern const ulong highbit_normal_irredpoly_len = ARRAY_LEN(highbit_normal_irredpoly);$/;"	v
highbit_normal_primpoly	src/bpol/normal-primpoly.cc	/^extern const ulong highbit_normal_primpoly[]=$/;"	v
highbit_normal_primpoly_len	src/bpol/normal-primpoly.cc	/^extern const ulong highbit_normal_primpoly_len = ARRAY_LEN(highbit_normal_primpoly);$/;"	v
highest_one	doc/bits-doc.txt	/^static inline ulong highest_one(ulong x);$/;"	p	file:	signature:(ulong x)
highest_one	src/bits/bithigh.h	/^static inline ulong highest_one(ulong x)$/;"	f	signature:(ulong x)
highest_one_01edge	doc/bits-doc.txt	/^static inline ulong highest_one_01edge(ulong x);$/;"	p	file:	signature:(ulong x)
highest_one_01edge	src/bits/bithigh-edge.h	/^static inline ulong highest_one_01edge(ulong x)$/;"	f	signature:(ulong x)
highest_one_10edge	doc/bits-doc.txt	/^static inline ulong highest_one_10edge(ulong x);$/;"	p	file:	signature:(ulong x)
highest_one_10edge	src/bits/bithigh-edge.h	/^static inline ulong highest_one_10edge(ulong x)$/;"	f	signature:(ulong x)
highest_one_idx	doc/bits-doc.txt	/^static inline ulong highest_one_idx(ulong x);$/;"	p	file:	signature:(ulong x)
highest_one_idx	src/bits/bithigh.h	/^static inline ulong highest_one_idx(ulong x)$/;"	f	signature:(ulong x)
highest_one_idx_1	test/test-bits.cc	/^static inline ulong highest_one_idx_1(ulong x)$/;"	f	file:	signature:(ulong x)
highest_one_idx_2	test/test-bits.cc	/^static inline ulong highest_one_idx_2(ulong x)$/;"	f	file:	signature:(ulong x)
highest_one_idxp1	src/mod/modinfo.cc	/^static inline uint highest_one_idxp1(umod_t m)$/;"	f	file:	signature:(umod_t m)
highest_zero	doc/bits-doc.txt	/^static inline ulong highest_zero(ulong x);$/;"	p	file:	signature:(ulong x)
highest_zero	src/bits/bithigh.h	/^static inline ulong highest_zero(ulong x)$/;"	f	signature:(ulong x)
highest_zero_idx	doc/bits-doc.txt	/^static inline ulong highest_zero_idx(ulong x);$/;"	p	file:	signature:(ulong x)
highest_zero_idx	src/bits/bithigh.h	/^static inline ulong highest_zero_idx(ulong x)$/;"	f	signature:(ulong x)
hilbert2lin	doc/bits-doc.txt	/^ulong hilbert2lin(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
hilbert2lin	src/bits/hilbert.h	/^ulong hilbert2lin(ulong x, ulong y);$/;"	p	signature:(ulong x, ulong y)
hilbert2lin	src/bits/lin2hilbert.cc	/^hilbert2lin(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
hilbert2lin	src/comb/wfl-hilbert.h	/^    ulong hilbert2lin(const ulong * ncoord)$/;"	f	class:wfl_hilbert	access:public	signature:(const ulong * ncoord)
hilbert_dir	doc/bits-doc.txt	/^static inline ulong hilbert_dir(ulong t);$/;"	p	file:	signature:(ulong t)
hilbert_dir	src/bits/hilbert.h	/^static inline ulong hilbert_dir(ulong t)$/;"	f	signature:(ulong t)
hilbert_gray_code	doc/bits-doc.txt	/^ulong hilbert_gray_code(ulong t);$/;"	p	file:	signature:(ulong t)
hilbert_gray_code	src/bits/hilbert.h	/^ulong hilbert_gray_code(ulong t);$/;"	p	signature:(ulong t)
hilbert_gray_code	src/bits/lin2hilbert.cc	/^hilbert_gray_code(ulong t)$/;"	f	signature:(ulong t)
hilbert_m	doc/bits-doc.txt	/^static inline ulong hilbert_m(ulong t);$/;"	p	file:	signature:(ulong t)
hilbert_m	src/bits/hilbert.h	/^static inline ulong hilbert_m(ulong t)$/;"	f	signature:(ulong t)
hilbert_ndim	src/comb/hilbert-ndim.h	/^    explicit hilbert_ndim(ulong dd)$/;"	f	class:hilbert_ndim	access:public	signature:(ulong dd)
hilbert_ndim	src/comb/hilbert-ndim.h	/^    hilbert_ndim(const hilbert_ndim&);  \/\/ forbidden$/;"	p	class:hilbert_ndim	access:private	signature:(const hilbert_ndim&)
hilbert_ndim	src/comb/hilbert-ndim.h	/^class hilbert_ndim$/;"	c
hilbert_ndim::P	src/comb/hilbert-ndim.h	/^    ulong P[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim	access:public
hilbert_ndim::d	src/comb/hilbert-ndim.h	/^    ulong d;  \/\/ number of dimensions 2<=d<=32$/;"	m	class:hilbert_ndim	access:public
hilbert_ndim::data	src/comb/hilbert-ndim.h	/^    const ulong *data()  const  { return &P[0]; }$/;"	f	class:hilbert_ndim	access:public	signature:() const
hilbert_ndim::hilbert_ndim	src/comb/hilbert-ndim.h	/^    explicit hilbert_ndim(ulong dd)$/;"	f	class:hilbert_ndim	access:public	signature:(ulong dd)
hilbert_ndim::hilbert_ndim	src/comb/hilbert-ndim.h	/^    hilbert_ndim(const hilbert_ndim&);  \/\/ forbidden$/;"	p	class:hilbert_ndim	access:private	signature:(const hilbert_ndim&)
hilbert_ndim::lin2hilbert	src/comb/hilbert-ndim.h	/^    void lin2hilbert(ulong n)$/;"	f	class:hilbert_ndim	access:public	signature:(ulong n)
hilbert_ndim::operator =	src/comb/hilbert-ndim.h	/^    hilbert_ndim & operator = (const hilbert_ndim&);  \/\/ forbidden$/;"	p	class:hilbert_ndim	access:private	signature:(const hilbert_ndim&)
hilbert_ndim::~hilbert_ndim	src/comb/hilbert-ndim.h	/^    ~hilbert_ndim()  { ; }$/;"	f	class:hilbert_ndim	access:public	signature:()
hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    explicit hilbert_ndim_rec(ulong dd)$/;"	f	class:hilbert_ndim_rec	access:public	signature:(ulong dd)
hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    hilbert_ndim_rec(const hilbert_ndim_rec&);  \/\/ forbidden$/;"	p	class:hilbert_ndim_rec	access:private	signature:(const hilbert_ndim_rec&)
hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^class hilbert_ndim_rec$/;"	c
hilbert_ndim_rec::P	src/comb/hilbert-ndim-rec.h	/^    ulong P[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim_rec	access:public
hilbert_ndim_rec::Q	src/comb/hilbert-ndim-rec.h	/^    ulong Q[32];  \/\/ size == max dim$/;"	m	class:hilbert_ndim_rec	access:public
hilbert_ndim_rec::d	src/comb/hilbert-ndim-rec.h	/^    ulong d;  \/\/ number of dimensions 2<=d<=32$/;"	m	class:hilbert_ndim_rec	access:public
hilbert_ndim_rec::data	src/comb/hilbert-ndim-rec.h	/^    const ulong *data()  const  { return &P[0]; }$/;"	f	class:hilbert_ndim_rec	access:public	signature:() const
hilbert_ndim_rec::hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    explicit hilbert_ndim_rec(ulong dd)$/;"	f	class:hilbert_ndim_rec	access:public	signature:(ulong dd)
hilbert_ndim_rec::hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    hilbert_ndim_rec(const hilbert_ndim_rec&);  \/\/ forbidden$/;"	p	class:hilbert_ndim_rec	access:private	signature:(const hilbert_ndim_rec&)
hilbert_ndim_rec::lin2hilbert	src/comb/hilbert-ndim-rec.h	/^    void lin2hilbert(ulong n)$/;"	f	class:hilbert_ndim_rec	access:public	signature:(ulong n)
hilbert_ndim_rec::lin2hilbert_rec	src/comb/hilbert-ndim-rec.h	/^    void lin2hilbert_rec(ulong n)$/;"	f	class:hilbert_ndim_rec	access:private	signature:(ulong n)
hilbert_ndim_rec::operator =	src/comb/hilbert-ndim-rec.h	/^    hilbert_ndim_rec & operator = (const hilbert_ndim_rec&);  \/\/ forbidden$/;"	p	class:hilbert_ndim_rec	access:private	signature:(const hilbert_ndim_rec&)
hilbert_ndim_rec::~hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    ~hilbert_ndim_rec()  { ; }$/;"	f	class:hilbert_ndim_rec	access:public	signature:()
hilbert_p	doc/bits-doc.txt	/^static inline ulong hilbert_p(ulong t);$/;"	p	file:	signature:(ulong t)
hilbert_p	src/bits/hilbert.h	/^static inline ulong hilbert_p(ulong t)$/;"	f	signature:(ulong t)
hilbert_turn	doc/bits-doc.txt	/^static inline int hilbert_turn(ulong t);$/;"	p	file:	signature:(ulong t)
hilbert_turn	src/bits/hilbert.h	/^static inline int hilbert_turn(ulong t)$/;"	f	signature:(ulong t)
histogram	src/comb/word-stats.h	/^    void histogram()  const$/;"	f	class:word_stats	access:protected	signature:() const
hn	src/comb/word-stats.h	/^    ulong hn;  \/\/ hn+1 values in histogram: h[0..hn]$/;"	m	class:word_stats	access:private
hswap	demo/perm/perm-decomp-demo.cc	/^hswap(ulong *f, ulong n)$/;"	f	file:	signature:(ulong *f, ulong n)
htab	src/bits/lin2hilbert.cc	/^static const ulong htab[] = {$/;"	v	file:
i	fxt-2018.01.08.tar.gz	/^ iøÐ;_ÌÐñ=0=vÞBx3a$/;"	v
i	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
i	src/perm/attic/partition.h	/^    int i;$/;"	m	class:partition	access:private
i_	src/comb/binary-debruijn.h	/^    ulong i_;   \/\/ position of current digit in current string$/;"	m	class:binary_debruijn	access:public
i_	src/comb/debruijn.h	/^    ulong i_;   \/\/ position of current digit in current string$/;"	m	class:debruijn	access:public
i_	src/comb/dyck-rgs-subset-lex.h	/^    ulong i_;   \/\/ k-ary Dyck words: i = k - 1$/;"	m	class:dyck_rgs_subset_lex	access:public
i_	src/comb/dyck-rgs.h	/^    ulong i_;   \/\/ s[k] <= s[k-1]+i$/;"	m	class:dyck_rgs	access:public
i_	src/comb/kperm-gray.h	/^    ulong *i_;  \/\/ directions$/;"	m	class:kperm_gray	access:public
i_	src/comb/mixedradix-endo-gray.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:mixedradix_endo_gray	access:public
i_	src/comb/mixedradix-gray.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:mixedradix_gray	access:public
i_	src/comb/motzkin-rgs-lex.h	/^    ulong i_;  \/\/ at most i rises in a row, at most i+1 consecutive ones in the Dyck word$/;"	m	class:motzkin_rgs_lex	access:public
i_	src/comb/partition-gen.h	/^    ulong i_;   \/\/ level in iterative search$/;"	m	class:partition_gen	access:public
i_	src/comb/perm-gray-ffact.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:perm_gray_ffact	access:public
i_	src/comb/rgs-fincr.h	/^    ulong i_;   \/\/ s[k] <= f[k] + i$/;"	m	class:rgs_fincr	access:public
i_	src/comb/rgs-maxincr.h	/^    ulong i_;   \/\/ s[k] <= max_{j<k}(s[j]+i)$/;"	m	class:rgs_maxincr	access:public
ia_	src/comb/perm-star.h	/^    ulong *ia_;   \/\/ inverse permutation$/;"	m	class:perm_star	access:public
ia_	src/comb/perm-star.h	/^    ulong ia_[32];   \/\/ inverse permutation$/;"	m	class:perm_star	access:public
ic	src/perm/attic/graypermute.h	18;"	d
ic	src/perm/attic/graypermute.h	234;"	d
id_tree_lev_seq	src/comb/id-tree-lev-seq.h	/^    id_tree_lev_seq(ulong n)$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong n)
id_tree_lev_seq	src/comb/id-tree-lev-seq.h	/^class id_tree_lev_seq$/;"	c
id_tree_lev_seq::OK	src/comb/id-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::a_	src/comb/id-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:id_tree_lev_seq	access:private
id_tree_lev_seq::aux	src/comb/id-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:id_tree_lev_seq	access:private
id_tree_lev_seq::branching_number	src/comb/id-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
id_tree_lev_seq::data	src/comb/id-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::first	src/comb/id-tree-lev-seq.h	/^    void first()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
id_tree_lev_seq::height	src/comb/id-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::id_tree_lev_seq	src/comb/id-tree-lev-seq.h	/^    id_tree_lev_seq(ulong n)$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong n)
id_tree_lev_seq::is_branch	src/comb/id-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
id_tree_lev_seq::is_leaf	src/comb/id-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
id_tree_lev_seq::lev	src/comb/id-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong k) const
id_tree_lev_seq::limb_length	src/comb/id-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
id_tree_lev_seq::max_branching_number	src/comb/id-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::max_limb_length	src/comb/id-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::min_branching_number	src/comb/id-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::min_limb_length	src/comb/id-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::n_	src/comb/id-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:id_tree_lev_seq	access:private
id_tree_lev_seq::next	src/comb/id-tree-lev-seq.h	/^    ulong next()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
id_tree_lev_seq::next_rec	src/comb/id-tree-lev-seq.h	/^    ulong next_rec(ulong p)$/;"	f	class:id_tree_lev_seq	access:private	signature:(ulong p)
id_tree_lev_seq::num_leaves	src/comb/id-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::print	src/comb/id-tree-lev-seq.h	/^    void print(const char *bla)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla) const
id_tree_lev_seq::print_aa	src/comb/id-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla) const
id_tree_lev_seq::print_base_seq	src/comb/id-tree-lev-seq.h	/^    void print_base_seq(const char *bla, bool dfz=true)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
id_tree_lev_seq::print_branching_numbers	src/comb/id-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
id_tree_lev_seq::print_paren_word	src/comb/id-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
id_tree_lev_seq::size	src/comb/id-tree-lev-seq.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
id_tree_lev_seq::valency	src/comb/id-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
id_tree_lev_seq::~id_tree_lev_seq	src/comb/id-tree-lev-seq.h	/^    ~id_tree_lev_seq()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
idata	src/comb/attic/permvisit.h	/^    const ulong *idata()  const  { return xi; }$/;"	f	class:perm_visit	access:public	signature:() const
idct4	doc/dctdst-doc.txt	/^void idct4(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
idct4	src/dctdst/dct4.cc	/^idct4(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
idct4	src/dctdst/dctdst.h	/^void idct4(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
idcth	doc/dctdst-doc.txt	/^void idcth(double *x, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *x, ulong ldn, double *tmp )
idcth	src/dctdst/dctdst.h	/^void idcth(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
idcth	src/dctdst/dcth.cc	/^idcth(double *x, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *x, ulong ldn, double *tmp )
identity	demo/perm/perm-decomp-demo.cc	/^identity(ulong *, ulong)$/;"	f	file:	signature:(ulong *, ulong)
idoneal_tab	src/mod/attic/testnum.cc	/^const ulong idoneal_tab[] =$/;"	v
idsth	doc/dctdst-doc.txt	/^void idsth(double *x, ulong ldn, double *tmp\/*=0*\/);$/;"	p	file:	signature:(double *x, ulong ldn, double *tmp )
idsth	src/dctdst/dctdst.h	/^void idsth(double *x, ulong ldn, double *y=0);$/;"	p	signature:(double *x, ulong ldn, double *y=0)
idsth	src/dctdst/dsth.cc	/^idsth(double *x, ulong ldn, double *tmp\/*=0*\/)$/;"	f	signature:(double *x, ulong ldn, double *tmp )
idx	src/comb/attic/permvisit.h	/^    ulong idx;$/;"	m	class:perm_visit	access:protected
idx	src/ds/attic/coroutine-paren-demo.cc	/^    int idx;$/;"	m	class:paren	file:	access:protected
idx	src/perm/attic/partition.h	/^    int idx;$/;"	m	class:partition	access:private
idx2val_func	src/aux1/attic/applyfunc.h	/^inline void idx2val_func(Type *f, ulong n, Type (* func)(Type), Type x0=0, Type x1=1)$/;"	f	signature:(Type *f, ulong n, Type (* func)(Type), Type x0=0, Type x1=1)
idx_bsearch	doc/sort-doc.txt	/^ulong idx_bsearch(const Type *f, ulong n, const ulong *x, const Type v);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x, const Type v)
idx_bsearch	src/sort/bsearchidx.h	/^ulong idx_bsearch(const Type *f, ulong n, const ulong *x, const Type v)$/;"	f	signature:(const Type *f, ulong n, const ulong *x, const Type v)
idx_bsearch	src/sort/bsearchidxfunc.h	/^ulong idx_bsearch(const Type *f, ulong n, const ulong *x, const Type v,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, const Type v, int (*cmp)(const Type &, const Type &))
idx_bsearch_geq	doc/sort-doc.txt	/^ulong idx_bsearch_geq(const Type *f, ulong n, const ulong *x, const Type v);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x, const Type v)
idx_bsearch_geq	src/sort/bsearchidx.h	/^ulong idx_bsearch_geq(const Type *f, ulong n, const ulong *x, const Type v)$/;"	f	signature:(const Type *f, ulong n, const ulong *x, const Type v)
idx_bsearch_geq	src/sort/bsearchidxfunc.h	/^ulong idx_bsearch_geq(const Type *f, ulong n, const ulong *x, const Type v,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, const Type v, int (*cmp)(const Type &, const Type &))
idx_max	doc/sort-doc.txt	/^Type idx_max(const Type *f, ulong n, const ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x)
idx_max	src/sort/minmaxidx.h	/^Type idx_max(const Type *f, ulong n, const ulong *x)$/;"	f	signature:(const Type *f, ulong n, const ulong *x)
idx_max	src/sort/minmaxidxfunc.h	/^Type idx_max(const Type *f, ulong n, const ulong *x,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, int (*cmp)(const Type &, const Type &))
idx_max2	doc/sort-doc.txt	/^static inline ulong  idx_max2(const Type &x, const Type &y);$/;"	p	file:	signature:(const Type &x, const Type &y)
idx_max2	src/sort/minmaxmed23idx.h	/^static inline ulong  idx_max2(const Type &x, const Type &y)$/;"	f	signature:(const Type &x, const Type &y)
idx_max3	doc/sort-doc.txt	/^static inline ulong  idx_max3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
idx_max3	src/sort/minmaxmed23idx.h	/^static inline ulong  idx_max3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
idx_median3	doc/sort-doc.txt	/^static inline ulong  idx_median3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
idx_median3	src/sort/minmaxmed23idx.h	/^static inline ulong  idx_median3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
idx_min	doc/sort-doc.txt	/^Type idx_min(const Type *f, ulong n, const ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x)
idx_min	src/sort/minmaxidx.h	/^Type idx_min(const Type *f, ulong n, const ulong *x)$/;"	f	signature:(const Type *f, ulong n, const ulong *x)
idx_min	src/sort/minmaxidxfunc.h	/^Type idx_min(const Type *f, ulong n, const ulong *x,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, int (*cmp)(const Type &, const Type &))
idx_min2	doc/sort-doc.txt	/^static inline ulong  idx_min2(const Type &x, const Type &y);$/;"	p	file:	signature:(const Type &x, const Type &y)
idx_min2	src/sort/minmaxmed23idx.h	/^static inline ulong  idx_min2(const Type &x, const Type &y)$/;"	f	signature:(const Type &x, const Type &y)
idx_min3	doc/sort-doc.txt	/^static inline ulong  idx_min3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
idx_min3	src/sort/minmaxmed23idx.h	/^static inline ulong  idx_min3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
idx_minmax3	doc/sort-doc.txt	/^static inline void  idx_minmax3(Type x0, Type x1, Type x2, ulong &i, ulong &a);$/;"	p	file:	signature:(Type x0, Type x1, Type x2, ulong &i, ulong &a)
idx_minmax3	src/sort/minmaxmed23idx.h	/^static inline void  idx_minmax3(Type x0, Type x1, Type x2, ulong &i, ulong &a)$/;"	f	signature:(Type x0, Type x1, Type x2, ulong &i, ulong &a)
idx_partition	doc/sort-doc.txt	/^ulong idx_partition(const Type *f, ulong n, ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, ulong *x)
idx_partition	src/sort/sortidx.h	/^ulong idx_partition(const Type *f, ulong n, ulong *x)$/;"	f	signature:(const Type *f, ulong n, ulong *x)
idx_partition	src/sort/sortidxfunc.h	/^ulong idx_partition(const Type *f, ulong n, ulong *x,$/;"	f	signature:(const Type *f, ulong n, ulong *x, int (*cmp)(const Type &, const Type &))
idx_print	demo/sort/sort-string-demo.cc	/^void idx_print(const char *bla, const ulong *x, ulong n)$/;"	f	signature:(const char *bla, const ulong *x, ulong n)
idx_print	demo/sort/sortidx-demo.cc	/^idx_print(const char *bla, const double *f, ulong n, ulong *x)$/;"	f	signature:(const char *bla, const double *f, ulong n, ulong *x)
idx_quick_sort	doc/sort-doc.txt	/^void idx_quick_sort(const Type *f, ulong n, ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, ulong *x)
idx_quick_sort	src/sort/sortidx.h	/^void idx_quick_sort(const Type *f, ulong n, ulong *x)$/;"	f	signature:(const Type *f, ulong n, ulong *x)
idx_quick_sort	src/sort/sortidxfunc.h	/^void idx_quick_sort(const Type *f, ulong n, ulong *x,$/;"	f	signature:(const Type *f, ulong n, ulong *x, int (*cmp)(const Type &, const Type &))
idx_selection_sort	doc/sort-doc.txt	/^void idx_selection_sort(const Type *f, ulong n, ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, ulong *x)
idx_selection_sort	src/sort/sortidx.h	/^void idx_selection_sort(const Type *f, ulong n, ulong *x)$/;"	f	signature:(const Type *f, ulong n, ulong *x)
idx_selection_sort	src/sort/sortidxfunc.h	/^void idx_selection_sort(const Type *f, ulong n, ulong *x,$/;"	f	signature:(const Type *f, ulong n, ulong *x, int (*cmp)(const Type &, const Type &))
idx_swap	src/perm/revbinpermute.h	111;"	d
idx_swap	src/perm/revbinpermute.h	20;"	d
idx_swap	src/perm/revbinpermute0.h	113;"	d
idx_swap	src/perm/revbinpermute0.h	20;"	d
idx_swap0	src/perm/revbinpermute0.h	21;"	d
idxvec2val_func	src/aux1/attic/applyfunc.h	/^inline void idxvec2val_func(const ulong *x, ulong n, Type (* func)(ulong), Type *f)$/;"	f	signature:(const ulong *x, ulong n, Type (* func)(ulong), Type *f)
igc_bits_	src/comb/attic/combination-altminchange.h	/^    ulong igc_bits_;$/;"	m	class:combination_altminchange	access:public
igc_bits_	src/comb/attic/combination-minchange.h	/^    ulong igc_bits_;$/;"	m	class:combination_minchange	access:public
igc_bits_	src/comb/attic/compositionalt.h	/^    ulong igc_bits_;$/;"	m	class:composition_alt	access:public
igc_first_	src/comb/attic/combination-altminchange.h	/^    ulong igc_first_;$/;"	m	class:combination_altminchange	access:public
igc_first_	src/comb/attic/combination-minchange.h	/^    ulong igc_first_;$/;"	m	class:combination_minchange	access:public
igc_first_	src/comb/attic/compositionalt.h	/^    ulong igc_first_;$/;"	m	class:composition_alt	access:public
igc_last_	src/comb/attic/combination-altminchange.h	/^    ulong igc_last_;$/;"	m	class:combination_altminchange	access:public
igc_last_	src/comb/attic/combination-minchange.h	/^    ulong igc_last_;$/;"	m	class:combination_minchange	access:public
igc_last_	src/comb/attic/compositionalt.h	/^    ulong igc_last_;$/;"	m	class:composition_alt	access:public
igc_last_comb	doc/bits-doc.txt	/^static inline ulong igc_last_comb(ulong k, ulong n);$/;"	p	file:	signature:(ulong k, ulong n)
igc_last_comb	src/bits/bitcombminchange.h	/^static inline ulong igc_last_comb(ulong k, ulong n)$/;"	f	signature:(ulong k, ulong n)
igc_next_minchange_comb	doc/bits-doc.txt	/^static inline ulong igc_next_minchange_comb(ulong x);$/;"	p	file:	signature:(ulong x)
igc_next_minchange_comb	doc/bits-doc.txt	/^static inline ulong igc_next_minchange_comb(ulong x, ulong k);$/;"	p	file:	signature:(ulong x, ulong k)
igc_next_minchange_comb	src/bits/bitcombminchange.h	/^static inline ulong igc_next_minchange_comb(ulong x)$/;"	f	signature:(ulong x)
igc_next_minchange_comb	src/bits/bitcombminchange.h	/^static inline ulong igc_next_minchange_comb(ulong x, ulong k)$/;"	f	signature:(ulong x, ulong k)
igc_prev_minchange_comb	doc/bits-doc.txt	/^static inline ulong igc_prev_minchange_comb(ulong x, ulong k);$/;"	p	file:	signature:(ulong x, ulong k)
igc_prev_minchange_comb	src/bits/bitcombminchange.h	/^static inline ulong igc_prev_minchange_comb(ulong x, ulong k)$/;"	f	signature:(ulong x, ulong k)
ihtab	src/bits/lin2hilbert.cc	/^static const ulong ihtab[] = {$/;"	v	file:
ii_	src/comb/attic/perm-minchange.h	/^    ulong *ii_; \/\/ aux$/;"	m	class:perm_minchange	access:public
imag	src/fht/fhtmayer.txt	/^double *real,*imag;$/;"	v
imaginator	doc/realfft-doc.txt	/^void imaginator(const double *gr, double *gi, ulong n, int is); \/\/ aux$/;"	p	file:	signature:(const double *gr, double *gi, ulong n, int is)
imaginator	src/realfft/realfft.h	/^void imaginator(const double *gr, double *gi, ulong n, int is);  \/\/ aux$/;"	p	signature:(const double *gr, double *gi, ulong n, int is)
imaginator	src/realfft/realfftbyfht.cc	/^imaginator(const double *gr, double *gi, ulong n, int is)$/;"	f	signature:(const double *gr, double *gi, ulong n, int is)
in	scripts/attic/chklyndon.sh	/^for c1 in 0 1 2 3; do$/;"	v
in_range_q	src/aux0/attic/range.h	/^static inline bool in_range_q(Type xmin, Type xmax, Type x)$/;"	f	signature:(Type xmin, Type xmax, Type x)
incr_mod	doc/mod-doc.txt	/^inline umod_t incr_mod(umod_t a, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t m)
incr_mod	src/mod/modarith.h	/^inline umod_t incr_mod(umod_t a, umod_t m)$/;"	f	signature:(umod_t a, umod_t m)
index	src/perm/attic/partition.h	/^    int index()  const  { return idx; }$/;"	f	class:partition	access:public	signature:() const
init	demo/comb/schroeder-tree-demo.cc	/^void init()$/;"	f	signature:()
init	src/aux0/attic/funcemu.h	/^    void init()  { dp_=0; tp_=0; }$/;"	f	class:funcemu	access:public	signature:()
init	src/bits/bit-necklace.h	/^    void init(ulong n)$/;"	f	class:bit_necklace	access:public	signature:(ulong n)
init	src/bits/crc32.h	/^    void init(uint c)$/;"	f	class:crc32	access:public	signature:(uint c)
init	src/bits/crc64.h	/^    void init(uint64 c)$/;"	f	class:crc64	access:public	signature:(uint64 c)
init	src/bits/tcrc64.h	/^    void init(uint64 c)$/;"	f	class:tcrc64	access:public	signature:(uint64 c)
init	src/bits/thue-morse.h	/^    ulong init(ulong k=0)$/;"	f	class:thue_morse	access:public	signature:(ulong k=0)
init	src/bpol/all-irredpoly.h	/^    void init(ulong n=0, ulong c=0, ulong a=0)$/;"	f	class:all_irredpoly	access:public	signature:(ulong n=0, ulong c=0, ulong a=0)
init	src/bpol/gf2n.cc	/^GF2n::init(ulong n, ulong c\/*=0*\/, bool normalq\/*=0*\/, bool trustme\/*=0*\/)$/;"	f	class:GF2n	signature:(ulong n, ulong c , bool normalq , bool trustme )
init	src/bpol/gf2n.h	/^    static bool init(ulong n, ulong c=0, bool normalq=0, bool trustme=0);$/;"	p	class:GF2n	access:public	signature:(ulong n, ulong c=0, bool normalq=0, bool trustme=0)
init	src/bpol/mersenne-coprime.h	/^    void init(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
init	src/bpol/necklace2bitpol.h	/^    void init(ulong n, ulong c=0, ulong a=0)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong n, ulong c=0, ulong a=0)
init	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::init()$/;"	f	class:all_compositions_minchange	signature:()
init	src/comb/attic/all-compositions-minchange.h	/^    void init();$/;"	p	class:all_compositions_minchange	access:protected	signature:()
init	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::init(bool xdr, int dr0)$/;"	f	class:all_set_partitions	signature:(bool xdr, int dr0)
init	src/comb/attic/allsetpartitions.h	/^    void init(bool xdr, int dr0);  \/\/ build up the table$/;"	p	class:all_set_partitions	access:public	signature:(bool xdr, int dr0)
init	src/comb/attic/binarydebruijn.h	/^    void init(ulong n=0)$/;"	f	class:binary_debruijn	access:public	signature:(ulong n=0)
init	src/comb/attic/subsetdebruijn.h	/^    void init()$/;"	f	class:subset_debruijn	access:public	signature:()
init	src/comb/gray-cycle-leaders.h	/^    void init(ulong ldn)$/;"	f	class:gray_cycle_leaders	access:public	signature:(ulong ldn)
init	src/comb/num-compositions.h	/^    void init()$/;"	f	class:num_compositions	access:public	signature:()
init	src/comb/wfl-hilbert.h	/^    void init(ulong d, ulong \/*lv*\/, ulong \/*v*\/, ulong e)$/;"	f	class:wfl_cell	access:public	signature:(ulong d, ulong , ulong , ulong e)
init	src/ds/attic/coroutine.h	/^    void init()  { dp_=0; tp_=0; }$/;"	f	class:coroutine	access:public	signature:()
init	src/graph/attic/debruijngraph.h	/^    void init()$/;"	f	class:debruijn_cycles	access:public	signature:()
init	src/graph/attic/debruijngraph.h	/^    void init()$/;"	f	class:debruijn_graph	access:public	signature:()
init	src/graph/digraph-paths.cc	/^digraph_paths::init()$/;"	f	class:digraph_paths	signature:()
init	src/graph/digraph-paths.h	/^    void init();$/;"	p	class:digraph_paths	access:public	signature:()
init	src/graph/lyndon-gray.h	/^    void init(ulong ncmp=0)$/;"	f	class:lyndon_gray	access:public	signature:(ulong ncmp=0)
init	src/mod/mod.cc	/^mod::init(umod_t m, factorization *mf\/*=0*\/)$/;"	f	class:mod	signature:(umod_t m, factorization *mf )
init	src/mod/mod.h	/^    static bool init(umod_t m, factorization *mf=0);$/;"	p	class:mod	access:public	signature:(umod_t m, factorization *mf=0)
init	src/perm/attic/partition.cc	/^partition::init()$/;"	f	class:partition	signature:()
init	src/perm/attic/partition.h	/^    void init();$/;"	p	class:partition	access:public	signature:()
init_derange3_branch_ratios	doc/perm-doc.txt	/^inline void init_derange3_branch_ratios(double *b, ulong N);$/;"	p	file:	signature:(double *b, ulong N)
init_derange3_branch_ratios	src/perm/permrand-derange3.h	/^inline void init_derange3_branch_ratios(double *b, ulong N)$/;"	f	signature:(double *b, ulong N)
init_derange_branch_ratios	doc/perm-doc.txt	/^inline void init_derange_branch_ratios(double *b);$/;"	p	file:	signature:(double *b)
init_derange_branch_ratios	src/perm/permrand-derange.h	/^inline void init_derange_branch_ratios(double *b)$/;"	f	signature:(double *b)
init_harmonic	doc/perm-doc.txt	/^inline void init_harmonic(double *b, ulong n);$/;"	p	file:	signature:(double *b, ulong n)
init_harmonic	src/perm/permrand-2cycles.h	/^inline void init_harmonic(double *b, ulong n)$/;"	f	signature:(double *b, ulong n)
init_involution_branch_ratios	doc/perm-doc.txt	/^inline void init_involution_branch_ratios(double *b, ulong n);$/;"	p	file:	signature:(double *b, ulong n)
init_involution_branch_ratios	src/perm/permrand-self-inverse.h	/^inline void init_involution_branch_ratios(double *b, ulong n)$/;"	f	signature:(double *b, ulong n)
init_perfpow	src/mod/perfpow.cc	/^    init_perfpow(ulong n)$/;"	f	class:init_perfpow	access:public	signature:(ulong n)
init_perfpow	src/mod/perfpow.cc	/^class init_perfpow$/;"	c	file:
init_perfpow::init_perfpow	src/mod/perfpow.cc	/^    init_perfpow(ulong n)$/;"	f	class:init_perfpow	access:public	signature:(ulong n)
init_perfpow::~init_perfpow	src/mod/perfpow.cc	/^    ~init_perfpow()$/;"	f	class:init_perfpow	access:public	signature:()
init_rec	src/ds/left-right-array.h	/^    void init_rec(ulong i0, ulong i1)$/;"	f	class:left_right_array	access:private	signature:(ulong i0, ulong i1)
init_small_primes	src/mod/primes.cc	/^    init_small_primes(ulong n)$/;"	f	class:init_small_primes	access:public	signature:(ulong n)
init_small_primes	src/mod/primes.cc	/^class init_small_primes$/;"	c	file:
init_small_primes::init_small_primes	src/mod/primes.cc	/^    init_small_primes(ulong n)$/;"	f	class:init_small_primes	access:public	signature:(ulong n)
init_small_primes::~init_small_primes	src/mod/primes.cc	/^    ~init_small_primes()$/;"	f	class:init_small_primes	access:public	signature:()
init_table	demo/seq/A182372-demo.cc	/^void init_table(ulong v=0)$/;"	f	signature:(ulong v=0)
init_vals	src/comb/mixedradix-naf-gray.h	/^    void init_vals(ulong dd)$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong dd)
insert	src/ds/attic/orderedrarray.h	/^    ulong insert(const Type & v)$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v)
insert	src/ds/attic/priorityqueue1.h	/^    bool insert(const Type1 &t)$/;"	f	class:priority_queue1	access:public	signature:(const Type1 &t)
insert	src/ds/attic/rset.h	/^    ulong insert(const Type & z)$/;"	f	class:rset	access:public	signature:(const Type & z)
insert	src/ds/priorityqueue.h	/^    bool insert(const Type1 &t, const Type2 &e)$/;"	f	class:priority_queue	access:public	signature:(const Type1 &t, const Type2 &e)
insert	src/ds/ringbuffer.h	/^    void insert(const Type &z)$/;"	f	class:ringbuffer	access:public	signature:(const Type &z)
insert_at	src/ds/attic/rarray.h	/^    ulong insert_at(const Type & v, ulong j)$/;"	f	class:rarray	access:public	signature:(const Type & v, ulong j)
insert_first	src/ds/deque.h	/^    ulong insert_first(const Type &z)$/;"	f	class:deque	access:public	signature:(const Type &z)
insert_last	src/ds/deque.h	/^    ulong insert_last(const Type &z)$/;"	f	class:deque	access:public	signature:(const Type &z)
insert_uniq	src/ds/attic/orderedrarray.h	/^    ulong insert_uniq(const Type & v)$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v)
inside_q	src/ds/bounding-box.h	/^    bool inside_q( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
instruction	INSTALL.txt	/^If the machine has an AMD64 CPU that has the popcnt instruction,$/;"	v
interior_ones	doc/bits-doc.txt	/^static inline ulong interior_ones(ulong x);$/;"	p	file:	signature:(ulong x)
interior_ones	src/bits/bit-isolate.h	/^static inline ulong interior_ones(ulong x)$/;"	f	signature:(ulong x)
interior_values	doc/bits-doc.txt	/^static inline ulong interior_values(ulong x);$/;"	p	file:	signature:(ulong x)
interior_values	src/bits/bit-isolate.h	/^static inline ulong interior_values(ulong x)$/;"	f	signature:(ulong x)
intersect_range	src/aux0/attic/range.h	/^static inline bool intersect_range(Type xmin, Type xmax, Type &x1, Type &x2)$/;"	f	signature:(Type xmin, Type xmax, Type &x1, Type &x2)
intersect_range_o	src/aux0/attic/range.h	/^static inline bool intersect_range_o(Type xmin, Type xmax, Type &x1, Type &x2)$/;"	f	signature:(Type xmin, Type xmax, Type &x1, Type &x2)
inv	src/bpol/gf2n.h	/^    GF2n inv()  const$/;"	f	class:GF2n	access:public	signature:() const
inv	src/mod/mod.h	/^    mod inv() const$/;"	f	class:mod	access:public	signature:() const
inv2adic	doc/bits-doc.txt	/^static inline ulong inv2adic(ulong x);$/;"	p	file:	signature:(ulong x)
inv2adic	src/bits/bit2adic.h	/^static inline ulong inv2adic(ulong x)$/;"	f	signature:(ulong x)
inv_mod_egcd	doc/mod-doc.txt	/^inline umod_t inv_mod_egcd(umod_t x, umod_t m);$/;"	p	file:	signature:(umod_t x, umod_t m)
inv_mod_egcd	src/mod/modarith.h	/^inline umod_t inv_mod_egcd(umod_t x, umod_t m)$/;"	f	signature:(umod_t x, umod_t m)
inv_modp	doc/mod-doc.txt	/^inline umod_t inv_modp(umod_t a, umod_t p);$/;"	p	file:	signature:(umod_t a, umod_t p)
inv_modp	src/mod/modarith.h	/^inline umod_t inv_modp(umod_t a, umod_t p)$/;"	f	signature:(umod_t a, umod_t p)
inv_modpp	doc/mod-doc.txt	/^inline umod_t inv_modpp(umod_t a, umod_t p, ulong e);$/;"	p	file:	signature:(umod_t a, umod_t p, ulong e)
inv_modpp	src/mod/modarith.h	/^inline umod_t inv_modpp(umod_t a, umod_t p, ulong e)$/;"	f	signature:(umod_t a, umod_t p, ulong e)
inv_perm1	demo/bits/bitperm1-demo.cc	/^void inv_perm1(uchar *a, ulong ldn, const uchar *x)$/;"	f	signature:(uchar *a, ulong ldn, const uchar *x)
inv_sqrt	src/wavelet/harmonic-wavelet.cc	/^static inline double inv_sqrt(ulong n)$/;"	f	file:	signature:(ulong n)
invdata	src/comb/attic/perm-minchange.h	/^    const ulong * invdata()  const  { return ip_; }$/;"	f	class:perm_minchange	access:public	signature:() const
invdata	src/comb/cyclic-perm.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:cyclic_perm	access:public	signature:() const
invdata	src/comb/kperm-gray.h	/^    const ulong * invdata()  const  { return x_; }$/;"	f	class:kperm_gray	access:public	signature:() const
invdata	src/comb/kperm-lex.h	/^    const ulong * invdata()  const  { return ip_; }$/;"	f	class:kperm_lex	access:public	signature:() const
invdata	src/comb/perm-gray-ffact.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_ffact	access:public	signature:() const
invdata	src/comb/perm-gray-ffact2.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:() const
invdata	src/comb/perm-gray-rfact.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_rfact	access:public	signature:() const
invdata	src/comb/perm-gray-rot1.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_rot1	access:public	signature:() const
invdata	src/comb/perm-ives.h	/^    const ulong *invdata()  const { return ip_; }$/;"	f	class:perm_ives	access:public	signature:() const
invdata	src/comb/perm-lex-inv.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
invdata	src/comb/perm-st-gray.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_st_gray	access:public	signature:() const
invdata	src/comb/perm-st-pref.h	/^    const ulong * invdata()  const  { return pi_; }$/;"	f	class:perm_st_pref	access:public	signature:() const
invdata	src/comb/perm-st.h	/^    const ulong * invdata()  const  { return pi_; }$/;"	f	class:perm_st	access:public	signature:() const
invdata	src/comb/perm-star.h	/^    const ulong *invdata()  const  { return ia_; }$/;"	f	class:perm_star	access:public	signature:() const
invdata	src/comb/perm-trotter-lg.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_trotter_lg	access:public	signature:() const
invdata	src/comb/perm-trotter.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_trotter	access:public	signature:() const
inverse_ept	src/comb/wfl-hilbert.h	/^    ulong inverse_ept(ulong e)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong e) const
inverse_gray	src/comb/wfl-hilbert.h	/^    ulong inverse_gray(ulong x)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong x) const
inverse_gray_code	doc/bits-doc.txt	/^static inline ulong inverse_gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
inverse_gray_code	src/bits/graycode.h	/^static inline ulong inverse_gray_code(ulong x)$/;"	f	signature:(ulong x)
inverse_gray_permute	doc/perm-doc.txt	/^inline void inverse_gray_permute(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
inverse_gray_permute	doc/perm-doc.txt	/^void inverse_gray_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
inverse_gray_permute	src/perm/attic/graypermute.cc	/^inverse_gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_gray_permute	src/perm/attic/graypermute.h	/^inverse_gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_gray_permute	src/perm/graypermute.h	/^inline void inverse_gray_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
inverse_gray_permute	src/perm/graypermute.h	/^void inverse_gray_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_gray_permute_16	doc/perm-doc.txt	/^inline void inverse_gray_permute_16(Type *f);$/;"	p	file:	signature:(Type *f)
inverse_gray_permute_16	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_16(Type *f)$/;"	f	signature:(Type *f)
inverse_gray_permute_2	doc/perm-doc.txt	/^inline void inverse_gray_permute_2(Type *\/*f*\/);$/;"	p	file:	signature:(Type * )
inverse_gray_permute_2	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_2(Type *\/*f*\/)$/;"	f	signature:(Type * )
inverse_gray_permute_32	doc/perm-doc.txt	/^inline void inverse_gray_permute_32(Type *f);$/;"	p	file:	signature:(Type *f)
inverse_gray_permute_32	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_32(Type *f)$/;"	f	signature:(Type *f)
inverse_gray_permute_4	doc/perm-doc.txt	/^inline void inverse_gray_permute_4(Type *f);$/;"	p	file:	signature:(Type *f)
inverse_gray_permute_4	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_4(Type *f)$/;"	f	signature:(Type *f)
inverse_gray_permute_64	doc/perm-doc.txt	/^inline void inverse_gray_permute_64(Type *f);$/;"	p	file:	signature:(Type *f)
inverse_gray_permute_64	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_64(Type *f)$/;"	f	signature:(Type *f)
inverse_gray_permute_8	doc/perm-doc.txt	/^inline void inverse_gray_permute_8(Type *f);$/;"	p	file:	signature:(Type *f)
inverse_gray_permute_8	src/perm/shortgraypermute.h	/^inline void inverse_gray_permute_8(Type *f)$/;"	f	signature:(Type *f)
inverse_gray_permute_cycle	src/perm/attic/graypermute.h	/^inverse_gray_permute_cycle(Type *f, ulong s, ulong len)$/;"	f	signature:(Type *f, ulong s, ulong len)
inverse_gray_permute_ge_512	src/perm/attic/graypermute.h	/^inverse_gray_permute_ge_512(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_gray_pow	doc/bits-doc.txt	/^static inline ulong inverse_gray_pow(ulong x, ulong e);$/;"	p	file:	signature:(ulong x, ulong e)
inverse_gray_pow	src/bits/graypower.h	/^static inline ulong inverse_gray_pow(ulong x, ulong e)$/;"	f	signature:(ulong x, ulong e)
inverse_gray_rev_permute	doc/perm-doc.txt	/^inline void inverse_gray_rev_permute(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
inverse_gray_rev_permute	doc/perm-doc.txt	/^void inverse_gray_rev_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
inverse_gray_rev_permute	src/perm/grayrevpermute.h	/^inline void inverse_gray_rev_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
inverse_gray_rev_permute	src/perm/grayrevpermute.h	/^void inverse_gray_rev_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_green_permute	src/perm/attic/greenpermute.h	/^inline void inverse_green_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_green_permute	src/perm/attic/greenpermute.h	/^inline void inverse_green_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
inverse_green_rev_permute	src/perm/attic/greenrevpermute.h	/^inline void inverse_green_rev_permute(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
inverse_green_rev_permute	src/perm/attic/greenrevpermute.h	/^void inverse_green_rev_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_haar	doc/haar-doc.txt	/^void inverse_haar(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_haar	src/haar/haar.h	/^void inverse_haar(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_haar_I	demo/fft/walsh-basis-demo.cc	/^void inverse_haar_I(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_haar_i2i	src/haar/attic/haari2i.cc	/^inverse_haar_i2i(double *f, ulong ldn, double *ws\/*=0*\/)$/;"	f	signature:(double *f, ulong ldn, double *ws )
inverse_haar_i2i	src/haar/attic/haari2i.h	/^void inverse_haar_i2i(double *f, ulong ldn, double *ws=0);$/;"	p	signature:(double *f, ulong ldn, double *ws=0)
inverse_haar_inplace	doc/haar-doc.txt	/^void inverse_haar_inplace(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_haar_inplace	src/haar/haar.h	/^void inverse_haar_inplace(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_haar_inplace_nn	doc/haar-doc.txt	/^void inverse_haar_inplace_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_haar_inplace_nn	src/haar/haarnn.h	/^void inverse_haar_inplace_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_haar_nn	doc/haar-doc.txt	/^void inverse_haar_nn(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_haar_nn	src/haar/haarnn.h	/^void inverse_haar_nn(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_haar_permute	doc/perm-doc.txt	/^void inverse_haar_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
inverse_haar_permute	src/perm/haarpermute.h	/^void inverse_haar_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_haar_rev_nn	doc/haar-doc.txt	/^void inverse_haar_rev_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_haar_rev_nn	src/haar/haarrevnn.h	/^void inverse_haar_rev_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_harmonic_wavelet	doc/wavelet-doc.txt	/^void inverse_harmonic_wavelet(double *fr, double *fi, ulong ldn);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
inverse_harmonic_wavelet	src/wavelet/harmonic-wavelet.cc	/^inverse_harmonic_wavelet(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
inverse_harmonic_wavelet	src/wavelet/harmonic-wavelet.h	/^void inverse_harmonic_wavelet(double *fr, double *fi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, ulong ldn)
inverse_hilbert_gray_code	doc/bits-doc.txt	/^ulong inverse_hilbert_gray_code(ulong g);$/;"	p	file:	signature:(ulong g)
inverse_hilbert_gray_code	src/bits/hilbert.h	/^ulong inverse_hilbert_gray_code(ulong g);$/;"	p	signature:(ulong g)
inverse_hilbert_gray_code	src/bits/lin2hilbert.cc	/^inverse_hilbert_gray_code(ulong g)$/;"	f	signature:(ulong g)
inverse_mrotate	src/perm/attic/mrotate.h	/^void inverse_mrotate(const Type * restrict f, ulong n, ulong r, Type * restrict g)$/;"	f	signature:(const Type * restrict f, ulong n, ulong r, Type * restrict g)
inverse_parity_transform	src/walsh/attic/parity-transform.h	/^void inverse_parity_transform(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
inverse_prefix_transform	doc/haar-doc.txt	/^void inverse_prefix_transform(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_prefix_transform	src/haar/prefix-transform.h	/^void inverse_prefix_transform(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_rev_gray_code	doc/bits-doc.txt	/^static inline ulong inverse_rev_gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
inverse_rev_gray_code	src/bits/revgraycode.h	/^static inline ulong inverse_rev_gray_code(ulong x)$/;"	f	signature:(ulong x)
inverse_rev_gray_pow	doc/bits-doc.txt	/^static inline ulong inverse_rev_gray_pow(ulong x, ulong e);$/;"	p	file:	signature:(ulong x, ulong e)
inverse_rev_gray_pow	src/bits/graypower.h	/^static inline ulong inverse_rev_gray_pow(ulong x, ulong e)$/;"	f	signature:(ulong x, ulong e)
inverse_slant	doc/walsh-doc.txt	/^void inverse_slant(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
inverse_slant	src/walsh/slant.cc	/^inverse_slant(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
inverse_slant	src/walsh/slant.h	/^void inverse_slant(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
inverse_slant_seq	doc/walsh-doc.txt	/^void inverse_slant_seq(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
inverse_slant_seq	src/walsh/slant.cc	/^inverse_slant_seq(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
inverse_slant_seq	src/walsh/slant.h	/^void inverse_slant_seq(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
inverse_square_wave_transform	doc/walsh-doc.txt	/^void inverse_square_wave_transform(Type *f, ulong ldn, bool nq=true);$/;"	p	file:	signature:(Type *f, ulong ldn, bool nq=true)
inverse_square_wave_transform	src/walsh/square-wave-transform.h	/^void inverse_square_wave_transform(Type *f, ulong ldn, bool nq=true)$/;"	f	signature:(Type *f, ulong ldn, bool nq=true)
inverse_swap_blocks	doc/perm-doc.txt	/^void inverse_swap_blocks(Type *f, ulong x1, ulong n1, ulong x2, ulong n2);$/;"	p	file:	signature:(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)
inverse_swap_blocks	src/perm/swapblocks.h	/^void inverse_swap_blocks(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)$/;"	f	signature:(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)
inverse_transposed_haar_inplace_nn	doc/haar-doc.txt	/^void inverse_transposed_haar_inplace_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_transposed_haar_inplace_nn	src/haar/transposedhaarnn.h	/^void inverse_transposed_haar_inplace_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_transposed_haar_nn	doc/haar-doc.txt	/^void inverse_transposed_haar_nn(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_transposed_haar_nn	src/haar/transposedhaarnn.h	/^void inverse_transposed_haar_nn(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
inverse_transposed_haar_rev_nn	doc/haar-doc.txt	/^void inverse_transposed_haar_rev_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_transposed_haar_rev_nn	src/haar/transposedhaarrevnn.h	/^void inverse_transposed_haar_rev_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_walsh_gray	doc/walsh-doc.txt	/^void inverse_walsh_gray(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_walsh_gray	src/walsh/walshgray.h	/^void inverse_walsh_gray(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_walsh_seq1	doc/walsh-doc.txt	/^void inverse_walsh_seq1(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_walsh_seq1	src/walsh/walshseq.h	/^void inverse_walsh_seq1(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_walsh_seq2	doc/walsh-doc.txt	/^void inverse_walsh_seq2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
inverse_walsh_seq2	src/walsh/walshseq.h	/^void inverse_walsh_seq2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
inverse_wavelet	doc/wavelet-doc.txt	/^void inverse_wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm\/*=2*\/);$/;"	p	file:	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm )
inverse_wavelet	src/wavelet/invwavelet.cc	/^inverse_wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm\/*=2*\/)$/;"	f	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm )
inverse_wavelet	src/wavelet/wavelet.h	/^void inverse_wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm=2);$/;"	p	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm=2)
inverse_wavelet_step	doc/wavelet-doc.txt	/^void inverse_wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);$/;"	p	file:	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
inverse_wavelet_step	src/wavelet/invwavelet.cc	/^inverse_wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t)$/;"	f	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
inverse_wavelet_step	src/wavelet/wavelet.h	/^void inverse_wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);$/;"	p	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
inverse_word_gray	doc/aux1-doc.txt	/^void inverse_word_gray(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
inverse_word_gray	src/aux1/wordgray.h	/^void inverse_word_gray(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
inverse_word_rev_gray	doc/aux1-doc.txt	/^void inverse_word_rev_gray(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
inverse_word_rev_gray	src/aux1/wordgray.h	/^void inverse_word_rev_gray(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
invert	src/perm/attic/cycles.cc	/^cycles::invert()$/;"	f	class:cycles	signature:()
invert	src/perm/attic/cycles.h	/^    void invert();$/;"	p	class:cycles	access:public	signature:()
involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    explicit involution_zero_map_rgs(ulong n)$/;"	f	class:involution_zero_map_rgs	access:public	signature:(ulong n)
involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    involution_zero_map_rgs(const involution_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:involution_zero_map_rgs	access:private	signature:(const involution_zero_map_rgs&)
involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^class involution_zero_map_rgs$/;"	c
involution_zero_map_rgs::OK	src/comb/involution-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:() const
involution_zero_map_rgs::a_	src/comb/involution-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:involution_zero_map_rgs	access:public
involution_zero_map_rgs::data	src/comb/involution-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:involution_zero_map_rgs	access:public	signature:() const
involution_zero_map_rgs::first	src/comb/involution-zero-map-rgs.h	/^    void first()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
involution_zero_map_rgs::involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    explicit involution_zero_map_rgs(ulong n)$/;"	f	class:involution_zero_map_rgs	access:public	signature:(ulong n)
involution_zero_map_rgs::involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    involution_zero_map_rgs(const involution_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:involution_zero_map_rgs	access:private	signature:(const involution_zero_map_rgs&)
involution_zero_map_rgs::n_	src/comb/involution-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:involution_zero_map_rgs	access:public
involution_zero_map_rgs::next	src/comb/involution-zero-map-rgs.h	/^    ulong next()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
involution_zero_map_rgs::operator =	src/comb/involution-zero-map-rgs.h	/^    involution_zero_map_rgs & operator = (const involution_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:involution_zero_map_rgs	access:private	signature:(const involution_zero_map_rgs&)
involution_zero_map_rgs::print	src/comb/involution-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
involution_zero_map_rgs::print_fp_dist_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_fp_dist_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
involution_zero_map_rgs::print_fp_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
involution_zero_map_rgs::print_involution	src/comb/involution-zero-map-rgs.h	/^    void print_involution(const char *bla, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool zb=true) const
involution_zero_map_rgs::print_zero_dist_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_zero_dist_rgs(const char *bla, bool dfz=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true) const
involution_zero_map_rgs::z_	src/comb/involution-zero-map-rgs.h	/^    ulong *z_;  \/\/ for non-zero values y: number of x with f(x)=y$/;"	m	class:involution_zero_map_rgs	access:public
involution_zero_map_rgs::~involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    ~involution_zero_map_rgs()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
invsqrt2adic	doc/bits-doc.txt	/^static inline ulong invsqrt2adic(ulong d);$/;"	p	file:	signature:(ulong d)
invsqrt2adic	src/bits/bit2adic.h	/^static inline ulong invsqrt2adic(ulong d)$/;"	f	signature:(ulong d)
ip_	src/comb/attic/perm-minchange.h	/^    ulong *ip_; \/\/ ip[n] contains the inverse permutation of p[]$/;"	m	class:perm_minchange	access:public
ip_	src/comb/kperm-lex.h	/^    ulong *ip_; \/\/ inverse permutation$/;"	m	class:kperm_lex	access:public
ip_	src/comb/perm-ives.h	/^    ulong *ip_;  \/\/ inverse permutation$/;"	m	class:perm_ives	access:public
ipow	doc/aux0-doc.txt	/^Type1 ipow(Type1 a, Type2 ex);$/;"	p	file:	signature:(Type1 a, Type2 ex)
ipow	src/aux0/ipow.h	/^Type1 ipow(Type1 a, Type2 ex)$/;"	f	signature:(Type1 a, Type2 ex)
is	src/wavelet/harmonic-wavelet.cc	/^static const int is = +1;  \/\/ sign of the (forward-) transform$/;"	v	file:
is_anti_symmetric	src/matrix/attic/matrixsymmetryq.h	/^bool is_anti_symmetric(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_arrangement_rgs	src/comb/is-arrangement-rgs.h	/^inline bool is_arrangement_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_ascent_rgs	src/comb/is-ascent-rgs.h	/^inline bool is_ascent_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_balanced	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:private	signature:() const
is_balanced	src/comb/ordered-tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
is_balanced	src/comb/tree-lev-seq-aux.h	/^    bool is_balanced(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
is_balanced	src/comb/tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
is_bit_cyclic_max	doc/bits-doc.txt	/^static inline bool is_bit_cyclic_max(ulong x);$/;"	p	file:	signature:(ulong x)
is_bit_cyclic_max	doc/bits-doc.txt	/^static inline bool is_bit_cyclic_max(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
is_bit_cyclic_max	src/bits/bitcyclic-minmax.h	/^static inline bool is_bit_cyclic_max(ulong x)$/;"	f	signature:(ulong x)
is_bit_cyclic_max	src/bits/bitcyclic-minmax.h	/^static inline bool is_bit_cyclic_max(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
is_bit_cyclic_min	doc/bits-doc.txt	/^static inline bool is_bit_cyclic_min(ulong x);$/;"	p	file:	signature:(ulong x)
is_bit_cyclic_min	doc/bits-doc.txt	/^static inline bool is_bit_cyclic_min(ulong x, ulong n);$/;"	p	file:	signature:(ulong x, ulong n)
is_bit_cyclic_min	src/bits/bitcyclic-minmax.h	/^static inline bool is_bit_cyclic_min(ulong x)$/;"	f	signature:(ulong x)
is_bit_cyclic_min	src/bits/bitcyclic-minmax.h	/^static inline bool is_bit_cyclic_min(ulong x, ulong n)$/;"	f	signature:(ulong x, ulong n)
is_branch	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
is_branch	src/comb/id-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
is_branch	src/comb/ordered-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
is_branch	src/comb/tree-lev-seq-aux.h	/^    ulong is_branch(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
is_branch	src/comb/tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
is_canonical_gray	src/comb/test-gray.cc	/^is_canonical_gray(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_canonical_gray	src/comb/test-gray.h	/^bool is_canonical_gray(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_catalan_path	src/comb/is-catalan-path.h	/^inline bool is_catalan_path(const ulong *x, ulong n2)$/;"	f	signature:(const ulong *x, ulong n2)
is_catalan_rgs	src/comb/is-catalan-rgs.h	/^inline bool is_catalan_rgs(const ulong *rgs, ulong n)$/;"	f	signature:(const ulong *rgs, ulong n)
is_catalan_step_rgs	src/comb/is-catalan-step-rgs.h	/^inline bool is_catalan_step_rgs(const ulong *rgs, ulong n)$/;"	f	signature:(const ulong *rgs, ulong n)
is_cayley_perm	src/comb/is-cayley-perm.h	/^inline bool is_cayley_perm(const ulong *a, ulong n, bitarray *B)$/;"	f	signature:(const ulong *a, ulong n, bitarray *B)
is_change_rgs	src/comb/is-change-rgs.h	/^inline bool is_change_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_chess_tableau	src/comb/young-tab-rgs.h	/^    bool is_chess_tableau()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
is_circulant	src/matrix/attic/matrixsymmetryq.h	/^bool is_circulant(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_comp	src/comb/composition-rank.h	/^    bool is_comp(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
is_complementary_gray	src/comb/test-gray.cc	/^is_complementary_gray(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_complementary_gray	src/comb/test-gray.h	/^bool is_complementary_gray(const ulong *rv, ulong ng);$/;"	p	signature:(const ulong *rv, ulong ng)
is_complex_sorted	src/sort/attic/sortcomplex.cc	/^is_complex_sorted(Complex *f, ulong n)$/;"	f	signature:(Complex *f, ulong n)
is_complex_sorted	src/sort/attic/sortcomplex.h	/^bool is_complex_sorted(Complex *f, ulong n);$/;"	p	signature:(Complex *f, ulong n)
is_composition_nz	src/comb/is-composition-nz.h	/^inline bool is_composition_nz(const ulong *a, ulong m, ulong n)$/;"	f	signature:(const ulong *a, ulong m, ulong n)
is_connected	doc/perm-doc.txt	/^bool is_connected(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_connected	src/perm/permq.cc	/^is_connected(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_connected	src/perm/permq.h	/^bool is_connected(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_counting_sorted	doc/sort-doc.txt	/^bool is_counting_sorted(const ulong *f, ulong n, ulong b0, ulong m);$/;"	p	file:	signature:(const ulong *f, ulong n, ulong b0, ulong m)
is_counting_sorted	src/sort/radixsort.cc	/^is_counting_sorted(const ulong *f, ulong n, ulong b0, ulong m)$/;"	f	signature:(const ulong *f, ulong n, ulong b0, ulong m)
is_counting_sorted	src/sort/radixsort.h	/^bool is_counting_sorted(const ulong *f, ulong n, ulong b0, ulong m);$/;"	p	signature:(const ulong *f, ulong n, ulong b0, ulong m)
is_cycle	src/graph/lyndon-gray.h	/^    bool is_cycle()  const$/;"	f	class:lyndon_gray	access:public	signature:() const
is_cyclic	doc/mod-doc.txt	/^bool is_cyclic(const factorization &f);$/;"	p	file:	signature:(const factorization &f)
is_cyclic	doc/perm-doc.txt	/^bool is_cyclic(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_cyclic	src/mod/cyclic.cc	/^is_cyclic(const factorization &f)$/;"	f	signature:(const factorization &f)
is_cyclic	src/mod/numtheory.h	/^bool is_cyclic(const factorization &f);$/;"	p	signature:(const factorization &f)
is_cyclic	src/perm/permq.cc	/^is_cyclic(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_cyclic	src/perm/permq.h	/^bool is_cyclic(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_cyclic_lex_min	src/comb/cyclic-words.h	/^bool is_cyclic_lex_min(const Type *W, ulong n)$/;"	f	signature:(const Type *W, ulong n)
is_delayed	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_delayed(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
is_delayed	src/comb/young-tab-rgs.h	/^    bool is_delayed(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
is_delayed_young_tab_rgs	src/comb/is-shifted-young-tab-rgs.h	/^inline bool is_delayed_young_tab_rgs(const ulong *A, ulong n, ulong h, ulong s=1)$/;"	f	signature:(const ulong *A, ulong n, ulong h, ulong s=1)
is_derangement	doc/perm-doc.txt	/^bool is_derangement(const ulong *f, const ulong *g, ulong n);$/;"	p	file:	signature:(const ulong *f, const ulong *g, ulong n)
is_derangement	doc/perm-doc.txt	/^bool is_derangement(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_derangement	src/perm/permq.cc	/^is_derangement(const ulong *f, const ulong *g, ulong n)$/;"	f	signature:(const ulong *f, const ulong *g, ulong n)
is_derangement	src/perm/permq.cc	/^is_derangement(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_derangement	src/perm/permq.h	/^bool is_derangement(const ulong *f, const ulong *g, ulong n);$/;"	p	signature:(const ulong *f, const ulong *g, ulong n)
is_derangement	src/perm/permq.h	/^bool is_derangement(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_descent_rgs	src/comb/is-descent-rgs.h	/^inline bool is_descent_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_diag	src/matrix/matrix.h	/^    bool is_diag(Type v)  const$/;"	f	class:matrix	access:public	signature:(Type v) const
is_dist_parts	src/comb/partition.h	/^    bool is_dist_parts()  const$/;"	f	class:partition	access:public	signature:() const
is_doubly_symmetric	src/matrix/attic/matrixsymmetryq.h	/^bool is_doubly_symmetric(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_dyck_rgs	src/comb/is-dyck-rgs.h	/^inline bool is_dyck_rgs(const ulong *rgs, ulong n, ulong i=1)$/;"	f	signature:(const ulong *rgs, ulong n, ulong i=1)
is_edge_sorted	src/graph/digraph.cc	/^digraph::is_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &)) const
is_edge_sorted	src/graph/digraph.h	/^    bool is_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const;$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &)) const
is_equivalent	src/perm/attic/cycles.h	/^    bool is_equivalent(const ulong *f, ulong n)  const$/;"	f	class:cycles	access:public	signature:(const ulong *f, ulong n) const
is_even	src/bits/evenodd.h	/^static inline bool is_even(ulong x)  { return (0==(x&1UL)); }$/;"	f	signature:(ulong x)
is_factorization_of	src/mod/factor.h	/^    bool is_factorization_of(umod_t n) const  { return  ( n == product() ); }$/;"	f	class:factorization	access:public	signature:(umod_t n) const
is_falling	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_falling(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
is_falling	src/comb/young-tab-rgs.h	/^    bool is_falling(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
is_falling_young_tab_rgs	src/comb/is-shifted-young-tab-rgs.h	/^inline bool is_falling_young_tab_rgs(const ulong *P, ulong h, ulong s=1)$/;"	f	signature:(const ulong *P, ulong h, ulong s=1)
is_fibrep	doc/bits-doc.txt	/^static inline bool is_fibrep(ulong f);$/;"	p	file:	signature:(ulong f)
is_fibrep	src/bits/fibrep.h	/^static inline bool is_fibrep(ulong f)$/;"	f	signature:(ulong f)
is_first	src/comb/ksubset-gray.h	/^    bool is_first()  const  { return ( S_[1] == n_ - kmin_ + 1 );  }$/;"	f	class:ksubset_gray	access:public	signature:() const
is_free	src/ds/left-right-array.h	/^    bool is_free(ulong i) const  { return  tg_[i]; }$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
is_generator	src/bpol/gf2n.h	/^    bool is_generator()  const { return order() == mm_; }$/;"	f	class:GF2n	access:public	signature:() const
is_gray_path	src/comb/test-gray.cc	/^is_gray_path(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_gray_path	src/comb/test-gray.h	/^bool is_gray_path(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_identity	doc/perm-doc.txt	/^bool is_identity(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_identity	src/perm/permq.cc	/^is_identity(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_identity	src/perm/permq.h	/^bool is_identity(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_identity_tree	src/comb/tree-lev-seq-aux.h	/^    bool is_identity_tree(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
is_identity_tree	src/comb/tree-lev-seq.h	/^    bool is_identity_tree()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
is_idoneal	src/mod/attic/testnum.cc	/^inline bool is_idoneal(ulong x)$/;"	f	signature:(ulong x)
is_idoneal	src/mod/attic/testnum.h	/^inline bool is_idoneal(ulong x);$/;"	p	signature:(ulong x)
is_idx_partitioned	doc/sort-doc.txt	/^bool is_idx_partitioned(const Type *f, ulong n, const ulong *x, ulong k);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x, ulong k)
is_idx_partitioned	src/sort/minmaxidx.h	/^bool is_idx_partitioned(const Type *f, ulong n, const ulong *x, ulong k)$/;"	f	signature:(const Type *f, ulong n, const ulong *x, ulong k)
is_idx_partitioned	src/sort/minmaxidxfunc.h	/^bool is_idx_partitioned(const Type *f, ulong n, const ulong *x, ulong k,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, ulong k, int (*cmp)(const Type &, const Type &))
is_idx_sorted	doc/sort-doc.txt	/^bool is_idx_sorted(const Type *f, ulong n, const ulong *x);$/;"	p	file:	signature:(const Type *f, ulong n, const ulong *x)
is_idx_sorted	src/sort/sortidx.h	/^bool is_idx_sorted(const Type *f, ulong n, const ulong *x)$/;"	f	signature:(const Type *f, ulong n, const ulong *x)
is_idx_sorted	src/sort/sortidxfunc.h	/^bool is_idx_sorted(const Type *f, ulong n, const ulong *x,$/;"	f	signature:(const Type *f, ulong n, const ulong *x, int (*cmp)(const Type &, const Type &))
is_into_even_parts	src/comb/partition.h	/^    bool is_into_even_parts()  const$/;"	f	class:partition	access:public	signature:() const
is_into_odd_parts	src/comb/partition.h	/^    bool is_into_odd_parts()  const$/;"	f	class:partition	access:public	signature:() const
is_inverse	doc/perm-doc.txt	/^bool is_inverse(const ulong *f, const ulong *g, ulong n, bool hint\/*=false*\/);$/;"	p	file:	signature:(const ulong *f, const ulong *g, ulong n, bool hint )
is_inverse	src/perm/permq.cc	/^is_inverse(const ulong *f, const ulong *g, ulong n, bool hint\/*=false*\/)$/;"	f	signature:(const ulong *f, const ulong *g, ulong n, bool hint )
is_inverse	src/perm/permq.h	/^bool is_inverse(const ulong *f, const ulong *g, ulong n, bool hint=false);$/;"	p	signature:(const ulong *f, const ulong *g, ulong n, bool hint=false)
is_involution	doc/perm-doc.txt	/^bool is_involution(const ulong *f, ulong n, bool hint\/*=false*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bool hint )
is_involution	src/perm/permq.cc	/^is_involution(const ulong *f, ulong n, bool hint\/*=false*\/)$/;"	f	signature:(const ulong *f, ulong n, bool hint )
is_involution	src/perm/permq.h	/^bool is_involution(const ulong *f, ulong n, bool hint=false);$/;"	p	signature:(const ulong *f, ulong n, bool hint=false)
is_isoscent_rgs	src/comb/is-isoscent-rgs.h	/^inline bool is_isoscent_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_last	src/comb/ksubset-gray.h	/^    bool is_last()  const$/;"	f	class:ksubset_gray	access:public	signature:() const
is_leaf	src/comb/balanced-ordered-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
is_leaf	src/comb/id-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
is_leaf	src/comb/ordered-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
is_leaf	src/comb/tree-lev-seq-aux.h	/^    ulong is_leaf(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
is_leaf	src/comb/tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
is_left_2smooth	src/comb/is-smooth.h	/^inline bool is_left_2smooth(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_left_smooth	src/comb/is-smooth.h	/^inline bool is_left_smooth(const ulong *a, ulong n, ulong d=1)$/;"	f	signature:(const ulong *a, ulong n, ulong d=1)
is_lexrev_fixed_point	doc/bits-doc.txt	/^static inline bool is_lexrev_fixed_point(ulong x);$/;"	p	file:	signature:(ulong x)
is_lexrev_fixed_point	src/bits/bitlex.h	/^static inline bool is_lexrev_fixed_point(ulong x)$/;"	f	signature:(ulong x)
is_little_schroeder_path	src/comb/schroeder-path-lex.h	/^    bool is_little_schroeder_path()  const$/;"	f	class:schroeder_path_lex	access:public	signature:() const
is_lyn	src/comb/binary-necklace.h	/^    bool is_lyn()  const$/;"	f	class:binary_necklace	access:public	signature:() const
is_lyn	src/comb/necklace.h	/^    bool is_lyn()  const$/;"	f	class:necklace	access:public	signature:() const
is_lyndon_word	src/bits/bit-necklace.h	/^    ulong is_lyndon_word()  const  { return (j2_ & n2_); }$/;"	f	class:bit_necklace	access:public	signature:() const
is_lyndon_word	src/comb/lyndon-factorization.h	/^inline bool is_lyndon_word(const Type *W, ulong n)$/;"	f	signature:(const Type *W, ulong n)
is_mersenne_x	doc/mod-doc.txt	/^inline bool is_mersenne_x(ulong x);$/;"	p	file:	signature:(ulong x)
is_mersenne_x	src/mod/mersenne.h	/^inline bool is_mersenne_x(ulong x)$/;"	f	signature:(ulong x)
is_minor_anti_symmetric	src/matrix/attic/matrixsymmetryq.h	/^bool is_minor_anti_symmetric(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_minor_symmetric	src/matrix/attic/matrixsymmetryq.h	/^bool is_minor_symmetric(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_mixedradix_num	src/comb/is-mixedradix-num.h	/^inline bool is_mixedradix_num(const ulong *a, ulong n, const ulong *m1)$/;"	f	signature:(const ulong *a, ulong n, const ulong *m1)
is_monotone	src/sort/attic/monotone.h	/^int is_monotone(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_monotonic_gray	src/comb/test-gray.cc	/^is_monotonic_gray(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_monotonic_gray	src/comb/test-gray.h	/^bool is_monotonic_gray(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_motzkin_path	src/comb/is-motzkin-path.h	/^inline bool is_motzkin_path(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
is_motzkin_rgs	src/comb/is-motzkin-rgs.h	/^inline bool is_motzkin_rgs(const ulong *a, ulong n, ulong i=1)$/;"	f	signature:(const ulong *a, ulong n, ulong i=1)
is_motzkin_step_rgs	src/comb/is-motzkin-step-rgs.h	/^inline bool is_motzkin_step_rgs(const ulong *rgs, ulong n)$/;"	f	signature:(const ulong *rgs, ulong n)
is_necklace	src/comb/binary-necklace.h	/^    bool is_necklace()  const$/;"	f	class:binary_necklace	access:public	signature:() const
is_necklace	src/comb/necklace.h	/^    bool is_necklace()  const$/;"	f	class:necklace	access:public	signature:() const
is_noncrossing_setpart_rgs	src/comb/is-noncrossing-setpart-rgs.h	/^inline bool is_noncrossing_setpart_rgs(const ulong *R, ulong n)$/;"	f	signature:(const ulong *R, ulong n)
is_nonsquashing	src/comb/is-nonsquashing.h	/^inline bool is_nonsquashing(const Type *a, ulong m)$/;"	f	signature:(const Type *a, ulong m)
is_nonsquashing_asc	src/comb/is-nonsquashing.h	/^inline bool is_nonsquashing_asc(const Type *a, ulong m)$/;"	f	signature:(const Type *a, ulong m)
is_normal	src/bpol/gf2n.h	/^    static bool is_normal()  { return (bool)is_normal_; }$/;"	f	class:GF2n	access:public	signature:()
is_normal_	src/bpol/gf2n.cc	/^ulong GF2n::is_normal_ = 0;  \/\/ whether field polynomial is normal$/;"	m	class:GF2n	file:
is_normal_	src/bpol/gf2n.h	/^    static ulong is_normal_;  \/\/ whether field polynomial is normal$/;"	m	class:GF2n	access:public
is_npqr	src/mod/attic/testnum.cc	/^inline ulong is_npqr(ulong x)$/;"	f	signature:(ulong x)
is_npqr	src/mod/attic/testnum.h	/^inline ulong is_npqr(ulong x);$/;"	p	signature:(ulong x)
is_odd	src/bits/evenodd.h	/^static inline bool is_odd(ulong x)  { return (0!=(x&1UL)); }$/;"	f	signature:(ulong x)
is_odd	src/comb/mixedradix-naf-gray.h	/^    bool is_odd(ulong x)  const  { return (x & 1) != 0; }$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong x) const
is_paren_position_word	src/comb/is-paren-position-word.h	/^inline bool is_paren_position_word(const Type *x, ulong n)$/;"	f	signature:(const Type *x, ulong n)
is_paren_string	src/comb/is-paren-string.h	/^inline bool is_paren_string(const Type *str, ulong n2)$/;"	f	signature:(const Type *str, ulong n2)
is_paren_string	src/comb/is-paren-string.h	/^inline bool is_paren_string(const bitarray &B)$/;"	f	signature:(const bitarray &B)
is_parenword	doc/bits-doc.txt	/^static inline bool is_parenword(ulong x);$/;"	p	file:	signature:(ulong x)
is_parenword	src/bits/parenwords.h	/^static inline bool is_parenword(ulong x)$/;"	f	signature:(ulong x)
is_part	demo/seq/A179009-demo.cc	/^bool is_part(ulong p, ulong m)$/;"	f	signature:(ulong p, ulong m)
is_partition_asc	src/comb/is-partition-asc.h	/^inline bool is_partition_asc(const ulong *a, ulong m, ulong n)$/;"	f	signature:(const ulong *a, ulong m, ulong n)
is_partition_desc	src/comb/is-partition-desc.h	/^inline bool is_partition_desc(const ulong *a, ulong m, ulong n)$/;"	f	signature:(const ulong *a, ulong m, ulong n)
is_partition_rgs	src/comb/is-partition-rgs.h	/^inline bool is_partition_rgs(const Type *f, ulong n, bool dq=true)$/;"	f	signature:(const Type *f, ulong n, bool dq=true)
is_partitioned	doc/sort-doc.txt	/^bool is_partitioned(const Type *f, ulong n, ulong k);$/;"	p	file:	signature:(const Type *f, ulong n, ulong k)
is_partitioned	doc/sort-doc.txt	/^bool is_partitioned(const Type *f, ulong n, ulong k, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, ulong k, int (*cmp)(const Type &, const Type &))
is_partitioned	src/sort/attic/sort.h	/^int is_partitioned(const Type *f, ulong n, ulong k)$/;"	f	signature:(const Type *f, ulong n, ulong k)
is_partitioned	src/sort/minmaxfunc.h	/^bool is_partitioned(const Type *f, ulong n, ulong k, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, ulong k, int (*cmp)(const Type &, const Type &))
is_partitioned	src/sort/sort.h	/^bool is_partitioned(const Type *f, ulong n, ulong k)$/;"	f	signature:(const Type *f, ulong n, ulong k)
is_pow_of_2	doc/bits-doc.txt	/^static inline bool is_pow_of_2(ulong x);$/;"	p	file:	signature:(ulong x)
is_pow_of_2	src/bits/bit2pow.h	/^static inline bool is_pow_of_2(ulong x)$/;"	f	signature:(ulong x)
is_prime	src/mod/factor.cc	/^bool factorization::is_prime() const$/;"	f	class:factorization	signature:() const
is_prime	src/mod/factor.h	/^    bool  is_prime() const;$/;"	p	class:factorization	access:public	signature:() const
is_primitive	src/bpol/all-irredpoly.h	/^    bool is_primitive()  const$/;"	f	class:all_irredpoly	access:public	signature:() const
is_primitive_root_mod	src/mod/attic/primroot.cc	/^is_primitive_root_mod(umod_t r, umod_t m, const factorization &pf)$/;"	f	signature:(umod_t r, umod_t m, const factorization &pf)
is_proper_subset	doc/bits-doc.txt	/^static inline bool is_proper_subset(ulong u, ulong e);$/;"	p	file:	signature:(ulong u, ulong e)
is_proper_subset	src/bits/bitsubsetq.h	/^static inline bool is_proper_subset(ulong u, ulong e)$/;"	f	signature:(ulong u, ulong e)
is_ptr_partitioned	doc/sort-doc.txt	/^bool is_ptr_partitioned(\/*const Type *f,*\/ ulong n, Type const*const*x, ulong k);$/;"	p	file:	signature:( ulong n, Type const*const*x, ulong k)
is_ptr_partitioned	src/sort/minmaxptr.h	/^bool is_ptr_partitioned(\/*const Type *f,*\/ ulong n, Type const*const*x, ulong k)$/;"	f	signature:( ulong n, Type const*const*x, ulong k)
is_ptr_partitioned	src/sort/minmaxptrfunc.h	/^bool is_ptr_partitioned(\/*const Type *f,*\/ ulong n, Type const * const * x, ulong k,$/;"	f	signature:( ulong n, Type const * const * x, ulong k, int (*cmp)(const Type &, const Type &))
is_ptr_sorted	doc/sort-doc.txt	/^bool is_ptr_sorted(\/*const Type *f,*\/ ulong n, Type const*const*x);$/;"	p	file:	signature:( ulong n, Type const*const*x)
is_ptr_sorted	src/sort/sortptr.h	/^bool is_ptr_sorted(\/*const Type *f,*\/ ulong n, Type const*const*x)$/;"	f	signature:( ulong n, Type const*const*x)
is_ptr_sorted	src/sort/sortptrfunc.h	/^bool is_ptr_sorted(\/*const Type *f,*\/ ulong n, Type const * const * x,$/;"	f	signature:( ulong n, Type const * const * x, int (*cmp)(const Type &, const Type &))
is_quadratic_residue	doc/mod-doc.txt	/^bool is_quadratic_residue(umod_t a, const factorization &mf);$/;"	p	file:	signature:(umod_t a, const factorization &mf)
is_quadratic_residue	src/mod/numtheory.h	/^bool is_quadratic_residue(umod_t a, const factorization &mf);$/;"	p	signature:(umod_t a, const factorization &mf)
is_quadratic_residue	src/mod/quadresidue.cc	/^is_quadratic_residue(umod_t a, const factorization &mf)$/;"	f	signature:(umod_t a, const factorization &mf)
is_quadratic_residue_2ex	doc/mod-doc.txt	/^bool is_quadratic_residue_2ex(umod_t a, ulong x);$/;"	p	file:	signature:(umod_t a, ulong x)
is_quadratic_residue_2ex	src/mod/numtheory.h	/^bool is_quadratic_residue_2ex(umod_t a, ulong x);$/;"	p	signature:(umod_t a, ulong x)
is_quadratic_residue_2ex	src/mod/quadresidue.cc	/^is_quadratic_residue_2ex(umod_t a, ulong x)$/;"	f	signature:(umod_t a, ulong x)
is_repeat	src/comb/check-kpermgen.h	/^    bool is_repeat()$/;"	f	class:check_kpermgen	access:public	signature:()
is_repeat	src/comb/check-mixedradix.h	/^    bool is_repeat()$/;"	f	class:check_mixedradix	access:public	signature:()
is_repeat	src/comb/check-permgen.h	/^    bool is_repeat()$/;"	f	class:check_permgen	access:public	signature:()
is_repeat_rev	src/comb/check-kpermgen.h	/^    bool is_repeat_rev()$/;"	f	class:check_kpermgen	access:public	signature:()
is_repeat_rev	src/comb/check-permgen.h	/^    bool is_repeat_rev()$/;"	f	class:check_permgen	access:public	signature:()
is_rev_catalan_rgs	src/comb/is-catalan-rgs.h	/^inline bool is_rev_catalan_rgs(const ulong *rgs, ulong n)$/;"	f	signature:(const ulong *rgs, ulong n)
is_right_smooth	src/comb/is-smooth.h	/^inline bool is_right_smooth(const ulong *a, ulong n, ulong d=1)$/;"	f	signature:(const ulong *a, ulong n, ulong d=1)
is_schroeder_path	src/comb/is-schroeder-path.h	/^inline bool is_schroeder_path(const ulong *x, ulong n2)$/;"	f	signature:(const ulong *x, ulong n2)
is_schroeder_rgs	src/comb/is-schroeder-rgs.h	/^inline bool is_schroeder_rgs(const ulong *a, ulong n, ulong m0)$/;"	f	signature:(const ulong *a, ulong n, ulong m0)
is_seq	demo/perm/perm-decomp-demo.cc	/^inline bool is_seq(const Type *dst, ulong n, Type start=0, Type step=1)$/;"	f	signature:(const Type *dst, ulong n, Type start=0, Type step=1)
is_seq	demo/perm/revbin-perm-rec-demo.cc	/^inline bool is_seq(const Type *dst, ulong n, Type start=0, Type step=1)$/;"	f	signature:(const Type *dst, ulong n, Type start=0, Type step=1)
is_set	src/ds/left-right-array.h	/^    bool is_set(ulong i) const  { return  ! tg_[i]; }$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
is_setpart_ccf_perm	src/comb/is-setpart-ccf-perm.h	/^inline bool is_setpart_ccf_perm(ulong const *f, ulong n)$/;"	f	signature:(ulong const *f, ulong n)
is_setpart_rgs	src/comb/is-setpart-rgs.h	/^inline bool is_setpart_rgs(const ulong *s, ulong n)$/;"	f	signature:(const ulong *s, ulong n)
is_shifted	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_shifted(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
is_shifted	src/comb/young-tab-rgs.h	/^    bool is_shifted(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
is_shifted_young_tab_rgs	src/comb/is-shifted-young-tab-rgs.h	/^inline bool is_shifted_young_tab_rgs(const ulong *A, const ulong *P,$/;"	f	signature:(const ulong *A, const ulong *P, ulong n, ulong h, ulong s=1)
is_simple	doc/perm-doc.txt	/^bool is_simple(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_simple	src/perm/permq.cc	/^is_simple(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_simple	src/perm/permq.h	/^bool is_simple(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_small_perfpow	doc/mod-doc.txt	/^bool is_small_perfpow(ulong n);$/;"	p	file:	signature:(ulong n)
is_small_perfpow	src/mod/perfpow.cc	/^is_small_perfpow(ulong n)$/;"	f	signature:(ulong n)
is_small_perfpow	src/mod/primes.h	/^bool  is_small_perfpow(ulong n);$/;"	p	signature:(ulong n)
is_small_prime	doc/mod-doc.txt	/^bool is_small_prime(ulong n, const bitarray *B\/*=0*\/);$/;"	p	file:	signature:(ulong n, const bitarray *B )
is_small_prime	src/mod/primes.cc	/^is_small_prime(ulong n, const bitarray *B\/*=0*\/)$/;"	f	signature:(ulong n, const bitarray *B )
is_small_prime	src/mod/primes.h	/^bool  is_small_prime(ulong n, const bitarray *B=0);$/;"	p	signature:(ulong n, const bitarray *B=0)
is_smooth	src/comb/is-smooth.h	/^inline bool is_smooth(const ulong *a, ulong n, ulong d=1)$/;"	f	signature:(const ulong *a, ulong n, ulong d=1)
is_sorted	doc/sort-doc.txt	/^bool is_sorted(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_sorted	doc/sort-doc.txt	/^bool is_sorted(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
is_sorted	src/sort/attic/sort.h	/^int is_sorted(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_sorted	src/sort/sort.h	/^bool is_sorted(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_sorted	src/sort/sortfunc.h	/^bool is_sorted(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
is_sorted_desc	doc/sort-doc.txt	/^bool is_sorted_desc(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_sorted_desc	src/sort/sort.h	/^bool is_sorted_desc(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_sorts_in_runs_sorted_asc	src/comb/is-sorts-in-runs-sorted.h	/^inline bool is_sorts_in_runs_sorted_asc(const ulong *A, const ulong *S, ulong m)$/;"	f	signature:(const ulong *A, const ulong *S, ulong m)
is_sorts_in_runs_sorted_desc	src/comb/is-sorts-in-runs-sorted.h	/^inline bool is_sorts_in_runs_sorted_desc(const ulong *A, const ulong *S, ulong m)$/;"	f	signature:(const ulong *A, const ulong *S, ulong m)
is_square	doc/perm-doc.txt	/^bool is_square(const ulong *f, const ulong *g, ulong n);$/;"	p	file:	signature:(const ulong *f, const ulong *g, ulong n)
is_square	src/perm/permq.cc	/^is_square(const ulong *f, const ulong *g, ulong n)$/;"	f	signature:(const ulong *f, const ulong *g, ulong n)
is_square	src/perm/permq.h	/^bool is_square(const ulong *f, const ulong *g, ulong n);$/;"	p	signature:(const ulong *f, const ulong *g, ulong n)
is_stack_sortable	src/comb/is-stack-sortable.h	/^bool is_stack_sortable(const Type *a, ulong n)$/;"	f	signature:(const Type *a, ulong n)
is_strict	src/comb/young-tab-rgs.h	/^    bool is_strict()  const  \/\/ same as: is_shifted( 1 )$/;"	f	class:young_tab_rgs	access:public	signature:() const
is_strictly_concave	doc/sort-doc.txt	/^bool is_strictly_concave(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_strictly_concave	src/sort/convex.h	/^bool is_strictly_concave(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_strictly_convex	doc/sort-doc.txt	/^bool is_strictly_convex(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_strictly_convex	src/sort/convex.h	/^bool is_strictly_convex(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_strictly_monotone	src/sort/attic/monotone.h	/^int is_strictly_monotone(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_strong_pseudo_prime	doc/mod-doc.txt	/^bool is_strong_pseudo_prime(const umod_t n, const umod_t a, const umod_t q, const uint t);$/;"	p	file:	signature:(const umod_t n, const umod_t a, const umod_t q, const uint t)
is_strong_pseudo_prime	src/mod/primes.h	/^bool is_strong_pseudo_prime(const umod_t n, const umod_t a, const umod_t q, const uint t);$/;"	p	signature:(const umod_t n, const umod_t a, const umod_t q, const uint t)
is_strong_pseudo_prime	src/mod/rabinmiller.cc	/^is_strong_pseudo_prime(const umod_t n, const umod_t a, const umod_t q, const uint t)$/;"	f	signature:(const umod_t n, const umod_t a, const umod_t q, const uint t)
is_strongly_decreasing	src/comb/is-nonsquashing.h	/^inline bool is_strongly_decreasing(const Type *a, ulong m)$/;"	f	signature:(const Type *a, ulong m)
is_strongly_increasing	src/comb/is-nonsquashing.h	/^inline bool is_strongly_increasing(const Type *a, ulong m)$/;"	f	signature:(const Type *a, ulong m)
is_strongly_unimodal	src/comb/is-unimodal.h	/^inline bool is_strongly_unimodal(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_subset	doc/bits-doc.txt	/^static inline bool is_subset(ulong u, ulong e);$/;"	p	file:	signature:(ulong u, ulong e)
is_subset	src/bits/bitsubsetq.h	/^static inline bool is_subset(ulong u, ulong e)$/;"	f	signature:(ulong u, ulong e)
is_symmetric	src/comb/is-symmetric.h	/^inline bool is_symmetric(const Type *a, ulong n)$/;"	f	signature:(const Type *a, ulong n)
is_symmetric	src/matrix/attic/matrixsymmetryq.h	/^bool is_symmetric(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_tiny_factor	doc/bits-doc.txt	/^static inline bool is_tiny_factor(ulong x, ulong d);$/;"	p	file:	signature:(ulong x, ulong d)
is_tiny_factor	src/bits/tinyfactors.h	/^static inline bool is_tiny_factor(ulong x, ulong d)$/;"	f	signature:(ulong x, ulong d)
is_tiny_prime	doc/bits-doc.txt	/^static inline bool is_tiny_prime(ulong n);$/;"	p	file:	signature:(ulong n)
is_tiny_prime	src/bits/tinyfactors.h	/^static inline bool is_tiny_prime(ulong n)$/;"	f	signature:(ulong n)
is_toeplitz	src/matrix/attic/matrixsymmetryq.h	/^bool is_toeplitz(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
is_transposed	test/test-transpose.cc	/^is_transposed(const Type *f, ulong nr, ulong nc)$/;"	f	signature:(const Type *f, ulong nr, ulong nc)
is_unique	doc/sort-doc.txt	/^bool is_unique(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_unique	doc/sort-doc.txt	/^bool is_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
is_unique	src/sort/unique.h	/^bool is_unique(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_unique	src/sort/uniquefunc.h	/^bool is_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
is_unique_approx	src/sort/attic/uniqueapprox.h	/^ulong is_unique_approx(const Type *f, ulong n, Type da)$/;"	f	signature:(const Type *f, ulong n, Type da)
is_unitary	demo/comb/conference-quadres-demo.cc	/^is_unitary(Smat H)$/;"	f	signature:(Smat H)
is_unitary	src/matrix/matrix.h	/^    bool is_unitary(Type v)  const$/;"	f	class:matrix	access:public	signature:(Type v) const
is_updown_permutation	doc/perm-doc.txt	/^bool is_updown_permutation(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
is_updown_permutation	src/perm/permq.cc	/^is_updown_permutation(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
is_updown_permutation	src/perm/permq.h	/^bool is_updown_permutation(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
is_valid_permutation	doc/perm-doc.txt	/^bool is_valid_permutation(const ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bitarray *bp )
is_valid_permutation	src/perm/permq.cc	/^is_valid_permutation(const ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong n, bitarray *bp )
is_valid_permutation	src/perm/permq.h	/^bool is_valid_permutation(const ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(const ulong *f, ulong n, bitarray *bp=0)
is_weakly_concave	doc/sort-doc.txt	/^bool is_weakly_concave(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_weakly_concave	src/sort/convex.h	/^bool is_weakly_concave(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_weakly_convex	doc/sort-doc.txt	/^bool is_weakly_convex(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
is_weakly_convex	src/sort/convex.h	/^bool is_weakly_convex(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_weakly_unimodal	src/comb/is-unimodal.h	/^inline bool is_weakly_unimodal(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
is_young_tab_rgs	src/comb/is-young-tab-rgs.h	/^inline bool is_young_tab_rgs(const ulong *x, ulong n, ulong *st, bool cst=false)$/;"	f	signature:(const ulong *x, ulong n, ulong *st, bool cst=false)
is_zero_map_rgs	src/comb/is-zero-map-rgs.h	/^inline bool is_zero_map_rgs(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
is_zero_map_rgs	src/comb/is-zero-map-rgs.h	/^inline bool is_zero_map_rgs(const ulong *a, ulong n, ulong s, ulong *t)$/;"	f	signature:(const ulong *a, ulong n, ulong s, ulong *t)
iset	src/comb/mixedradix-naf-subset-lex.h	/^    const ulong * iset()  const  { return iset_; }$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
iset_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *iset_;  \/\/ Set of positions of nonzero digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
iset_size	src/comb/mixedradix-naf-subset-lex.h	/^    ulong iset_size()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
isin	src/mod/mod.cc	/^mod  * mod::isin = 0;$/;"	m	class:mod	file:
isin	src/mod/mod.h	/^    static mod *cos, *isin;  \/\/ [max2pow+1];   \/\/ cos\/i*sin corresponding to root_2pow$/;"	m	class:mod	access:public
isin2pow	src/mod/mod.cc	/^mod::isin2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
isin2pow	src/mod/mod.h	/^    static mod isin2pow(int ldorder);  \/\/ i*sin of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
isinm	src/mod/mod.cc	/^mod  * mod::isinm = 0;$/;"	m	class:mod	file:
isinm	src/mod/mod.h	/^    static mod *cosm, *isinm;  \/\/ [max2pow+1];  \/\/ cos\/sin corresponding to root_m2pow$/;"	m	class:mod	access:public
isometries	doc/wfl-hilbert-doc.txt	/^isometries, but involving only logical operations on edge-pairs:$/;"	v
isoscent_rgs	src/comb/isoscent-rgs.h	/^    explicit isoscent_rgs(ulong n)$/;"	f	class:isoscent_rgs	access:public	signature:(ulong n)
isoscent_rgs	src/comb/isoscent-rgs.h	/^    isoscent_rgs(const isoscent_rgs&);  \/\/ forbidden$/;"	p	class:isoscent_rgs	access:private	signature:(const isoscent_rgs&)
isoscent_rgs	src/comb/isoscent-rgs.h	/^class isoscent_rgs$/;"	c
isoscent_rgs::OK	src/comb/isoscent-rgs.h	/^    bool OK()  const$/;"	f	class:isoscent_rgs	access:public	signature:() const
isoscent_rgs::a_	src/comb/isoscent-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= m_[k-1] + 1$/;"	m	class:isoscent_rgs	access:public
isoscent_rgs::data	src/comb/isoscent-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:isoscent_rgs	access:public	signature:() const
isoscent_rgs::first	src/comb/isoscent-rgs.h	/^    void first()$/;"	f	class:isoscent_rgs	access:public	signature:()
isoscent_rgs::isoscent_rgs	src/comb/isoscent-rgs.h	/^    explicit isoscent_rgs(ulong n)$/;"	f	class:isoscent_rgs	access:public	signature:(ulong n)
isoscent_rgs::isoscent_rgs	src/comb/isoscent-rgs.h	/^    isoscent_rgs(const isoscent_rgs&);  \/\/ forbidden$/;"	p	class:isoscent_rgs	access:private	signature:(const isoscent_rgs&)
isoscent_rgs::m_	src/comb/isoscent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of isoscents in prefix a[0,1,..,k]$/;"	m	class:isoscent_rgs	access:public
isoscent_rgs::n_	src/comb/isoscent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:isoscent_rgs	access:public
isoscent_rgs::next	src/comb/isoscent-rgs.h	/^    ulong next()$/;"	f	class:isoscent_rgs	access:public	signature:()
isoscent_rgs::num_flat_steps	src/comb/isoscent-rgs.h	/^    ulong num_flat_steps()  const$/;"	f	class:isoscent_rgs	access:public	signature:() const
isoscent_rgs::operator =	src/comb/isoscent-rgs.h	/^    isoscent_rgs & operator = (const isoscent_rgs&);  \/\/ forbidden$/;"	p	class:isoscent_rgs	access:private	signature:(const isoscent_rgs&)
isoscent_rgs::print	src/comb/isoscent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:isoscent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
isoscent_rgs::~isoscent_rgs	src/comb/isoscent-rgs.h	/^    ~isoscent_rgs()$/;"	f	class:isoscent_rgs	access:public	signature:()
isqrt	doc/mod-doc.txt	/^Type isqrt(Type d);$/;"	p	file:	signature:(Type d)
isqrt	src/mod/isqrt.h	/^Type isqrt(Type d)$/;"	f	signature:(Type d)
ith_one_idx	doc/bits-doc.txt	/^static inline ulong ith_one_idx(ulong x, ulong i);$/;"	p	file:	signature:(ulong x, ulong i)
ith_one_idx	src/bits/ith-one-idx.h	/^static inline ulong ith_one_idx(ulong x, ulong i)$/;"	f	signature:(ulong x, ulong i)
ith_one_idx_1	test/test-bits.cc	/^static inline ulong ith_one_idx_1(ulong x, ulong i)$/;"	f	file:	signature:(ulong x, ulong i)
ix_	src/comb/cyclic-perm.h	/^    ulong *ix_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:cyclic_perm	access:public
ix_	src/comb/kperm-gray.h	/^    ulong *ix_; \/\/ permutation (inverse perms in Trotter's order)$/;"	m	class:kperm_gray	access:public
ix_	src/comb/perm-gray-ffact.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_ffact	access:public
ix_	src/comb/perm-gray-ffact2.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_ffact2	access:public
ix_	src/comb/perm-gray-rfact.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_rfact	access:public
ix_	src/comb/perm-gray-rot1.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_rot1	access:public
ix_	src/comb/perm-st-gray.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_st_gray	access:public
ix_	src/ds/bounding-box.h	/^    Type ix_, ax_;  \/\/ min-x, max-x$/;"	m	class:bounding_box	access:protected
iy_	src/ds/bounding-box.h	/^    Type iy_, ay_;  \/\/ min-y, max-y$/;"	m	class:bounding_box	access:protected
j	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
j	doc/wfl-hilbert-doc.txt	/^    ( B(j-2), B(j+1) )  if  j  even  &  j > 0 ,$/;"	v
j	doc/wfl-hilbert-doc.txt	/^    j = yarg(compo(inver(branch[l+1].edge), node) & p2d1);$/;"	v
j	doc/wfl-hilbert-doc.txt	/^2 : this occurs at pace  j = 1  of the Gray path  A  [note that the permutation$/;"	v
j	doc/wfl-hilbert-doc.txt	/^Example: assuming  d > 3 , along the canonical path from  j = 10  on we find$/;"	v
j	doc/wfl-hilbert-doc.txt	/^The next digit of  n  is  2 ; at pace  j = 2  of Gray path  A  is node  3$/;"	v
j	doc/wfl-hilbert-doc.txt	/^by  B(j) .  Given  j , consider the edge-pair --- relative to its base, and$/;"	v
j	doc/wfl-hilbert-doc.txt	/^j+2 = 12  with  i = 2 .  The square lies in plane  [?, 1, ?, 1, 0, ..., 0] .$/;"	v
j	src/comb/paren-gray.h	/^    ulong n, j;$/;"	m	class:paren_gray	access:private
j2_	src/bits/bit-necklace.h	/^    ulong j2_;  \/\/ bit representing j: j2==2**(j-1)$/;"	m	class:bit_necklace	access:public
j_	src/bits/bit-necklace.h	/^    ulong j_;   \/\/ period of the necklace$/;"	m	class:bit_necklace	access:public
j_	src/bpol/mersenne-coprime.h	/^    umod_t j_;   \/\/ current index 1 <= j <= 2**e - 1$/;"	m	class:mersenne_coprime	access:public
j_	src/comb/acyclic-map.h	/^    ulong j_;  \/\/ leftmost position of last change$/;"	m	class:acyclic_map	access:public
j_	src/comb/binary-necklace.h	/^    ulong j_;  \/\/ period of the word (if necklaces)$/;"	m	class:binary_necklace	access:public
j_	src/comb/binary-sl-gray.h	/^    ulong j_;   \/\/ position of last change; returned by pos()$/;"	m	class:binary_sl_gray	access:public
j_	src/comb/ksubset-gray.h	/^    ulong j_;   \/\/ aux$/;"	m	class:ksubset_gray	access:public
j_	src/comb/ksubset-lex.h	/^    ulong j_;  \/\/ number of elements in subset$/;"	m	class:ksubset_lex	access:public
j_	src/comb/mixedradix-colex.h	/^    ulong j_;   \/\/ leftmost position of last change$/;"	m	class:mixedradix_colex	access:public
j_	src/comb/mixedradix-endo-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_endo_gray	access:public
j_	src/comb/mixedradix-endo.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_endo	access:public
j_	src/comb/mixedradix-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_gray	access:public
j_	src/comb/mixedradix-gray2.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_gray2	access:public
j_	src/comb/mixedradix-lex.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_lex	access:public
j_	src/comb/mixedradix-modular-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_modular_gray	access:public
j_	src/comb/mixedradix-modular-gray2.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_modular_gray2	access:public
j_	src/comb/mixedradix-naf-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_naf_gray	access:public
j_	src/comb/mixedradix-naf.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_naf	access:public
j_	src/comb/mixedradix-restrpref.h	/^    ulong j_;    \/\/ position of last change$/;"	m	class:mixedradix_restrpref	access:public
j_	src/comb/mixedradix-rfact.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_rfact	access:public
j_	src/comb/mixedradix-sl-gray.h	/^    ulong j_;    \/\/ position of last change; returned by pos()$/;"	m	class:mixedradix_sl_gray	access:public
j_	src/comb/mixedradix-sod-lex.h	/^    ulong j_;   \/\/ rightmost position of last change$/;"	m	class:mixedradix_sod_lex	access:public
j_	src/comb/necklace.h	/^    ulong j_;   \/\/ period of the word (if necklaces)$/;"	m	class:necklace	access:public
j_	src/comb/smooth-rfact-rgs.h	/^    ulong j_;    \/\/ position of last change$/;"	m	class:smooth_rfact_rgs	access:public
j_	src/comb/subset-gray-delta.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:subset_gray_delta	access:public
jcyc	demo/graph/graph-fibrepgray-demo.cc	/^bool jcyc;$/;"	v
jcyc	demo/graph/graph-parengray-demo.cc	/^bool jcyc;$/;"	v
jcyc	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^bool jcyc;$/;"	v
jcyc	demo/graph/graph-perm-star-transpositions-demo.cc	/^bool jcyc;$/;"	v
jj	src/comb/paren-gray.h	/^    bool jj;  \/\/ whether current string is the last$/;"	m	class:paren_gray	access:private
jj3_revbin17	test/test-bits.cc	/^static inline uint jj3_revbin17(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin32	test/test-bits.cc	/^static inline uint jj3_revbin32(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin32_4a	test/test-bits.cc	/^static inline uint jj3_revbin32_4a(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin32_4b	test/test-bits.cc	/^static inline uint jj3_revbin32_4b(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin32_4c	test/test-bits.cc	/^static inline uint jj3_revbin32_4c(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin32_4d	test/test-bits.cc	/^static inline uint jj3_revbin32_4d(uint x)$/;"	f	file:	signature:(uint x)
jj3_revbin40	test/test-bits.cc	/^static inline ulong jj3_revbin40(ulong x)$/;"	f	file:	signature:(ulong x)
jj3_revbin64	test/test-bits.cc	/^static inline ulong jj3_revbin64(ulong x)$/;"	f	file:	signature:(ulong x)
jj3_revbin64_5	test/test-bits.cc	/^static inline ulong jj3_revbin64_5(ulong x)$/;"	f	file:	signature:(ulong x)
jj_revbin16	test/test-bits.cc	/^static inline ulong jj_revbin16(ulong x)  \/\/ NOT OK$/;"	f	file:	signature:(ulong x)
jj_revbin19	test/test-bits.cc	/^static inline ulong jj_revbin19(ulong x)$/;"	f	file:	signature:(ulong x)
jjassert	src/jjassert.h	31;"	d
jjassert	src/jjassert.h	44;"	d
jjassert_fail	src/aux0/jjassert.cc	/^jjassert_fail($/;"	f	signature:( const char *func, const char *pretty_func, const char *file, const int line, const char *expr, const char *bla )
jjassert_fail	src/jjassert.h	/^void jjassert_fail(const char *func, const char *pretty_func,$/;"	p	signature:(const char *func, const char *pretty_func, const char *file, const int line, const char *expr, const char *bla)
jjassert_not	src/jjassert.h	57;"	d
jump	doc/wfl-hilbert-doc.txt	/^ jump(step), jump(coord), and next(), last() in terms of those.$/;"	p	file:	signature:(coord)
jump	doc/wfl-hilbert-doc.txt	/^ jump(step), jump(coord), and next(), last() in terms of those.$/;"	p	file:	signature:(step)
jump_to_coord	src/comb/wfl-hilbert.h	/^    ulong jump_to_coord(const ulong * ncoord)$/;"	f	class:wfl_hilbert	access:public	signature:(const ulong * ncoord)
jump_to_step	src/comb/wfl-hilbert.h	/^    ulong jump_to_step(ulong new_step)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong new_step)
k	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong k;    \/\/ number of different sorts of objects$/;"	v
k	demo/comb/necklace-gray3-demo.cc	/^long k;  \/\/ k-ary necklaces, k==sigma in the paper$/;"	v
k	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
k	src/bits/print-bin.o	/^ELF/;"	v
k	src/comb/attic/combination-rec-demo.cc	/^ulong n, k; \/\/ (n choose k)$/;"	v
k	src/comb/dyck-gray2.h	/^    ulong m, k;  \/\/ m ones (and m*(k-1) zeros)$/;"	m	class:dyck_gray2	access:public
k	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
k	src/ds/centered-array2d.h	/^    long k;$/;"	m	class:centered_array2d	access:private
k	src/ds/centered-array3d.h	/^    long k;$/;"	m	class:centered_array3d	access:private
k	src/perm/attic/partition.h	/^    int k;$/;"	m	class:partition	access:private
k2	demo/graph/graph-mtl-demo.cc	/^static ulong k2;$/;"	v	file:
k_	src/bits/bitcombshifts.h	/^    ulong n_, k_;  \/\/ combinations (n choose k)$/;"	m	class:bit_comb_shifts	access:public
k_	src/bits/bitfibgray.h	/^    ulong k_;  \/\/ aux$/;"	m	class:bit_fibgray	access:public
k_	src/bits/thue-morse.h	/^    ulong k_;$/;"	m	class:thue_morse	access:public
k_	src/comb/attic/all-compositions-minchange.h	/^    ulong &n_, &k_;$/;"	m	class:all_compositions_minchange	access:public
k_	src/comb/attic/combcolex.h	/^    ulong k_;$/;"	m	class:comb_colex	access:public
k_	src/comb/attic/combination-altminchange.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:combination_altminchange	access:public
k_	src/comb/attic/combination-minchange.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:combination_minchange	access:public
k_	src/comb/attic/comblex.h	/^    ulong k_;$/;"	m	class:comb_lex	access:public
k_	src/comb/attic/combminchange.h	/^    ulong k_;$/;"	m	class:comb_minchange	access:public
k_	src/comb/attic/composition-chase.h	/^    ulong n_, k_;  \/\/ k-composition of n$/;"	m	class:composition_chase	access:public
k_	src/comb/attic/compositionalt.h	/^    ulong k_;  \/\/ number of elements of subsets$/;"	m	class:composition_alt	access:public
k_	src/comb/check-kpermgen.h	/^    ulong k_;$/;"	m	class:check_kpermgen	access:public
k_	src/comb/combination-chase.h	/^    ulong k_;  \/\/ 1<=k<=n$/;"	m	class:combination_chase	access:public
k_	src/comb/combination-colex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_colex	access:public
k_	src/comb/combination-emk.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_emk	access:public
k_	src/comb/combination-endo.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_endo	access:public
k_	src/comb/combination-enup.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_enup	access:public
k_	src/comb/combination-lex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_lex	access:public
k_	src/comb/combination-mod.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_mod	access:public
k_	src/comb/combination-rec.h	/^    ulong n_, k_;  \/\/ (n choose k)$/;"	m	class:comb_rec	access:public
k_	src/comb/combination-revdoor.h	/^    ulong n_, k_;  \/\/ (n choose k)  n>=1,  1<=k<=n$/;"	m	class:combination_revdoor	access:public
k_	src/comb/composition-colex.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex	access:public
k_	src/comb/composition-colex2.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex2	access:public
k_	src/comb/composition-ex-colex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_colex	access:public
k_	src/comb/composition-ex-lex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_lex	access:public
k_	src/comb/composition-nz-numparts.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_nz_numparts	access:public
k_	src/comb/dyck-gray.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_gray	access:public
k_	src/comb/dyck-pref.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_pref	access:public
k_	src/comb/dyck-pref2.h	/^    ulong k_;    \/\/ k-ary Dyck words$/;"	m	class:dyck_pref2	access:public
k_	src/comb/kperm-gray.h	/^    ulong k_;   \/\/ permutations of k elements$/;"	m	class:kperm_gray	access:public
k_	src/comb/kperm-lex.h	/^    ulong k_;   \/\/ permutations of k elements$/;"	m	class:kperm_lex	access:public
k_	src/comb/ksubset-gray.h	/^    ulong k_;   \/\/ k elements in current set$/;"	m	class:ksubset_gray	access:public
k_	src/comb/mset-perm-gray.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_gray	access:public
k_	src/comb/mset-perm-lex-rec.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_lex_rec	access:public
k_	src/comb/mset-perm-lex.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_lex	access:public
k_	src/comb/mset-perm-pref.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_pref	access:public
k_	src/comb/num-compositions.h	/^    ulong k_;  \/\/ max k$/;"	m	class:num_compositions	access:public
k_	src/comb/paren-lex.h	/^    ulong k_;    \/\/ Number of paren pairs$/;"	m	class:paren_lex	access:public
k_	src/comb/paren.h	/^    ulong k_;    \/\/ Number of paren pairs$/;"	m	class:paren	access:public
k_	src/comb/subset-gray.h	/^    ulong k_;   \/\/ number of elements in subset$/;"	m	class:subset_gray	access:public
k_	src/comb/subset-lex.h	/^    ulong k_;   \/\/ index of last element in subset$/;"	m	class:subset_lex	access:public
kmax_	src/comb/ksubset-gray.h	/^    ulong kmin_, kmax_;  \/\/ kmin <= k <= kmax$/;"	m	class:ksubset_gray	access:public
kmax_	src/comb/ksubset-rec.h	/^    ulong kmin_, kmax_;  \/\/  k-subsets where kmin<=k<=kma$/;"	m	class:ksubset_rec	access:public
kmin_	src/comb/ksubset-gray.h	/^    ulong kmin_, kmax_;  \/\/ kmin <= k <= kmax$/;"	m	class:ksubset_gray	access:public
kmin_	src/comb/ksubset-rec.h	/^    ulong kmin_, kmax_;  \/\/  k-subsets where kmin<=k<=kma$/;"	m	class:ksubset_rec	access:public
knuth_revbin64	test/test-bits.cc	/^static inline ulong knuth_revbin64(ulong x)$/;"	f	file:	signature:(ulong x)
kolakoski_seq	src/bits/kolakoski-seq.h	/^    kolakoski_seq()$/;"	f	class:kolakoski_seq	access:public	signature:()
kolakoski_seq	src/bits/kolakoski-seq.h	/^class kolakoski_seq$/;"	c
kolakoski_seq::first	src/bits/kolakoski-seq.h	/^    void first()$/;"	f	class:kolakoski_seq	access:public	signature:()
kolakoski_seq::kolakoski_seq	src/bits/kolakoski-seq.h	/^    kolakoski_seq()$/;"	f	class:kolakoski_seq	access:public	signature:()
kolakoski_seq::next	src/bits/kolakoski-seq.h	/^    ulong next()$/;"	f	class:kolakoski_seq	access:public	signature:()
kolakoski_seq::x	src/bits/kolakoski-seq.h	/^    ulong x, y;$/;"	m	class:kolakoski_seq	access:private
kolakoski_seq::y	src/bits/kolakoski-seq.h	/^    ulong x, y;$/;"	m	class:kolakoski_seq	access:private
kp	demo/comb/combination-pref-demo.cc	/^ulong np, kp;$/;"	v
kp	demo/comb/combination-rec-demo.cc	/^ulong kp;  \/\/ number of elements in composition$/;"	v
kperm_gray	src/comb/kperm-gray.h	/^    explicit kperm_gray(ulong n)$/;"	f	class:kperm_gray	access:public	signature:(ulong n)
kperm_gray	src/comb/kperm-gray.h	/^    kperm_gray(const kperm_gray&);  \/\/ forbidden$/;"	p	class:kperm_gray	access:private	signature:(const kperm_gray&)
kperm_gray	src/comb/kperm-gray.h	/^class kperm_gray$/;"	c
kperm_gray::d_	src/comb/kperm-gray.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, ..., 2]$/;"	m	class:kperm_gray	access:public
kperm_gray::data	src/comb/kperm-gray.h	/^    const ulong * data()  const  { return ix_; }$/;"	f	class:kperm_gray	access:public	signature:() const
kperm_gray::first	src/comb/kperm-gray.h	/^    void first(ulong k)$/;"	f	class:kperm_gray	access:public	signature:(ulong k)
kperm_gray::get_swap	src/comb/kperm-gray.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:kperm_gray	access:public	signature:(ulong &s1, ulong &s2) const
kperm_gray::i_	src/comb/kperm-gray.h	/^    ulong *i_;  \/\/ directions$/;"	m	class:kperm_gray	access:public
kperm_gray::invdata	src/comb/kperm-gray.h	/^    const ulong * invdata()  const  { return x_; }$/;"	f	class:kperm_gray	access:public	signature:() const
kperm_gray::ix_	src/comb/kperm-gray.h	/^    ulong *ix_; \/\/ permutation (inverse perms in Trotter's order)$/;"	m	class:kperm_gray	access:public
kperm_gray::k_	src/comb/kperm-gray.h	/^    ulong k_;   \/\/ permutations of k elements$/;"	m	class:kperm_gray	access:public
kperm_gray::kperm_gray	src/comb/kperm-gray.h	/^    explicit kperm_gray(ulong n)$/;"	f	class:kperm_gray	access:public	signature:(ulong n)
kperm_gray::kperm_gray	src/comb/kperm-gray.h	/^    kperm_gray(const kperm_gray&);  \/\/ forbidden$/;"	p	class:kperm_gray	access:private	signature:(const kperm_gray&)
kperm_gray::n_	src/comb/kperm-gray.h	/^    ulong n_;   \/\/ total of n elements$/;"	m	class:kperm_gray	access:public
kperm_gray::next	src/comb/kperm-gray.h	/^    bool next()$/;"	f	class:kperm_gray	access:public	signature:()
kperm_gray::operator =	src/comb/kperm-gray.h	/^    kperm_gray & operator = (const kperm_gray&);  \/\/ forbidden$/;"	p	class:kperm_gray	access:private	signature:(const kperm_gray&)
kperm_gray::print	src/comb/kperm-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:kperm_gray	access:public	signature:(const char *bla, bool dfz=false) const
kperm_gray::sw1_	src/comb/kperm-gray.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:kperm_gray	access:public
kperm_gray::sw2_	src/comb/kperm-gray.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:kperm_gray	access:public
kperm_gray::swap	src/comb/kperm-gray.h	/^    void swap(ulong j, ulong im)$/;"	f	class:kperm_gray	access:private	signature:(ulong j, ulong im)
kperm_gray::x_	src/comb/kperm-gray.h	/^    ulong *x_;  \/\/ inverse permutation (perms in Trotter's order)$/;"	m	class:kperm_gray	access:public
kperm_gray::~kperm_gray	src/comb/kperm-gray.h	/^    ~kperm_gray()$/;"	f	class:kperm_gray	access:public	signature:()
kperm_lex	src/comb/kperm-lex.h	/^    explicit kperm_lex(ulong n)$/;"	f	class:kperm_lex	access:public	signature:(ulong n)
kperm_lex	src/comb/kperm-lex.h	/^    kperm_lex(const kperm_lex&);  \/\/ forbidden$/;"	p	class:kperm_lex	access:private	signature:(const kperm_lex&)
kperm_lex	src/comb/kperm-lex.h	/^class kperm_lex$/;"	c
kperm_lex::d_	src/comb/kperm-lex.h	/^    ulong *d_;  \/\/ falling factorial number$/;"	m	class:kperm_lex	access:public
kperm_lex::data	src/comb/kperm-lex.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:kperm_lex	access:public	signature:() const
kperm_lex::first	src/comb/kperm-lex.h	/^    void first(ulong k)$/;"	f	class:kperm_lex	access:public	signature:(ulong k)
kperm_lex::invdata	src/comb/kperm-lex.h	/^    const ulong * invdata()  const  { return ip_; }$/;"	f	class:kperm_lex	access:public	signature:() const
kperm_lex::ip_	src/comb/kperm-lex.h	/^    ulong *ip_; \/\/ inverse permutation$/;"	m	class:kperm_lex	access:public
kperm_lex::k_	src/comb/kperm-lex.h	/^    ulong k_;   \/\/ permutations of k elements$/;"	m	class:kperm_lex	access:public
kperm_lex::kperm_lex	src/comb/kperm-lex.h	/^    explicit kperm_lex(ulong n)$/;"	f	class:kperm_lex	access:public	signature:(ulong n)
kperm_lex::kperm_lex	src/comb/kperm-lex.h	/^    kperm_lex(const kperm_lex&);  \/\/ forbidden$/;"	p	class:kperm_lex	access:private	signature:(const kperm_lex&)
kperm_lex::n_	src/comb/kperm-lex.h	/^    ulong n_;   \/\/ total number of elements$/;"	m	class:kperm_lex	access:public
kperm_lex::next	src/comb/kperm-lex.h	/^    bool next()$/;"	f	class:kperm_lex	access:public	signature:()
kperm_lex::operator =	src/comb/kperm-lex.h	/^    kperm_lex & operator = (const kperm_lex&);  \/\/ forbidden$/;"	p	class:kperm_lex	access:private	signature:(const kperm_lex&)
kperm_lex::p_	src/comb/kperm-lex.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:kperm_lex	access:public
kperm_lex::print	src/comb/kperm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:kperm_lex	access:public	signature:(const char *bla, bool dfz=false) const
kperm_lex::swap_positions	src/comb/kperm-lex.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:kperm_lex	access:private	signature:(ulong i1, ulong i2)
kperm_lex::u_	src/comb/kperm-lex.h	/^    ulong u_;   \/\/ sort up to position u+1$/;"	m	class:kperm_lex	access:public
kperm_lex::~kperm_lex	src/comb/kperm-lex.h	/^    ~kperm_lex()$/;"	f	class:kperm_lex	access:public	signature:()
kronecker	doc/mod-doc.txt	/^int kronecker(umod_t a, umod_t b);$/;"	p	file:	signature:(umod_t a, umod_t b)
kronecker	src/matrix/matrix.h	/^    bool kronecker(const matrix<Type> A, const matrix<Type> B)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> A, const matrix<Type> B)
kronecker	src/mod/kronecker.cc	/^kronecker(umod_t a, umod_t b)$/;"	f	signature:(umod_t a, umod_t b)
kronecker	src/mod/numtheory.h	/^int kronecker(umod_t a, umod_t b);$/;"	p	signature:(umod_t a, umod_t b)
ksubset_gray	src/comb/ksubset-gray.h	/^    explicit ksubset_gray(ulong n, ulong kmin, ulong kmax)$/;"	f	class:ksubset_gray	access:public	signature:(ulong n, ulong kmin, ulong kmax)
ksubset_gray	src/comb/ksubset-gray.h	/^    ksubset_gray(const ksubset_gray&);  \/\/ forbidden$/;"	p	class:ksubset_gray	access:private	signature:(const ksubset_gray&)
ksubset_gray	src/comb/ksubset-gray.h	/^class ksubset_gray$/;"	c
ksubset_gray::S_	src/comb/ksubset-gray.h	/^    ulong *S_;  \/\/ set in S[1,2,...,k] with elements \\in {1,2,...,n}$/;"	m	class:ksubset_gray	access:public
ksubset_gray::data	src/comb/ksubset-gray.h	/^    const ulong * data()  const  { return S_+1; }$/;"	f	class:ksubset_gray	access:public	signature:() const
ksubset_gray::first	src/comb/ksubset-gray.h	/^    ulong first()$/;"	f	class:ksubset_gray	access:public	signature:()
ksubset_gray::is_first	src/comb/ksubset-gray.h	/^    bool is_first()  const  { return ( S_[1] == n_ - kmin_ + 1 );  }$/;"	f	class:ksubset_gray	access:public	signature:() const
ksubset_gray::is_last	src/comb/ksubset-gray.h	/^    bool is_last()  const$/;"	f	class:ksubset_gray	access:public	signature:() const
ksubset_gray::j_	src/comb/ksubset-gray.h	/^    ulong j_;   \/\/ aux$/;"	m	class:ksubset_gray	access:public
ksubset_gray::k_	src/comb/ksubset-gray.h	/^    ulong k_;   \/\/ k elements in current set$/;"	m	class:ksubset_gray	access:public
ksubset_gray::kmax_	src/comb/ksubset-gray.h	/^    ulong kmin_, kmax_;  \/\/ kmin <= k <= kmax$/;"	m	class:ksubset_gray	access:public
ksubset_gray::kmin_	src/comb/ksubset-gray.h	/^    ulong kmin_, kmax_;  \/\/ kmin <= k <= kmax$/;"	m	class:ksubset_gray	access:public
ksubset_gray::ksubset_gray	src/comb/ksubset-gray.h	/^    explicit ksubset_gray(ulong n, ulong kmin, ulong kmax)$/;"	f	class:ksubset_gray	access:public	signature:(ulong n, ulong kmin, ulong kmax)
ksubset_gray::ksubset_gray	src/comb/ksubset-gray.h	/^    ksubset_gray(const ksubset_gray&);  \/\/ forbidden$/;"	p	class:ksubset_gray	access:private	signature:(const ksubset_gray&)
ksubset_gray::last	src/comb/ksubset-gray.h	/^    ulong last()$/;"	f	class:ksubset_gray	access:public	signature:()
ksubset_gray::n_	src/comb/ksubset-gray.h	/^    ulong n_;   \/\/ k-subsets of {1, 2, ..., n}$/;"	m	class:ksubset_gray	access:public
ksubset_gray::next	src/comb/ksubset-gray.h	/^    ulong next()$/;"	f	class:ksubset_gray	access:public	signature:()
ksubset_gray::num	src/comb/ksubset-gray.h	/^    ulong num()  const  { return k_; }$/;"	f	class:ksubset_gray	access:public	signature:() const
ksubset_gray::operator =	src/comb/ksubset-gray.h	/^    ksubset_gray & operator = (const ksubset_gray&);  \/\/ forbidden$/;"	p	class:ksubset_gray	access:private	signature:(const ksubset_gray&)
ksubset_gray::prev	src/comb/ksubset-gray.h	/^    ulong prev()$/;"	f	class:ksubset_gray	access:public	signature:()
ksubset_gray::prev_even	src/comb/ksubset-gray.h	/^    void prev_even()$/;"	f	class:ksubset_gray	access:private	signature:()
ksubset_gray::prev_odd	src/comb/ksubset-gray.h	/^    void prev_odd()$/;"	f	class:ksubset_gray	access:private	signature:()
ksubset_gray::print_deltaset	src/comb/ksubset-gray.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:ksubset_gray	access:public	signature:(const char *bla=0) const
ksubset_gray::print_set	src/comb/ksubset-gray.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:ksubset_gray	access:public	signature:(const char *bla=0) const
ksubset_gray::~ksubset_gray	src/comb/ksubset-gray.h	/^    ~ksubset_gray()  { delete [] S_; }$/;"	f	class:ksubset_gray	access:public	signature:()
ksubset_lex	src/comb/ksubset-lex.h	/^    explicit ksubset_lex(ulong n, ulong k)$/;"	f	class:ksubset_lex	access:public	signature:(ulong n, ulong k)
ksubset_lex	src/comb/ksubset-lex.h	/^    ksubset_lex(const ksubset_lex&);  \/\/ forbidden$/;"	p	class:ksubset_lex	access:private	signature:(const ksubset_lex&)
ksubset_lex	src/comb/ksubset-lex.h	/^class ksubset_lex$/;"	c
ksubset_lex::OK	src/comb/ksubset-lex.h	/^    bool OK()  const$/;"	f	class:ksubset_lex	access:public	signature:() const
ksubset_lex::data	src/comb/ksubset-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:ksubset_lex	access:public	signature:() const
ksubset_lex::first	src/comb/ksubset-lex.h	/^    ulong first()$/;"	f	class:ksubset_lex	access:public	signature:()
ksubset_lex::j_	src/comb/ksubset-lex.h	/^    ulong j_;  \/\/ number of elements in subset$/;"	m	class:ksubset_lex	access:public
ksubset_lex::ksubset_lex	src/comb/ksubset-lex.h	/^    explicit ksubset_lex(ulong n, ulong k)$/;"	f	class:ksubset_lex	access:public	signature:(ulong n, ulong k)
ksubset_lex::ksubset_lex	src/comb/ksubset-lex.h	/^    ksubset_lex(const ksubset_lex&);  \/\/ forbidden$/;"	p	class:ksubset_lex	access:private	signature:(const ksubset_lex&)
ksubset_lex::last	src/comb/ksubset-lex.h	/^    ulong last()$/;"	f	class:ksubset_lex	access:public	signature:()
ksubset_lex::m_	src/comb/ksubset-lex.h	/^    ulong m_;  \/\/ max number of elements in subsets$/;"	m	class:ksubset_lex	access:public
ksubset_lex::n_	src/comb/ksubset-lex.h	/^    ulong n_;  \/\/ number of elements in set, should have n>=1$/;"	m	class:ksubset_lex	access:public
ksubset_lex::next	src/comb/ksubset-lex.h	/^    ulong next()$/;"	f	class:ksubset_lex	access:public	signature:()
ksubset_lex::num_parts	src/comb/ksubset-lex.h	/^    ulong num_parts()  const  {  return  j_; }$/;"	f	class:ksubset_lex	access:public	signature:() const
ksubset_lex::operator =	src/comb/ksubset-lex.h	/^    ksubset_lex & operator = (const ksubset_lex&);  \/\/ forbidden$/;"	p	class:ksubset_lex	access:private	signature:(const ksubset_lex&)
ksubset_lex::prev	src/comb/ksubset-lex.h	/^    ulong prev()$/;"	f	class:ksubset_lex	access:public	signature:()
ksubset_lex::x_	src/comb/ksubset-lex.h	/^    ulong *x_;  \/\/ x[0...j-1]:  subset of {0,1,2,...,n-1}$/;"	m	class:ksubset_lex	access:public
ksubset_lex::~ksubset_lex	src/comb/ksubset-lex.h	/^    ~ksubset_lex()$/;"	f	class:ksubset_lex	access:public	signature:()
ksubset_rec	src/comb/ksubset-rec.h	/^    explicit ksubset_rec(ulong n)$/;"	f	class:ksubset_rec	access:public	signature:(ulong n)
ksubset_rec	src/comb/ksubset-rec.h	/^    ksubset_rec(const ksubset_rec&);  \/\/ forbidden$/;"	p	class:ksubset_rec	access:private	signature:(const ksubset_rec&)
ksubset_rec	src/comb/ksubset-rec.h	/^class ksubset_rec$/;"	c
ksubset_rec::ct_	src/comb/ksubset-rec.h	/^    ulong ct_;   \/\/ count subsets$/;"	m	class:ksubset_rec	access:public
ksubset_rec::generate	src/comb/ksubset-rec.h	/^    void generate(void (*visit)(const ksubset_rec &, ulong),$/;"	f	class:ksubset_rec	access:public	signature:(void (*visit)(const ksubset_rec &, ulong), ulong kmin, ulong kmax, ulong rq, ulong nq=0)
ksubset_rec::kmax_	src/comb/ksubset-rec.h	/^    ulong kmin_, kmax_;  \/\/  k-subsets where kmin<=k<=kma$/;"	m	class:ksubset_rec	access:public
ksubset_rec::kmin_	src/comb/ksubset-rec.h	/^    ulong kmin_, kmax_;  \/\/  k-subsets where kmin<=k<=kma$/;"	m	class:ksubset_rec	access:public
ksubset_rec::ksubset_rec	src/comb/ksubset-rec.h	/^    explicit ksubset_rec(ulong n)$/;"	f	class:ksubset_rec	access:public	signature:(ulong n)
ksubset_rec::ksubset_rec	src/comb/ksubset-rec.h	/^    ksubset_rec(const ksubset_rec&);  \/\/ forbidden$/;"	p	class:ksubset_rec	access:private	signature:(const ksubset_rec&)
ksubset_rec::n_	src/comb/ksubset-rec.h	/^    ulong n_;    \/\/ subsets of a n-element set$/;"	m	class:ksubset_rec	access:public
ksubset_rec::next_rec	src/comb/ksubset-rec.cc	/^ksubset_rec::next_rec(ulong d)$/;"	f	class:ksubset_rec	signature:(ulong d)
ksubset_rec::next_rec	src/comb/ksubset-rec.h	/^    void next_rec(ulong d);$/;"	p	class:ksubset_rec	access:private	signature:(ulong d)
ksubset_rec::nq_	src/comb/ksubset-rec.h	/^    ulong nq_;   \/\/ whether to reverse order$/;"	m	class:ksubset_rec	access:public
ksubset_rec::operator =	src/comb/ksubset-rec.h	/^    ksubset_rec & operator = (const ksubset_rec&);  \/\/ forbidden$/;"	p	class:ksubset_rec	access:private	signature:(const ksubset_rec&)
ksubset_rec::pq_	src/comb/ksubset-rec.h	/^    ulong pq_;   \/\/ condition that determines the (printing) order$/;"	m	class:ksubset_rec	access:public
ksubset_rec::rct_	src/comb/ksubset-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:ksubset_rec	access:public
ksubset_rec::rq_	src/comb/ksubset-rec.h	/^    ulong rq_;   \/\/ condition that determines the order$/;"	m	class:ksubset_rec	access:public
ksubset_rec::rv_	src/comb/ksubset-rec.h	/^    ulong *rv_;  \/\/ record of visits in graph (list of elements in subset)$/;"	m	class:ksubset_rec	access:public
ksubset_rec::visit_	src/comb/ksubset-rec.h	/^    void (*visit_)(const ksubset_rec &, ulong);$/;"	m	class:ksubset_rec	access:public
ksubset_rec::~ksubset_rec	src/comb/ksubset-rec.h	/^    ~ksubset_rec()$/;"	f	class:ksubset_rec	access:public	signature:()
ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    explicit ksubset_twoclose(ulong n)$/;"	f	class:ksubset_twoclose	access:public	signature:(ulong n)
ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    ksubset_twoclose(const ksubset_twoclose&);  \/\/ forbidden$/;"	p	class:ksubset_twoclose	access:private	signature:(const ksubset_twoclose&)
ksubset_twoclose	src/comb/ksubset-twoclose.h	/^class ksubset_twoclose$/;"	c
ksubset_twoclose::generate	src/comb/ksubset-twoclose.h	/^    void generate(void (*visit)(const ksubset_twoclose &),$/;"	f	class:ksubset_twoclose	access:public	signature:(void (*visit)(const ksubset_twoclose &), ulong kmin, ulong kmax)
ksubset_twoclose::ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    explicit ksubset_twoclose(ulong n)$/;"	f	class:ksubset_twoclose	access:public	signature:(ulong n)
ksubset_twoclose::ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    ksubset_twoclose(const ksubset_twoclose&);  \/\/ forbidden$/;"	p	class:ksubset_twoclose	access:private	signature:(const ksubset_twoclose&)
ksubset_twoclose::n_	src/comb/ksubset-twoclose.h	/^    ulong n_;    \/\/ subsets of the n-element set$/;"	m	class:ksubset_twoclose	access:public
ksubset_twoclose::next_rec	src/comb/ksubset-twoclose.h	/^    void next_rec(ulong d, ulong n1, ulong n0, bool q)$/;"	f	class:ksubset_twoclose	access:private	signature:(ulong d, ulong n1, ulong n0, bool q)
ksubset_twoclose::operator =	src/comb/ksubset-twoclose.h	/^    ksubset_twoclose & operator = (const ksubset_twoclose&);  \/\/ forbidden$/;"	p	class:ksubset_twoclose	access:private	signature:(const ksubset_twoclose&)
ksubset_twoclose::rv_	src/comb/ksubset-twoclose.h	/^    ulong *rv_;  \/\/ record of visits in graph (delta set)$/;"	m	class:ksubset_twoclose	access:public
ksubset_twoclose::visit_	src/comb/ksubset-twoclose.h	/^    void (*visit_)(const ksubset_twoclose &);$/;"	m	class:ksubset_twoclose	access:public
ksubset_twoclose::~ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    ~ksubset_twoclose()$/;"	f	class:ksubset_twoclose	access:public	signature:()
l	doc/wfl-hilbert-doc.txt	/^    (iv) The walk may be deflated repeatedly until  l = 0 ;$/;"	v
l	doc/wfl-hilbert-doc.txt	/^    l  =  0 + 1\/4 + 2\/4^2 + 3\/4^3 + ...  =  1\/3 (1 + 1\/4 + ...)  =  4\/9 ,$/;"	v
l	doc/wfl-hilbert-doc.txt	/^Initialise the step to zero, and compute the level  l = 2  via the (smallest)$/;"	v
l	doc/wfl-hilbert-doc.txt	/^Initialise the symbol  k = A , and the level  l = 1 . The most-significant digit$/;"	v
l	doc/wfl-hilbert-doc.txt	/^d = 3, l = 2 walk ---$/;"	v
l	doc/wfl-hilbert-doc.txt	/^from  l = 1  upwards, only level  l = 0  requires recomputation: now  j = 3 ,$/;"	v
l	doc/wfl-hilbert-doc.txt	/^remainder vector  [1,1]  at level  l = 1 , using symbol  A  at pace  1  of$/;"	v
l	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
l	src/comb/perm-restrpref.h	/^    ulong *l;  \/\/ auxiliary table: links$/;"	m	class:perm_restrpref	access:protected
l$	src/mod/sqrtmod.o	/^ELF/;"	v
largest_part	src/comb/partition.h	/^    ulong largest_part()  const$/;"	f	class:partition	access:public	signature:() const
last	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
last	src/bits/bit-rll2.h	/^    void last()$/;"	f	class:bit_rll2	access:public	signature:()
last	src/bits/bitsubset-gray.h	/^    ulong last()$/;"	f	class:bit_subset_gray	access:public	signature:()
last	src/bits/bitsubset-gray.h	/^    ulong last(ulong v)$/;"	f	class:bit_subset_gray	access:public	signature:(ulong v)
last	src/bits/bitsubset.h	/^    ulong last()  { last(V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
last	src/bits/bitsubset.h	/^    ulong last(ulong v)  { V=v;  U=v;  return U; }$/;"	f	class:bit_subset	access:public	signature:(ulong v)
last	src/comb/arrangement-rgs.h	/^    void last()$/;"	f	class:arrangement_rgs	access:public	signature:()
last	src/comb/ascent-nonflat-rgs.h	/^    void last()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
last	src/comb/ascent-rgs-subset-lex.h	/^    void last()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
last	src/comb/ascent-rgs.h	/^    void last()$/;"	f	class:ascent_rgs	access:public	signature:()
last	src/comb/attic/combcolex.h	/^    ulong last()$/;"	f	class:comb_colex	access:public	signature:()
last	src/comb/attic/combination-altminchange.h	/^    ulong last()$/;"	f	class:combination_altminchange	access:public	signature:()
last	src/comb/attic/combination-minchange.h	/^    ulong last()$/;"	f	class:combination_minchange	access:public	signature:()
last	src/comb/attic/compositionalt.h	/^    ulong last()$/;"	f	class:composition_alt	access:public	signature:()
last	src/comb/binary-sl-gray.h	/^    void last()$/;"	f	class:binary_sl_gray	access:public	signature:()
last	src/comb/catalan-rgs-subset-lex.h	/^    void last()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
last	src/comb/catalan-step-rgs-colex.h	/^    void last()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
last	src/comb/catalan-step-rgs-lex.h	/^    void last()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
last	src/comb/change-rgs.h	/^    void last()$/;"	f	class:change_rgs	access:public	signature:()
last	src/comb/combination-colex.h	/^    void last()$/;"	f	class:combination_colex	access:public	signature:()
last	src/comb/combination-lex.h	/^    void last()$/;"	f	class:combination_lex	access:public	signature:()
last	src/comb/composition-colex.h	/^    void last()$/;"	f	class:composition_colex	access:public	signature:()
last	src/comb/composition-ex-colex.h	/^    void last()$/;"	f	class:composition_ex_colex	access:public	signature:()
last	src/comb/composition-ex-lex.h	/^    void last()$/;"	f	class:composition_ex_lex	access:public	signature:()
last	src/comb/composition-nz-gray.h	/^    void last()$/;"	f	class:composition_nz_gray	access:public	signature:()
last	src/comb/composition-nz-rl.h	/^    void last()$/;"	f	class:composition_nz_rl	access:public	signature:()
last	src/comb/composition-nz-subset-lex.h	/^    void last()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
last	src/comb/composition-nz.h	/^    void last()$/;"	f	class:composition_nz	access:public	signature:()
last	src/comb/descent-rgs.h	/^    void last()$/;"	f	class:descent_rgs	access:public	signature:()
last	src/comb/dyck-rgs-subset-lex.h	/^    void last()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
last	src/comb/dyck-rgs.h	/^    void last()$/;"	f	class:dyck_rgs	access:public	signature:()
last	src/comb/ksubset-gray.h	/^    ulong last()$/;"	f	class:ksubset_gray	access:public	signature:()
last	src/comb/ksubset-lex.h	/^    ulong last()$/;"	f	class:ksubset_lex	access:public	signature:()
last	src/comb/mixedradix-colex.h	/^    void last()$/;"	f	class:mixedradix_colex	access:public	signature:()
last	src/comb/mixedradix-endo-gray.h	/^    void last()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
last	src/comb/mixedradix-endo.h	/^    void last()$/;"	f	class:mixedradix_endo	access:public	signature:()
last	src/comb/mixedradix-gray.h	/^    void last()$/;"	f	class:mixedradix_gray	access:public	signature:()
last	src/comb/mixedradix-gslex-alt.h	/^    void last()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
last	src/comb/mixedradix-gslex-alt2.h	/^    void last()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
last	src/comb/mixedradix-gslex.h	/^    void last()$/;"	f	class:mixedradix_gslex	access:public	signature:()
last	src/comb/mixedradix-lex.h	/^    void last()$/;"	f	class:mixedradix_lex	access:public	signature:()
last	src/comb/mixedradix-modular-gray2.h	/^    void last()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
last	src/comb/mixedradix-naf-gray.h	/^    void last()  { init_vals(-1UL); }$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
last	src/comb/mixedradix-naf-subset-lex.h	/^    void last()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
last	src/comb/mixedradix-naf.h	/^    void last()$/;"	f	class:mixedradix_naf	access:public	signature:()
last	src/comb/mixedradix-rfact.h	/^    void last()$/;"	f	class:mixedradix_rfact	access:public	signature:()
last	src/comb/mixedradix-subset-lex.h	/^    void last()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
last	src/comb/mixedradix-subset-lexrev.h	/^    void last()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
last	src/comb/motzkin-nonflat-rgs-lex.h	/^    void last()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
last	src/comb/paren-lex.h	/^    void last()  { for (ulong i=1; i<=k_; ++i)  x_[i] = 2*i-2; }$/;"	f	class:paren_lex	access:public	signature:()
last	src/comb/paren.h	/^    void last()  { for (ulong i=0; i<k_; ++i)  x_[i] = 2*i; }$/;"	f	class:paren	access:public	signature:()
last	src/comb/partition-asc.h	/^    void last()$/;"	f	class:partition_asc	access:public	signature:()
last	src/comb/partition-desc.h	/^    void last()$/;"	f	class:partition_desc	access:public	signature:()
last	src/comb/partition.h	/^    void last()$/;"	f	class:partition	access:public	signature:()
last	src/comb/perm-gray-ffact.h	/^    void last()$/;"	f	class:perm_gray_ffact	access:public	signature:()
last	src/comb/perm-rev.h	/^    void last()$/;"	f	class:perm_rev	access:public	signature:()
last	src/comb/perm-trotter-lg.h	/^    void last()$/;"	f	class:perm_trotter_lg	access:public	signature:()
last	src/comb/perm-trotter.h	/^    void last()$/;"	f	class:perm_trotter	access:public	signature:()
last	src/comb/setpart-rgs-lex.h	/^    void last()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
last	src/comb/setpart-rgs-subset-lex.h	/^    void last()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
last	src/comb/subset-gray.h	/^    ulong last()  { x_[1] = 1;  k_ = 1;  return k_; }$/;"	f	class:subset_gray	access:public	signature:()
last	src/comb/subset-lex.h	/^    ulong last()$/;"	f	class:subset_lex	access:public	signature:()
last_	src/bits/bitcombshifts.h	/^    ulong last_;   \/\/ last combination$/;"	m	class:bit_comb_shifts	access:public
last_	src/comb/attic/combminchange.h	/^    ulong last_;$/;"	m	class:comb_minchange	access:public
last_ascent_idx	src/comb/word-stats.h	/^    ulong last_ascent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
last_comb	doc/bits-doc.txt	/^static inline ulong last_comb(ulong k, ulong n=BITS_PER_LONG);$/;"	p	file:	signature:(ulong k, ulong n=BITS_PER_LONG)
last_comb	src/bits/bitcombcolex.h	/^static inline ulong last_comb(ulong k, ulong n=BITS_PER_LONG)$/;"	f	signature:(ulong k, ulong n=BITS_PER_LONG)
last_descent_idx	src/comb/word-stats.h	/^    ulong last_descent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
last_eq_idx	doc/sort-doc.txt	/^inline ulong last_eq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
last_eq_idx	src/sort/usearch.h	/^inline ulong last_eq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
last_flat_step_idx	src/comb/word-stats.h	/^    ulong last_flat_step_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
last_geq_idx	doc/sort-doc.txt	/^inline ulong last_geq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
last_geq_idx	src/sort/usearch.h	/^inline ulong last_geq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
last_geq_sumbox_idx	src/aux1/attic/scanbox.h	/^ulong last_geq_sumbox_idx(const Type *f, ulong n, Type v, ulong boxlen)$/;"	f	signature:(const Type *f, ulong n, Type v, ulong boxlen)
last_idx	src/sort/attic/usearchfunc.h	/^inline ulong last_idx(const Type *f, ulong n, bool (* func)(Type))$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type))
last_leq_idx	doc/sort-doc.txt	/^inline ulong last_leq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
last_leq_idx	src/sort/usearch.h	/^inline ulong last_leq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
last_leq_sumbox_idx	src/aux1/attic/scanbox.h	/^ulong last_leq_sumbox_idx(const Type *f, ulong n, Type v, ulong boxlen)$/;"	f	signature:(const Type *f, ulong n, Type v, ulong boxlen)
last_max_idx	src/comb/word-stats.h	/^    ulong last_max_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
last_min_idx	src/comb/word-stats.h	/^    ulong last_min_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
last_neq_idx	doc/sort-doc.txt	/^inline ulong last_neq_idx(const Type *f, ulong n, Type v);$/;"	p	file:	signature:(const Type *f, ulong n, Type v)
last_neq_idx	src/sort/usearch.h	/^inline ulong last_neq_idx(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
last_parenword	doc/bits-doc.txt	/^static inline ulong last_parenword(ulong n);$/;"	p	file:	signature:(ulong n)
last_parenword	src/bits/parenwords.h	/^static inline ulong last_parenword(ulong n)$/;"	f	signature:(ulong n)
last_part	src/comb/composition-nz-binary.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
last_part	src/comb/composition-nz-first-max.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
last_part	src/comb/composition-nz-gray.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_gray	access:public	signature:() const
last_part	src/comb/composition-nz-gray2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
last_part	src/comb/composition-nz-max.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_max	access:public	signature:() const
last_part	src/comb/composition-nz-minc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
last_part	src/comb/composition-nz-odd.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
last_part	src/comb/composition-nz-restrpref.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
last_part	src/comb/composition-nz-rl.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
last_part	src/comb/composition-nz-sorts.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
last_part	src/comb/composition-nz-sorts2-pp.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
last_part	src/comb/composition-nz-sorts2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
last_part	src/comb/composition-nz-subset-lex.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
last_part	src/comb/composition-nz-upstep.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
last_part	src/comb/composition-nz.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:composition_nz	access:public	signature:() const
last_part	src/comb/partition-asc-perim.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
last_part	src/comb/partition-asc-sorts.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
last_part	src/comb/partition-asc-sorts2-pp.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
last_part	src/comb/partition-asc-sorts2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
last_part	src/comb/partition-asc-subset-lex-csh.h	/^    ulong last_part()  const  { return a_[m_]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
last_part	src/comb/partition-asc-subset-lex.h	/^    ulong last_part()  const  { return a_[m_]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
last_part	src/comb/partition-asc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc	access:public	signature:() const
last_part	src/comb/partition-desc-bb.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
last_part	src/comb/partition-desc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_desc	access:public	signature:() const
last_part	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong last_part()  const  {  return a_[m_]; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
last_part	src/comb/partition-odd-asc-subset-lex.h	/^    ulong last_part()  const  {  return a_[m_]; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
last_sequency	doc/bits-doc.txt	/^static inline ulong last_sequency(ulong k, ulong n=BITS_PER_LONG);$/;"	p	file:	signature:(ulong k, ulong n=BITS_PER_LONG)
last_sequency	src/bits/bitsequency.h	/^static inline ulong last_sequency(ulong k, ulong n=BITS_PER_LONG)$/;"	f	signature:(ulong k, ulong n=BITS_PER_LONG)
last_sort	src/comb/composition-nz-sorts.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
last_sort	src/comb/composition-nz-sorts2-pp.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
last_sort	src/comb/composition-nz-sorts2.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
last_sort	src/comb/partition-asc-perim.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
last_sort	src/comb/partition-asc-sorts.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
last_sort	src/comb/partition-asc-sorts2-pp.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
last_sort	src/comb/partition-asc-sorts2.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
last_val	src/comb/word-stats.h	/^    ulong last_val()  const$/;"	f	class:word_stats	access:public	signature:() const
last_val_idx	src/comb/word-stats.h	/^    ulong last_val_idx(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
last_zero_idx	src/comb/word-stats.h	/^    ulong last_zero_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
lcm	doc/aux0-doc.txt	/^Type lcm(Type a, Type b);$/;"	p	file:	signature:(Type a, Type b)
lcm	src/aux0/gcd.h	/^Type lcm(Type a, Type b)$/;"	f	signature:(Type a, Type b)
ld	doc/bits-doc.txt	/^static inline ulong ld(ulong x);$/;"	p	file:	signature:(ulong x)
ld	src/bits/bit2pow.h	/^static inline ulong ld(ulong x)$/;"	f	signature:(ulong x)
ldN	demo/fft/locrec-demo.cc	/^ulong ldN=0;  \/\/ == ldn in main()$/;"	v
ld_eq	doc/bits-doc.txt	/^static inline bool ld_eq(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
ld_eq	src/bits/bitldeq.h	/^static inline bool ld_eq(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
ld_neq	doc/bits-doc.txt	/^static inline bool ld_neq(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
ld_neq	src/bits/bitldeq.h	/^static inline bool ld_neq(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
ldat	demo/graph/graph-lyndon-gray-demo.cc	/^lyngray_dat *ldat;$/;"	v
ldn	demo/arith/zero-divisors-demo.cc	/^ulong ldn, n;$/;"	v
ldn	demo/arith/zero-divisors-pairs-demo.cc	/^ulong ldn, n;$/;"	v
ldn	demo/bits/bitlex-rec-demo.cc	/^ulong ldn;  \/\/ for printing$/;"	v
ldn	demo/bits/gray-rec-demo.cc	/^ulong ldn;$/;"	v
ldn	demo/bits/revbin-rec-demo.cc	/^ulong ldn;$/;"	v
ldn2rc	doc/aux0-doc.txt	/^static inline void ldn2rc(ulong ldn, ulong &nr, ulong &nc);$/;"	p	file:	signature:(ulong ldn, ulong &nr, ulong &nc)
ldn2rc	src/aux0/ldn2rc.h	/^static inline void ldn2rc(ulong ldn, ulong &nr, ulong &nc)$/;"	f	signature:(ulong ldn, ulong &nr, ulong &nc)
le_	src/comb/mixedradix-endo-gray.h	/^    ulong *le_;  \/\/ last positive digit in endo order$/;"	m	class:mixedradix_endo_gray	access:public
le_	src/comb/mixedradix-endo.h	/^    ulong *le_;  \/\/ last positive digit in endo order, sentinel le[n]$/;"	m	class:mixedradix_endo	access:public
le_count	src/sort/attic/ucount.h	/^inline ulong le_count(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
left_right_array	src/ds/left-right-array.h	/^    explicit left_right_array(ulong n)$/;"	f	class:left_right_array	access:public	signature:(ulong n)
left_right_array	src/ds/left-right-array.h	/^    left_right_array(const left_right_array&);  \/\/ forbidden$/;"	p	class:left_right_array	access:private	signature:(const left_right_array&)
left_right_array	src/ds/left-right-array.h	/^class left_right_array$/;"	c
left_right_array::f_	src/ds/left-right-array.h	/^    ulong f_;    \/\/ number of free indices$/;"	m	class:left_right_array	access:public
left_right_array::fl_	src/ds/left-right-array.h	/^    ulong *fl_;  \/\/ Free indices Left (including current element) in bsearch interval$/;"	m	class:left_right_array	access:public
left_right_array::free_all	src/ds/left-right-array.h	/^    void free_all()$/;"	f	class:left_right_array	access:public	signature:()
left_right_array::get_free_idx	src/ds/left-right-array.h	/^    ulong get_free_idx(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
left_right_array::get_free_idx_chg	src/ds/left-right-array.h	/^    ulong get_free_idx_chg(ulong k)$/;"	f	class:left_right_array	access:public	signature:(ulong k)
left_right_array::get_free_idx_dumb	src/ds/left-right-array.h	/^    ulong get_free_idx_dumb(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
left_right_array::get_set_idx	src/ds/left-right-array.h	/^    ulong get_set_idx(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
left_right_array::get_set_idx_chg	src/ds/left-right-array.h	/^    ulong get_set_idx_chg(ulong k)$/;"	f	class:left_right_array	access:public	signature:(ulong k)
left_right_array::get_set_idx_dumb	src/ds/left-right-array.h	/^    ulong get_set_idx_dumb(ulong k)  const$/;"	f	class:left_right_array	access:public	signature:(ulong k) const
left_right_array::init_rec	src/ds/left-right-array.h	/^    void init_rec(ulong i0, ulong i1)$/;"	f	class:left_right_array	access:private	signature:(ulong i0, ulong i1)
left_right_array::is_free	src/ds/left-right-array.h	/^    bool is_free(ulong i) const  { return  tg_[i]; }$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::is_set	src/ds/left-right-array.h	/^    bool is_set(ulong i) const  { return  ! tg_[i]; }$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::left_right_array	src/ds/left-right-array.h	/^    explicit left_right_array(ulong n)$/;"	f	class:left_right_array	access:public	signature:(ulong n)
left_right_array::left_right_array	src/ds/left-right-array.h	/^    left_right_array(const left_right_array&);  \/\/ forbidden$/;"	p	class:left_right_array	access:private	signature:(const left_right_array&)
left_right_array::n_	src/ds/left-right-array.h	/^    ulong n_;    \/\/ total number of indices$/;"	m	class:left_right_array	access:public
left_right_array::num_FLE	src/ds/left-right-array.h	/^    ulong num_FLE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FLE_dumb	src/ds/left-right-array.h	/^    ulong num_FLE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FLI	src/ds/left-right-array.h	/^    ulong num_FLI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FLI_dumb	src/ds/left-right-array.h	/^    ulong num_FLI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FRE	src/ds/left-right-array.h	/^    ulong num_FRE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FRE_dumb	src/ds/left-right-array.h	/^    ulong num_FRE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FRI	src/ds/left-right-array.h	/^    ulong num_FRI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_FRI_dumb	src/ds/left-right-array.h	/^    ulong num_FRI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SLE	src/ds/left-right-array.h	/^    ulong num_SLE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SLE_dumb	src/ds/left-right-array.h	/^    ulong num_SLE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SLI	src/ds/left-right-array.h	/^    ulong num_SLI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SLI_dumb	src/ds/left-right-array.h	/^    ulong num_SLI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SRE	src/ds/left-right-array.h	/^    ulong num_SRE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SRE_dumb	src/ds/left-right-array.h	/^    ulong num_SRE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SRI	src/ds/left-right-array.h	/^    ulong num_SRI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_SRI_dumb	src/ds/left-right-array.h	/^    ulong num_SRI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
left_right_array::num_free	src/ds/left-right-array.h	/^    ulong num_free() const  { return f_; }$/;"	f	class:left_right_array	access:public	signature:() const
left_right_array::num_set	src/ds/left-right-array.h	/^    ulong num_set() const  { return  n_ - f_; }$/;"	f	class:left_right_array	access:public	signature:() const
left_right_array::operator =	src/ds/left-right-array.h	/^    left_right_array & operator = (const left_right_array&);  \/\/ forbidden$/;"	p	class:left_right_array	access:private	signature:(const left_right_array&)
left_right_array::set_all	src/ds/left-right-array.h	/^    void set_all()$/;"	f	class:left_right_array	access:public	signature:()
left_right_array::tg_	src/ds/left-right-array.h	/^    bool *tg_;   \/\/ tags: tg[i]==true if and only if index i is free$/;"	m	class:left_right_array	access:public
left_right_array::~left_right_array	src/ds/left-right-array.h	/^    ~left_right_array()$/;"	f	class:left_right_array	access:public	signature:()
left_swap_1	doc/bits-doc.txt	/^static inline ulong left_swap_1(ulong x);$/;"	p	file:	signature:(ulong x)
left_swap_1	src/bits/bitgraypermute.h	/^static inline ulong left_swap_1(ulong x)$/;"	f	signature:(ulong x)
left_swap_16	doc/bits-doc.txt	/^static inline ulong left_swap_16(ulong x);$/;"	p	file:	signature:(ulong x)
left_swap_16	src/bits/bitgraypermute.h	/^static inline ulong left_swap_16(ulong x)$/;"	f	signature:(ulong x)
left_swap_2	doc/bits-doc.txt	/^static inline ulong left_swap_2(ulong x);$/;"	p	file:	signature:(ulong x)
left_swap_2	src/bits/bitgraypermute.h	/^static inline ulong left_swap_2(ulong x)$/;"	f	signature:(ulong x)
left_swap_4	doc/bits-doc.txt	/^static inline ulong left_swap_4(ulong x);$/;"	p	file:	signature:(ulong x)
left_swap_4	src/bits/bitgraypermute.h	/^static inline ulong left_swap_4(ulong x)$/;"	f	signature:(ulong x)
left_swap_8	doc/bits-doc.txt	/^static inline ulong left_swap_8(ulong x);$/;"	p	file:	signature:(ulong x)
left_swap_8	src/bits/bitgraypermute.h	/^static inline ulong left_swap_8(ulong x)$/;"	f	signature:(ulong x)
len_	src/comb/dyck-pref.h	/^    ulong len_;  \/\/ == k*n (length of Dyck words)$/;"	m	class:dyck_pref	access:public
len_	src/comb/dyck-pref2.h	/^    ulong len_;  \/\/ == k*n (length of Dyck words)$/;"	m	class:dyck_pref2	access:public
len_	src/comb/gray-cycle-leaders.h	/^    ulong len_;  \/\/ cycle length$/;"	m	class:gray_cycle_leaders	access:public
length	src/perm/attic/partition.h	/^    int length()  const  { return k+1; }$/;"	f	class:partition	access:public	signature:() const
length_data	src/comb/ordered-tree-branches.h	/^    const ulong * length_data()  const  { return  a_ + 1; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
leq_func	test/test-bits.cc	/^static inline ulong leq_func(ulong x, ulong y)$/;"	f	file:	signature:(ulong x, ulong y)
letter_str_	src/comb/lindenmayer-system.h	/^    std::vector<std::string> letter_str_;$/;"	m	class:lindenmayer_system	access:protected
lev	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong k) const
lev	src/comb/id-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong k) const
lev	src/comb/ordered-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong k) const
lev	src/comb/tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:tree_lev_seq	access:public	signature:(ulong k) const
lev_ptr_	src/comb/string-subst.h	/^    uchar **lev_ptr_;  \/\/ position in levels: [nlev+1]$/;"	m	class:string_subst	access:public
level	doc/wfl-hilbert-doc.txt	/^  Generation morphism: start symbol A,I,E at level = 0,1,2 mod 3 stabilises$/;"	v
lex_compare	src/comb/lex-compare.h	/^inline int lex_compare(const Type *a, ulong na, const Type *b, ulong nb)$/;"	f	signature:(const Type *a, ulong na, const Type *b, ulong nb)
lexrev2negidx	doc/bits-doc.txt	/^static inline ulong lexrev2negidx(ulong x);$/;"	p	file:	signature:(ulong x)
lexrev2negidx	src/bits/bitlex.h	/^static inline ulong lexrev2negidx(ulong x)$/;"	f	signature:(ulong x)
lfsr	src/bpol/lfsr.h	/^    explicit lfsr(ulong n, ulong c=0)$/;"	f	class:lfsr	access:public	signature:(ulong n, ulong c=0)
lfsr	src/bpol/lfsr.h	/^class lfsr$/;"	c
lfsr64	src/bpol/lfsr64.h	/^    explicit lfsr64(unsigned long long c=0)$/;"	f	class:lfsr64	access:public	signature:(unsigned long long c=0)
lfsr64	src/bpol/lfsr64.h	/^class lfsr64$/;"	c
lfsr64::a_	src/bpol/lfsr64.h	/^    unsigned long long a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:lfsr64	access:public
lfsr64::c_	src/bpol/lfsr64.h	/^    unsigned long long c_;  \/\/ (mod 2) polynomial == x^64 + x^4 + x^3 + x + 1$/;"	m	class:lfsr64	access:public
lfsr64::get_a	src/bpol/lfsr64.h	/^    unsigned long long get_a()  const  { return a_; }$/;"	f	class:lfsr64	access:public	signature:() const
lfsr64::get_w	src/bpol/lfsr64.h	/^    unsigned long long get_w()  const  { return w_; }$/;"	f	class:lfsr64	access:public	signature:() const
lfsr64::lfsr64	src/bpol/lfsr64.h	/^    explicit lfsr64(unsigned long long c=0)$/;"	f	class:lfsr64	access:public	signature:(unsigned long long c=0)
lfsr64::next	src/bpol/lfsr64.h	/^    unsigned long long next()$/;"	f	class:lfsr64	access:public	signature:()
lfsr64::next_w	src/bpol/lfsr64.h	/^    void next_w()$/;"	f	class:lfsr64	access:public	signature:()
lfsr64::set_w	src/bpol/lfsr64.h	/^    void set_w(unsigned long long  w)$/;"	f	class:lfsr64	access:public	signature:(unsigned long long w)
lfsr64::w_	src/bpol/lfsr64.h	/^    unsigned long long w_;  \/\/ word of the shift_register_sequence (SRS)$/;"	m	class:lfsr64	access:public
lfsr64::~lfsr64	src/bpol/lfsr64.h	/^    ~lfsr64()  { ; }$/;"	f	class:lfsr64	access:public	signature:()
lfsr::a_	src/bpol/lfsr.h	/^    ulong a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:lfsr	access:public
lfsr::c_	src/bpol/lfsr.h	/^    ulong c_;  \/\/ (mod 2) poly  e.g. x^4+x+1 == 0x13 == 1..11$/;"	m	class:lfsr	access:public
lfsr::get_a	src/bpol/lfsr.h	/^    ulong get_a()  const  { return a_; }$/;"	f	class:lfsr	access:public	signature:() const
lfsr::get_w	src/bpol/lfsr.h	/^    ulong get_w()  const  { return w_; }$/;"	f	class:lfsr	access:public	signature:() const
lfsr::h_	src/bpol/lfsr.h	/^    ulong h_;  \/\/ highest bit in SRS word  e.g. (above) == 16 = 1...$/;"	m	class:lfsr	access:public
lfsr::lfsr	src/bpol/lfsr.h	/^    explicit lfsr(ulong n, ulong c=0)$/;"	f	class:lfsr	access:public	signature:(ulong n, ulong c=0)
lfsr::mask_	src/bpol/lfsr.h	/^    ulong mask_;  \/\/ mask  e.g. (above) == 15 == 1111$/;"	m	class:lfsr	access:public
lfsr::max_period	src/bpol/lfsr.h	/^    ulong max_period()  const$/;"	f	class:lfsr	access:public	signature:() const
lfsr::n_	src/bpol/lfsr.h	/^    ulong n_;  \/\/ degree of polynomial  e.g. (above) == 4$/;"	m	class:lfsr	access:public
lfsr::next	src/bpol/lfsr.h	/^    ulong next()$/;"	f	class:lfsr	access:public	signature:()
lfsr::next_w	src/bpol/lfsr.h	/^    ulong next_w()$/;"	f	class:lfsr	access:public	signature:()
lfsr::prev	src/bpol/lfsr.h	/^    ulong prev()$/;"	f	class:lfsr	access:public	signature:()
lfsr::prev_a	src/bpol/lfsr.h	/^    void prev_a()$/;"	f	class:lfsr	access:private	signature:()
lfsr::prev_w	src/bpol/lfsr.h	/^    ulong prev_w()$/;"	f	class:lfsr	access:public	signature:()
lfsr::set_a	src/bpol/lfsr.h	/^    void set_a(ulong a)$/;"	f	class:lfsr	access:public	signature:(ulong a)
lfsr::set_w	src/bpol/lfsr.h	/^    void set_w(ulong w)$/;"	f	class:lfsr	access:public	signature:(ulong w)
lfsr::w_	src/bpol/lfsr.h	/^    ulong w_;  \/\/ word of the shift_register_sequence (SRS)$/;"	m	class:lfsr	access:public
lfsr::~lfsr	src/bpol/lfsr.h	/^    ~lfsr()  {;}$/;"	f	class:lfsr	access:public	signature:()
lhca2poly	doc/bpol-doc.txt	/^inline ulong lhca2poly(ulong r, ulong n);$/;"	p	file:	signature:(ulong r, ulong n)
lhca2poly	src/bpol/lhca.h	/^inline ulong lhca2poly(ulong r, ulong n)$/;"	f	signature:(ulong r, ulong n)
lhca_next	doc/bpol-doc.txt	/^inline ulong lhca_next(ulong x, ulong r, ulong m);$/;"	p	file:	signature:(ulong x, ulong r, ulong m)
lhca_next	src/bpol/lhca.h	/^inline ulong lhca_next(ulong x, ulong r, ulong m)$/;"	f	signature:(ulong x, ulong r, ulong m)
limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
limb_length	src/comb/id-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong limb_length(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
limb_length	src/comb/tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
lin2hilbert	doc/bits-doc.txt	/^void lin2hilbert(ulong t, ulong &x, ulong &y);$/;"	p	file:	signature:(ulong t, ulong &x, ulong &y)
lin2hilbert	src/bits/hilbert.h	/^void  lin2hilbert(ulong t, ulong &x, ulong &y);$/;"	p	signature:(ulong t, ulong &x, ulong &y)
lin2hilbert	src/bits/lin2hilbert.cc	/^lin2hilbert(ulong t, ulong &x, ulong &y)$/;"	f	signature:(ulong t, ulong &x, ulong &y)
lin2hilbert	src/comb/hilbert-ndim-rec.h	/^    void lin2hilbert(ulong n)$/;"	f	class:hilbert_ndim_rec	access:public	signature:(ulong n)
lin2hilbert	src/comb/hilbert-ndim.h	/^    void lin2hilbert(ulong n)$/;"	f	class:hilbert_ndim	access:public	signature:(ulong n)
lin2hilbert	src/comb/wfl-hilbert.h	/^    const ulong * lin2hilbert(ulong nstep)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong nstep)
lin2hilbert_2	test/test-bits.cc	/^static inline void lin2hilbert_2(ulong t, ulong &x, ulong &y)$/;"	f	file:	signature:(ulong t, ulong &x, ulong &y)
lin2hilbert_rec	src/comb/hilbert-ndim-rec.h	/^    void lin2hilbert_rec(ulong n)$/;"	f	class:hilbert_ndim_rec	access:private	signature:(ulong n)
lin2zorder	src/bits/zorder.h	/^static inline void lin2zorder(ulong t, ulong &x, ulong &y)  { bit_unzip2(t, x, y); }$/;"	f	signature:(ulong t, ulong &x, ulong &y)
lindenmayer_system	src/comb/lindenmayer-system.h	/^    lindenmayer_system(ulong iter,$/;"	f	class:lindenmayer_system	access:public	signature:(ulong iter, const std::string axiom, const std::vector<std::string> maps, ulong maxrlen=2048)
lindenmayer_system	src/comb/lindenmayer-system.h	/^lindenmayer_system : public string_subst$/;"	c	inherits:string_subst
lindenmayer_system::axiom_str_	src/comb/lindenmayer-system.h	/^    std::string axiom_str_;$/;"	m	class:lindenmayer_system	access:protected
lindenmayer_system::letter_str_	src/comb/lindenmayer-system.h	/^    std::vector<std::string> letter_str_;$/;"	m	class:lindenmayer_system	access:protected
lindenmayer_system::lindenmayer_system	src/comb/lindenmayer-system.h	/^    lindenmayer_system(ulong iter,$/;"	f	class:lindenmayer_system	access:public	signature:(ulong iter, const std::string axiom, const std::vector<std::string> maps, ulong maxrlen=2048)
lindenmayer_system::map_str_	src/comb/lindenmayer-system.h	/^    std::vector<std::string> map_str_;$/;"	m	class:lindenmayer_system	access:protected
lindenmayer_system::num_maps	src/comb/lindenmayer-system.h	/^    ulong num_maps()  const  { return num_maps_; };$/;"	f	class:lindenmayer_system	access:public	signature:() const
lindenmayer_system::num_maps_	src/comb/lindenmayer-system.h	/^    ulong num_maps_;$/;"	m	class:lindenmayer_system	access:protected
lindenmayer_system::print_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::print_all_maps(ulong z\/*=0*\/)  const$/;"	f	class:lindenmayer_system	signature:(ulong z ) const
lindenmayer_system::print_all_maps	src/comb/lindenmayer-system.h	/^    void print_all_maps(ulong z=0)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong z=0) const
lindenmayer_system::set_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::set_all_maps(const std::vector<std::string> & maps)$/;"	f	class:lindenmayer_system	signature:(const std::vector<std::string> & maps)
lindenmayer_system::set_all_maps	src/comb/lindenmayer-system.h	/^    bool set_all_maps(const std::vector<std::string> & maps);$/;"	p	class:lindenmayer_system	access:protected	signature:(const std::vector<std::string> & maps)
lindenmayer_system::str_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_all_maps(ulong z\/*=0*\/)  const$/;"	f	class:lindenmayer_system	signature:(ulong z ) const
lindenmayer_system::str_all_maps	src/comb/lindenmayer-system.h	/^    std::vector<std::string> str_all_maps(ulong z=0)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong z=0) const
lindenmayer_system::str_axiom	src/comb/lindenmayer-system.h	/^    std::string str_axiom()  const  { return std::string( (const char*)axiom_ ); }$/;"	f	class:lindenmayer_system	access:public	signature:() const
lindenmayer_system::str_letter_at	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_letter_at(ulong j)  const$/;"	f	class:lindenmayer_system	signature:(ulong j) const
lindenmayer_system::str_letter_at	src/comb/lindenmayer-system.h	/^    const std::string & str_letter_at(ulong j)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong j) const
lindenmayer_system::str_map_at	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_map_at(ulong j)  const$/;"	f	class:lindenmayer_system	signature:(ulong j) const
lindenmayer_system::str_map_at	src/comb/lindenmayer-system.h	/^    const std::string & str_map_at(ulong j)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong j) const
line2	demo/fft/butterfly-texpic-demo.cc	/^inline void line2(ulong t1, ulong t2, ulong ldm, bool pm)$/;"	f	signature:(ulong t1, ulong t2, ulong ldm, bool pm)
linear_scale	src/aux1/attic/array.h	/^    void linear_scale(Type mi, Type ma, Type nmi, Type nma)$/;"	f	class:array	access:public	signature:(Type mi, Type ma, Type nmi, Type nma)
linear_scale	src/aux1/attic/array.h	/^    void linear_scale(Type nmi, Type nma)$/;"	f	class:array	access:public	signature:(Type nmi, Type nma)
linear_scale	src/aux1/attic/scale.h	/^void linear_scale(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, Type mi, Type ma, Type nmi, Type nma)
linear_scale	src/aux1/attic/scale.h	/^void linear_scale(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, Type nmi, Type nma)
linear_scale	src/aux2/attic/scale2d.h	/^void linear_scale(Type **f, ulong nr, ulong nc,$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type mi, Type ma, Type nmi, Type nma)
linear_scale	src/aux2/attic/scale2d.h	/^void linear_scale(Type **f, ulong nr, ulong nc,$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type nmi, Type nma)
ln_	src/comb/mset-perm-pref.h	/^    ulong ln_;   \/\/ length of the longest non-increasing prefix$/;"	m	class:mset_perm_pref	access:public
ln_	src/comb/perm-pref.h	/^    ulong ln_;   \/\/ length of the longest non-increasing prefix$/;"	m	class:perm_pref	access:public
loc_dif2	demo/fft/locrec-demo.cc	/^void loc_dif2(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
loc_dit2	demo/fft/locrec-demo.cc	/^void loc_dit2(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
loc_fht_auto_convolution	doc/convolution-doc.txt	/^void loc_fht_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
loc_fht_auto_convolution	src/convolution/fhtloccnvla.cc	/^loc_fht_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
loc_fht_auto_convolution	src/convolution/realconvolution.h	/^void loc_fht_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
loc_fht_auto_convolution0	doc/convolution-doc.txt	/^void loc_fht_auto_convolution0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
loc_fht_auto_convolution0	src/convolution/fhtloccnvla.cc	/^loc_fht_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
loc_fht_auto_convolution0	src/convolution/realconvolution.h	/^void loc_fht_auto_convolution0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
loc_fht_convolution	doc/convolution-doc.txt	/^void loc_fht_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
loc_fht_convolution	src/convolution/fhtloccnvl.cc	/^loc_fht_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
loc_fht_convolution	src/convolution/realconvolution.h	/^void loc_fht_convolution(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
loc_fht_convolution0	doc/convolution-doc.txt	/^void loc_fht_convolution0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
loc_fht_convolution0	src/convolution/fhtloccnvl.cc	/^loc_fht_convolution0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
loc_fht_convolution0	src/convolution/realconvolution.h	/^void loc_fht_convolution0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
log_scale	src/aux1/attic/array.h	/^    void log_scale(double xi, double xa, Type nma)$/;"	f	class:array	access:public	signature:(double xi, double xa, Type nma)
log_scale	src/aux1/attic/scale.h	/^void log_scale(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, double xi, double xa, Type nma)
log_scale	src/aux2/attic/scale2d.h	/^void log_scale(Type **f, ulong nr, ulong nc,$/;"	f	signature:(Type **f, ulong nr, ulong nc, double xi, double xa, Type nma)
long_strlen	doc/aux1-doc.txt	/^ulong long_strlen(const char *str);$/;"	p	file:	signature:(const char *str)
long_strlen	src/aux1/bytescan.cc	/^long_strlen(const char *str)$/;"	f	signature:(const char *str)
long_strlen	src/aux1/bytescan.h	/^ulong long_strlen(const char *str);$/;"	p	signature:(const char *str)
low1	test/test-bits.cc	/^static inline ulong low1(ulong x)$/;"	f	file:	signature:(ulong x)
low_block_border_ones	doc/bits-doc.txt	/^static inline ulong low_block_border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
low_block_border_ones	src/bits/bit-isolate.h	/^static inline ulong low_block_border_ones(ulong x)$/;"	f	signature:(ulong x)
low_border_ones	doc/bits-doc.txt	/^static inline ulong low_border_ones(ulong x);$/;"	p	file:	signature:(ulong x)
low_border_ones	src/bits/bit-isolate.h	/^static inline ulong low_border_ones(ulong x)$/;"	f	signature:(ulong x)
low_match	doc/bits-doc.txt	/^static inline ulong low_match(ulong x, ulong y);$/;"	p	file:	signature:(ulong x, ulong y)
low_match	src/bits/bitlow.h	/^static inline ulong low_match(ulong x, ulong y)$/;"	f	signature:(ulong x, ulong y)
low_ones	doc/bits-doc.txt	/^static inline ulong low_ones(ulong x);$/;"	p	file:	signature:(ulong x)
low_ones	src/bits/bitlow.h	/^static inline ulong low_ones(ulong x)$/;"	f	signature:(ulong x)
low_zeros	doc/bits-doc.txt	/^static inline ulong low_zeros(ulong x);$/;"	p	file:	signature:(ulong x)
low_zeros	src/bits/bitlow.h	/^static inline ulong low_zeros(ulong x)$/;"	f	signature:(ulong x)
lowbit_primpoly	src/bpol/primpoly-lowbit.cc	/^extern const ulong lowbit_primpoly[]=$/;"	v
lowbit_primpoly_len	src/bpol/primpoly-lowbit.cc	/^extern const ulong lowbit_primpoly_len = ARRAY_LEN(lowbit_primpoly);$/;"	v
lowest_block	doc/bits-doc.txt	/^static inline ulong lowest_block(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_block	src/bits/bitlow.h	/^static inline ulong lowest_block(ulong x)$/;"	f	signature:(ulong x)
lowest_block_2	test/test-bits.cc	/^static inline ulong lowest_block_2(ulong x)$/;"	f	file:	signature:(ulong x)
lowest_block_3	test/test-bits.cc	/^static inline ulong lowest_block_3(ulong x)$/;"	f	file:	signature:(ulong x)
lowest_one	doc/bits-doc.txt	/^static inline ulong lowest_one(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_one	src/bits/bitlow.h	/^static inline ulong lowest_one(ulong x)$/;"	f	signature:(ulong x)
lowest_one_01edge	doc/bits-doc.txt	/^static inline ulong lowest_one_01edge(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_one_01edge	src/bits/bitlow-edge.h	/^static inline ulong lowest_one_01edge(ulong x)$/;"	f	signature:(ulong x)
lowest_one_10edge	doc/bits-doc.txt	/^static inline ulong lowest_one_10edge(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_one_10edge	src/bits/bitlow-edge.h	/^static inline ulong lowest_one_10edge(ulong x)$/;"	f	signature:(ulong x)
lowest_one_idx	doc/bits-doc.txt	/^static inline ulong lowest_one_idx(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_one_idx	src/bits/bitlow.h	/^static inline ulong lowest_one_idx(ulong x)$/;"	f	signature:(ulong x)
lowest_one_idx_parity	doc/bits-doc.txt	/^static inline ulong lowest_one_idx_parity(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_one_idx_parity	src/bits/bitlow.h	/^static inline ulong lowest_one_idx_parity(ulong x)$/;"	f	signature:(ulong x)
lowest_zero	doc/bits-doc.txt	/^static inline ulong lowest_zero(ulong x);$/;"	p	file:	signature:(ulong x)
lowest_zero	src/bits/bitlow.h	/^static inline ulong lowest_zero(ulong x)$/;"	f	signature:(ulong x)
lpos_	src/ds/deque.h	/^    ulong lpos_;  \/\/ position of last element in buffer plus one$/;"	m	class:deque	access:public
lrq_	demo/arith/zero-divisors-pairs-demo.cc	/^ulong lrq_;$/;"	v
ltab_len	demo/arith/briggs-log-demo.cc	/^ulong  ltab_len;$/;"	v
ltab_n	demo/arith/shiftadd-exp-demo.cc	/^ulong ltab_n;$/;"	v
ltab_n	demo/arith/shiftadd-log-demo.cc	/^ulong ltab_n;$/;"	v
lw_	src/bits/bitfibgray.h	/^    ulong fw_, lw_;  \/\/ first and last Fibonacci word in Gray code$/;"	m	class:bit_fibgray	access:public
lyndon_cmp0	doc/graph-doc.txt	/^int lyndon_cmp0(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp0	src/graph/lyndon-cmp.cc	/^lyndon_cmp0(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp0	src/graph/mk-special-digraphs.h	/^int lyndon_cmp0(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp1	doc/graph-doc.txt	/^int lyndon_cmp1(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp1	src/graph/lyndon-cmp.cc	/^lyndon_cmp1(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp1	src/graph/mk-special-digraphs.h	/^int lyndon_cmp1(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp2	doc/graph-doc.txt	/^int lyndon_cmp2(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp2	src/graph/lyndon-cmp.cc	/^lyndon_cmp2(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp2	src/graph/mk-special-digraphs.h	/^int lyndon_cmp2(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp3	doc/graph-doc.txt	/^int lyndon_cmp3(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp3	src/graph/lyndon-cmp.cc	/^lyndon_cmp3(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp3	src/graph/mk-special-digraphs.h	/^int lyndon_cmp3(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp4	doc/graph-doc.txt	/^int lyndon_cmp4(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp4	src/graph/lyndon-cmp.cc	/^lyndon_cmp4(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp4	src/graph/mk-special-digraphs.h	/^int lyndon_cmp4(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp5	doc/graph-doc.txt	/^int lyndon_cmp5(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp5	src/graph/lyndon-cmp.cc	/^lyndon_cmp5(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp5	src/graph/mk-special-digraphs.h	/^int lyndon_cmp5(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp6	doc/graph-doc.txt	/^int lyndon_cmp6(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp6	src/graph/lyndon-cmp.cc	/^lyndon_cmp6(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp6	src/graph/mk-special-digraphs.h	/^int lyndon_cmp6(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_cmp7	doc/graph-doc.txt	/^int lyndon_cmp7(const ulong &a, const ulong &b);$/;"	p	file:	signature:(const ulong &a, const ulong &b)
lyndon_cmp7	src/graph/lyndon-cmp.cc	/^lyndon_cmp7(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
lyndon_cmp7	src/graph/mk-special-digraphs.h	/^int lyndon_cmp7(const ulong &a, const ulong &b);$/;"	p	signature:(const ulong &a, const ulong &b)
lyndon_factorization	src/comb/lyndon-factorization.h	/^inline ulong lyndon_factorization(const Type * W, ulong n, ulong * F)$/;"	f	signature:(const Type * W, ulong n, ulong * F)
lyndon_gray	src/graph/lyndon-gray.h	/^    explicit lyndon_gray(ulong n, ulong ncmp=0)$/;"	f	class:lyndon_gray	access:public	signature:(ulong n, ulong ncmp=0)
lyndon_gray	src/graph/lyndon-gray.h	/^    lyndon_gray(const lyndon_gray&);  \/\/ forbidden$/;"	p	class:lyndon_gray	access:private	signature:(const lyndon_gray&)
lyndon_gray	src/graph/lyndon-gray.h	/^class lyndon_gray$/;"	c
lyndon_gray::choose_min	src/graph/lyndon-gray.h	/^    inline ulong choose_min(ulong u)$/;"	f	class:lyndon_gray	access:public	signature:(ulong u)
lyndon_gray::cmp	src/graph/lyndon-gray.h	/^    int (*cmp)(const ulong &, const ulong &);$/;"	m	class:lyndon_gray	access:public
lyndon_gray::cmp_g03	src/graph/lyndon-gray.h	/^    static int cmp_g03(const ulong &a, const ulong &b)  \/\/ ncmp==0$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::cmp_g05	src/graph/lyndon-gray.h	/^    static int cmp_g05(const ulong &a, const ulong &b)  \/\/ ncmp==1$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::cmp_g21	src/graph/lyndon-gray.h	/^    static int cmp_g21(const ulong &a, const ulong &b)  \/\/ ncmp==2$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::cmp_g29	src/graph/lyndon-gray.h	/^    static int cmp_g29(const ulong &a, const ulong &b)  \/\/ ncmp==3$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::cmp_igc	src/graph/lyndon-gray.h	/^    static int cmp_igc(const ulong &a, const ulong &b)  \/\/ ncmp==4$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::cmp_test	src/graph/lyndon-gray.h	/^    static int cmp_test(const ulong &a, const ulong &b)  \/\/ ncmp==5 (playground)$/;"	f	class:lyndon_gray	access:public	signature:(const ulong &a, const ulong &b)
lyndon_gray::d_	src/graph/lyndon-gray.h	/^    ulong d_;   \/\/ bit-wise difference to last pr_ (a word with one bit)$/;"	m	class:lyndon_gray	access:public
lyndon_gray::g03	src/graph/lyndon-gray.h	/^    static inline ulong g03(ulong x) { X(1); X(2); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
lyndon_gray::g05	src/graph/lyndon-gray.h	/^    static inline ulong g05(ulong x) { X(1); X(4); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
lyndon_gray::g21	src/graph/lyndon-gray.h	/^    static inline ulong g21(ulong x) { X(1); X(4); X(16); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
lyndon_gray::g29	src/graph/lyndon-gray.h	/^    static inline ulong g29(ulong x) { X(1); X(4); X(8); X(16); return x; }$/;"	f	class:lyndon_gray	access:public	signature:(ulong x)
lyndon_gray::init	src/graph/lyndon-gray.h	/^    void init(ulong ncmp=0)$/;"	f	class:lyndon_gray	access:public	signature:(ulong ncmp=0)
lyndon_gray::is_cycle	src/graph/lyndon-gray.h	/^    bool is_cycle()  const$/;"	f	class:lyndon_gray	access:public	signature:() const
lyndon_gray::lyndon_gray	src/graph/lyndon-gray.h	/^    explicit lyndon_gray(ulong n, ulong ncmp=0)$/;"	f	class:lyndon_gray	access:public	signature:(ulong n, ulong ncmp=0)
lyndon_gray::lyndon_gray	src/graph/lyndon-gray.h	/^    lyndon_gray(const lyndon_gray&);  \/\/ forbidden$/;"	p	class:lyndon_gray	access:private	signature:(const lyndon_gray&)
lyndon_gray::make_rot	src/graph/lyndon-gray.h	/^    ulong make_rot()$/;"	f	class:lyndon_gray	access:public	signature:()
lyndon_gray::mark	src/graph/lyndon-gray.h	/^    void mark(ulong ly)$/;"	f	class:lyndon_gray	access:public	signature:(ulong ly)
lyndon_gray::maxlyn_	src/graph/lyndon-gray.h	/^    ulong maxlyn_;  \/\/ maximal n-bit lyndon word$/;"	m	class:lyndon_gray	access:public
lyndon_gray::n2_	src/graph/lyndon-gray.h	/^    ulong n_, n2_;  \/\/ n-bit Lyndon words, n2=2**n$/;"	m	class:lyndon_gray	access:public
lyndon_gray::n_	src/graph/lyndon-gray.h	/^    ulong n_, n2_;  \/\/ n-bit Lyndon words, n2=2**n$/;"	m	class:lyndon_gray	access:public
lyndon_gray::neighbors	src/graph/lyndon-gray.h	/^    ulong neighbors(ulong p)$/;"	f	class:lyndon_gray	access:public	signature:(ulong p)
lyndon_gray::next	src/graph/lyndon-gray.h	/^    ulong next()$/;"	f	class:lyndon_gray	access:public	signature:()
lyndon_gray::nlyn_	src/graph/lyndon-gray.h	/^    ulong nlyn_;  \/\/ number of n-bit Lyndon words for prime n, else$/;"	m	class:lyndon_gray	access:public
lyndon_gray::operator =	src/graph/lyndon-gray.h	/^    lyndon_gray & operator = (const lyndon_gray&);  \/\/ forbidden$/;"	p	class:lyndon_gray	access:private	signature:(const lyndon_gray&)
lyndon_gray::p_	src/graph/lyndon-gray.h	/^    ulong p_;  \/\/ position$/;"	m	class:lyndon_gray	access:public
lyndon_gray::pba_	src/graph/lyndon-gray.h	/^    bitarray *pba_;  \/\/ tags for used words$/;"	m	class:lyndon_gray	access:public
lyndon_gray::pr_	src/graph/lyndon-gray.h	/^    ulong pr_;  \/\/ position (rotated)$/;"	m	class:lyndon_gray	access:public
lyndon_gray::r_	src/graph/lyndon-gray.h	/^    ulong r_;   \/\/ rotation (pr == bit_rotate_left(p, r))$/;"	m	class:lyndon_gray	access:public
lyndon_gray::test	src/graph/lyndon-gray.h	/^    inline ulong test(ulong v)$/;"	f	class:lyndon_gray	access:public	signature:(ulong v)
lyndon_gray::uu_	src/graph/lyndon-gray.h	/^    ulong uu_[BITS_PER_LONG];  \/\/ scratch space for sorting neighbors$/;"	m	class:lyndon_gray	access:public
lyndon_gray::~lyndon_gray	src/graph/lyndon-gray.h	/^    ~lyndon_gray()$/;"	f	class:lyndon_gray	access:public	signature:()
lyndon_gray_rot_delta	doc/graph-doc.txt	/^bool lyndon_gray_rot_delta(const ulong *rv, ulong ng, lyngray_dat *ldat);$/;"	p	file:	signature:(const ulong *rv, ulong ng, lyngray_dat *ldat)
lyndon_gray_rot_delta	src/graph/mk-lyndon-gray-digraph.cc	/^lyndon_gray_rot_delta(const ulong *rv, ulong ng, lyngray_dat *ldat)$/;"	f	signature:(const ulong *rv, ulong ng, lyngray_dat *ldat)
lyndon_gray_rot_delta	src/graph/mk-special-digraphs.h	/^bool lyndon_gray_rot_delta(const ulong *rv, ulong ng, lyngray_dat *ldat);$/;"	p	signature:(const ulong *rv, ulong ng, lyngray_dat *ldat)
lyndon_words	src/comb/lyndon-words.h	/^    lyndon_words(ulong tn, ulong ta, ulong tz)$/;"	f	class:lyndon_words	access:public	signature:(ulong tn, ulong ta, ulong tz)
lyndon_words	src/comb/lyndon-words.h	/^class lyndon_words$/;"	c
lyndon_words::W	src/comb/lyndon-words.h	/^    ulong* W;  \/\/ words in W[1..n], W[0] is a sentinel$/;"	m	class:lyndon_words	access:protected
lyndon_words::a	src/comb/lyndon-words.h	/^    ulong a;  \/\/ first (smallest) letter$/;"	m	class:lyndon_words	access:protected
lyndon_words::data	src/comb/lyndon-words.h	/^    const ulong * data()  const  { return W + 1; }$/;"	f	class:lyndon_words	access:public	signature:() const
lyndon_words::first	src/comb/lyndon-words.h	/^    ulong first()$/;"	f	class:lyndon_words	access:public	signature:()
lyndon_words::lyndon_words	src/comb/lyndon-words.h	/^    lyndon_words(ulong tn, ulong ta, ulong tz)$/;"	f	class:lyndon_words	access:public	signature:(ulong tn, ulong ta, ulong tz)
lyndon_words::n	src/comb/lyndon-words.h	/^    ulong n;  \/\/ max number of letters$/;"	m	class:lyndon_words	access:protected
lyndon_words::next	src/comb/lyndon-words.h	/^    ulong next()$/;"	f	class:lyndon_words	access:public	signature:()
lyndon_words::z	src/comb/lyndon-words.h	/^    ulong z;  \/\/ last (largest) letter$/;"	m	class:lyndon_words	access:protected
lyndon_words::~lyndon_words	src/comb/lyndon-words.h	/^    ~lyndon_words()  { delete [] W; }$/;"	f	class:lyndon_words	access:public	signature:()
lyngray_dat	src/graph/mk-lyndon-gray-digraph.cc	/^lyngray_dat::lyngray_dat(ulong ng, ulong nb, ulong *tww)$/;"	f	class:lyngray_dat	signature:(ulong ng, ulong nb, ulong *tww)
lyngray_dat	src/graph/mk-special-digraphs.h	/^    explicit lyngray_dat(ulong ng, ulong nb, ulong *tww);$/;"	p	class:lyngray_dat	access:public	signature:(ulong ng, ulong nb, ulong *tww)
lyngray_dat	src/graph/mk-special-digraphs.h	/^    lyngray_dat(const lyngray_dat&);  \/\/ forbidden$/;"	p	class:lyngray_dat	access:private	signature:(const lyngray_dat&)
lyngray_dat	src/graph/mk-special-digraphs.h	/^class lyngray_dat$/;"	c
lyngray_dat::dd	src/graph/mk-special-digraphs.h	/^    uchar *dd;  \/\/ delta sequence of Gray path$/;"	m	class:lyngray_dat	access:public
lyngray_dat::get	src/graph/mk-special-digraphs.h	/^    ulong get(ulong *&w, uchar *&r, uchar *&d)$/;"	f	class:lyngray_dat	access:public	signature:(ulong *&w, uchar *&r, uchar *&d)
lyngray_dat::lyngray_dat	src/graph/mk-lyndon-gray-digraph.cc	/^lyngray_dat::lyngray_dat(ulong ng, ulong nb, ulong *tww)$/;"	f	class:lyngray_dat	signature:(ulong ng, ulong nb, ulong *tww)
lyngray_dat::lyngray_dat	src/graph/mk-special-digraphs.h	/^    explicit lyngray_dat(ulong ng, ulong nb, ulong *tww);$/;"	p	class:lyngray_dat	access:public	signature:(ulong ng, ulong nb, ulong *tww)
lyngray_dat::lyngray_dat	src/graph/mk-special-digraphs.h	/^    lyngray_dat(const lyngray_dat&);  \/\/ forbidden$/;"	p	class:lyngray_dat	access:private	signature:(const lyngray_dat&)
lyngray_dat::nbits	src/graph/mk-special-digraphs.h	/^    ulong nbits;  \/\/ number of bits of Lyndon words$/;"	m	class:lyngray_dat	access:public
lyngray_dat::operator =	src/graph/mk-special-digraphs.h	/^    lyngray_dat & operator = (const lyngray_dat&);  \/\/ forbidden$/;"	p	class:lyngray_dat	access:private	signature:(const lyngray_dat&)
lyngray_dat::rr	src/graph/mk-special-digraphs.h	/^    uchar *rr;  \/\/ rotations of Lyndon word in Gray path$/;"	m	class:lyngray_dat	access:public
lyngray_dat::ww	src/graph/mk-special-digraphs.h	/^    ulong *ww;  \/\/ Lyndon words (==sv[] in digraph)$/;"	m	class:lyngray_dat	access:public
lyngray_dat::~lyngray_dat	src/graph/mk-lyndon-gray-digraph.cc	/^lyngray_dat::~lyngray_dat()$/;"	f	class:lyngray_dat	signature:()
lyngray_dat::~lyngray_dat	src/graph/mk-special-digraphs.h	/^    ~lyngray_dat();$/;"	p	class:lyngray_dat	access:public	signature:()
m	demo/bits/modular-lookup-demo.cc	/^const ulong m = 11;$/;"	v
m	demo/bits/modular-lookup-demo.cc	/^const ulong m = 37;$/;"	v
m	demo/bits/modular-lookup-demo.cc	/^const ulong m = 67;$/;"	v
m	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
m	demo/graph/graph-debruijn-m-demo.cc	/^ulong m = 0;  \/\/ m-ary De Bruijn graph$/;"	v
m	demo/graph/sta-graph-acgray-demo.cc	/^ulong m=0;  \/\/ mask = N-1$/;"	v
m	demo/graph/sta-graph-macgray-demo.cc	/^ulong m=0;  \/\/ mask = N-1$/;"	v
m	src/comb/dyck-gray2.h	/^    ulong m, k;  \/\/ m ones (and m*(k-1) zeros)$/;"	m	class:dyck_gray2	access:public
m0_	src/comb/schroeder-rgs-lex.h	/^    ulong m0_;  \/\/ max of first digit:$/;"	m	class:schroeder_rgs_lex	access:public
m1_	src/comb/check-mixedradix.h	/^    const ulong *m1_;$/;"	m	class:check_mixedradix	access:public
m1_	src/comb/mixedradix-colex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_colex	access:public
m1_	src/comb/mixedradix-endo-gray.h	/^    ulong *m1_;  \/\/ radices (minus one)$/;"	m	class:mixedradix_endo_gray	access:public
m1_	src/comb/mixedradix-endo.h	/^    ulong *m1_;  \/\/ radix (minus one) for each digit$/;"	m	class:mixedradix_endo	access:public
m1_	src/comb/mixedradix-gray.h	/^    ulong *m1_;  \/\/ radices (minus one)$/;"	m	class:mixedradix_gray	access:public
m1_	src/comb/mixedradix-gray2.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_gray2	access:public
m1_	src/comb/mixedradix-gslex-alt.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex_alt	access:public
m1_	src/comb/mixedradix-gslex-alt2.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_gslex_alt2	access:public
m1_	src/comb/mixedradix-gslex.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex	access:public
m1_	src/comb/mixedradix-gslex2.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex2	access:public
m1_	src/comb/mixedradix-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_lex	access:public
m1_	src/comb/mixedradix-modular-gray.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_modular_gray	access:public
m1_	src/comb/mixedradix-modular-gray2.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_modular_gray2	access:public
m1_	src/comb/mixedradix-naf-gray.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf_gray	access:public
m1_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *m1_;   \/\/ Nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf_subset_lex	access:public
m1_	src/comb/mixedradix-naf.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf	access:public
m1_	src/comb/mixedradix-restrpref.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_restrpref	access:public
m1_	src/comb/mixedradix-sl-gray.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_sl_gray	access:public
m1_	src/comb/mixedradix-sod-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_sod_lex	access:public
m1_	src/comb/mixedradix-sod-lex.h	/^    ulong m1_[MIXEDRADIX_SOD_LEX_MAX_ARRAY_LEN+2];$/;"	m	class:mixedradix_sod_lex	access:public
m1_	src/comb/mixedradix-subset-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_subset_lex	access:public
m1_	src/comb/mixedradix-subset-lexrev.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_subset_lexrev	access:public
m1_	src/comb/mixedradix-subset-lexrev.h	/^    ulong m1_[64];$/;"	m	class:mixedradix_subset_lexrev	access:public
m1_	src/comb/necklace.h	/^    ulong m1_;  \/\/ m-ary strings, m1=m-1$/;"	m	class:necklace	access:public
m1_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong m1_;  \/\/ maximal digit value allowed$/;"	m	class:weakly_unimodal_rgs_lex	access:public
m1dd	src/mod/mod.cc	/^long double     mod::m1dd = 0.0;$/;"	m	class:mod	file:
m1dd	src/mod/mod.h	/^    static long double m1dd;          \/\/ 1.0\/modulus (for multiplication)$/;"	m	class:mod	access:public
m5i	src/fft/fft8difcore.cc	157;"	d	file:
m5i	src/fft/fft8difcore.cc	239;"	d	file:
m5i	src/fft/fft8ditcore.cc	161;"	d	file:
m5i	src/fft/fft8ditcore.cc	245;"	d	file:
m5r	src/fft/fft8difcore.cc	180;"	d	file:
m5r	src/fft/fft8difcore.cc	235;"	d	file:
m5r	src/fft/fft8ditcore.cc	184;"	d	file:
m5r	src/fft/fft8ditcore.cc	241;"	d	file:
m6i	src/fft/fft8difcore.cc	158;"	d	file:
m6i	src/fft/fft8difcore.cc	240;"	d	file:
m6i	src/fft/fft8ditcore.cc	162;"	d	file:
m6i	src/fft/fft8ditcore.cc	246;"	d	file:
m6r	src/fft/fft8difcore.cc	181;"	d	file:
m6r	src/fft/fft8difcore.cc	236;"	d	file:
m6r	src/fft/fft8ditcore.cc	185;"	d	file:
m6r	src/fft/fft8ditcore.cc	242;"	d	file:
m7i	src/fft/fft8difcore.cc	159;"	d	file:
m7i	src/fft/fft8difcore.cc	241;"	d	file:
m7i	src/fft/fft8ditcore.cc	163;"	d	file:
m7i	src/fft/fft8ditcore.cc	247;"	d	file:
m7r	src/fft/fft8difcore.cc	182;"	d	file:
m7r	src/fft/fft8difcore.cc	237;"	d	file:
m7r	src/fft/fft8ditcore.cc	186;"	d	file:
m7r	src/fft/fft8ditcore.cc	243;"	d	file:
m_	src/bits/pcrc64.h	/^    const uint m_;  \/\/ mask to compute mod 64$/;"	m	class:pcrc64	access:public
m_	src/comb/acyclic-map.h	/^    ulong m_;  \/\/ max allowed value in map$/;"	m	class:acyclic_map	access:public
m_	src/comb/ascent-nonflat-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_nonflat_rgs	access:public
m_	src/comb/ascent-rgs-subset-lex.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs_subset_lex	access:public
m_	src/comb/ascent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs	access:public
m_	src/comb/attic/ascent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of ascents in prefix a[0,1,..,k]$/;"	m	class:ascent_rgs	access:public
m_	src/comb/binary-huffman.h	/^    ulong m_;   \/\/ last nonzero position (m==0 for n==0)$/;"	m	class:binary_huffman	access:public
m_	src/comb/cayley-perm.h	/^    ulong m_;   \/\/ maximal value (digit) in current word$/;"	m	class:cayley_perm	access:public
m_	src/comb/change-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of changes in prefix a[0,1,..,k]$/;"	m	class:change_rgs	access:public
m_	src/comb/composition-dist-unimodal.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:composition_dist_unimodal	access:public
m_	src/comb/composition-nz-binary.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_binary	access:public
m_	src/comb/composition-nz-carlitz.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_carlitz	access:public
m_	src/comb/composition-nz-first-max.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_first_max	access:public
m_	src/comb/composition-nz-gray.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_gray	access:public
m_	src/comb/composition-nz-gray2.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_gray2	access:public
m_	src/comb/composition-nz-i-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_i_smooth	access:public
m_	src/comb/composition-nz-left-2smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_left_2smooth	access:public
m_	src/comb/composition-nz-left-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_left_smooth	access:public
m_	src/comb/composition-nz-max.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_max	access:public
m_	src/comb/composition-nz-min.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_min	access:public
m_	src/comb/composition-nz-minc.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_minc	access:public
m_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_odd_subset_lex	access:public
m_	src/comb/composition-nz-odd.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_odd	access:public
m_	src/comb/composition-nz-restrpref.h	/^    ulong m_;   \/\/ current composition has m parts (m!=0 if valid composition)$/;"	m	class:composition_nz_restrpref	access:public
m_	src/comb/composition-nz-rl.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_rl	access:public
m_	src/comb/composition-nz-smooth.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_smooth	access:public
m_	src/comb/composition-nz-sorts.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts	access:public
m_	src/comb/composition-nz-sorts2-pp.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts2_pp	access:public
m_	src/comb/composition-nz-sorts2.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_sorts2	access:public
m_	src/comb/composition-nz-subset-lex.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_subset_lex	access:public
m_	src/comb/composition-nz-superdiagonal.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:composition_nz_superdiagonal	access:public
m_	src/comb/composition-nz-upstep.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz_upstep	access:public
m_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong m_;   \/\/ number of parts in current composition$/;"	m	class:composition_nz_weakly_unimodal	access:public
m_	src/comb/composition-nz.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_nz	access:public
m_	src/comb/composition-unimodal.h	/^    ulong m_;   \/\/ current composition has m parts$/;"	m	class:composition_unimodal	access:public
m_	src/comb/descent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of descents in prefix a[0,1,..,k]$/;"	m	class:descent_rgs	access:public
m_	src/comb/isoscent-rgs.h	/^    ulong *m_;  \/\/ m[k] = number of isoscents in prefix a[0,1,..,k]$/;"	m	class:isoscent_rgs	access:public
m_	src/comb/ksubset-lex.h	/^    ulong m_;  \/\/ max number of elements in subsets$/;"	m	class:ksubset_lex	access:public
m_	src/comb/mpartition.h	/^    ulong m_;   \/\/ ... into m parts  (must have 0<m<=n)$/;"	m	class:mpartition	access:public
m_	src/comb/mpartition2.h	/^    ulong m_;   \/\/ ... into m parts  (must have 0<m<=n)$/;"	m	class:mpartition2	access:public
m_	src/comb/ordered-tree-branches.h	/^    ulong m_;   \/\/ number of branches (composition has m parts)$/;"	m	class:ordered_tree_branches	access:public
m_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_asc_subset_lex	access:public
m_	src/comb/partition-2fall-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_asc	access:public
m_	src/comb/partition-2fall-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_desc	access:public
m_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc_2rep_subset_lex	access:public
m_	src/comb/partition-asc-2rep.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc_2rep	access:public
m_	src/comb/partition-asc-perim.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_perim	access:public
m_	src/comb/partition-asc-sorts.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts	access:public
m_	src/comb/partition-asc-sorts2-pp.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts2_pp	access:public
m_	src/comb/partition-asc-sorts2.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts2	access:public
m_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_subset_lex_csh	access:public
m_	src/comb/partition-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_subset_lex	access:public
m_	src/comb/partition-asc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc	access:public
m_	src/comb/partition-binary-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_binary_asc	access:public
m_	src/comb/partition-binary-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_binary_desc	access:public
m_	src/comb/partition-desc-bb.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_desc_bb	access:public
m_	src/comb/partition-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_desc	access:public
m_	src/comb/partition-dist-asc-len.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc_len	access:public
m_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc_subset_lex	access:public
m_	src/comb/partition-dist-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc	access:public
m_	src/comb/partition-dist-d-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_d_asc	access:public
m_	src/comb/partition-dist-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_dist_desc	access:public
m_	src/comb/partition-nonsquashing-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_nonsquashing_desc	access:public
m_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
m_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc_subset_lex	access:public
m_	src/comb/partition-odd-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc	access:public
m_	src/comb/partition-odd-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_odd_desc	access:public
m_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_nonsquashing_desc	access:public
m_	src/comb/partition-s-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_s_desc	access:public
m_	src/comb/partition-strongly-decr-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_strongly_decr_desc	access:public
m_	src/comb/rgs-maxincr.h	/^    ulong *m_;  \/\/ m_[k-1] == max value for s_[j], j<k$/;"	m	class:rgs_maxincr	access:public
m_	src/comb/schroeder-rgs-lex.h	/^    ulong * restrict m_;  \/\/ m[k]: maximum value in prefix a[0,...,k-1]$/;"	m	class:schroeder_rgs_lex	access:public
m_	src/comb/setpart-ck-rgs.h	/^    ulong m_; \/\/ number of non-zero digits$/;"	m	class:setpart_ck_rgs	access:public
m_	src/comb/setpart-p-rgs-lex.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1],..., s[k]) + 1$/;"	m	class:setpart_p_rgs_lex	access:public
m_	src/comb/setpart-rgs-gray.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1],..., s[k]) + 1$/;"	m	class:setpart_rgs_gray	access:public
m_	src/comb/setpart-rgs-lex.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1], ..., s[k]) + 1$/;"	m	class:setpart_rgs_lex	access:public
m_	src/comb/setpart-rgs-subset-lex.h	/^    ulong *m_;  \/\/ maximum + 1 in prefix (only maitained for m[0, 1, ..., tr])$/;"	m	class:setpart_rgs_subset_lex	access:public
m_	src/comb/young-tab-rgs.h	/^    ulong m_;   \/\/ number of allowed values for digits (== max height of tableaux)$/;"	m	class:young_tab_rgs	access:public
m_lowest_one_idx	demo/bits/modular-lookup-demo.cc	/^inline ulong m_lowest_one_idx(ulong x)$/;"	f	signature:(ulong x)
ma_	src/perm/attic/cycles.h	/^    ulong ma_, mi_; \/\/ max\/min length of cycles$/;"	m	class:cycles	access:public
main	a.cc	/^int main(int argc,char** argv)$/;"	f	signature:(int argc,char** argv)
main	demo/arith/briggs-log-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/cayley-dickson-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/cordic-circ-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/cordic-hyp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/power-costs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/power-l2r-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/power-r2l-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/shiftadd-exp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/shiftadd-log-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/zero-divisors-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/zero-divisors-func-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/arith/zero-divisors-pairs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/all-dbs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bin-to-sl-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bin2naf-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bin2sbin-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-necklace-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-nextgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-paper-fold-alt-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-paper-fold-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-paper-fold-general-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-rll2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit-sl-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bit2adic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitcombcolex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitcomblex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitcombminchange-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitcombshifts-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitcount-v-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitdemos.h	/^main()$/;"	f	signature:()
main	demo/bits/bitfibgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitlex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitlex-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitperm1-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitsequency-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitsubset-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitsubset-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitsubset-shift-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bittransforms-blue-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bittransforms-blue-fp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bittransforms-red-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/bitxtransforms-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/crc64-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/debruijn-lookup-demo.cc	/^main()$/;"	f	signature:()
main	demo/bits/dragon-curve-moves-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-curve-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-hex-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r13-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r4-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r5-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r7-2-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r7-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon-r9-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/dragon3-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/fibrep-subset-lexrev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/fibrep2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/gotcha-demo.cc	/^main()$/;"	f	signature:()
main	demo/bits/gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/graycode-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/grs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/grs-next-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/hanoi-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/hilbert-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/hilbert-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/hilbert-moves-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/hilbert-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/kolakoski-seq-demo.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/modular-lookup-demo.cc	/^main()$/;"	f	signature:()
main	demo/bits/negbin-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/negbin2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/parenword-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/parenword-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/pcrc64-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/radix-2i-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/radix-2i-to-z-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/radix-m1pi-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/radix-m1pi-to-z-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/radix-m4-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/revbin-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/revbin-steps-demo.cc	/^main()$/;"	f	signature:()
main	demo/bits/revbin-tab-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/revbin-update-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/thue-morse-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/bits/zorder-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/acgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/acyclic-map-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/arrangement-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/arrangement-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ascent-alt-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ascent-nonflat-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ascent-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ascent-rgs-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ascent-rgs-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/balanced-ordered-tree-lev-seq-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/balanced-ordered-tree-lev-seq-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ballot-seq-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/bell-number-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/big-fact2perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/binary-debruijn-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/binary-huffman-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/binary-necklace-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/binary-sl-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/binomial-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-number-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-path-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-rgs-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-rgs-gslex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-rgs-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-rgs-to-noncrossing-setpart-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-step-rgs-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-step-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/catalan-step-rgs-subset-lexrev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/cayley-perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/cayley-perm-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/change-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/comb2comp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-chase-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-emk-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-emk-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-endo-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-enup-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-enup-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-lam-demo.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-mod-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-rank-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/combination-revdoor-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-colex2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-dist-unimodal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-ex-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-ex-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-binary-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-carlitz-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-first-max-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-gray2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-i-smooth-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-left-2smooth-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-left-smooth-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-max-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-min-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-minc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-numparts-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-odd-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-odd-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-restrpref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-rl-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-smooth-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-sorts-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-sorts2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-sorts2-pp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-subset-lex-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-superdiagonal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-upstep-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-nz-weakly-unimodal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-rank-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/composition-unimodal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/conference-quadres-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/cyclic-perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/debruijn-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/descent-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/descent-rgs-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-gray2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-pref2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/dyck-rgs-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fact2cyclic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fact2perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fact2perm-rev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fact2perm-rot-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fact2perm-swp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ffact2kperm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fib-alt-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/fibgray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/gexz-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/hadamard-srs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/hanoi-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/hilbert-ndim-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/hilbert-ndim-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/id-tree-lev-seq-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/id-tree-lev-seq-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/involution-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/involution-zero-map-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/isoscent-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/isoscent-rgs-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/kperm-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/kperm-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/kproducts-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ksubset-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ksubset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ksubset-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ksubset-twoclose-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/lyndon-factorization-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/lyndon-words-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/map23-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/maxrep-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-endo-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-endo-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gray2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gslex-alt-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gslex-alt2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gslex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-gslex2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-modular-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-modular-gray2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-naf-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-naf-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-naf-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-restrpref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-rfact-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-sl-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-sod-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mixedradix-subset-lexrev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/monotonicgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/motzkin-nonflat-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/motzkin-path-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/motzkin-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/motzkin-step-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mpartition-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mpartition2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-ksubset-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-perm-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-perm-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-perm-lex-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-perm-lex-rec2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-perm-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/mset-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/naf-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/naf-pos-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-cat-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-fkm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-gray3-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklace-sigma-tau-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/necklaces-via-gray-leaders-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/no111-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/no1111-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/no1x1-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/no1xy1-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ntnz-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ntz-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/num-partitions-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ordered-tree-branches-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ordered-tree-branching-seq-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ordered-tree-lev-seq-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ordered-tree-lev-seq-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/paren-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/paren-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/paren-gray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/paren-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/paren-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-2fall-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-2fall-asc-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-2fall-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-2rep-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-2rep-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-perim-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-sorts-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-sorts2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-sorts2-pp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-subset-lex-csh-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-asc-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-binary-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-binary-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-desc-bb-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-asc-len-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-asc-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-asc-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-d-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-dist-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-gen-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-nonsquashing-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-asc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-asc-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-asc-subset-lex-csh-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-asc-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-odd-nonsquashing-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-s-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/partition-strongly-decr-desc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/pascal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/pellgen-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/pellgray-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-colex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-derange-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-dist1-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-genus-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-ffact-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-ffact2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-lipski-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-rfact-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-rot1-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-gray-wells-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-heap-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-heap2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-heap2-swaps-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-involution-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-involution-naf-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-ives-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-l1r2-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-lex-cycles-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-lex-inv-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-lex2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-mv0-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-restrpref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-rev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-rev2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-right1-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-rot-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-rot-unrank-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-st-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-st-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-st-pref-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-star-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-star-inv-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-star-swaps-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-trotter-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm-trotter-lg-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/perm2fact-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/rgs-fincr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/rgs-kincr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/rgs-maxincr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/rll-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/root-sums-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ruler-func-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ruler-func-s-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/ruler-func1-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/schroeder-path-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/schroeder-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/schroeder-tree-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/score-sequence-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-ccf-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-ck-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-p-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-rgs-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-rgs-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-s-zero-map-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/setpart-zero-map-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/shift-subsets-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/skew-binary-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/smooth-rfact-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/stirling1-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/stirling2-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/string-subst-demo.cc	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	demo/comb/string-subst-hilbert3d-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/subset-debruijn-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/subset-deltalex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/subset-gray-delta-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/subset-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/tree-lev-seq-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/tree-lev-seq-stats-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/weakly-unimodal-rgs-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/wfl-hilbert-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/young-tab-rgs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/comb/young-tab-rgs-subset-lex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/bitarray-demo.cc	/^main()$/;"	f	signature:()
main	demo/ds/deque-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/left-right-array-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/priorityqueue-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/queue-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/ringbuffer-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/ds/stack-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/butterfly-texpic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/fft-arblen-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/fht-bench.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/fib-haar-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/fib-walsh-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/gen-walsh-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/locrec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/mers-haar-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/mers-walsh-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/walsh-basis-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/walsh-bench.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/fft/walsh-eigenvec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/all-irredpoly-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/all-normalpoly-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/all-primpoly-srs-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitmat-circulant-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitmat-kronecker-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpol-inverse-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpol-search-irred-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpol-srp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpolfactor-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpolmodmult-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/bitpolmult-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/clhca-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/fcsr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-matrix-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-minpoly-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-normal-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-solvequadratic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/gf2n-trace0-generators-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lfsr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lfsr-fibonacci-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lfsr-galois-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lfsr-revbin-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lfsr-trace0-generators-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lhca-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lhca2poly-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/lowbit-lhca-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/minweight-lowbit-lhca-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/necklace2irred-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/normalbasis-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/normalpoly-dual-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/poly2lhca-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/primefact-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/gf2n/qmatrix-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-acgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-complementshift-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-debruijn-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-debruijn-m-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-fibrepgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-lyndon-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-macgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-monotonicgray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-mtl-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-parengray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-perm-pref-rev-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-perm-pref-rot-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/graph-perm-star-transpositions-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/lyndon-gray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/sta-graph-acgray-demo.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/graph/sta-graph-macgray-demo.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/divisors-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/eratosthenes-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/fftprimes-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/kronecker-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/mod-residues-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/modarithtables-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/modinfo-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/modsincos-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/mod/rabinmiller-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/ccf2perm-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/cycles-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/perm-decomp-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/perm-invert-notag-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permfunc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permgray-leaders-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permrand-connected-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permrand-cyclic-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permrand-derange-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permrand-sdc-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permrand-self-inverse-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/permutation-matrix-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/revbin-perm-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/perm/swap-blocks-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A000793-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A003040-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A003043-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A005351-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A005576-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A005943-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A006951-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A007608-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A039724-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A042942-demo.cc	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A062200-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A066411-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A080936-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A100749-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A175498-demo.cc	/^main()$/;"	f	signature:()
main	demo/seq/A177505-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A178514-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A178715-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A179009-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A179080-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A182039-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A182372-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A186053-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A187081-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A191755-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A206464-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A206702-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A207018-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A209411-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A212494-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A213243-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A215327-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A217262-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A217605-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A218293-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A218396-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A218694-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A218757-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A225084-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A225095-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A225616-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A226893-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A227344-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A240949-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A247386-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A249872-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A259095-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A276691-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/seq/A278479-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/equivclass-bitstring-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/equivclass-bracelets-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/equivclass-necklaces-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/heapsort-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/merge-sort-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/merge-sort4-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/radixsort-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/selection-sort-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/sort-complex-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/sort-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/sort-string-demo.cc	/^main()$/;"	f	signature:()
main	demo/sort/sortidx-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/sortptr-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	demo/sort/unique-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	scripts/attic/callall.head	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/bits/attic/bit-necklace-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/bits/attic/fibrep-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/comb/attic/combination-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/comb/attic/partition-dist-lex-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/comb/attic/partition-lex-rec-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/comb/attic/stringsubst-demo.cc	/^main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	src/comb/attic/subset-monotone-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/ds/attic/coroutine-paren-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/ds/attic/orderedrarray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/ds/attic/rarray-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/ds/attic/rset-demo.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	src/sort/attic/symbolify-demo.cc	/^main()$/;"	f	signature:()
main	test/test-bits.cc	/^main()$/;"	f	signature:()
main	test/test-convolution.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-fact.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-fft.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-fht.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-include-all.cc	/^int main()$/;"	f	signature:()
main	test/test-misc.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-permute.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-transforms.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	test/test-transpose.cc	/^main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
major_index	doc/perm-doc.txt	/^ulong major_index(const ulong *f, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong n)
major_index	src/comb/young-tab-rgs.h	/^    ulong major_index()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
major_index	src/perm/permq.cc	/^major_index(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
major_index	src/perm/permq.h	/^ulong major_index(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
make_anti_symmetric	src/matrix/attic/symmetricpart.h	/^int make_anti_symmetric(MAT &A)$/;"	f	signature:(MAT &A)
make_axis_rotation	demo/comb/string-subst-hilbert3d-demo.cc	/^make_axis_rotation(ulong n, int phi, M3 &M)$/;"	f	signature:(ulong n, int phi, M3 &M)
make_briggs_ltab	demo/arith/briggs-log-demo.cc	/^make_briggs_ltab(ulong na, double b)$/;"	f	signature:(ulong na, double b)
make_circulant	src/matrix/attic/toeplitz.h	/^void make_circulant(MAT &A, const Type *v)$/;"	f	signature:(MAT &A, const Type *v)
make_complement	doc/perm-doc.txt	/^inline void make_complement(const ulong *f, ulong *g, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong *g, ulong n)
make_complement	doc/perm-doc.txt	/^inline void make_complement(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
make_complement	src/perm/permcomplement.h	/^inline void make_complement(const ulong *f, ulong *g, ulong n)$/;"	f	signature:(const ulong *f, ulong *g, ulong n)
make_complement	src/perm/permcomplement.h	/^inline void make_complement(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
make_complement_shift_digraph	doc/graph-doc.txt	/^digraph * make_complement_shift_digraph(ulong n);$/;"	p	file:	signature:(ulong n)
make_complement_shift_digraph	src/graph/mk-debruijn-digraph.cc	/^make_complement_shift_digraph(ulong n)$/;"	f	signature:(ulong n)
make_complement_shift_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_complement_shift_digraph(ulong n);$/;"	p	signature:(ulong n)
make_complete_digraph	doc/graph-doc.txt	/^digraph * make_complete_digraph(ulong n);$/;"	p	file:	signature:(ulong n)
make_complete_digraph	src/graph/mk-complete-digraph.cc	/^make_complete_digraph(ulong n)$/;"	f	signature:(ulong n)
make_complete_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_complete_digraph(ulong n);$/;"	p	signature:(ulong n)
make_cordic_ctab	demo/arith/cordic-circ-demo.cc	/^make_cordic_ctab(ulong na)$/;"	f	signature:(ulong na)
make_cordic_htab	demo/arith/cordic-hyp-demo.cc	/^make_cordic_htab(ulong na)$/;"	f	signature:(ulong na)
make_cycles	src/perm/attic/cycles.cc	/^cycles::make_cycles(const ulong *f, ulong n)$/;"	f	class:cycles	signature:(const ulong *f, ulong n)
make_cycles	src/perm/attic/cycles.h	/^    int make_cycles(const ulong *f, ulong n);$/;"	p	class:cycles	access:public	signature:(const ulong *f, ulong n)
make_debruijn_digraph	doc/graph-doc.txt	/^digraph * make_debruijn_digraph(ulong n);$/;"	p	file:	signature:(ulong n)
make_debruijn_digraph	doc/graph-doc.txt	/^digraph * make_debruijn_digraph(ulong n, ulong m);$/;"	p	file:	signature:(ulong n, ulong m)
make_debruijn_digraph	src/graph/mk-debruijn-digraph.cc	/^make_debruijn_digraph(ulong n)$/;"	f	signature:(ulong n)
make_debruijn_digraph	src/graph/mk-debruijn-digraph.cc	/^make_debruijn_digraph(ulong n, ulong m)$/;"	f	signature:(ulong n, ulong m)
make_debruijn_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_debruijn_digraph(ulong n);$/;"	p	signature:(ulong n)
make_debruijn_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_debruijn_digraph(ulong n, ulong m);$/;"	p	signature:(ulong n, ulong m)
make_delta	src/aux1/attic/delta.h	/^inline void make_delta(Type *f, ulong n, ulong d, Type v=1)$/;"	f	signature:(Type *f, ulong n, ulong d, Type v=1)
make_factorization	src/mod/factor.h	/^    bool make_factorization(umod_t n);$/;"	p	class:factorization	access:public	signature:(umod_t n)
make_factorization	src/mod/factor.h	/^    bool make_factorization(umod_t n, const umod_t *f);$/;"	p	class:factorization	access:public	signature:(umod_t n, const umod_t *f)
make_factorization	src/mod/factormake.cc	/^factorization::make_factorization(umod_t n)$/;"	f	class:factorization	signature:(umod_t n)
make_factorization	src/mod/factormake.cc	/^factorization::make_factorization(umod_t n,  const umod_t *f)$/;"	f	class:factorization	signature:(umod_t n, const umod_t *f)
make_fft_chirp	doc/chirpzt-doc.txt	/^static inline void make_fft_chirp(Complex *w, ulong n, ulong nn, int is);$/;"	p	file:	signature:(Complex *w, ulong n, ulong nn, int is)
make_fft_chirp	src/chirpzt/fftarblen.cc	/^make_fft_chirp(Complex *w, ulong n, ulong nn, int is)$/;"	f	file:	signature:(Complex *w, ulong n, ulong nn, int is)
make_fft_fract_chirp	doc/chirpzt-doc.txt	/^static inline void make_fft_fract_chirp(Complex *w, double v, ulong n, ulong nn);$/;"	p	file:	signature:(Complex *w, double v, ulong n, ulong nn)
make_fft_fract_chirp	doc/chirpzt-doc.txt	/^static inline void make_fft_fract_chirp(double *wr, double *wi, double v, ulong n, ulong nn);$/;"	p	file:	signature:(double *wr, double *wi, double v, ulong n, ulong nn)
make_fft_fract_chirp	src/chirpzt/fftfract.cc	/^make_fft_fract_chirp(Complex *w, double v, ulong n, ulong nn)$/;"	f	file:	signature:(Complex *w, double v, ulong n, ulong nn)
make_fft_fract_chirp	src/chirpzt/fftfract.cc	/^make_fft_fract_chirp(double *wr, double *wi, double v, ulong n, ulong nn)$/;"	f	file:	signature:(double *wr, double *wi, double v, ulong n, ulong nn)
make_fibrepgray_digraph	doc/graph-doc.txt	/^digraph * make_fibrepgray_digraph(ulong n);$/;"	p	file:	signature:(ulong n)
make_fibrepgray_digraph	src/graph/mk-fibrep-gray-digraph.cc	/^make_fibrepgray_digraph(ulong n)$/;"	f	signature:(ulong n)
make_fibrepgray_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_fibrepgray_digraph(ulong n);$/;"	p	signature:(ulong n)
make_gray_digraph	doc/graph-doc.txt	/^digraph * make_gray_digraph(ulong n, bool rq\/*=0*\/);$/;"	p	file:	signature:(ulong n, bool rq )
make_gray_digraph	src/graph/mk-gray-digraph.cc	/^make_gray_digraph(ulong n, bool rq\/*=0*\/)$/;"	f	signature:(ulong n, bool rq )
make_gray_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_gray_digraph(ulong n, bool rq=0);$/;"	p	signature:(ulong n, bool rq=0)
make_inverse	doc/perm-doc.txt	/^void make_inverse(const ulong *f, ulong * restrict g, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong * restrict g, ulong n)
make_inverse	doc/perm-doc.txt	/^void make_inverse(ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(ulong *f, ulong n, bitarray *bp )
make_inverse	src/perm/perminvert.cc	/^make_inverse(const ulong *f, ulong * restrict g, ulong n)$/;"	f	signature:(const ulong *f, ulong * restrict g, ulong n)
make_inverse	src/perm/perminvert.cc	/^make_inverse(ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(ulong *f, ulong n, bitarray *bp )
make_inverse	src/perm/perminvert.h	/^void make_inverse(const ulong *f, ulong *g, ulong n);$/;"	p	signature:(const ulong *f, ulong *g, ulong n)
make_inverse	src/perm/perminvert.h	/^void make_inverse(ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(ulong *f, ulong n, bitarray *bp=0)
make_inverse_notag	doc/perm-doc.txt	/^void make_inverse_notag(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
make_inverse_notag	src/perm/perminvert.cc	/^make_inverse_notag(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
make_inverse_notag	src/perm/perminvert.h	/^void make_inverse_notag(ulong *f, ulong n);$/;"	p	signature:(ulong *f, ulong n)
make_lyndon	src/graph/mk-lyndon-gray-digraph.cc	/^static void make_lyndon(ulong n, ulong *ww, ulong ng)$/;"	f	file:	signature:(ulong n, ulong *ww, ulong ng)
make_lyndon_gray_digraph	doc/graph-doc.txt	/^digraph * make_lyndon_gray_digraph(ulong n, lyngray_dat *&ldat, ulong rot0q\/*=0*\/);$/;"	p	file:	signature:(ulong n, lyngray_dat *&ldat, ulong rot0q )
make_lyndon_gray_digraph	src/graph/mk-lyndon-gray-digraph.cc	/^make_lyndon_gray_digraph(ulong n, lyngray_dat *&ldat, ulong rot0q\/*=0*\/)$/;"	f	signature:(ulong n, lyngray_dat *&ldat, ulong rot0q )
make_lyndon_gray_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_lyndon_gray_digraph(ulong n, lyngray_dat *&ldat, ulong rot0q=0);$/;"	p	signature:(ulong n, lyngray_dat *&ldat, ulong rot0q=0)
make_mtl_digraph	doc/graph-doc.txt	/^digraph * make_mtl_digraph(ulong k, bool rq\/*=0*\/);$/;"	p	file:	signature:(ulong k, bool rq )
make_mtl_digraph	src/graph/mk-mtl-digraph.cc	/^make_mtl_digraph(ulong k, bool rq\/*=0*\/)$/;"	f	signature:(ulong k, bool rq )
make_mtl_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_mtl_digraph(ulong k, bool rq=0);$/;"	p	signature:(ulong k, bool rq=0)
make_next	src/comb/attic/perm-minchange.h	/^    ulong make_next(ulong m)$/;"	f	class:perm_minchange	access:private	signature:(ulong m)
make_next	src/comb/attic/subset-monotone.h	/^    void make_next()$/;"	f	class:subset_monotone	access:protected	signature:()
make_next	src/perm/attic/partition.cc	/^partition::make_next()$/;"	f	class:partition	signature:()
make_next	src/perm/attic/partition.h	/^    void make_next();$/;"	p	class:partition	access:private	signature:()
make_oddprime_bitarray	doc/mod-doc.txt	/^bitarray * make_oddprime_bitarray(ulong n, bitarray *B\/*=0*\/);$/;"	p	file:	signature:(ulong n, bitarray *B )
make_oddprime_bitarray	src/mod/eratosthenes.cc	/^make_oddprime_bitarray(ulong n, bitarray *B\/*=0*\/)$/;"	f	signature:(ulong n, bitarray *B )
make_oddprime_bitarray	src/mod/primes.h	/^bitarray *make_oddprime_bitarray(ulong n, bitarray *B=0);$/;"	p	signature:(ulong n, bitarray *B=0)
make_parengray_digraph	doc/graph-doc.txt	/^digraph * make_parengray_digraph(ulong nb, ulong pcd);$/;"	p	file:	signature:(ulong nb, ulong pcd)
make_parengray_digraph	src/graph/mk-paren-gray-digraph.cc	/^make_parengray_digraph(ulong nb, ulong pcd)$/;"	f	signature:(ulong nb, ulong pcd)
make_parengray_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_parengray_digraph(ulong nb, ulong pcd);$/;"	p	signature:(ulong nb, ulong pcd)
make_perfpow_bitarray	doc/mod-doc.txt	/^static bitarray * make_perfpow_bitarray(ulong n);$/;"	p	file:	signature:(ulong n)
make_perfpow_bitarray	src/mod/perfpow.cc	/^make_perfpow_bitarray(ulong n)$/;"	f	file:	signature:(ulong n)
make_perm_gray_digraph	doc/graph-doc.txt	/^digraph * make_perm_gray_digraph(ulong n, bool stq);$/;"	p	file:	signature:(ulong n, bool stq)
make_perm_gray_digraph	src/graph/mk-perm-gray-digraph.cc	/^make_perm_gray_digraph(ulong n, bool stq)$/;"	f	signature:(ulong n, bool stq)
make_perm_gray_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_perm_gray_digraph(ulong n, bool stq);$/;"	p	signature:(ulong n, bool stq)
make_perm_pref_rev_digraph	doc/graph-doc.txt	/^digraph * make_perm_pref_rev_digraph(ulong n);$/;"	p	file:	signature:(ulong n)
make_perm_pref_rev_digraph	src/graph/mk-perm-pref-rev-digraph.cc	/^make_perm_pref_rev_digraph(ulong n)$/;"	f	signature:(ulong n)
make_perm_pref_rev_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_perm_pref_rev_digraph(ulong n);$/;"	p	signature:(ulong n)
make_perm_pref_rot_digraph	doc/graph-doc.txt	/^digraph * make_perm_pref_rot_digraph(ulong n, bool rq\/*=0*\/);$/;"	p	file:	signature:(ulong n, bool rq )
make_perm_pref_rot_digraph	src/graph/mk-perm-pref-rot-digraph.cc	/^make_perm_pref_rot_digraph(ulong n, bool rq\/*=0*\/)$/;"	f	signature:(ulong n, bool rq )
make_perm_pref_rot_digraph	src/graph/mk-special-digraphs.h	/^digraph * make_perm_pref_rot_digraph(ulong n, bool rq=0);$/;"	p	signature:(ulong n, bool rq=0)
make_permutation	src/perm/attic/cycles.cc	/^cycles::make_permutation(ulong *f, ulong n)  const$/;"	f	class:cycles	signature:(ulong *f, ulong n) const
make_permutation	src/perm/attic/cycles.h	/^    int make_permutation(ulong *f, ulong n)  const;  \/\/ 'inverse' of make_cycles()$/;"	p	class:cycles	access:public	signature:(ulong *f, ulong n) const
make_prime_bitarray	doc/mod-doc.txt	/^bitarray * make_prime_bitarray(ulong n, bitarray *B\/*=0*\/);$/;"	p	file:	signature:(ulong n, bitarray *B )
make_prime_bitarray	src/mod/eratosthenes.cc	/^make_prime_bitarray(ulong n, bitarray *B\/*=0*\/)$/;"	f	signature:(ulong n, bitarray *B )
make_prime_bitarray	src/mod/primes.h	/^bitarray *make_prime_bitarray(ulong n, bitarray *B=0);$/;"	p	signature:(ulong n, bitarray *B=0)
make_r	src/comb/young-tab-rgs.h	/^    void make_r()  const$/;"	f	class:young_tab_rgs	access:private	signature:() const
make_revbin_upd_tab	doc/bits-doc.txt	/^static inline void make_revbin_upd_tab(ulong h);$/;"	p	file:	signature:(ulong h)
make_revbin_upd_tab	src/bits/revbin-upd.h	/^static inline void make_revbin_upd_tab(ulong h)$/;"	f	signature:(ulong h)
make_rot	src/graph/lyndon-gray.h	/^    ulong make_rot()$/;"	f	class:lyndon_gray	access:public	signature:()
make_seq	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::make_seq(ulong *z, ulong ndb\/*=0*\/)$/;"	f	class:binary_debruijn	signature:(ulong *z, ulong ndb )
make_seq	src/comb/attic/binarydebruijn.h	/^    void make_seq(ulong *z, ulong ndb=0);$/;"	p	class:binary_debruijn	access:public	signature:(ulong *z, ulong ndb=0)
make_setpart_rgs	src/comb/setpart-ck-rgs.h	/^    void make_setpart_rgs(ulong *y)  const$/;"	f	class:setpart_ck_rgs	access:public	signature:(ulong *y) const
make_shiftadd_ltab	demo/arith/shiftadd-exp-demo.cc	/^make_shiftadd_ltab(double b)$/;"	f	signature:(double b)
make_shiftadd_ltab	demo/arith/shiftadd-log-demo.cc	/^make_shiftadd_ltab(double b)$/;"	f	signature:(double b)
make_sincos_table	src/fht/attic/trigtable.cc	/^make_sincos_table(ulong n, ulong m, double **s, double **c)$/;"	f	signature:(ulong n, ulong m, double **s, double **c)
make_square	doc/perm-doc.txt	/^void make_square(const ulong *f, ulong * restrict g, ulong n);$/;"	p	file:	signature:(const ulong *f, ulong * restrict g, ulong n)
make_square	doc/perm-doc.txt	/^void make_square(ulong *f, ulong n, bitarray *bp\/*=0*\/);$/;"	p	file:	signature:(ulong *f, ulong n, bitarray *bp )
make_square	src/perm/permcompose.cc	/^make_square(const ulong *f, ulong * restrict g, ulong n)$/;"	f	signature:(const ulong *f, ulong * restrict g, ulong n)
make_square	src/perm/permcompose.cc	/^make_square(ulong *f, ulong n, bitarray *bp\/*=0*\/)$/;"	f	signature:(ulong *f, ulong n, bitarray *bp )
make_square	src/perm/permcompose.h	/^void make_square(const ulong *f, ulong *g, ulong n);$/;"	p	signature:(const ulong *f, ulong *g, ulong n)
make_square	src/perm/permcompose.h	/^void make_square(ulong *f, ulong n, bitarray *bp=0);$/;"	p	signature:(ulong *f, ulong n, bitarray *bp=0)
make_str	demo/comb/paren-gray-rec-demo.cc	/^void make_str()$/;"	f	signature:()
make_symmetric	src/matrix/attic/symmetricpart.h	/^int make_symmetric(MAT &A)$/;"	f	signature:(MAT &A)
make_toeplitz	src/matrix/attic/toeplitz.h	/^void make_toeplitz(MAT &A, const Type *v)$/;"	f	signature:(MAT &A, const Type *v)
make_weighted_circulant	src/matrix/attic/toeplitz.h	/^void make_weighted_circulant(MAT &A, const Type *v, Type z)$/;"	f	signature:(MAT &A, const Type *v, Type z)
map23_rgs	src/comb/map23-rgs.h	/^    explicit map23_rgs(ulong n)$/;"	f	class:map23_rgs	access:public	signature:(ulong n)
map23_rgs	src/comb/map23-rgs.h	/^    map23_rgs(const map23_rgs&);  \/\/ forbidden$/;"	p	class:map23_rgs	access:private	signature:(const map23_rgs&)
map23_rgs	src/comb/map23-rgs.h	/^class map23_rgs$/;"	c
map23_rgs::a_	src/comb/map23-rgs.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:map23_rgs	access:public
map23_rgs::data	src/comb/map23-rgs.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:map23_rgs	access:public	signature:() const
map23_rgs::first	src/comb/map23-rgs.h	/^    void first()$/;"	f	class:map23_rgs	access:public	signature:()
map23_rgs::map23_rgs	src/comb/map23-rgs.h	/^    explicit map23_rgs(ulong n)$/;"	f	class:map23_rgs	access:public	signature:(ulong n)
map23_rgs::map23_rgs	src/comb/map23-rgs.h	/^    map23_rgs(const map23_rgs&);  \/\/ forbidden$/;"	p	class:map23_rgs	access:private	signature:(const map23_rgs&)
map23_rgs::n_	src/comb/map23-rgs.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:map23_rgs	access:public
map23_rgs::next	src/comb/map23-rgs.h	/^    ulong next()$/;"	f	class:map23_rgs	access:public	signature:()
map23_rgs::operator =	src/comb/map23-rgs.h	/^    map23_rgs & operator = (const map23_rgs&);  \/\/ forbidden$/;"	p	class:map23_rgs	access:private	signature:(const map23_rgs&)
map23_rgs::print	src/comb/map23-rgs.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:map23_rgs	access:public	signature:(const char *bla, bool dfz=false)
map23_rgs::~map23_rgs	src/comb/map23-rgs.h	/^    ~map23_rgs()$/;"	f	class:map23_rgs	access:public	signature:()
map_start_	src/comb/string-subst.h	/^    uchar *map_start_[NCHAR];  \/\/ ASCII only, pointers into maps_[]$/;"	m	class:string_subst	access:public
map_str_	src/comb/lindenmayer-system.h	/^    std::vector<std::string> map_str_;$/;"	m	class:lindenmayer_system	access:protected
maps_	src/comb/string-subst.h	/^    uchar *maps_;  \/\/ all maps (images of maps, each null terminated)$/;"	m	class:string_subst	access:public
mark	src/graph/digraph-paths.cc	/^digraph_paths::mark(ulong p, ulong &ns)$/;"	f	class:digraph_paths	signature:(ulong p, ulong &ns)
mark	src/graph/digraph-paths.h	/^    bool mark(ulong p, ulong &ns);$/;"	p	class:digraph_paths	access:public	signature:(ulong p, ulong &ns)
mark	src/graph/lyndon-gray.h	/^    void mark(ulong ly)$/;"	f	class:lyndon_gray	access:public	signature:(ulong ly)
mask	src/comb/attic/subset-monotone.h	/^    ulong mask;$/;"	m	class:subset_monotone	access:protected
mask_	src/bpol/fcsr.h	/^    ulong mask_;  \/\/ mask  e.g. (with above)    mask == 63 == 111111$/;"	m	class:fcsr	access:public
mask_	src/bpol/lfsr.h	/^    ulong mask_;  \/\/ mask  e.g. (above) == 15 == 1111$/;"	m	class:lfsr	access:public
mask_	src/comb/attic/combcolex.h	/^    ulong mask_;  \/\/ 111...111000..00 (n zeros)$/;"	m	class:comb_colex	access:public
mask_	src/comb/attic/comblex.h	/^    ulong mask_;  \/\/ 111...111000..00 (n zeros)$/;"	m	class:comb_lex	access:public
mask_copy_bit	doc/bits-doc.txt	/^static inline ulong mask_copy_bit(ulong a, ulong msrc, ulong mdst);$/;"	p	file:	signature:(ulong a, ulong msrc, ulong mdst)
mask_copy_bit	src/bits/bitcopy.h	/^static inline ulong mask_copy_bit(ulong a, ulong msrc, ulong mdst)$/;"	f	signature:(ulong a, ulong msrc, ulong mdst)
mask_or_bit	doc/bits-doc.txt	/^static inline ulong mask_or_bit(ulong a, ulong msrc, ulong mdst);$/;"	p	file:	signature:(ulong a, ulong msrc, ulong mdst)
mask_or_bit	src/bits/bitcopy.h	/^static inline ulong mask_or_bit(ulong a, ulong msrc, ulong mdst)$/;"	f	signature:(ulong a, ulong msrc, ulong mdst)
matrix	src/matrix/matrix.h	/^    matrix(const matrix<Type> &m)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &m)
matrix	src/matrix/matrix.h	/^    matrix(ulong n)$/;"	f	class:matrix	access:public	signature:(ulong n)
matrix	src/matrix/matrix.h	/^class matrix : public array2d<Type>$/;"	c	inherits:array2d
matrix::diag_add_val	src/matrix/matrix.h	/^    void diag_add_val(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
matrix::diag_subtract_val	src/matrix/matrix.h	/^    void diag_subtract_val(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
matrix::is_diag	src/matrix/matrix.h	/^    bool is_diag(Type v)  const$/;"	f	class:matrix	access:public	signature:(Type v) const
matrix::is_unitary	src/matrix/matrix.h	/^    bool is_unitary(Type v)  const$/;"	f	class:matrix	access:public	signature:(Type v) const
matrix::kronecker	src/matrix/matrix.h	/^    bool kronecker(const matrix<Type> A, const matrix<Type> B)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> A, const matrix<Type> B)
matrix::matrix	src/matrix/matrix.h	/^    matrix(const matrix<Type> &m)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &m)
matrix::matrix	src/matrix/matrix.h	/^    matrix(ulong n)$/;"	f	class:matrix	access:public	signature:(ulong n)
matrix::operator *	src/matrix/matrix.h	/^    matrix<Type> operator *(const matrix<Type> &B)  const$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &B) const
matrix::operator *=	src/matrix/matrix.h	/^    matrix<Type> & operator *=(const matrix<Type> &B)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &B)
matrix::operator +=	src/matrix/matrix.h	/^    matrix<Type> & operator += (const matrix<Type> &h)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &h)
matrix::operator -=	src/matrix/matrix.h	/^    matrix<Type> & operator -= (const matrix<Type> &h)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &h)
matrix::operator =	src/matrix/matrix.h	/^    matrix<Type> & operator =(const matrix<Type> &m)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &m)
matrix::set_diag	src/matrix/matrix.h	/^    void set_diag(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
matrix::transpose	src/matrix/matrix.h	/^    void transpose()$/;"	f	class:matrix	access:public	signature:()
matrix::unit	src/matrix/matrix.h	/^    void unit(Type v=1)  { null();  set_diag( v ); }$/;"	f	class:matrix	access:public	signature:(Type v=1)
matrix::~matrix	src/matrix/matrix.h	/^    ~matrix()  { }$/;"	f	class:matrix	access:public	signature:()
matrix_fft	doc/fft-doc.txt	/^void matrix_fft(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
matrix_fft	doc/fft-doc.txt	/^void matrix_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft	src/fft/matrixfft.cc	/^matrix_fft(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
matrix_fft	src/fft/matrixfft.cc	/^matrix_fft(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft	src/fft/matrixfft.h	/^void matrix_fft(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
matrix_fft	src/fft/matrixfft.h	/^void matrix_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft0	doc/fft-doc.txt	/^void matrix_fft0(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
matrix_fft0	doc/fft-doc.txt	/^void matrix_fft0(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft0	src/fft/matrixfft.cc	/^matrix_fft0(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
matrix_fft0	src/fft/matrixfft.cc	/^matrix_fft0(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft0	src/fft/matrixfft.h	/^void matrix_fft0(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
matrix_fft0	src/fft/matrixfft.h	/^void matrix_fft0(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
matrix_fft_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution(Complex *f, ulong nr, ulong nc, int zp\/*=0*\/);$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, int zp )
matrix_fft_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
matrix_fft_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution(double *f, ulong nr, ulong nc, int zp\/*=0*\/);$/;"	p	file:	signature:(double *f, ulong nr, ulong nc, int zp )
matrix_fft_auto_convolution	src/convolution/complexconvolution.h	/^void matrix_fft_auto_convolution(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution	src/convolution/complexconvolution.h	/^void matrix_fft_auto_convolution(Complex *f, ulong nr, ulong nc, int zp=0);$/;"	p	signature:(Complex *f, ulong nr, ulong nc, int zp=0)
matrix_fft_auto_convolution	src/convolution/matrixfftcnvla.cc	/^matrix_fft_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
matrix_fft_auto_convolution	src/convolution/matrixfftcnvla.cc	/^matrix_fft_auto_convolution(double *f, ulong nr, ulong nc, int zp\/*=0*\/)$/;"	f	signature:(double *f, ulong nr, ulong nc, int zp )
matrix_fft_auto_convolution	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_auto_convolution(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_auto_convolution(Complex *f, ulong nr, ulong nc, int zp\/*=0*\/)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, int zp )
matrix_fft_auto_convolution	src/convolution/realconvolution.h	/^void matrix_fft_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
matrix_fft_auto_convolution	src/convolution/realconvolution.h	/^void matrix_fft_auto_convolution(double *f, ulong r, ulong c, int zp=0);$/;"	p	signature:(double *f, ulong r, ulong c, int zp=0)
matrix_fft_auto_convolution0	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution0(Complex *f, ulong ldn);$/;"	p	file:	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution0	doc/convolution-doc.txt	/^void matrix_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
matrix_fft_auto_convolution0	src/convolution/complexconvolution.h	/^void matrix_fft_auto_convolution0(Complex *f, ulong ldn);$/;"	p	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution0	src/convolution/matrixfftcnvla.cc	/^matrix_fft_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
matrix_fft_auto_convolution0	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_auto_convolution0(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
matrix_fft_auto_convolution0	src/convolution/realconvolution.h	/^void matrix_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
matrix_fft_complex_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong ldn);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_complex_auto_convolution	doc/convolution-doc.txt	/^void matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong nr, ulong nc, int zp\/*=0*\/);$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int zp )
matrix_fft_complex_auto_convolution	src/convolution/complexconvolution.h	/^void matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_complex_auto_convolution	src/convolution/complexconvolution.h	/^void matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong nr, ulong nc, int zp=0);$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, int zp=0)
matrix_fft_complex_auto_convolution	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_complex_auto_convolution	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_complex_auto_convolution(double *fr, double *fi, ulong nr, ulong nc, int zp\/*=0*\/)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int zp )
matrix_fft_complex_auto_convolution0	doc/convolution-doc.txt	/^void matrix_fft_complex_auto_convolution0(double *fr, double *fi, ulong ldn);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_complex_auto_convolution0	src/convolution/complexconvolution.h	/^void matrix_fft_complex_auto_convolution0(double *fr, double *fi, ulong ldn);$/;"	p	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_complex_auto_convolution0	src/convolution/matrixfftcocnvla.cc	/^matrix_fft_complex_auto_convolution0(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
matrix_fft_convolution	doc/convolution-doc.txt	/^void matrix_fft_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
matrix_fft_convolution	doc/convolution-doc.txt	/^void matrix_fft_convolution(double * restrict f, double * restrict g,$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong nr, ulong nc, int zp )
matrix_fft_convolution	src/convolution/matrixfftcnvl.cc	/^matrix_fft_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
matrix_fft_convolution	src/convolution/matrixfftcnvl.cc	/^matrix_fft_convolution(double * restrict f, double * restrict g,$/;"	f	signature:(double * restrict f, double * restrict g, ulong nr, ulong nc, int zp )
matrix_fft_convolution	src/convolution/realconvolution.h	/^void matrix_fft_convolution(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
matrix_fft_convolution	src/convolution/realconvolution.h	/^void matrix_fft_convolution(double *f, double *g, ulong r, ulong c, int zp=0);$/;"	p	signature:(double *f, double *g, ulong r, ulong c, int zp=0)
matrix_fft_convolution0	doc/convolution-doc.txt	/^void matrix_fft_convolution0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
matrix_fft_convolution0	src/convolution/matrixfftcnvl.cc	/^matrix_fft_convolution0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
matrix_fft_convolution0	src/convolution/realconvolution.h	/^void matrix_fft_convolution0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
matrix_transpose2	src/aux2/attic/transpose2.h	/^void matrix_transpose2(Type *x, ulong nr, ulong nc, Type *tmp=0)$/;"	f	signature:(Type *x, ulong nr, ulong nc, Type *tmp=0)
max	doc/sort-doc.txt	/^Type max(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
max	doc/sort-doc.txt	/^inline Type max(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
max	src/aux2/attic/minmax2d.h	/^Type max(const Type **f, ulong nr, ulong nc)$/;"	f	signature:(const Type **f, ulong nr, ulong nc)
max	src/sort/minmax.h	/^inline Type max(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
max	src/sort/minmaxfunc.h	/^Type max(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
max0	doc/bits-doc.txt	/^static inline long max0(long x);$/;"	p	file:	signature:(long x)
max0	src/bits/branchless.h	/^static inline long max0(long x)$/;"	f	signature:(long x)
max2	doc/sort-doc.txt	/^static inline Type  max2(const Type &x, const Type &y);$/;"	p	file:	signature:(const Type &x, const Type &y)
max2	src/sort/minmaxmed23.h	/^static inline Type  max2(const Type &x, const Type &y)$/;"	f	signature:(const Type &x, const Type &y)
max2	src/sort/minmaxmed23func.h	/^static inline Type  max2(const Type &x, const Type &y,$/;"	f	signature:(const Type &x, const Type &y, int (*cmp)(const Type &, const Type &))
max2adj	demo/comb/ksubset-rec-demo.cc	/^inline bool max2adj(ulong x)$/;"	f	signature:(ulong x)
max2pow	src/mod/mod.cc	/^uint            mod::max2pow = 0;$/;"	m	class:mod	file:
max2pow	src/mod/mod.h	/^    static uint max2pow;       \/\/ root of order 2**ldn exists for ldn<=max2pow$/;"	m	class:mod	access:public
max3	doc/sort-doc.txt	/^static inline Type  max3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
max3	src/sort/minmaxmed23.h	/^static inline Type  max3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
max3	src/sort/minmaxmed23func.h	/^Type  max3(const Type &x, const Type &y, const Type &z,$/;"	f	signature:(const Type &x, const Type &y, const Type &z, int (*cmp)(const Type &, const Type &))
max_ascent	src/comb/word-stats.h	/^    ulong max_ascent()  const$/;"	f	class:word_stats	access:public	signature:() const
max_branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
max_branching_number	src/comb/id-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
max_branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
max_branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
max_branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong max_branching_number(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
max_branching_number	src/comb/tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
max_convolution	doc/walsh-doc.txt	/^inline void max_convolution(const Type *f, const Type *g, ulong n, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong n, Type *h)
max_convolution	src/walsh/max-convolution.h	/^inline void max_convolution(const Type *f, const Type *g, ulong n, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong n, Type *h)
max_decr_length	src/comb/word-stats.h	/^    ulong max_decr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
max_descent	src/comb/word-stats.h	/^    ulong max_descent()  const$/;"	f	class:word_stats	access:public	signature:() const
max_digit	src/comb/cayley-perm.h	/^    ulong max_digit()  const { return m_; }$/;"	f	class:cayley_perm	access:public	signature:() const
max_displacement	src/comb/word-stats.h	/^    ulong max_displacement()  const$/;"	f	class:word_stats	access:public	signature:() const
max_edges	src/graph/digraph.cc	/^digraph::max_edges()  const$/;"	f	class:digraph	signature:() const
max_edges	src/graph/digraph.h	/^    ulong max_edges()  const;$/;"	p	class:digraph	access:public	signature:() const
max_extent	src/ds/bounding-box.h	/^    Type max_extent()  const$/;"	f	class:bounding_box	access:public	signature:() const
max_flat_length	src/comb/word-stats.h	/^    ulong max_flat_length()  const$/;"	f	class:word_stats	access:public	signature:() const
max_idx	doc/sort-doc.txt	/^inline ulong max_idx(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
max_idx	src/sort/minmax.h	/^inline ulong max_idx(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
max_incr_length	src/comb/word-stats.h	/^    ulong max_incr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
max_limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
max_limb_length	src/comb/id-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
max_limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
max_limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong max_limb_length(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
max_limb_length	src/comb/tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
max_lyndon_prefix_len	src/comb/lyndon-factorization.h	/^ulong max_lyndon_prefix_len(const Type *W, ulong n)$/;"	f	signature:(const Type *W, ulong n)
max_num_parts	src/comb/partition-dist-asc-len.h	/^    ulong max_num_parts()  const  {  return mm_; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
max_num_vals	src/comb/word-stats.h	/^    ulong max_num_vals()  const$/;"	f	class:word_stats	access:public	signature:() const
max_order_q	demo/gf2n/clhca-demo.cc	/^bool max_order_q(ulong r, ulong n)$/;"	f	signature:(ulong r, ulong n)
max_part	src/comb/composition-nz-max.h	/^    ulong max_part()  const$/;"	f	class:composition_nz_max	access:public	signature:() const
max_part	src/comb/composition-nz-weakly-unimodal.h	/^    ulong max_part()  const  { return mv_; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
max_period	src/bpol/lfsr.h	/^    ulong max_period()  const$/;"	f	class:lfsr	access:public	signature:() const
max_point	src/ds/bounding-box.h	/^    Pnt max_point()  const  { return Pnt( ax_, ay_ ); }$/;"	f	class:bounding_box	access:public	signature:() const
max_subrange_val	demo/seq/A276691-demo.cc	/^inline Type max_subrange_val(Type * const x, ulong n)$/;"	f	signature:(Type * const x, ulong n)
max_upstep	demo/seq/A225084-demo.cc	/^inline ulong max_upstep(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
max_val	src/comb/word-stats.h	/^    ulong max_val()  const$/;"	f	class:word_stats	access:public	signature:() const
max_weakly_decr_length	src/comb/word-stats.h	/^    ulong max_weakly_decr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
max_weakly_incr_length	src/comb/word-stats.h	/^    ulong max_weakly_incr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
max_x	src/ds/bounding-box.h	/^    Type max_x()  const  { return ax_; }$/;"	f	class:bounding_box	access:public	signature:() const
max_y	src/ds/bounding-box.h	/^    Type max_y()  const  { return ay_; }$/;"	f	class:bounding_box	access:public	signature:() const
maxct	demo/graph/sta-graph-acgray-demo.cc	/^ulong maxct = 0;$/;"	v
maxct	demo/graph/sta-graph-macgray-demo.cc	/^ulong maxct = 0;$/;"	v
maxlyn_	src/graph/lyndon-gray.h	/^    ulong maxlyn_;  \/\/ maximal n-bit lyndon word$/;"	m	class:lyndon_gray	access:public
maxnp_	src/graph/digraph-paths.h	/^    ulong maxnp_;  \/\/ stop after maxnp times that pfunc returned one (0==forever)$/;"	m	class:digraph_paths	access:public
maxordelem	src/mod/mod.cc	/^mod    mod::maxordelem;$/;"	m	class:mod	file:
maxordelem	src/mod/mod.h	/^    static mod maxordelem;       \/\/ element of maximal order$/;"	m	class:mod	access:public
maxorder	src/mod/mod.cc	/^umod_t          mod::maxorder = 0;$/;"	m	class:mod	file:
maxorder	src/mod/mod.h	/^    static umod_t maxorder;       \/\/ maximal order of elements$/;"	m	class:mod	access:public
maxorder_element_mod	doc/mod-doc.txt	/^umod_t maxorder_element_mod(const factorization &modfact,$/;"	p	file:	signature:(const factorization &modfact, const factorization &phifact)
maxorder_element_mod	src/mod/maxorder.cc	/^maxorder_element_mod(const factorization &modfact,$/;"	f	signature:(const factorization &modfact, const factorization &phifact)
maxorder_element_mod	src/mod/numtheory.h	/^umod_t maxorder_element_mod(const factorization &mf, const factorization &pf);$/;"	p	signature:(const factorization &mf, const factorization &pf)
maxorder_mod	doc/mod-doc.txt	/^umod_t maxorder_mod(const factorization &modfact);$/;"	p	file:	signature:(const factorization &modfact)
maxorder_mod	src/mod/maxorder.cc	/^maxorder_mod(const factorization &modfact)$/;"	f	signature:(const factorization &modfact)
maxorder_mod	src/mod/numtheory.h	/^umod_t maxorder_mod(const factorization &mf);$/;"	p	signature:(const factorization &mf)
maxprimes	src/mod/factor.cc	/^const ulong factorization::maxprimes = 16;$/;"	m	class:factorization	file:
maxprimes	src/mod/factor.cc	/^const ulong factorization::maxprimes = 32;$/;"	m	class:factorization	file:
maxprimes	src/mod/factor.h	/^    static const ulong  maxprimes;$/;"	m	class:factorization	access:public
maxrep_rec	demo/comb/maxrep-gray-demo.cc	/^void maxrep_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
maxrlen_	src/comb/string-subst.h	/^    ulong maxrlen_;  \/\/ max that many symbols in all maps combined$/;"	m	class:string_subst	access:public
mct_	src/comb/subset-gray-delta.h	/^    ulong mct_;  \/\/ max value of ct.$/;"	m	class:subset_gray_delta	access:public
md	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong md = 0;  \/\/ max diff between successive changes$/;"	v
median3	doc/sort-doc.txt	/^static inline Type  median3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
median3	src/sort/minmaxmed23.h	/^static inline Type  median3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
median3	src/sort/minmaxmed23func.h	/^Type  median3(const Type &x, const Type &y, const Type &z,$/;"	f	signature:(const Type &x, const Type &y, const Type &z, int (*cmp)(const Type &, const Type &))
median3_ptr	src/sort/minmaxmed23func.h	/^const Type *median3_ptr(const Type *x, const Type *y, const Type *z,$/;"	f	signature:(const Type *x, const Type *y, const Type *z, int (*cmp)(const Type &, const Type &))
memcopy	doc/aux1-doc.txt	/^inline void memcopy(const Type *src, Type *dst, ulong n);$/;"	p	file:	signature:(const Type *src, Type *dst, ulong n)
memcopy	src/aux1/copy.h	/^inline void memcopy(const Type *src, Type *dst, ulong n)$/;"	f	signature:(const Type *src, Type *dst, ulong n)
memzero	doc/aux1-doc.txt	/^inline void memzero(Type *dst, ulong n);$/;"	p	file:	signature:(Type *dst, ulong n)
memzero	src/aux1/copy.h	/^inline void memzero(Type *dst, ulong n)$/;"	f	signature:(Type *dst, ulong n)
merge	doc/sort-doc.txt	/^void merge(const Type * const restrict f, ulong na, ulong nb, Type * const restrict t);$/;"	p	file:	signature:(const Type * const restrict f, ulong na, ulong nb, Type * const restrict t)
merge	src/sort/merge-sort.h	/^void merge(const Type * const restrict f, ulong na, ulong nb, Type * const restrict t)$/;"	f	signature:(const Type * const restrict f, ulong na, ulong nb, Type * const restrict t)
merge_sort	doc/sort-doc.txt	/^void merge_sort(Type *f, ulong n, Type *tmp=0);$/;"	p	file:	signature:(Type *f, ulong n, Type *tmp=0)
merge_sort	src/sort/merge-sort.h	/^void merge_sort(Type *f, ulong n, Type *tmp=0)$/;"	f	signature:(Type *f, ulong n, Type *tmp=0)
merge_sort4	doc/sort-doc.txt	/^void merge_sort4(Type *f, ulong n, Type *tmp=0);$/;"	p	file:	signature:(Type *f, ulong n, Type *tmp=0)
merge_sort4	src/sort/merge-sort.h	/^void merge_sort4(Type *f, ulong n, Type *tmp=0)$/;"	f	signature:(Type *f, ulong n, Type *tmp=0)
merge_sort_rec	doc/sort-doc.txt	/^void merge_sort_rec(Type *f, ulong n, Type *t);$/;"	p	file:	signature:(Type *f, ulong n, Type *t)
merge_sort_rec	src/sort/merge-sort.h	/^void merge_sort_rec(Type *f, ulong n, Type *t)$/;"	f	signature:(Type *f, ulong n, Type *t)
merge_sort_rec4	doc/sort-doc.txt	/^void merge_sort_rec4(Type *f, ulong n, Type *t);$/;"	p	file:	signature:(Type *f, ulong n, Type *t)
merge_sort_rec4	src/sort/merge-sort.h	/^void merge_sort_rec4(Type *f, ulong n, Type *t)$/;"	f	signature:(Type *f, ulong n, Type *t)
mers_	src/bpol/all-irredpoly.h	/^    ulong mers_;$/;"	m	class:all_irredpoly	access:public
mers_t	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_asc_subset_lex	access:private	signature:(ulong s)
mers_t	src/comb/partition-2fall-asc.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_asc	access:private	signature:(ulong s)
mers_t	src/comb/partition-2fall-desc.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_desc	access:private	signature:(ulong s)
mersenne	doc/mod-doc.txt	/^inline umod_t mersenne(ulong e);$/;"	p	file:	signature:(ulong e)
mersenne	src/mod/mersenne.h	/^inline umod_t mersenne(ulong e)$/;"	f	signature:(ulong e)
mersenne_coprime	src/bpol/mersenne-coprime.h	/^    explicit mersenne_coprime(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
mersenne_coprime	src/bpol/mersenne-coprime.h	/^    mersenne_coprime(const mersenne_coprime&);  \/\/ forbidden$/;"	p	class:mersenne_coprime	access:private	signature:(const mersenne_coprime&)
mersenne_coprime	src/bpol/mersenne-coprime.h	/^class mersenne_coprime$/;"	c
mersenne_coprime::PQ_	src/bpol/mersenne-coprime.h	/^    priority_queue<umod_t, umod_t> PQ_;$/;"	m	class:mersenne_coprime	access:public
mersenne_coprime::current	src/bpol/mersenne-coprime.h	/^    bool current()  const { return j_ != pq_top(); }$/;"	f	class:mersenne_coprime	access:public	signature:() const
mersenne_coprime::e_	src/bpol/mersenne-coprime.h	/^    ulong e_;    \/\/ exponent$/;"	m	class:mersenne_coprime	access:public
mersenne_coprime::first	src/bpol/mersenne-coprime.h	/^    void first(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
mersenne_coprime::init	src/bpol/mersenne-coprime.h	/^    void init(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
mersenne_coprime::j_	src/bpol/mersenne-coprime.h	/^    umod_t j_;   \/\/ current index 1 <= j <= 2**e - 1$/;"	m	class:mersenne_coprime	access:public
mersenne_coprime::mersenne_coprime	src/bpol/mersenne-coprime.h	/^    explicit mersenne_coprime(ulong e)$/;"	f	class:mersenne_coprime	access:public	signature:(ulong e)
mersenne_coprime::mersenne_coprime	src/bpol/mersenne-coprime.h	/^    mersenne_coprime(const mersenne_coprime&);  \/\/ forbidden$/;"	p	class:mersenne_coprime	access:private	signature:(const mersenne_coprime&)
mersenne_coprime::next	src/bpol/mersenne-coprime.h	/^    bool next()$/;"	f	class:mersenne_coprime	access:public	signature:()
mersenne_coprime::np_	src/bpol/mersenne-coprime.h	/^    ulong np_;   \/\/ number of prime factors$/;"	m	class:mersenne_coprime	access:public
mersenne_coprime::operator =	src/bpol/mersenne-coprime.h	/^    mersenne_coprime & operator = (const mersenne_coprime&);  \/\/ forbidden$/;"	p	class:mersenne_coprime	access:private	signature:(const mersenne_coprime&)
mersenne_coprime::p_	src/bpol/mersenne-coprime.h	/^    umod_t p_[15];  \/\/ prime factors (OK for e<=128)$/;"	m	class:mersenne_coprime	access:public
mersenne_coprime::pos	src/bpol/mersenne-coprime.h	/^    umod_t pos()  const  { return j_; }$/;"	f	class:mersenne_coprime	access:public	signature:() const
mersenne_coprime::pq_top	src/bpol/mersenne-coprime.h	/^    umod_t pq_top()  const  { return PQ_.t1_[1]; }$/;"	f	class:mersenne_coprime	access:private	signature:() const
mersenne_coprime::~mersenne_coprime	src/bpol/mersenne-coprime.h	/^    ~mersenne_coprime()  {;}$/;"	f	class:mersenne_coprime	access:public	signature:()
mersenne_exp_tab	src/mod/mersenne-exponents.cc	/^extern const ulong mersenne_exp_tab[] =$/;"	v
mersenne_exp_tab_len	src/mod/mersenne-exponents.cc	/^extern const ulong mersenne_exp_tab_len = ARRAY_LEN(mersenne_exp_tab);$/;"	v
mersenne_factorization	doc/mod-doc.txt	/^inline umod_t mersenne_factorization(ulong e, factorization *F);$/;"	p	file:	signature:(ulong e, factorization *F)
mersenne_factorization	src/mod/mersenne.h	/^inline umod_t mersenne_factorization(ulong e, factorization *F)$/;"	f	signature:(ulong e, factorization *F)
mersenne_generators_tab	src/mod/attic/mersenne-generators.cc	/^extern const ulong mersenne_generators_tab[] =$/;"	v
mersenne_haar	doc/haar-doc.txt	/^inline void mersenne_haar(double *a, ulong f0);$/;"	p	file:	signature:(double *a, ulong f0)
mersenne_haar	src/haar/mers-haar.h	/^inline void mersenne_haar(double *a, ulong f0)$/;"	f	signature:(double *a, ulong f0)
mersenne_haar_nn	doc/haar-doc.txt	/^inline void mersenne_haar_nn(double *a, ulong f0);$/;"	p	file:	signature:(double *a, ulong f0)
mersenne_haar_nn	src/haar/mers-haar.h	/^inline void mersenne_haar_nn(double *a, ulong f0)$/;"	f	signature:(double *a, ulong f0)
mersenne_maxorder_tab	src/mod/attic/mersenne-generators.cc	/^const umod_t mersenne_maxorder_tab[] =$/;"	v
mersenne_prime_factor_tab	src/mod/mersenne-factors.cc	/^extern const umod_t mersenne_prime_factor_tab[] =$/;"	v
mersenne_walsh	doc/walsh-doc.txt	/^inline void mersenne_walsh(double *a, ulong f0);$/;"	p	file:	signature:(double *a, ulong f0)
mersenne_walsh	src/walsh/mers-walsh.h	/^inline void mersenne_walsh(double *a, ulong f0)$/;"	f	signature:(double *a, ulong f0)
mersenne_walsh_nn	doc/walsh-doc.txt	/^inline void mersenne_walsh_nn(double *a, ulong f0);$/;"	p	file:	signature:(double *a, ulong f0)
mersenne_walsh_nn	src/walsh/mers-walsh.h	/^inline void mersenne_walsh_nn(double *a, ulong f0)$/;"	f	signature:(double *a, ulong f0)
mfact_	src/bpol/gf2n.cc	/^factorization GF2n::mfact_;  \/\/ factorization of max order$/;"	m	class:GF2n	file:
mfact_	src/bpol/gf2n.h	/^    static factorization mfact_;  \/\/ factorization of max order$/;"	m	class:GF2n	access:public
mi	src/comb/print-vec.cc	/^static const ulong mi = ARRAY_LEN(sym) - 2;$/;"	v	file:
mi_	src/comb/cayley-perm.h	/^    ulong mi_;  \/\/ minimum value of max digit (== min value of m_)$/;"	m	class:cayley_perm	access:public
mi_	src/comb/composition-nz-min.h	/^    ulong mi_;  \/\/ all parts <= mi$/;"	m	class:composition_nz_min	access:public
mi_	src/perm/attic/cycles.h	/^    ulong ma_, mi_; \/\/ max\/min length of cycles$/;"	m	class:cycles	access:public
mid_point	doc/ds-doc.txt	/^inline point2d<Type> mid_point(const point2d<Type> & P, const point2d<Type> & Q);$/;"	p	file:	signature:(const point2d<Type> & P, const point2d<Type> & Q)
mid_point	doc/ds-doc.txt	/^inline point2d<double> mid_point(const point2d<double> & P, const point2d<double> & Q);$/;"	p	file:	signature:(const point2d<double> & P, const point2d<double> & Q)
mid_point	doc/ds-doc.txt	/^inline point2d<float> mid_point(const point2d<float> & P, const point2d<float> & Q);$/;"	p	file:	signature:(const point2d<float> & P, const point2d<float> & Q)
mid_point	doc/ds-doc.txt	/^inline point2d<long double> mid_point(const point2d<long double> & P, const point2d<long double> & Q);$/;"	p	file:	signature:(const point2d<long double> & P, const point2d<long double> & Q)
mid_point	doc/ds-doc.txt	/^inline point3d<Type> mid_point(const point3d<Type> & P, const point3d<Type> & Q);$/;"	p	file:	signature:(const point3d<Type> & P, const point3d<Type> & Q)
mid_point	doc/ds-doc.txt	/^inline point3d<double> mid_point(const point3d<double> & P, const point3d<double> & Q);$/;"	p	file:	signature:(const point3d<double> & P, const point3d<double> & Q)
mid_point	doc/ds-doc.txt	/^inline point3d<float> mid_point(const point3d<float> & P, const point3d<float> & Q);$/;"	p	file:	signature:(const point3d<float> & P, const point3d<float> & Q)
mid_point	doc/ds-doc.txt	/^inline point3d<long double> mid_point(const point3d<long double> & P, const point3d<long double> & Q);$/;"	p	file:	signature:(const point3d<long double> & P, const point3d<long double> & Q)
mid_point	src/ds/bounding-box.h	/^    Pnt mid_point()  const$/;"	f	class:bounding_box	access:public	signature:() const
mid_point	src/ds/point2d.h	/^inline point2d<Type> mid_point(const point2d<Type> & P, const point2d<Type> & Q)$/;"	f	signature:(const point2d<Type> & P, const point2d<Type> & Q)
mid_point	src/ds/point2d.h	/^inline point2d<double> mid_point(const point2d<double> & P, const point2d<double> & Q)$/;"	f	signature:(const point2d<double> & P, const point2d<double> & Q)
mid_point	src/ds/point2d.h	/^inline point2d<float> mid_point(const point2d<float> & P, const point2d<float> & Q)$/;"	f	signature:(const point2d<float> & P, const point2d<float> & Q)
mid_point	src/ds/point2d.h	/^inline point2d<long double> mid_point(const point2d<long double> & P, const point2d<long double> & Q)$/;"	f	signature:(const point2d<long double> & P, const point2d<long double> & Q)
mid_point	src/ds/point3d.h	/^inline point3d<Type> mid_point(const point3d<Type> & P, const point3d<Type> & Q)$/;"	f	signature:(const point3d<Type> & P, const point3d<Type> & Q)
mid_point	src/ds/point3d.h	/^inline point3d<double> mid_point(const point3d<double> & P, const point3d<double> & Q)$/;"	f	signature:(const point3d<double> & P, const point3d<double> & Q)
mid_point	src/ds/point3d.h	/^inline point3d<float> mid_point(const point3d<float> & P, const point3d<float> & Q)$/;"	f	signature:(const point3d<float> & P, const point3d<float> & Q)
mid_point	src/ds/point3d.h	/^inline point3d<long double> mid_point(const point3d<long double> & P, const point3d<long double> & Q)$/;"	f	signature:(const point3d<long double> & P, const point3d<long double> & Q)
middle	src/bits/bit-rll2.h	/^    void middle()$/;"	f	class:bit_rll2	access:public	signature:()
min	doc/sort-doc.txt	/^Type min(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
min	doc/sort-doc.txt	/^inline Type min(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
min	src/aux2/attic/minmax2d.h	/^Type min(const Type **f, ulong nr, ulong nc)$/;"	f	signature:(const Type **f, ulong nr, ulong nc)
min	src/sort/minmax.h	/^inline Type min(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
min	src/sort/minmaxfunc.h	/^Type min(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
min0	doc/bits-doc.txt	/^static inline long min0(long x);$/;"	p	file:	signature:(long x)
min0	src/bits/branchless.h	/^static inline long min0(long x)$/;"	f	signature:(long x)
min2	doc/sort-doc.txt	/^static inline Type  min2(const Type &x, const Type &y);$/;"	p	file:	signature:(const Type &x, const Type &y)
min2	src/sort/minmaxmed23.h	/^static inline Type  min2(const Type &x, const Type &y)$/;"	f	signature:(const Type &x, const Type &y)
min2	src/sort/minmaxmed23func.h	/^static inline Type  min2(const Type &x, const Type &y,$/;"	f	signature:(const Type &x, const Type &y, int (*cmp)(const Type &, const Type &))
min3	doc/sort-doc.txt	/^static inline Type  min3(const Type &x, const Type &y, const Type &z);$/;"	p	file:	signature:(const Type &x, const Type &y, const Type &z)
min3	src/sort/minmaxmed23.h	/^static inline Type  min3(const Type &x, const Type &y, const Type &z)$/;"	f	signature:(const Type &x, const Type &y, const Type &z)
min3	src/sort/minmaxmed23func.h	/^Type  min3(const Type &x, const Type &y, const Type &z,$/;"	f	signature:(const Type &x, const Type &y, const Type &z, int (*cmp)(const Type &, const Type &))
min_ascent	src/comb/word-stats.h	/^    ulong min_ascent()  const$/;"	f	class:word_stats	access:public	signature:() const
min_branching_number	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
min_branching_number	src/comb/id-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
min_branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
min_branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
min_branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong min_branching_number(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
min_branching_number	src/comb/tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
min_descent	src/comb/word-stats.h	/^    ulong min_descent()  const$/;"	f	class:word_stats	access:public	signature:() const
min_displacement	src/comb/word-stats.h	/^    ulong min_displacement()  const$/;"	f	class:word_stats	access:public	signature:() const
min_displacement_nfp	src/comb/word-stats.h	/^    ulong min_displacement_nfp()  const$/;"	f	class:word_stats	access:public	signature:() const
min_idx	doc/sort-doc.txt	/^inline ulong min_idx(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
min_idx	src/sort/minmax.h	/^inline ulong min_idx(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
min_limb_length	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
min_limb_length	src/comb/id-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
min_limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
min_limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong min_limb_length(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
min_limb_length	src/comb/tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
min_max	doc/sort-doc.txt	/^inline void min_max(const Type *f, ulong n, Type *mi, Type *ma);$/;"	p	file:	signature:(const Type *f, ulong n, Type *mi, Type *ma)
min_max	src/aux1/attic/array.h	/^    void min_max(Type *mi, Type *ma)  const  { ::min_max(f_, n_, mi, ma); }$/;"	f	class:array	access:public	signature:(Type *mi, Type *ma) const
min_max	src/aux2/attic/minmax2d.h	/^void min_max(const Type **f, ulong nr, ulong nc, Type *mi, Type *ma)$/;"	f	signature:(const Type **f, ulong nr, ulong nc, Type *mi, Type *ma)
min_max	src/sort/minmax.h	/^inline void min_max(const Type *f, ulong n, Type *mi, Type *ma)$/;"	f	signature:(const Type *f, ulong n, Type *mi, Type *ma)
min_max_diff	src/comb/word-stats.h	/^    ulong min_max_diff()  const$/;"	f	class:word_stats	access:public	signature:() const
min_max_num_diff	src/comb/word-stats.h	/^    ulong min_max_num_diff()  const$/;"	f	class:word_stats	access:public	signature:() const
min_num_vals	src/comb/word-stats.h	/^    ulong min_num_vals()  const$/;"	f	class:word_stats	access:public	signature:() const
min_num_vals_nz	src/comb/word-stats.h	/^    ulong min_num_vals_nz()  const$/;"	f	class:word_stats	access:public	signature:() const
min_point	src/ds/bounding-box.h	/^    Pnt min_point()  const  { return Pnt( ix_, iy_ ); }$/;"	f	class:bounding_box	access:public	signature:() const
min_val	src/comb/word-stats.h	/^    ulong min_val()  const$/;"	f	class:word_stats	access:public	signature:() const
min_x	src/ds/bounding-box.h	/^    Type min_x()  const  { return ix_; }$/;"	f	class:bounding_box	access:public	signature:() const
min_y	src/ds/bounding-box.h	/^    Type min_y()  const  { return iy_; }$/;"	f	class:bounding_box	access:public	signature:() const
minpoly	src/bpol/gf2n.h	/^    ulong minpoly()  const$/;"	f	class:GF2n	access:public	signature:() const
minweight_lhca_rule	src/bpol/lhcarule-minweight.cc	/^extern const ulong minweight_lhca_rule[]= {$/;"	v
minweight_lhca_rule_len	src/bpol/lhcarule-minweight.cc	/^extern const ulong minweight_lhca_rule_len = ARRAY_LEN(minweight_lhca_rule);$/;"	v
minweight_primpoly	src/bpol/primpoly-minweight.cc	/^extern const ulong minweight_primpoly[]=$/;"	v
minweight_primpoly_len	src/bpol/primpoly-minweight.cc	/^extern const ulong minweight_primpoly_len = ARRAY_LEN(minweight_primpoly);$/;"	v
mixedradix2num	src/comb/attic/num2mixedradix.h	/^inline ulong mixedradix2num(const ulong *r, ulong k, const ulong *d)$/;"	f	signature:(const ulong *r, ulong k, const ulong *d)
mixedradix2num	src/comb/mixedradix.h	/^ulong mixedradix2num(const ulong *x, const ulong *m1, ulong n);$/;"	p	signature:(const ulong *x, const ulong *m1, ulong n)
mixedradix2num	src/comb/mixedradix2num.cc	/^mixedradix2num(const ulong *x, const ulong *m1, ulong n)$/;"	f	signature:(const ulong *x, const ulong *m1, ulong n)
mixedradix_colex	src/comb/mixedradix-colex.h	/^    explicit mixedradix_colex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_colex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_colex	src/comb/mixedradix-colex.h	/^    mixedradix_colex(const mixedradix_colex&);  \/\/ forbidden$/;"	p	class:mixedradix_colex	access:private	signature:(const mixedradix_colex&)
mixedradix_colex	src/comb/mixedradix-colex.h	/^class mixedradix_colex$/;"	c
mixedradix_colex::OK	src/comb/mixedradix-colex.h	/^    bool OK()  const$/;"	f	class:mixedradix_colex	access:public	signature:() const
mixedradix_colex::a_	src/comb/mixedradix-colex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_colex	access:public
mixedradix_colex::data	src/comb/mixedradix-colex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:mixedradix_colex	access:public	signature:() const
mixedradix_colex::first	src/comb/mixedradix-colex.h	/^    void first()$/;"	f	class:mixedradix_colex	access:public	signature:()
mixedradix_colex::j_	src/comb/mixedradix-colex.h	/^    ulong j_;   \/\/ leftmost position of last change$/;"	m	class:mixedradix_colex	access:public
mixedradix_colex::last	src/comb/mixedradix-colex.h	/^    void last()$/;"	f	class:mixedradix_colex	access:public	signature:()
mixedradix_colex::m1_	src/comb/mixedradix-colex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_colex	access:public
mixedradix_colex::mixedradix_colex	src/comb/mixedradix-colex.h	/^    explicit mixedradix_colex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_colex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_colex::mixedradix_colex	src/comb/mixedradix-colex.h	/^    mixedradix_colex(const mixedradix_colex&);  \/\/ forbidden$/;"	p	class:mixedradix_colex	access:private	signature:(const mixedradix_colex&)
mixedradix_colex::n_	src/comb/mixedradix-colex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_colex	access:public
mixedradix_colex::next	src/comb/mixedradix-colex.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_colex	access:public	signature:()
mixedradix_colex::operator =	src/comb/mixedradix-colex.h	/^    mixedradix_colex & operator = (const mixedradix_colex&);  \/\/ forbidden$/;"	p	class:mixedradix_colex	access:private	signature:(const mixedradix_colex&)
mixedradix_colex::pos	src/comb/mixedradix-colex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_colex	access:public	signature:() const
mixedradix_colex::prev	src/comb/mixedradix-colex.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_colex	access:public	signature:()
mixedradix_colex::print	src/comb/mixedradix-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_colex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_colex::print_nines	src/comb/mixedradix-colex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_colex	access:public	signature:(const char *bla) const
mixedradix_colex::to_num	src/comb/mixedradix-colex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_colex	access:public	signature:() const
mixedradix_colex::~mixedradix_colex	src/comb/mixedradix-colex.h	/^    ~mixedradix_colex()$/;"	f	class:mixedradix_colex	access:public	signature:()
mixedradix_endo	src/comb/mixedradix-endo.h	/^    explicit mixedradix_endo(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_endo	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_endo	src/comb/mixedradix-endo.h	/^    mixedradix_endo(const mixedradix_endo&);  \/\/ forbidden$/;"	p	class:mixedradix_endo	access:private	signature:(const mixedradix_endo&)
mixedradix_endo	src/comb/mixedradix-endo.h	/^class mixedradix_endo$/;"	c
mixedradix_endo::OK	src/comb/mixedradix-endo.h	/^    bool OK()  const$/;"	f	class:mixedradix_endo	access:public	signature:() const
mixedradix_endo::a_	src/comb/mixedradix-endo.h	/^    ulong *a_;  \/\/ digits, sentinel a[n]$/;"	m	class:mixedradix_endo	access:public
mixedradix_endo::data	src/comb/mixedradix-endo.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_endo	access:public	signature:() const
mixedradix_endo::first	src/comb/mixedradix-endo.h	/^    void first()$/;"	f	class:mixedradix_endo	access:public	signature:()
mixedradix_endo::j_	src/comb/mixedradix-endo.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_endo	access:public
mixedradix_endo::last	src/comb/mixedradix-endo.h	/^    void last()$/;"	f	class:mixedradix_endo	access:public	signature:()
mixedradix_endo::le_	src/comb/mixedradix-endo.h	/^    ulong *le_;  \/\/ last positive digit in endo order, sentinel le[n]$/;"	m	class:mixedradix_endo	access:public
mixedradix_endo::m1_	src/comb/mixedradix-endo.h	/^    ulong *m1_;  \/\/ radix (minus one) for each digit$/;"	m	class:mixedradix_endo	access:public
mixedradix_endo::mixedradix_endo	src/comb/mixedradix-endo.h	/^    explicit mixedradix_endo(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_endo	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_endo::mixedradix_endo	src/comb/mixedradix-endo.h	/^    mixedradix_endo(const mixedradix_endo&);  \/\/ forbidden$/;"	p	class:mixedradix_endo	access:private	signature:(const mixedradix_endo&)
mixedradix_endo::n_	src/comb/mixedradix-endo.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_endo	access:public
mixedradix_endo::next	src/comb/mixedradix-endo.h	/^    bool next()$/;"	f	class:mixedradix_endo	access:public	signature:()
mixedradix_endo::operator =	src/comb/mixedradix-endo.h	/^    mixedradix_endo & operator = (const mixedradix_endo&);  \/\/ forbidden$/;"	p	class:mixedradix_endo	access:private	signature:(const mixedradix_endo&)
mixedradix_endo::pos	src/comb/mixedradix-endo.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_endo	access:public	signature:() const
mixedradix_endo::prev	src/comb/mixedradix-endo.h	/^    bool prev()$/;"	f	class:mixedradix_endo	access:public	signature:()
mixedradix_endo::print	src/comb/mixedradix-endo.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_endo	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_endo::print_nines	src/comb/mixedradix-endo.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_endo	access:public	signature:(const char *bla) const
mixedradix_endo::to_num	src/comb/mixedradix-endo.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_endo	access:public	signature:() const
mixedradix_endo::~mixedradix_endo	src/comb/mixedradix-endo.h	/^    ~mixedradix_endo()$/;"	f	class:mixedradix_endo	access:public	signature:()
mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    explicit mixedradix_endo_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_endo_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    mixedradix_endo_gray(const mixedradix_endo_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_endo_gray	access:private	signature:(const mixedradix_endo_gray&)
mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^class mixedradix_endo_gray$/;"	c
mixedradix_endo_gray::OK	src/comb/mixedradix-endo-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
mixedradix_endo_gray::a_	src/comb/mixedradix-endo-gray.h	/^    ulong *a_;  \/\/ mixed radix digits$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::data	src/comb/mixedradix-endo-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
mixedradix_endo_gray::dir	src/comb/mixedradix-endo-gray.h	/^    int dir()  const  { return dm_; }  \/\/ direction of last change$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
mixedradix_endo_gray::dm_	src/comb/mixedradix-endo-gray.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::first	src/comb/mixedradix-endo-gray.h	/^    void first()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
mixedradix_endo_gray::i_	src/comb/mixedradix-endo-gray.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::j_	src/comb/mixedradix-endo-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::last	src/comb/mixedradix-endo-gray.h	/^    void last()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
mixedradix_endo_gray::le_	src/comb/mixedradix-endo-gray.h	/^    ulong *le_;  \/\/ last positive digit in endo order$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::m1_	src/comb/mixedradix-endo-gray.h	/^    ulong *m1_;  \/\/ radices (minus one)$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    explicit mixedradix_endo_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_endo_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_endo_gray::mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    mixedradix_endo_gray(const mixedradix_endo_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_endo_gray	access:private	signature:(const mixedradix_endo_gray&)
mixedradix_endo_gray::n_	src/comb/mixedradix-endo-gray.h	/^    ulong n_;   \/\/ n_ digits$/;"	m	class:mixedradix_endo_gray	access:public
mixedradix_endo_gray::next	src/comb/mixedradix-endo-gray.h	/^    bool next()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
mixedradix_endo_gray::operator =	src/comb/mixedradix-endo-gray.h	/^    mixedradix_endo_gray & operator = (const mixedradix_endo_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_endo_gray	access:private	signature:(const mixedradix_endo_gray&)
mixedradix_endo_gray::pos	src/comb/mixedradix-endo-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
mixedradix_endo_gray::prev	src/comb/mixedradix-endo-gray.h	/^    bool prev()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
mixedradix_endo_gray::print	src/comb/mixedradix-endo-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_endo_gray::print_nines	src/comb/mixedradix-endo-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:(const char *bla) const
mixedradix_endo_gray::to_num	src/comb/mixedradix-endo-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
mixedradix_endo_gray::~mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    ~mixedradix_endo_gray()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
mixedradix_gray	src/comb/mixedradix-gray.h	/^    explicit mixedradix_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gray	src/comb/mixedradix-gray.h	/^    mixedradix_gray(const mixedradix_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_gray	access:private	signature:(const mixedradix_gray&)
mixedradix_gray	src/comb/mixedradix-gray.h	/^class mixedradix_gray$/;"	c
mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    explicit mixedradix_gray2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gray2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    mixedradix_gray2(const mixedradix_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_gray2	access:private	signature:(const mixedradix_gray2&)
mixedradix_gray2	src/comb/mixedradix-gray2.h	/^class mixedradix_gray2$/;"	c
mixedradix_gray2::OK	src/comb/mixedradix-gray2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gray2	access:public	signature:() const
mixedradix_gray2::a_	src/comb/mixedradix-gray2.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::d_	src/comb/mixedradix-gray2.h	/^    ulong *d_;  \/\/ direction$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::data	src/comb/mixedradix-gray2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gray2	access:public	signature:() const
mixedradix_gray2::dir	src/comb/mixedradix-gray2.h	/^    int dir()  const  { return dm_; }$/;"	f	class:mixedradix_gray2	access:public	signature:() const
mixedradix_gray2::dm_	src/comb/mixedradix-gray2.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::f_	src/comb/mixedradix-gray2.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::first	src/comb/mixedradix-gray2.h	/^    void first()$/;"	f	class:mixedradix_gray2	access:public	signature:()
mixedradix_gray2::j_	src/comb/mixedradix-gray2.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::m1_	src/comb/mixedradix-gray2.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    explicit mixedradix_gray2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gray2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gray2::mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    mixedradix_gray2(const mixedradix_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_gray2	access:private	signature:(const mixedradix_gray2&)
mixedradix_gray2::n_	src/comb/mixedradix-gray2.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_gray2	access:public
mixedradix_gray2::next	src/comb/mixedradix-gray2.h	/^    bool next()$/;"	f	class:mixedradix_gray2	access:public	signature:()
mixedradix_gray2::operator =	src/comb/mixedradix-gray2.h	/^    mixedradix_gray2 & operator = (const mixedradix_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_gray2	access:private	signature:(const mixedradix_gray2&)
mixedradix_gray2::pos	src/comb/mixedradix-gray2.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_gray2	access:public	signature:() const
mixedradix_gray2::print	src/comb/mixedradix-gray2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gray2	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gray2::print_nines	src/comb/mixedradix-gray2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gray2	access:public	signature:(const char *bla) const
mixedradix_gray2::to_num	src/comb/mixedradix-gray2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gray2	access:public	signature:() const
mixedradix_gray2::~mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    ~mixedradix_gray2()$/;"	f	class:mixedradix_gray2	access:public	signature:()
mixedradix_gray::OK	src/comb/mixedradix-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_gray	access:public	signature:() const
mixedradix_gray::a_	src/comb/mixedradix-gray.h	/^    ulong *a_;  \/\/ mixed radix digits$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::data	src/comb/mixedradix-gray.h	/^    const ulong * data()  const { return a_; }$/;"	f	class:mixedradix_gray	access:public	signature:() const
mixedradix_gray::dir	src/comb/mixedradix-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:mixedradix_gray	access:public	signature:() const
mixedradix_gray::dm_	src/comb/mixedradix-gray.h	/^    int dm_;    \/\/ direction of last move$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::first	src/comb/mixedradix-gray.h	/^    void first()$/;"	f	class:mixedradix_gray	access:public	signature:()
mixedradix_gray::i_	src/comb/mixedradix-gray.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::j_	src/comb/mixedradix-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::last	src/comb/mixedradix-gray.h	/^    void last()$/;"	f	class:mixedradix_gray	access:public	signature:()
mixedradix_gray::m1_	src/comb/mixedradix-gray.h	/^    ulong *m1_;  \/\/ radices (minus one)$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::mixedradix_gray	src/comb/mixedradix-gray.h	/^    explicit mixedradix_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gray::mixedradix_gray	src/comb/mixedradix-gray.h	/^    mixedradix_gray(const mixedradix_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_gray	access:private	signature:(const mixedradix_gray&)
mixedradix_gray::n_	src/comb/mixedradix-gray.h	/^    ulong n_;   \/\/ n_ digits$/;"	m	class:mixedradix_gray	access:public
mixedradix_gray::next	src/comb/mixedradix-gray.h	/^    bool next()$/;"	f	class:mixedradix_gray	access:public	signature:()
mixedradix_gray::operator =	src/comb/mixedradix-gray.h	/^    mixedradix_gray & operator = (const mixedradix_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_gray	access:private	signature:(const mixedradix_gray&)
mixedradix_gray::pos	src/comb/mixedradix-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_gray	access:public	signature:() const
mixedradix_gray::prev	src/comb/mixedradix-gray.h	/^    bool prev()$/;"	f	class:mixedradix_gray	access:public	signature:()
mixedradix_gray::print	src/comb/mixedradix-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gray	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gray::print_nines	src/comb/mixedradix-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gray	access:public	signature:(const char *bla) const
mixedradix_gray::to_num	src/comb/mixedradix-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gray	access:public	signature:() const
mixedradix_gray::~mixedradix_gray	src/comb/mixedradix-gray.h	/^    ~mixedradix_gray()$/;"	f	class:mixedradix_gray	access:public	signature:()
mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    explicit mixedradix_gslex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    mixedradix_gslex(const mixedradix_gslex&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex	access:private	signature:(const mixedradix_gslex&)
mixedradix_gslex	src/comb/mixedradix-gslex.h	/^class mixedradix_gslex$/;"	c
mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    explicit mixedradix_gslex2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    mixedradix_gslex2(const mixedradix_gslex2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex2	access:private	signature:(const mixedradix_gslex2&)
mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^class mixedradix_gslex2$/;"	c
mixedradix_gslex2::OK	src/comb/mixedradix-gslex2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
mixedradix_gslex2::a_	src/comb/mixedradix-gslex2.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:mixedradix_gslex2	access:public
mixedradix_gslex2::data	src/comb/mixedradix-gslex2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
mixedradix_gslex2::first	src/comb/mixedradix-gslex2.h	/^    void first()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
mixedradix_gslex2::m1_	src/comb/mixedradix-gslex2.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex2	access:public
mixedradix_gslex2::mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    explicit mixedradix_gslex2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex2::mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    mixedradix_gslex2(const mixedradix_gslex2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex2	access:private	signature:(const mixedradix_gslex2&)
mixedradix_gslex2::n_	src/comb/mixedradix-gslex2.h	/^    ulong n_;    \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex2	access:public
mixedradix_gslex2::next	src/comb/mixedradix-gslex2.h	/^    ulong next()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
mixedradix_gslex2::operator =	src/comb/mixedradix-gslex2.h	/^    mixedradix_gslex2 & operator = (const mixedradix_gslex2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex2	access:private	signature:(const mixedradix_gslex2&)
mixedradix_gslex2::print	src/comb/mixedradix-gslex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex2	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gslex2::print_nines	src/comb/mixedradix-gslex2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex2	access:public	signature:(const char *bla) const
mixedradix_gslex2::to_num	src/comb/mixedradix-gslex2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
mixedradix_gslex2::tr_	src/comb/mixedradix-gslex2.h	/^    ulong tr_;   \/\/ current track$/;"	m	class:mixedradix_gslex2	access:public
mixedradix_gslex2::~mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    ~mixedradix_gslex2()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
mixedradix_gslex::OK	src/comb/mixedradix-gslex.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex	access:public	signature:() const
mixedradix_gslex::a_	src/comb/mixedradix-gslex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_gslex	access:public
mixedradix_gslex::data	src/comb/mixedradix-gslex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex	access:public	signature:() const
mixedradix_gslex::first	src/comb/mixedradix-gslex.h	/^    void first()$/;"	f	class:mixedradix_gslex	access:public	signature:()
mixedradix_gslex::last	src/comb/mixedradix-gslex.h	/^    void last()$/;"	f	class:mixedradix_gslex	access:public	signature:()
mixedradix_gslex::m1_	src/comb/mixedradix-gslex.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex	access:public
mixedradix_gslex::mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    explicit mixedradix_gslex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex::mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    mixedradix_gslex(const mixedradix_gslex&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex	access:private	signature:(const mixedradix_gslex&)
mixedradix_gslex::n_	src/comb/mixedradix-gslex.h	/^    ulong n_;   \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex	access:public
mixedradix_gslex::next	src/comb/mixedradix-gslex.h	/^    bool next()$/;"	f	class:mixedradix_gslex	access:public	signature:()
mixedradix_gslex::operator =	src/comb/mixedradix-gslex.h	/^    mixedradix_gslex & operator = (const mixedradix_gslex&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex	access:private	signature:(const mixedradix_gslex&)
mixedradix_gslex::prev	src/comb/mixedradix-gslex.h	/^    bool prev()$/;"	f	class:mixedradix_gslex	access:public	signature:()
mixedradix_gslex::print	src/comb/mixedradix-gslex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gslex::print_nines	src/comb/mixedradix-gslex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex	access:public	signature:(const char *bla) const
mixedradix_gslex::to_num	src/comb/mixedradix-gslex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex	access:public	signature:() const
mixedradix_gslex::~mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    ~mixedradix_gslex()$/;"	f	class:mixedradix_gslex	access:public	signature:()
mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    explicit mixedradix_gslex_alt(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    mixedradix_gslex_alt(const mixedradix_gslex_alt&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt	access:private	signature:(const mixedradix_gslex_alt&)
mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^class mixedradix_gslex_alt$/;"	c
mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    explicit mixedradix_gslex_alt2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    mixedradix_gslex_alt2(const mixedradix_gslex_alt2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt2	access:private	signature:(const mixedradix_gslex_alt2&)
mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^class mixedradix_gslex_alt2$/;"	c
mixedradix_gslex_alt2::OK	src/comb/mixedradix-gslex-alt2.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:() const
mixedradix_gslex_alt2::a_	src/comb/mixedradix-gslex-alt2.h	/^    ulong *a_;  \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_gslex_alt2	access:public
mixedradix_gslex_alt2::data	src/comb/mixedradix-gslex-alt2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:() const
mixedradix_gslex_alt2::first	src/comb/mixedradix-gslex-alt2.h	/^    void first()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
mixedradix_gslex_alt2::last	src/comb/mixedradix-gslex-alt2.h	/^    void last()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
mixedradix_gslex_alt2::m1_	src/comb/mixedradix-gslex-alt2.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_gslex_alt2	access:public
mixedradix_gslex_alt2::mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    explicit mixedradix_gslex_alt2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex_alt2::mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    mixedradix_gslex_alt2(const mixedradix_gslex_alt2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt2	access:private	signature:(const mixedradix_gslex_alt2&)
mixedradix_gslex_alt2::n_	src/comb/mixedradix-gslex-alt2.h	/^    ulong n_;   \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_gslex_alt2	access:public
mixedradix_gslex_alt2::next	src/comb/mixedradix-gslex-alt2.h	/^    bool next()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
mixedradix_gslex_alt2::operator =	src/comb/mixedradix-gslex-alt2.h	/^    mixedradix_gslex_alt2 & operator = (const mixedradix_gslex_alt2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt2	access:private	signature:(const mixedradix_gslex_alt2&)
mixedradix_gslex_alt2::prev	src/comb/mixedradix-gslex-alt2.h	/^    bool prev()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
mixedradix_gslex_alt2::print	src/comb/mixedradix-gslex-alt2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gslex_alt2::print_nines	src/comb/mixedradix-gslex-alt2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(const char *bla) const
mixedradix_gslex_alt2::tr_	src/comb/mixedradix-gslex-alt2.h	/^    ulong tr_;  \/\/ aux: current track$/;"	m	class:mixedradix_gslex_alt2	access:public
mixedradix_gslex_alt2::~mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    ~mixedradix_gslex_alt2()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
mixedradix_gslex_alt::OK	src/comb/mixedradix-gslex-alt.h	/^    bool OK()  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
mixedradix_gslex_alt::a_	src/comb/mixedradix-gslex-alt.h	/^    ulong *a_;  \/\/ digits,  a[-1]==~0 is a sentinel$/;"	m	class:mixedradix_gslex_alt	access:public
mixedradix_gslex_alt::data	src/comb/mixedradix-gslex-alt.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
mixedradix_gslex_alt::e_	src/comb/mixedradix-gslex-alt.h	/^    ulong e_;   \/\/ aux$/;"	m	class:mixedradix_gslex_alt	access:public
mixedradix_gslex_alt::first	src/comb/mixedradix-gslex-alt.h	/^    void first()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
mixedradix_gslex_alt::last	src/comb/mixedradix-gslex-alt.h	/^    void last()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
mixedradix_gslex_alt::m1_	src/comb/mixedradix-gslex-alt.h	/^    ulong *m1_;  \/\/ m1[k] == radix-1 at position k$/;"	m	class:mixedradix_gslex_alt	access:public
mixedradix_gslex_alt::mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    explicit mixedradix_gslex_alt(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_gslex_alt::mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    mixedradix_gslex_alt(const mixedradix_gslex_alt&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt	access:private	signature:(const mixedradix_gslex_alt&)
mixedradix_gslex_alt::n_	src/comb/mixedradix-gslex-alt.h	/^    ulong n_;   \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex_alt	access:public
mixedradix_gslex_alt::next	src/comb/mixedradix-gslex-alt.h	/^    bool next()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
mixedradix_gslex_alt::operator =	src/comb/mixedradix-gslex-alt.h	/^    mixedradix_gslex_alt & operator = (const mixedradix_gslex_alt&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt	access:private	signature:(const mixedradix_gslex_alt&)
mixedradix_gslex_alt::prev	src/comb/mixedradix-gslex-alt.h	/^    bool prev()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
mixedradix_gslex_alt::print	src/comb/mixedradix-gslex-alt.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_gslex_alt::print_nines	src/comb/mixedradix-gslex-alt.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(const char *bla) const
mixedradix_gslex_alt::to_num	src/comb/mixedradix-gslex-alt.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
mixedradix_gslex_alt::~mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    ~mixedradix_gslex_alt()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
mixedradix_init	src/comb/mixedradix-init.cc	/^mixedradix_init(ulong n, ulong mm, const ulong *m, ulong *m1)$/;"	f	signature:(ulong n, ulong mm, const ulong *m, ulong *m1)
mixedradix_init	src/comb/mixedradix.h	/^void mixedradix_init(ulong n, ulong mm, const ulong *m, ulong *m1);  \/\/ aux$/;"	p	signature:(ulong n, ulong mm, const ulong *m, ulong *m1)
mixedradix_lex	src/comb/mixedradix-lex.h	/^    explicit mixedradix_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_lex	src/comb/mixedradix-lex.h	/^    mixedradix_lex(const mixedradix_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_lex	access:private	signature:(const mixedradix_lex&)
mixedradix_lex	src/comb/mixedradix-lex.h	/^class mixedradix_lex$/;"	c
mixedradix_lex::OK	src/comb/mixedradix-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_lex	access:public	signature:() const
mixedradix_lex::a_	src/comb/mixedradix-lex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_lex	access:public
mixedradix_lex::data	src/comb/mixedradix-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_lex	access:public	signature:() const
mixedradix_lex::first	src/comb/mixedradix-lex.h	/^    void first()$/;"	f	class:mixedradix_lex	access:public	signature:()
mixedradix_lex::j_	src/comb/mixedradix-lex.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_lex	access:public
mixedradix_lex::last	src/comb/mixedradix-lex.h	/^    void last()$/;"	f	class:mixedradix_lex	access:public	signature:()
mixedradix_lex::m1_	src/comb/mixedradix-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_lex	access:public
mixedradix_lex::mixedradix_lex	src/comb/mixedradix-lex.h	/^    explicit mixedradix_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_lex::mixedradix_lex	src/comb/mixedradix-lex.h	/^    mixedradix_lex(const mixedradix_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_lex	access:private	signature:(const mixedradix_lex&)
mixedradix_lex::n_	src/comb/mixedradix-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_lex	access:public
mixedradix_lex::next	src/comb/mixedradix-lex.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_lex	access:public	signature:()
mixedradix_lex::operator =	src/comb/mixedradix-lex.h	/^    mixedradix_lex & operator = (const mixedradix_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_lex	access:private	signature:(const mixedradix_lex&)
mixedradix_lex::pos	src/comb/mixedradix-lex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_lex	access:public	signature:() const
mixedradix_lex::prev	src/comb/mixedradix-lex.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_lex	access:public	signature:()
mixedradix_lex::print	src/comb/mixedradix-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_lex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_lex::print_nines	src/comb/mixedradix-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_lex	access:public	signature:(const char *bla) const
mixedradix_lex::to_num	src/comb/mixedradix-lex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_lex	access:public	signature:() const
mixedradix_lex::~mixedradix_lex	src/comb/mixedradix-lex.h	/^    ~mixedradix_lex()$/;"	f	class:mixedradix_lex	access:public	signature:()
mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    explicit mixedradix_modular_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_modular_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    mixedradix_modular_gray(const mixedradix_modular_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray	access:private	signature:(const mixedradix_modular_gray&)
mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^class mixedradix_modular_gray$/;"	c
mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    explicit mixedradix_modular_gray2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    mixedradix_modular_gray2(const mixedradix_modular_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray2	access:private	signature:(const mixedradix_modular_gray2&)
mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^class mixedradix_modular_gray2$/;"	c
mixedradix_modular_gray2::OK	src/comb/mixedradix-modular-gray2.h	/^    bool OK()  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
mixedradix_modular_gray2::a_	src/comb/mixedradix-modular-gray2.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_modular_gray2	access:public
mixedradix_modular_gray2::data	src/comb/mixedradix-modular-gray2.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
mixedradix_modular_gray2::first	src/comb/mixedradix-modular-gray2.h	/^    void first()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
mixedradix_modular_gray2::j_	src/comb/mixedradix-modular-gray2.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_modular_gray2	access:public
mixedradix_modular_gray2::last	src/comb/mixedradix-modular-gray2.h	/^    void last()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
mixedradix_modular_gray2::m1_	src/comb/mixedradix-modular-gray2.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_modular_gray2	access:public
mixedradix_modular_gray2::mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    explicit mixedradix_modular_gray2(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_modular_gray2::mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    mixedradix_modular_gray2(const mixedradix_modular_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray2	access:private	signature:(const mixedradix_modular_gray2&)
mixedradix_modular_gray2::n_	src/comb/mixedradix-modular-gray2.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_modular_gray2	access:public
mixedradix_modular_gray2::next	src/comb/mixedradix-modular-gray2.h	/^    bool next()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
mixedradix_modular_gray2::operator =	src/comb/mixedradix-modular-gray2.h	/^    mixedradix_modular_gray2 & operator = (const mixedradix_modular_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray2	access:private	signature:(const mixedradix_modular_gray2&)
mixedradix_modular_gray2::pos	src/comb/mixedradix-modular-gray2.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
mixedradix_modular_gray2::prev	src/comb/mixedradix-modular-gray2.h	/^    bool prev()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
mixedradix_modular_gray2::print	src/comb/mixedradix-modular-gray2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_modular_gray2::print_nines	src/comb/mixedradix-modular-gray2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(const char *bla) const
mixedradix_modular_gray2::to_num	src/comb/mixedradix-modular-gray2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
mixedradix_modular_gray2::x_	src/comb/mixedradix-modular-gray2.h	/^    ulong *x_;  \/\/ count changes of digit$/;"	m	class:mixedradix_modular_gray2	access:public
mixedradix_modular_gray2::~mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    ~mixedradix_modular_gray2()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
mixedradix_modular_gray::OK	src/comb/mixedradix-modular-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
mixedradix_modular_gray::a_	src/comb/mixedradix-modular-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::data	src/comb/mixedradix-modular-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
mixedradix_modular_gray::f_	src/comb/mixedradix-modular-gray.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::first	src/comb/mixedradix-modular-gray.h	/^    void first()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
mixedradix_modular_gray::j_	src/comb/mixedradix-modular-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::m1_	src/comb/mixedradix-modular-gray.h	/^    ulong *m1_;  \/\/ radix minus one ('nines')$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    explicit mixedradix_modular_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_modular_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_modular_gray::mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    mixedradix_modular_gray(const mixedradix_modular_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray	access:private	signature:(const mixedradix_modular_gray&)
mixedradix_modular_gray::n_	src/comb/mixedradix-modular-gray.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::next	src/comb/mixedradix-modular-gray.h	/^    bool next()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
mixedradix_modular_gray::operator =	src/comb/mixedradix-modular-gray.h	/^    mixedradix_modular_gray & operator = (const mixedradix_modular_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray	access:private	signature:(const mixedradix_modular_gray&)
mixedradix_modular_gray::pos	src/comb/mixedradix-modular-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
mixedradix_modular_gray::print	src/comb/mixedradix-modular-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_modular_gray::print_nines	src/comb/mixedradix-modular-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:(const char *bla) const
mixedradix_modular_gray::s_	src/comb/mixedradix-modular-gray.h	/^    ulong *s_;  \/\/ direction$/;"	m	class:mixedradix_modular_gray	access:public
mixedradix_modular_gray::to_num	src/comb/mixedradix-modular-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
mixedradix_modular_gray::~mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    ~mixedradix_modular_gray()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
mixedradix_naf	src/comb/mixedradix-naf.h	/^    explicit mixedradix_naf(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf	src/comb/mixedradix-naf.h	/^    mixedradix_naf(const mixedradix_naf&);  \/\/ forbidden$/;"	p	class:mixedradix_naf	access:private	signature:(const mixedradix_naf&)
mixedradix_naf	src/comb/mixedradix-naf.h	/^class mixedradix_naf$/;"	c
mixedradix_naf::OK	src/comb/mixedradix-naf.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf	access:public	signature:() const
mixedradix_naf::a_	src/comb/mixedradix-naf.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_naf	access:public
mixedradix_naf::can_incr_q	src/comb/mixedradix-naf.h	/^    bool can_incr_q(ulong j)  const$/;"	f	class:mixedradix_naf	access:private	signature:(ulong j) const
mixedradix_naf::data	src/comb/mixedradix-naf.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf	access:public	signature:() const
mixedradix_naf::first	src/comb/mixedradix-naf.h	/^    void first()$/;"	f	class:mixedradix_naf	access:public	signature:()
mixedradix_naf::j_	src/comb/mixedradix-naf.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_naf	access:public
mixedradix_naf::last	src/comb/mixedradix-naf.h	/^    void last()$/;"	f	class:mixedradix_naf	access:public	signature:()
mixedradix_naf::m1_	src/comb/mixedradix-naf.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf	access:public
mixedradix_naf::mixedradix_naf	src/comb/mixedradix-naf.h	/^    explicit mixedradix_naf(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf::mixedradix_naf	src/comb/mixedradix-naf.h	/^    mixedradix_naf(const mixedradix_naf&);  \/\/ forbidden$/;"	p	class:mixedradix_naf	access:private	signature:(const mixedradix_naf&)
mixedradix_naf::n_	src/comb/mixedradix-naf.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_naf	access:public
mixedradix_naf::next	src/comb/mixedradix-naf.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_naf	access:public	signature:()
mixedradix_naf::operator =	src/comb/mixedradix-naf.h	/^    mixedradix_naf & operator = (const mixedradix_naf&);  \/\/ forbidden$/;"	p	class:mixedradix_naf	access:private	signature:(const mixedradix_naf&)
mixedradix_naf::pos	src/comb/mixedradix-naf.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_naf	access:public	signature:() const
mixedradix_naf::prev	src/comb/mixedradix-naf.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_naf	access:public	signature:()
mixedradix_naf::print	src/comb/mixedradix-naf.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_naf::print_nines	src/comb/mixedradix-naf.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf	access:public	signature:(const char *bla) const
mixedradix_naf::set_sentinels	src/comb/mixedradix-naf.h	/^    void set_sentinels()$/;"	f	class:mixedradix_naf	access:private	signature:()
mixedradix_naf::to_num	src/comb/mixedradix-naf.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf	access:public	signature:() const
mixedradix_naf::~mixedradix_naf	src/comb/mixedradix-naf.h	/^    ~mixedradix_naf()$/;"	f	class:mixedradix_naf	access:public	signature:()
mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    explicit mixedradix_naf_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    mixedradix_naf_gray(const mixedradix_naf_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_gray	access:private	signature:(const mixedradix_naf_gray&)
mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^class mixedradix_naf_gray$/;"	c
mixedradix_naf_gray::OK	src/comb/mixedradix-naf-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
mixedradix_naf_gray::a_	src/comb/mixedradix-naf-gray.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::can_decr_q	src/comb/mixedradix-naf-gray.h	/^    bool can_decr_q(ulong j)  const$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong j) const
mixedradix_naf_gray::can_incr_q	src/comb/mixedradix-naf-gray.h	/^    bool can_incr_q(ulong j)  const$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong j) const
mixedradix_naf_gray::d_	src/comb/mixedradix-naf-gray.h	/^    ulong *d_;  \/\/ directions, or zero for track fixed at zero$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::data	src/comb/mixedradix-naf-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
mixedradix_naf_gray::dir	src/comb/mixedradix-naf-gray.h	/^    int dir()  const  { return dm_; }  \/\/ direction of last change$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
mixedradix_naf_gray::dm_	src/comb/mixedradix-naf-gray.h	/^    int dm_;    \/\/ direction of last change$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::first	src/comb/mixedradix-naf-gray.h	/^    void first()  { init_vals(+1); }$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
mixedradix_naf_gray::init_vals	src/comb/mixedradix-naf-gray.h	/^    void init_vals(ulong dd)$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong dd)
mixedradix_naf_gray::is_odd	src/comb/mixedradix-naf-gray.h	/^    bool is_odd(ulong x)  const  { return (x & 1) != 0; }$/;"	f	class:mixedradix_naf_gray	access:private	signature:(ulong x) const
mixedradix_naf_gray::j_	src/comb/mixedradix-naf-gray.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::last	src/comb/mixedradix-naf-gray.h	/^    void last()  { init_vals(-1UL); }$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
mixedradix_naf_gray::m1_	src/comb/mixedradix-naf-gray.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    explicit mixedradix_naf_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf_gray::mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    mixedradix_naf_gray(const mixedradix_naf_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_gray	access:private	signature:(const mixedradix_naf_gray&)
mixedradix_naf_gray::n_	src/comb/mixedradix-naf-gray.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_naf_gray	access:public
mixedradix_naf_gray::next	src/comb/mixedradix-naf-gray.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
mixedradix_naf_gray::operator =	src/comb/mixedradix-naf-gray.h	/^    mixedradix_naf_gray & operator = (const mixedradix_naf_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_gray	access:private	signature:(const mixedradix_naf_gray&)
mixedradix_naf_gray::pos	src/comb/mixedradix-naf-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
mixedradix_naf_gray::prev	src/comb/mixedradix-naf-gray.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
mixedradix_naf_gray::print	src/comb/mixedradix-naf-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_naf_gray::print_nines	src/comb/mixedradix-naf-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:(const char *bla) const
mixedradix_naf_gray::set_sentinels	src/comb/mixedradix-naf-gray.h	/^    void set_sentinels()$/;"	f	class:mixedradix_naf_gray	access:private	signature:()
mixedradix_naf_gray::to_num	src/comb/mixedradix-naf-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
mixedradix_naf_gray::~mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    ~mixedradix_naf_gray()$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    explicit mixedradix_naf_subset_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    mixedradix_naf_subset_lex(const mixedradix_naf_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_subset_lex	access:private	signature:(const mixedradix_naf_subset_lex&)
mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^class mixedradix_naf_subset_lex$/;"	c
mixedradix_naf_subset_lex::OK	src/comb/mixedradix-naf-subset-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
mixedradix_naf_subset_lex::a_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *a_;    \/\/ Digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
mixedradix_naf_subset_lex::data	src/comb/mixedradix-naf-subset-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
mixedradix_naf_subset_lex::first	src/comb/mixedradix-naf-subset-lex.h	/^    void first()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
mixedradix_naf_subset_lex::iset	src/comb/mixedradix-naf-subset-lex.h	/^    const ulong * iset()  const  { return iset_; }$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
mixedradix_naf_subset_lex::iset_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *iset_;  \/\/ Set of positions of nonzero digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
mixedradix_naf_subset_lex::iset_size	src/comb/mixedradix-naf-subset-lex.h	/^    ulong iset_size()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
mixedradix_naf_subset_lex::last	src/comb/mixedradix-naf-subset-lex.h	/^    void last()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
mixedradix_naf_subset_lex::m1_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong *m1_;   \/\/ Nines (radix minus one) for each digit$/;"	m	class:mixedradix_naf_subset_lex	access:public
mixedradix_naf_subset_lex::mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    explicit mixedradix_naf_subset_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_naf_subset_lex::mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    mixedradix_naf_subset_lex(const mixedradix_naf_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_subset_lex	access:private	signature:(const mixedradix_naf_subset_lex&)
mixedradix_naf_subset_lex::n_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong n_;     \/\/ Number of digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
mixedradix_naf_subset_lex::next	src/comb/mixedradix-naf-subset-lex.h	/^    bool next()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
mixedradix_naf_subset_lex::ni_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong ni_;    \/\/ Number of elements in iset[]$/;"	m	class:mixedradix_naf_subset_lex	access:public
mixedradix_naf_subset_lex::operator =	src/comb/mixedradix-naf-subset-lex.h	/^    mixedradix_naf_subset_lex & operator = (const mixedradix_naf_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_subset_lex	access:private	signature:(const mixedradix_naf_subset_lex&)
mixedradix_naf_subset_lex::prev	src/comb/mixedradix-naf-subset-lex.h	/^    bool prev()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
mixedradix_naf_subset_lex::print	src/comb/mixedradix-naf-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_naf_subset_lex::print_nines	src/comb/mixedradix-naf-subset-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(const char *bla) const
mixedradix_naf_subset_lex::to_num	src/comb/mixedradix-naf-subset-lex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
mixedradix_naf_subset_lex::~mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    ~mixedradix_naf_subset_lex()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    explicit mixedradix_restrpref(ulong n, ulong mm, const ulong *m,$/;"	f	class:mixedradix_restrpref	access:public	signature:(ulong n, ulong mm, const ulong *m, cond_func cnd)
mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    mixedradix_restrpref(const mixedradix_restrpref&);  \/\/ forbidden$/;"	p	class:mixedradix_restrpref	access:private	signature:(const mixedradix_restrpref&)
mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^class mixedradix_restrpref$/;"	c
mixedradix_restrpref::OK	src/comb/mixedradix-restrpref.h	/^    bool OK()  const$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
mixedradix_restrpref::a_	src/comb/mixedradix-restrpref.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::cond	src/comb/mixedradix-restrpref.h	/^    cond_func cond;  \/\/ condition function$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::cond_func	src/comb/mixedradix-restrpref.h	/^    typedef bool (* cond_func)(const ulong*, ulong);$/;"	t	class:mixedradix_restrpref	access:public
mixedradix_restrpref::data	src/comb/mixedradix-restrpref.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
mixedradix_restrpref::first	src/comb/mixedradix-restrpref.h	/^    void first( cond_func cnd = 0 )$/;"	f	class:mixedradix_restrpref	access:public	signature:( cond_func cnd = 0 )
mixedradix_restrpref::j_	src/comb/mixedradix-restrpref.h	/^    ulong j_;    \/\/ position of last change$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::m1_	src/comb/mixedradix-restrpref.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    explicit mixedradix_restrpref(ulong n, ulong mm, const ulong *m,$/;"	f	class:mixedradix_restrpref	access:public	signature:(ulong n, ulong mm, const ulong *m, cond_func cnd)
mixedradix_restrpref::mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    mixedradix_restrpref(const mixedradix_restrpref&);  \/\/ forbidden$/;"	p	class:mixedradix_restrpref	access:private	signature:(const mixedradix_restrpref&)
mixedradix_restrpref::n_	src/comb/mixedradix-restrpref.h	/^    ulong n_;    \/\/ number of digits$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::next	src/comb/mixedradix-restrpref.h	/^    bool next()$/;"	f	class:mixedradix_restrpref	access:public	signature:()
mixedradix_restrpref::operator =	src/comb/mixedradix-restrpref.h	/^    mixedradix_restrpref & operator = (const mixedradix_restrpref&);  \/\/ forbidden$/;"	p	class:mixedradix_restrpref	access:private	signature:(const mixedradix_restrpref&)
mixedradix_restrpref::pos	src/comb/mixedradix-restrpref.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
mixedradix_restrpref::print	src/comb/mixedradix-restrpref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_restrpref	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_restrpref::print_nines	src/comb/mixedradix-restrpref.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_restrpref	access:public	signature:(const char *bla) const
mixedradix_restrpref::to_num	src/comb/mixedradix-restrpref.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
mixedradix_restrpref::valid	src/comb/mixedradix-restrpref.h	/^    bool valid()  const { return  vld_; }$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
mixedradix_restrpref::vld_	src/comb/mixedradix-restrpref.h	/^    bool vld_;   \/\/ whether current word is valid$/;"	m	class:mixedradix_restrpref	access:public
mixedradix_restrpref::~mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    ~mixedradix_restrpref()$/;"	f	class:mixedradix_restrpref	access:public	signature:()
mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    explicit mixedradix_rfact(ulong n)$/;"	f	class:mixedradix_rfact	access:public	signature:(ulong n)
mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    mixedradix_rfact(const mixedradix_rfact&);  \/\/ forbidden$/;"	p	class:mixedradix_rfact	access:private	signature:(const mixedradix_rfact&)
mixedradix_rfact	src/comb/mixedradix-rfact.h	/^class mixedradix_rfact$/;"	c
mixedradix_rfact::a_	src/comb/mixedradix-rfact.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_rfact	access:public
mixedradix_rfact::data	src/comb/mixedradix-rfact.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_rfact	access:public	signature:() const
mixedradix_rfact::first	src/comb/mixedradix-rfact.h	/^    void first()$/;"	f	class:mixedradix_rfact	access:public	signature:()
mixedradix_rfact::j_	src/comb/mixedradix-rfact.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:mixedradix_rfact	access:public
mixedradix_rfact::last	src/comb/mixedradix-rfact.h	/^    void last()$/;"	f	class:mixedradix_rfact	access:public	signature:()
mixedradix_rfact::mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    explicit mixedradix_rfact(ulong n)$/;"	f	class:mixedradix_rfact	access:public	signature:(ulong n)
mixedradix_rfact::mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    mixedradix_rfact(const mixedradix_rfact&);  \/\/ forbidden$/;"	p	class:mixedradix_rfact	access:private	signature:(const mixedradix_rfact&)
mixedradix_rfact::n_	src/comb/mixedradix-rfact.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_rfact	access:public
mixedradix_rfact::next	src/comb/mixedradix-rfact.h	/^    ulong next()$/;"	f	class:mixedradix_rfact	access:public	signature:()
mixedradix_rfact::operator =	src/comb/mixedradix-rfact.h	/^    mixedradix_rfact & operator = (const mixedradix_rfact&);  \/\/ forbidden$/;"	p	class:mixedradix_rfact	access:private	signature:(const mixedradix_rfact&)
mixedradix_rfact::pos	src/comb/mixedradix-rfact.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_rfact	access:public	signature:() const
mixedradix_rfact::prev	src/comb/mixedradix-rfact.h	/^    ulong prev()$/;"	f	class:mixedradix_rfact	access:public	signature:()
mixedradix_rfact::print	src/comb/mixedradix-rfact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_rfact	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_rfact::~mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    ~mixedradix_rfact()$/;"	f	class:mixedradix_rfact	access:public	signature:()
mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    explicit mixedradix_sl_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_sl_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    mixedradix_sl_gray(const mixedradix_sl_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_sl_gray	access:private	signature:(const mixedradix_sl_gray&)
mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^class mixedradix_sl_gray$/;"	c
mixedradix_sl_gray::OK	src/comb/mixedradix-sl-gray.h	/^    bool OK()  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
mixedradix_sl_gray::a_	src/comb/mixedradix-sl-gray.h	/^    ulong *a_;   \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::d_	src/comb/mixedradix-sl-gray.h	/^    ulong *d_;   \/\/ directions (either +1 or -1)$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::data	src/comb/mixedradix-sl-gray.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
mixedradix_sl_gray::dir	src/comb/mixedradix-sl-gray.h	/^    int dir()  const  { return dm_; }   \/\/ direction of last change$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
mixedradix_sl_gray::dm_	src/comb/mixedradix-sl-gray.h	/^    int dm_;     \/\/ direction of last change; returned by dir()$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::first	src/comb/mixedradix-sl-gray.h	/^    void first()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
mixedradix_sl_gray::j_	src/comb/mixedradix-sl-gray.h	/^    ulong j_;    \/\/ position of last change; returned by pos()$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::m1_	src/comb/mixedradix-sl-gray.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    explicit mixedradix_sl_gray(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_sl_gray	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_sl_gray::mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    mixedradix_sl_gray(const mixedradix_sl_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_sl_gray	access:private	signature:(const mixedradix_sl_gray&)
mixedradix_sl_gray::n_	src/comb/mixedradix-sl-gray.h	/^    ulong n_;    \/\/ Number of digits (n kinds of elements in multiset, n>=1)$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::next	src/comb/mixedradix-sl-gray.h	/^    bool next()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
mixedradix_sl_gray::operator =	src/comb/mixedradix-sl-gray.h	/^    mixedradix_sl_gray & operator = (const mixedradix_sl_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_sl_gray	access:private	signature:(const mixedradix_sl_gray&)
mixedradix_sl_gray::pos	src/comb/mixedradix-sl-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
mixedradix_sl_gray::print	src/comb/mixedradix-sl-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_sl_gray::print_nines	src/comb/mixedradix-sl-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:(const char *bla) const
mixedradix_sl_gray::tr_	src/comb/mixedradix-sl-gray.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:mixedradix_sl_gray	access:public
mixedradix_sl_gray::~mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    ~mixedradix_sl_gray()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    explicit mixedradix_sod_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_sod_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    mixedradix_sod_lex(const mixedradix_sod_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_sod_lex	access:private	signature:(const mixedradix_sod_lex&)
mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^class mixedradix_sod_lex$/;"	c
mixedradix_sod_lex::OK	src/comb/mixedradix-sod-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
mixedradix_sod_lex::a_	src/comb/mixedradix-sod-lex.h	/^    ulong *a_;  \/\/ digits$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::a_	src/comb/mixedradix-sod-lex.h	/^    ulong a_[MIXEDRADIX_SOD_LEX_MAX_ARRAY_LEN+2];$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::data	src/comb/mixedradix-sod-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
mixedradix_sod_lex::first	src/comb/mixedradix-sod-lex.h	/^    bool first(ulong k)$/;"	f	class:mixedradix_sod_lex	access:public	signature:(ulong k)
mixedradix_sod_lex::j_	src/comb/mixedradix-sod-lex.h	/^    ulong j_;   \/\/ rightmost position of last change$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::m1_	src/comb/mixedradix-sod-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::m1_	src/comb/mixedradix-sod-lex.h	/^    ulong m1_[MIXEDRADIX_SOD_LEX_MAX_ARRAY_LEN+2];$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    explicit mixedradix_sod_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_sod_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_sod_lex::mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    mixedradix_sod_lex(const mixedradix_sod_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_sod_lex	access:private	signature:(const mixedradix_sod_lex&)
mixedradix_sod_lex::n_	src/comb/mixedradix-sod-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::next	src/comb/mixedradix-sod-lex.h	/^    bool next()$/;"	f	class:mixedradix_sod_lex	access:public	signature:()
mixedradix_sod_lex::operator =	src/comb/mixedradix-sod-lex.h	/^    mixedradix_sod_lex & operator = (const mixedradix_sod_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_sod_lex	access:private	signature:(const mixedradix_sod_lex&)
mixedradix_sod_lex::pos	src/comb/mixedradix-sod-lex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
mixedradix_sod_lex::print	src/comb/mixedradix-sod-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_sod_lex::print_as_combination	src/comb/mixedradix-sod-lex.h	/^    void print_as_combination(const char *bla)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla) const
mixedradix_sod_lex::print_nines	src/comb/mixedradix-sod-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla) const
mixedradix_sod_lex::s_	src/comb/mixedradix-sod-lex.h	/^    ulong s_;   \/\/ Sum of digits$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::sm_	src/comb/mixedradix-sod-lex.h	/^    ulong sm_;  \/\/ sum of digits (arg s with first())$/;"	m	class:mixedradix_sod_lex	access:public
mixedradix_sod_lex::~mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    ~mixedradix_sod_lex()$/;"	f	class:mixedradix_sod_lex	access:public	signature:()
mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    explicit mixedradix_subset_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_subset_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    mixedradix_subset_lex(const mixedradix_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lex	access:private	signature:(const mixedradix_subset_lex&)
mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^class mixedradix_subset_lex$/;"	c
mixedradix_subset_lex::OK	src/comb/mixedradix-subset-lex.h	/^    bool OK()  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
mixedradix_subset_lex::a_	src/comb/mixedradix-subset-lex.h	/^    ulong *a_;   \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_subset_lex	access:public
mixedradix_subset_lex::card	src/comb/mixedradix-subset-lex.h	/^    ulong card()  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
mixedradix_subset_lex::data	src/comb/mixedradix-subset-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_subset_lex	access:public	signature:() const
mixedradix_subset_lex::first	src/comb/mixedradix-subset-lex.h	/^    void first()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
mixedradix_subset_lex::last	src/comb/mixedradix-subset-lex.h	/^    void last()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
mixedradix_subset_lex::m1_	src/comb/mixedradix-subset-lex.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_subset_lex	access:public
mixedradix_subset_lex::mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    explicit mixedradix_subset_lex(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_subset_lex	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_subset_lex::mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    mixedradix_subset_lex(const mixedradix_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lex	access:private	signature:(const mixedradix_subset_lex&)
mixedradix_subset_lex::n_	src/comb/mixedradix-subset-lex.h	/^    ulong n_;    \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_subset_lex	access:public
mixedradix_subset_lex::next	src/comb/mixedradix-subset-lex.h	/^    bool next()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
mixedradix_subset_lex::operator =	src/comb/mixedradix-subset-lex.h	/^    mixedradix_subset_lex & operator = (const mixedradix_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lex	access:private	signature:(const mixedradix_subset_lex&)
mixedradix_subset_lex::prev	src/comb/mixedradix-subset-lex.h	/^    bool prev()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
mixedradix_subset_lex::print	src/comb/mixedradix-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_subset_lex::print_nines	src/comb/mixedradix-subset-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:(const char *bla) const
mixedradix_subset_lex::tr_	src/comb/mixedradix-subset-lex.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:mixedradix_subset_lex	access:public
mixedradix_subset_lex::~mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    ~mixedradix_subset_lex()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    explicit mixedradix_subset_lexrev(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    mixedradix_subset_lexrev(const mixedradix_subset_lexrev&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lexrev	access:private	signature:(const mixedradix_subset_lexrev&)
mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^class mixedradix_subset_lexrev$/;"	c
mixedradix_subset_lexrev::OK	src/comb/mixedradix-subset-lexrev.h	/^    bool OK()  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:() const
mixedradix_subset_lexrev::a_	src/comb/mixedradix-subset-lexrev.h	/^    ulong *a_;  \/\/ digits of mixed radix number (multiplicity of kind k in subset).$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::a_	src/comb/mixedradix-subset-lexrev.h	/^    ulong a_[64];$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::data	src/comb/mixedradix-subset-lexrev.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:() const
mixedradix_subset_lexrev::first	src/comb/mixedradix-subset-lexrev.h	/^    void first()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
mixedradix_subset_lexrev::last	src/comb/mixedradix-subset-lexrev.h	/^    void last()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
mixedradix_subset_lexrev::m1_	src/comb/mixedradix-subset-lexrev.h	/^    ulong *m1_;  \/\/ nines (radix minus one) for each digit (multiplicity of kind k in superset).$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::m1_	src/comb/mixedradix-subset-lexrev.h	/^    ulong m1_[64];$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    explicit mixedradix_subset_lexrev(ulong n, ulong mm, const ulong *m=0)$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(ulong n, ulong mm, const ulong *m=0)
mixedradix_subset_lexrev::mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    mixedradix_subset_lexrev(const mixedradix_subset_lexrev&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lexrev	access:private	signature:(const mixedradix_subset_lexrev&)
mixedradix_subset_lexrev::n_	src/comb/mixedradix-subset-lexrev.h	/^    ulong n_;   \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::next	src/comb/mixedradix-subset-lexrev.h	/^    bool next()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
mixedradix_subset_lexrev::operator =	src/comb/mixedradix-subset-lexrev.h	/^    mixedradix_subset_lexrev & operator = (const mixedradix_subset_lexrev&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lexrev	access:private	signature:(const mixedradix_subset_lexrev&)
mixedradix_subset_lexrev::prev	src/comb/mixedradix-subset-lexrev.h	/^    bool prev()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
mixedradix_subset_lexrev::print	src/comb/mixedradix-subset-lexrev.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(const char *bla, bool dfz=false) const
mixedradix_subset_lexrev::print_nines	src/comb/mixedradix-subset-lexrev.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(const char *bla) const
mixedradix_subset_lexrev::tr_	src/comb/mixedradix-subset-lexrev.h	/^    ulong tr_;  \/\/ aux: current track$/;"	m	class:mixedradix_subset_lexrev	access:public
mixedradix_subset_lexrev::~mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    ~mixedradix_subset_lexrev()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
mknndep	scripts/whodep.sh	/^        mknndep;$/;"	v
mknndep	scripts/whodep.sh	/^    mknndep;$/;"	v
ml_	src/comb/partition-binary-asc.h	/^    ulong ml_;  \/\/ last m (== Hamming weight of n)$/;"	m	class:partition_binary_asc	access:public
ml_	src/comb/partition-binary-desc.h	/^    ulong ml_;  \/\/ last m (== Hamming weight of n)$/;"	m	class:partition_binary_desc	access:public
mm	demo/mod/modinfo-demo.cc	/^umod_t mm[] = {$/;"	v
mm	demo/sort/equivclass-bitstring-demo.cc	/^static ulong mm;  \/\/ mask to complement$/;"	v	file:
mm	demo/sort/equivclass-bracelets-demo.cc	/^static ulong mm;  \/\/ mask to complement$/;"	v	file:
mm	demo/sort/equivclass-necklaces-demo.cc	/^static ulong mm;  \/\/ mask to complement$/;"	v	file:
mm_	src/bits/bit-necklace.h	/^    ulong mm_;  \/\/ mask of n ones$/;"	m	class:bit_necklace	access:public
mm_	src/bpol/gf2n.cc	/^ulong GF2n::mm_ = 0;  \/\/ 2**n - 1 == max order$/;"	m	class:GF2n	file:
mm_	src/bpol/gf2n.h	/^    static ulong mm_;  \/\/ 2**n - 1 == max order (a Mersenne number)$/;"	m	class:GF2n	access:public
mm_	src/comb/partition-dist-asc-len.h	/^    ulong mm_;   \/\/ max number of parts$/;"	m	class:partition_dist_asc_len	access:public
mmult	src/matrix/attic/mmult.h	/^void mmult(const matrix<Type> &a1, const matrix<Type> &a2, matrix<Type> &z)$/;"	f	signature:(const matrix<Type> &a1, const matrix<Type> &a2, matrix<Type> &z)
mmultby	src/matrix/attic/mmult.h	/^void mmultby(matrix<Type> &a, const matrix<Type> &b)$/;"	f	signature:(matrix<Type> &a, const matrix<Type> &b)
mmultbytr2	src/matrix/attic/mmult.h	/^void mmultbytr2(matrix<Type> &a, const matrix<Type> &b)$/;"	f	signature:(matrix<Type> &a, const matrix<Type> &b)
mod	src/mod/mod.h	/^    explicit mod()$/;"	f	class:mod	access:public	signature:()
mod	src/mod/mod.h	/^    explicit mod(const umod_t i)$/;"	f	class:mod	access:public	signature:(const umod_t i)
mod	src/mod/mod.h	/^    mod(const mod &m) : x_(m.x_)  { ; }$/;"	f	class:mod	access:public	signature:(const mod &m)
mod	src/mod/mod.h	/^class mod$/;"	c
mod::cos	src/mod/mod.cc	/^mod  * mod::cos = 0;$/;"	m	class:mod	file:
mod::cos	src/mod/mod.h	/^    static mod *cos, *isin;  \/\/ [max2pow+1];   \/\/ cos\/i*sin corresponding to root_2pow$/;"	m	class:mod	access:public
mod::cos2pow	src/mod/mod.cc	/^mod::cos2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
mod::cos2pow	src/mod/mod.h	/^    static mod cos2pow(int ldorder);  \/\/ cos of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
mod::cosm	src/mod/mod.cc	/^mod  * mod::cosm = 0;$/;"	m	class:mod	file:
mod::cosm	src/mod/mod.h	/^    static mod *cosm, *isinm;  \/\/ [max2pow+1];  \/\/ cos\/sin corresponding to root_m2pow$/;"	m	class:mod	access:public
mod::init	src/mod/mod.cc	/^mod::init(umod_t m, factorization *mf\/*=0*\/)$/;"	f	class:mod	signature:(umod_t m, factorization *mf )
mod::init	src/mod/mod.h	/^    static bool init(umod_t m, factorization *mf=0);$/;"	p	class:mod	access:public	signature:(umod_t m, factorization *mf=0)
mod::inv	src/mod/mod.h	/^    mod inv() const$/;"	f	class:mod	access:public	signature:() const
mod::isin	src/mod/mod.cc	/^mod  * mod::isin = 0;$/;"	m	class:mod	file:
mod::isin	src/mod/mod.h	/^    static mod *cos, *isin;  \/\/ [max2pow+1];   \/\/ cos\/i*sin corresponding to root_2pow$/;"	m	class:mod	access:public
mod::isin2pow	src/mod/mod.cc	/^mod::isin2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
mod::isin2pow	src/mod/mod.h	/^    static mod isin2pow(int ldorder);  \/\/ i*sin of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
mod::isinm	src/mod/mod.cc	/^mod  * mod::isinm = 0;$/;"	m	class:mod	file:
mod::isinm	src/mod/mod.h	/^    static mod *cosm, *isinm;  \/\/ [max2pow+1];  \/\/ cos\/sin corresponding to root_m2pow$/;"	m	class:mod	access:public
mod::m1dd	src/mod/mod.cc	/^long double     mod::m1dd = 0.0;$/;"	m	class:mod	file:
mod::m1dd	src/mod/mod.h	/^    static long double m1dd;          \/\/ 1.0\/modulus (for multiplication)$/;"	m	class:mod	access:public
mod::max2pow	src/mod/mod.cc	/^uint            mod::max2pow = 0;$/;"	m	class:mod	file:
mod::max2pow	src/mod/mod.h	/^    static uint max2pow;       \/\/ root of order 2**ldn exists for ldn<=max2pow$/;"	m	class:mod	access:public
mod::maxordelem	src/mod/mod.cc	/^mod    mod::maxordelem;$/;"	m	class:mod	file:
mod::maxordelem	src/mod/mod.h	/^    static mod maxordelem;       \/\/ element of maximal order$/;"	m	class:mod	access:public
mod::maxorder	src/mod/mod.cc	/^umod_t          mod::maxorder = 0;$/;"	m	class:mod	file:
mod::maxorder	src/mod/mod.h	/^    static umod_t maxorder;       \/\/ maximal order of elements$/;"	m	class:mod	access:public
mod::mod	src/mod/mod.h	/^    explicit mod()$/;"	f	class:mod	access:public	signature:()
mod::mod	src/mod/mod.h	/^    explicit mod(const umod_t i)$/;"	f	class:mod	access:public	signature:(const umod_t i)
mod::mod	src/mod/mod.h	/^    mod(const mod &m) : x_(m.x_)  { ; }$/;"	f	class:mod	access:public	signature:(const mod &m)
mod::mod_initialize	src/mod/mod.h	/^    friend bool mod_initialize(umod_t m, umod_t *primes\/*=0*\/);$/;"	p	class:mod	access:friend	signature:(umod_t m, umod_t *primes )
mod::mod_reset	src/mod/mod.h	/^    friend void mod_reset();$/;"	p	class:mod	access:friend	signature:()
mod::modfact	src/mod/mod.cc	/^factorization   mod::modfact;$/;"	m	class:mod	file:
mod::modfact	src/mod/mod.h	/^    static factorization modfact;  \/\/ factorization of modulus$/;"	m	class:mod	access:public
mod::modulus	src/mod/mod.cc	/^umod_t          mod::modulus = 0;$/;"	m	class:mod	file:
mod::modulus	src/mod/mod.h	/^    static umod_t modulus;        \/\/ 0 <= x < modulus$/;"	m	class:mod	access:public
mod::mtab	src/mod/mod.cc	/^mod  * mod::mtab = 0;$/;"	m	class:mod	file:
mod::mtab	src/mod/mod.h	/^    static mod *mtab;  \/\/ data for root_2pow[] ... isinm[] (all below)$/;"	m	class:mod	access:public
mod::negate	src/mod/mod.h	/^    mod & negate()  { x_ = neg_mod(x_, mod::modulus);  return *this; }$/;"	f	class:mod	access:public	signature:()
mod::one	src/mod/mod.cc	/^mod    mod::one;$/;"	m	class:mod	file:
mod::one	src/mod/mod.h	/^    static mod one;              \/\/ = 1$/;"	m	class:mod	access:public
mod::operator !=	src/mod/mod.h	/^    friend inline bool operator != (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator *	src/mod/mod.h	/^    friend inline mod operator * (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator *=	src/mod/mod.h	/^    friend inline mod & operator *= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
mod::operator +	src/mod/mod.h	/^    friend inline mod operator + (const mod &h)  { return h; }$/;"	f	class:mod	access:friend	signature:(const mod &h)
mod::operator +	src/mod/mod.h	/^    friend inline mod operator + (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator ++	src/mod/mod.h	/^    friend inline mod & operator ++ (mod &z)$/;"	f	class:mod	access:friend	signature:(mod &z)
mod::operator +=	src/mod/mod.h	/^    friend inline mod & operator += (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
mod::operator -	src/mod/mod.h	/^    friend inline mod operator - (const mod &h)$/;"	f	class:mod	access:friend	signature:(const mod &h)
mod::operator -	src/mod/mod.h	/^    friend inline mod operator - (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator --	src/mod/mod.h	/^    friend inline mod & operator -- (mod &z)$/;"	f	class:mod	access:friend	signature:(mod &z)
mod::operator -=	src/mod/mod.h	/^    friend inline mod & operator -= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
mod::operator /	src/mod/mod.h	/^    friend inline mod operator \/ (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator /=	src/mod/mod.h	/^    friend inline mod & operator \/= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
mod::operator <	src/mod/mod.h	/^    friend inline bool operator < (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator <=	src/mod/mod.h	/^    friend inline bool operator <= (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator =	src/mod/mod.h	/^    inline mod & operator = (const mod &h)  { x_ = h.x_;  return *this; }$/;"	f	class:mod	access:public	signature:(const mod &h)
mod::operator =	src/mod/mod.h	/^    inline mod & operator = (uint i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(uint i)
mod::operator =	src/mod/mod.h	/^    inline mod & operator = (ulong i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(ulong i)
mod::operator =	src/mod/mod.h	/^    inline mod & operator = (umod_t i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(umod_t i)
mod::operator ==	src/mod/mod.h	/^    friend inline bool operator == (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator >	src/mod/mod.h	/^    friend inline bool operator > (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::operator >=	src/mod/mod.h	/^    friend inline bool operator >= (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
mod::order	src/mod/mod.h	/^    umod_t order()  const$/;"	f	class:mod	access:public	signature:() const
mod::phi	src/mod/mod.cc	/^umod_t          mod::phi = 0;$/;"	m	class:mod	file:
mod::phi	src/mod/mod.h	/^    static umod_t phi;            \/\/ euler_phi(modulus)$/;"	m	class:mod	access:public
mod::phifact	src/mod/mod.cc	/^factorization   mod::phifact;$/;"	m	class:mod	file:
mod::phifact	src/mod/mod.h	/^    static factorization phifact;  \/\/ factorization of phi$/;"	m	class:mod	access:public
mod::pow	src/mod/mod.h	/^    mod pow(umod_t e)  const$/;"	f	class:mod	access:public	signature:(umod_t e) const
mod::print_info	src/mod/mod.cc	/^mod::print_info()$/;"	f	class:mod	signature:()
mod::print_info	src/mod/mod.h	/^    static void print_info();$/;"	p	class:mod	access:public	signature:()
mod::root2pow	src/mod/mod.cc	/^mod::root2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
mod::root2pow	src/mod/mod.h	/^    static mod root2pow(int ldorder);  \/\/ root of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
mod::root_2pow	src/mod/mod.cc	/^mod  * mod::root_2pow = 0;$/;"	m	class:mod	file:
mod::root_2pow	src/mod/mod.h	/^    static mod *root_2pow;  \/\/ [max2pow+1];    \/\/ element[k] is of order 2^k$/;"	m	class:mod	access:public
mod::root_m2pow	src/mod/mod.cc	/^mod  * mod::root_m2pow = 0;$/;"	m	class:mod	file:
mod::root_m2pow	src/mod/mod.h	/^    static mod *root_m2pow;  \/\/ [max2pow+1];   \/\/ element[k] is of order 2^-k$/;"	m	class:mod	access:public
mod::sqr	src/mod/mod.h	/^    mod sqr() const$/;"	f	class:mod	access:public	signature:() const
mod::x_	src/mod/mod.h	/^    umod_t x_;$/;"	m	class:mod	access:public
mod::zero	src/mod/mod.cc	/^mod    mod::zero;$/;"	m	class:mod	file:
mod::zero	src/mod/mod.h	/^    static mod zero;             \/\/ = 0$/;"	m	class:mod	access:public
mod::~mod	src/mod/mod.h	/^    ~mod()  { ; }$/;"	f	class:mod	access:public	signature:()
mod_info0	src/mod/mod.h	/^void mod_info0();$/;"	p	signature:()
mod_info0	src/mod/modinfo.cc	/^mod_info0()$/;"	f	signature:()
mod_info1	src/mod/mod.h	/^void mod_info1();$/;"	p	signature:()
mod_info1	src/mod/modinfo.cc	/^mod_info1()$/;"	f	signature:()
mod_info1b	src/mod/mod.h	/^void mod_info1b();$/;"	p	signature:()
mod_info1b	src/mod/modinfo.cc	/^mod_info1b()$/;"	f	signature:()
mod_info2	src/mod/mod.h	/^void mod_info2();$/;"	p	signature:()
mod_info2	src/mod/modinfo.cc	/^mod_info2()$/;"	f	signature:()
mod_info3	src/mod/mod.h	/^void mod_info3();$/;"	p	signature:()
mod_info3	src/mod/modinfo.cc	/^mod_info3()$/;"	f	signature:()
mod_info4	src/mod/mod.h	/^void mod_info4();$/;"	p	signature:()
mod_info4	src/mod/modinfo.cc	/^mod_info4()$/;"	f	signature:()
mod_info99	src/mod/mod.h	/^void mod_info99();$/;"	p	signature:()
mod_info99	src/mod/modinfo.cc	/^mod_info99()$/;"	f	signature:()
mod_info_roots	src/mod/mod.h	/^void mod_info_roots();$/;"	p	signature:()
mod_info_roots	src/mod/modinfo.cc	/^mod_info_roots()$/;"	f	signature:()
mod_initialize	doc/mod-doc.txt	/^bool mod_initialize(umod_t m, umod_t *primes\/*=0*\/);$/;"	p	file:	signature:(umod_t m, umod_t *primes )
mod_initialize	src/mod/mod.h	/^    friend bool mod_initialize(umod_t m, umod_t *primes\/*=0*\/);$/;"	p	class:mod	access:friend	signature:(umod_t m, umod_t *primes )
mod_initialize	src/mod/mod.h	/^bool mod_initialize(umod_t m, umod_t *primes=0);$/;"	p	signature:(umod_t m, umod_t *primes=0)
mod_initialize	src/mod/modinit.cc	/^mod_initialize(umod_t m, umod_t *primes\/*=0*\/)$/;"	f	signature:(umod_t m, umod_t *primes )
mod_reset	doc/mod-doc.txt	/^void mod_reset();$/;"	p	file:	signature:()
mod_reset	src/mod/mod.h	/^    friend void mod_reset();$/;"	p	class:mod	access:friend	signature:()
mod_reset	src/mod/mod.h	/^void mod_reset();$/;"	p	signature:()
mod_reset	src/mod/modinit.cc	/^mod_reset()$/;"	f	signature:()
modfact	src/mod/mod.cc	/^factorization   mod::modfact;$/;"	m	class:mod	file:
modfact	src/mod/mod.h	/^    static factorization modfact;  \/\/ factorization of modulus$/;"	m	class:mod	access:public
modulus	src/mod/mod.cc	/^umod_t          mod::modulus = 0;$/;"	m	class:mod	file:
modulus	src/mod/mod.h	/^    static umod_t modulus;        \/\/ 0 <= x < modulus$/;"	m	class:mod	access:public
moment	src/wavelet/waveletfilter.h	/^    double moment(ulong x=0)  const  { return moment(h_, n_, x); }$/;"	f	class:wavelet_filter	access:public	signature:(ulong x=0) const
moment	src/wavelet/waveletfilter.h	/^    static double moment(const double *h, ulong n, ulong x=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, ulong n, ulong x=0)
mon_cmp	demo/graph/graph-lyndon-gray-demo.cc	/^static int mon_cmp(const ulong &a, const ulong &b)$/;"	f	file:	signature:(const ulong &a, const ulong &b)
mon_cmp	demo/graph/graph-monotonicgray-demo.cc	/^int mon_cmp(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
monotonic_gray	src/comb/monotonic-gray.cc	/^monotonic_gray(ulong *g, ulong ldn)$/;"	f	signature:(ulong *g, ulong ldn)
monotonic_gray	src/comb/monotonic-gray.h	/^void monotonic_gray(ulong *g, ulong ldn);$/;"	p	signature:(ulong *g, ulong ldn)
monotonic_gray_delta	src/comb/monotonic-gray.cc	/^monotonic_gray_delta(unsigned char *d, ulong ldn)$/;"	f	signature:(unsigned char *d, ulong ldn)
monotonic_gray_delta	src/comb/monotonic-gray.h	/^void monotonic_gray_delta(unsigned char *d, ulong ldn);$/;"	p	signature:(unsigned char *d, ulong ldn)
more	src/aux0/attic/funcemu.h	/^    bool more()  const  { return (tp_!=0); }$/;"	f	class:funcemu	access:public	signature:() const
more	src/ds/attic/coroutine.h	/^    bool more()  const  { return (tp_!=0); }$/;"	f	class:coroutine	access:public	signature:() const
motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    explicit motzkin_nonflat_rgs_lex(ulong n)$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:(ulong n)
motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    motzkin_nonflat_rgs_lex(const motzkin_nonflat_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_nonflat_rgs_lex	access:private	signature:(const motzkin_nonflat_rgs_lex&)
motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^class motzkin_nonflat_rgs_lex$/;"	c
motzkin_nonflat_rgs_lex::OK	src/comb/motzkin-nonflat-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:() const
motzkin_nonflat_rgs_lex::a_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong *a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1, a[k] != a_[k-1]$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
motzkin_nonflat_rgs_lex::data	src/comb/motzkin-nonflat-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:() const
motzkin_nonflat_rgs_lex::first	src/comb/motzkin-nonflat-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
motzkin_nonflat_rgs_lex::last	src/comb/motzkin-nonflat-rgs-lex.h	/^    void last()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
motzkin_nonflat_rgs_lex::motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    explicit motzkin_nonflat_rgs_lex(ulong n)$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:(ulong n)
motzkin_nonflat_rgs_lex::motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    motzkin_nonflat_rgs_lex(const motzkin_nonflat_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_nonflat_rgs_lex	access:private	signature:(const motzkin_nonflat_rgs_lex&)
motzkin_nonflat_rgs_lex::n1_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong n1_;  \/\/ n-1 if n!=0, otherwise 0$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
motzkin_nonflat_rgs_lex::n_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
motzkin_nonflat_rgs_lex::next	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
motzkin_nonflat_rgs_lex::operator =	src/comb/motzkin-nonflat-rgs-lex.h	/^    motzkin_nonflat_rgs_lex & operator = (const motzkin_nonflat_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_nonflat_rgs_lex	access:private	signature:(const motzkin_nonflat_rgs_lex&)
motzkin_nonflat_rgs_lex::prev	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong prev()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
motzkin_nonflat_rgs_lex::print	src/comb/motzkin-nonflat-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
motzkin_nonflat_rgs_lex::~motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    ~motzkin_nonflat_rgs_lex()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    explicit motzkin_path_lex(ulong n)$/;"	f	class:motzkin_path_lex	access:public	signature:(ulong n)
motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    motzkin_path_lex(const motzkin_path_lex&);  \/\/ forbidden$/;"	p	class:motzkin_path_lex	access:private	signature:(const motzkin_path_lex&)
motzkin_path_lex	src/comb/motzkin-path-lex.h	/^class motzkin_path_lex$/;"	c
motzkin_path_lex::OK	src/comb/motzkin-path-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_path_lex	access:public	signature:() const
motzkin_path_lex::a_	src/comb/motzkin-path-lex.h	/^    ulong *a_;$/;"	m	class:motzkin_path_lex	access:public
motzkin_path_lex::area	src/comb/motzkin-path-lex.h	/^    ulong area()  const$/;"	f	class:motzkin_path_lex	access:public	signature:() const
motzkin_path_lex::data	src/comb/motzkin-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:motzkin_path_lex	access:public	signature:() const
motzkin_path_lex::first	src/comb/motzkin-path-lex.h	/^    void first()$/;"	f	class:motzkin_path_lex	access:public	signature:()
motzkin_path_lex::motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    explicit motzkin_path_lex(ulong n)$/;"	f	class:motzkin_path_lex	access:public	signature:(ulong n)
motzkin_path_lex::motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    motzkin_path_lex(const motzkin_path_lex&);  \/\/ forbidden$/;"	p	class:motzkin_path_lex	access:private	signature:(const motzkin_path_lex&)
motzkin_path_lex::n_	src/comb/motzkin-path-lex.h	/^    ulong n_;$/;"	m	class:motzkin_path_lex	access:public
motzkin_path_lex::next	src/comb/motzkin-path-lex.h	/^    ulong next()$/;"	f	class:motzkin_path_lex	access:public	signature:()
motzkin_path_lex::operator =	src/comb/motzkin-path-lex.h	/^    motzkin_path_lex & operator = (const motzkin_path_lex&);  \/\/ forbidden$/;"	p	class:motzkin_path_lex	access:private	signature:(const motzkin_path_lex&)
motzkin_path_lex::print	src/comb/motzkin-path-lex.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:motzkin_path_lex	access:public	signature:(const char *bla, bool dfz=false)
motzkin_path_lex::print_aa	src/comb/motzkin-path-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_path_lex	access:public	signature:() const
motzkin_path_lex::print_horiz_aa	src/comb/motzkin-path-lex.h	/^    void print_horiz_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_path_lex	access:public	signature:() const
motzkin_path_lex::~motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    ~motzkin_path_lex()$/;"	f	class:motzkin_path_lex	access:public	signature:()
motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    explicit motzkin_rgs_lex(ulong n, ulong i=1)$/;"	f	class:motzkin_rgs_lex	access:public	signature:(ulong n, ulong i=1)
motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    motzkin_rgs_lex(const motzkin_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_rgs_lex	access:private	signature:(const motzkin_rgs_lex&)
motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^class motzkin_rgs_lex$/;"	c
motzkin_rgs_lex::OK	src/comb/motzkin-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_rgs_lex	access:public	signature:() const
motzkin_rgs_lex::a_	src/comb/motzkin-rgs-lex.h	/^    ulong * restrict a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::bit_string	src/comb/motzkin-rgs-lex.h	/^    const char* bit_string()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
motzkin_rgs_lex::data	src/comb/motzkin-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:motzkin_rgs_lex	access:public	signature:() const
motzkin_rgs_lex::first	src/comb/motzkin-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
motzkin_rgs_lex::i_	src/comb/motzkin-rgs-lex.h	/^    ulong i_;  \/\/ at most i rises in a row, at most i+1 consecutive ones in the Dyck word$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    explicit motzkin_rgs_lex(ulong n, ulong i=1)$/;"	f	class:motzkin_rgs_lex	access:public	signature:(ulong n, ulong i=1)
motzkin_rgs_lex::motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    motzkin_rgs_lex(const motzkin_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_rgs_lex	access:private	signature:(const motzkin_rgs_lex&)
motzkin_rgs_lex::n_	src/comb/motzkin-rgs-lex.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::next	src/comb/motzkin-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
motzkin_rgs_lex::operator =	src/comb/motzkin-rgs-lex.h	/^    motzkin_rgs_lex & operator = (const motzkin_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_rgs_lex	access:private	signature:(const motzkin_rgs_lex&)
motzkin_rgs_lex::paren_string	src/comb/motzkin-rgs-lex.h	/^    const char* paren_string()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
motzkin_rgs_lex::print	src/comb/motzkin-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:motzkin_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
motzkin_rgs_lex::s_	src/comb/motzkin-rgs-lex.h	/^    ulong * restrict s_;  \/\/ s[k]: how many consecutive increments up to position k$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::str_	src/comb/motzkin-rgs-lex.h	/^    char * restrict str_;  \/\/ for bit string and paren string$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::str_	src/comb/motzkin-rgs-lex.h	/^    char str_[90];$/;"	m	class:motzkin_rgs_lex	access:public
motzkin_rgs_lex::~motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    ~motzkin_rgs_lex()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    explicit motzkin_step_rgs_lex(ulong n)$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:(ulong n)
motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    motzkin_step_rgs_lex(const motzkin_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_step_rgs_lex	access:private	signature:(const motzkin_step_rgs_lex&)
motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^class motzkin_step_rgs_lex$/;"	c
motzkin_step_rgs_lex::OK	src/comb/motzkin-step-rgs-lex.h	/^    bool OK()  const$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
motzkin_step_rgs_lex::a_	src/comb/motzkin-step-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:motzkin_step_rgs_lex	access:public
motzkin_step_rgs_lex::data	src/comb/motzkin-step-rgs-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
motzkin_step_rgs_lex::first	src/comb/motzkin-step-rgs-lex.h	/^    void first()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
motzkin_step_rgs_lex::motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    explicit motzkin_step_rgs_lex(ulong n)$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:(ulong n)
motzkin_step_rgs_lex::motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    motzkin_step_rgs_lex(const motzkin_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_step_rgs_lex	access:private	signature:(const motzkin_step_rgs_lex&)
motzkin_step_rgs_lex::n_	src/comb/motzkin-step-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:motzkin_step_rgs_lex	access:public
motzkin_step_rgs_lex::next	src/comb/motzkin-step-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
motzkin_step_rgs_lex::operator =	src/comb/motzkin-step-rgs-lex.h	/^    motzkin_step_rgs_lex & operator = (const motzkin_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_step_rgs_lex	access:private	signature:(const motzkin_step_rgs_lex&)
motzkin_step_rgs_lex::print	src/comb/motzkin-step-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
motzkin_step_rgs_lex::print_aa	src/comb/motzkin-step-rgs-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
motzkin_step_rgs_lex::~motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    ~motzkin_step_rgs_lex()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
mp_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong mp_;  \/\/ rightmost position of a maximal digit$/;"	m	class:weakly_unimodal_rgs_lex	access:public
mp_	src/ds/bitarray.h	/^    ulong mp_;   \/\/ mask for partially used word if there is one, else zero$/;"	m	class:bitarray	access:public
mpartition	src/comb/mpartition.h	/^    explicit mpartition(ulong n, ulong m)$/;"	f	class:mpartition	access:public	signature:(ulong n, ulong m)
mpartition	src/comb/mpartition.h	/^    mpartition(const mpartition&);  \/\/ forbidden$/;"	p	class:mpartition	access:private	signature:(const mpartition&)
mpartition	src/comb/mpartition.h	/^class mpartition$/;"	c
mpartition2	src/comb/mpartition2.h	/^    explicit mpartition2(ulong n, ulong m)$/;"	f	class:mpartition2	access:public	signature:(ulong n, ulong m)
mpartition2	src/comb/mpartition2.h	/^    mpartition2(const mpartition2&);  \/\/ forbidden$/;"	p	class:mpartition2	access:private	signature:(const mpartition2&)
mpartition2	src/comb/mpartition2.h	/^class mpartition2$/;"	c
mpartition2::data	src/comb/mpartition2.h	/^    const ulong * data()  const  { return x_+1; }$/;"	f	class:mpartition2	access:public	signature:() const
mpartition2::first	src/comb/mpartition2.h	/^    void first()$/;"	f	class:mpartition2	access:public	signature:()
mpartition2::m_	src/comb/mpartition2.h	/^    ulong m_;   \/\/ ... into m parts  (must have 0<m<=n)$/;"	m	class:mpartition2	access:public
mpartition2::mpartition2	src/comb/mpartition2.h	/^    explicit mpartition2(ulong n, ulong m)$/;"	f	class:mpartition2	access:public	signature:(ulong n, ulong m)
mpartition2::mpartition2	src/comb/mpartition2.h	/^    mpartition2(const mpartition2&);  \/\/ forbidden$/;"	p	class:mpartition2	access:private	signature:(const mpartition2&)
mpartition2::n_	src/comb/mpartition2.h	/^    ulong n_;   \/\/ integer partitions of n  (must have n>0)$/;"	m	class:mpartition2	access:public
mpartition2::next	src/comb/mpartition2.h	/^    bool next()$/;"	f	class:mpartition2	access:public	signature:()
mpartition2::operator =	src/comb/mpartition2.h	/^    mpartition2 & operator = (const mpartition2&);  \/\/ forbidden$/;"	p	class:mpartition2	access:private	signature:(const mpartition2&)
mpartition2::x_	src/comb/mpartition2.h	/^    ulong *x_;  \/\/ partition: x[1] + x[2] + ... + x[m] = n$/;"	m	class:mpartition2	access:public
mpartition2::~mpartition2	src/comb/mpartition2.h	/^    ~mpartition2()$/;"	f	class:mpartition2	access:public	signature:()
mpartition::data	src/comb/mpartition.h	/^    const ulong * data()  const  { return x_+1; }$/;"	f	class:mpartition	access:public	signature:() const
mpartition::first	src/comb/mpartition.h	/^    void first()$/;"	f	class:mpartition	access:public	signature:()
mpartition::m_	src/comb/mpartition.h	/^    ulong m_;   \/\/ ... into m parts  (must have 0<m<=n)$/;"	m	class:mpartition	access:public
mpartition::mpartition	src/comb/mpartition.h	/^    explicit mpartition(ulong n, ulong m)$/;"	f	class:mpartition	access:public	signature:(ulong n, ulong m)
mpartition::mpartition	src/comb/mpartition.h	/^    mpartition(const mpartition&);  \/\/ forbidden$/;"	p	class:mpartition	access:private	signature:(const mpartition&)
mpartition::n_	src/comb/mpartition.h	/^    ulong n_;   \/\/ integer partitions of n  (must have n>0)$/;"	m	class:mpartition	access:public
mpartition::next	src/comb/mpartition.h	/^    bool next()$/;"	f	class:mpartition	access:public	signature:()
mpartition::operator =	src/comb/mpartition.h	/^    mpartition & operator = (const mpartition&);  \/\/ forbidden$/;"	p	class:mpartition	access:private	signature:(const mpartition&)
mpartition::s_	src/comb/mpartition.h	/^    ulong *s_;  \/\/ aux: cumulative sums of x[]  (s[0]=0)$/;"	m	class:mpartition	access:public
mpartition::x_	src/comb/mpartition.h	/^    ulong *x_;  \/\/ partition: x[1] + x[2] + ... + x[m] = n$/;"	m	class:mpartition	access:public
mpartition::~mpartition	src/comb/mpartition.h	/^    ~mpartition()$/;"	f	class:mpartition	access:public	signature:()
mr	demo/comb/gexz-gray-demo.cc	/^ulong mr;   \/\/ radix== mr+1$/;"	v
mr	demo/comb/maxrep-gray-demo.cc	/^ulong mr;    \/\/ maximum number of consecutive ones$/;"	v
mr	demo/comb/ntnz-gray-demo.cc	/^ulong mr;    \/\/ max digit$/;"	v
mr_	src/mod/divisors.h	/^    mixedradix_lex *mr_;  \/\/ exponents + 1  as radices$/;"	m	class:divisors	access:public
mrg_	src/comb/perm-gray-ffact2.h	/^    mixedradix_gray2 *mrg_;  \/\/ loopless routine$/;"	m	class:perm_gray_ffact2	access:public
mrotate	src/perm/attic/mrotate.h	/^void mrotate(const Type * restrict f, ulong n, ulong r, Type * restrict g)$/;"	f	signature:(const Type * restrict f, ulong n, ulong r, Type * restrict g)
ms	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong *ms;  \/\/ multiset data in ms[0], ..., ms[n-1]$/;"	v
ms_	src/comb/mset-perm-gray.h	/^    ulong *ms_;  \/\/ permuted elements (Lunnon's R_[])$/;"	m	class:mset_perm_gray	access:public
ms_	src/comb/mset-perm-lex-rec.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1]$/;"	m	class:mset_perm_lex_rec	access:public
ms_	src/comb/mset-perm-lex.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1], sentinels at [-1] and [-2]$/;"	m	class:mset_perm_lex	access:public
ms_	src/comb/mset-perm-pref.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1], sentinel at [n]$/;"	m	class:mset_perm_pref	access:public
ms_	src/comb/perm-pref.h	/^    ulong *ms_;  \/\/ permutation in ms[0], ..., ms[n-1], sentinel at [n]$/;"	m	class:perm_pref	access:public
mset_perm_gray	src/comb/mset-perm-gray.h	/^    explicit mset_perm_gray(const ulong *r, ulong k)$/;"	f	class:mset_perm_gray	access:public	signature:(const ulong *r, ulong k)
mset_perm_gray	src/comb/mset-perm-gray.h	/^    mset_perm_gray(const mset_perm_gray&);  \/\/ forbidden$/;"	p	class:mset_perm_gray	access:private	signature:(const mset_perm_gray&)
mset_perm_gray	src/comb/mset-perm-gray.h	/^class mset_perm_gray$/;"	c
mset_perm_gray::D_	src/comb/mset-perm-gray.h	/^    ulong *D_;   \/\/ direction$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::P_	src/comb/mset-perm-gray.h	/^    ulong *P_;   \/\/ permutation$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::Q_	src/comb/mset-perm-gray.h	/^    ulong *Q_;   \/\/ inverse permutation$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::data	src/comb/mset-perm-gray.h	/^    const ulong * data()  const { return ms_+1; }$/;"	f	class:mset_perm_gray	access:public	signature:() const
mset_perm_gray::first	src/comb/mset-perm-gray.h	/^    void first()$/;"	f	class:mset_perm_gray	access:public	signature:()
mset_perm_gray::get_swaps	src/comb/mset-perm-gray.h	/^    void get_swaps(ulong &sw1, ulong &sw2)  const { sw1=sw1_;  sw2=sw2_; }$/;"	f	class:mset_perm_gray	access:public	signature:(ulong &sw1, ulong &sw2) const
mset_perm_gray::k_	src/comb/mset-perm-gray.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::ms_	src/comb/mset-perm-gray.h	/^    ulong *ms_;  \/\/ permuted elements (Lunnon's R_[])$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::mset_perm_gray	src/comb/mset-perm-gray.h	/^    explicit mset_perm_gray(const ulong *r, ulong k)$/;"	f	class:mset_perm_gray	access:public	signature:(const ulong *r, ulong k)
mset_perm_gray::mset_perm_gray	src/comb/mset-perm-gray.h	/^    mset_perm_gray(const mset_perm_gray&);  \/\/ forbidden$/;"	p	class:mset_perm_gray	access:private	signature:(const mset_perm_gray&)
mset_perm_gray::n_	src/comb/mset-perm-gray.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::next	src/comb/mset-perm-gray.h	/^    bool next()$/;"	f	class:mset_perm_gray	access:public	signature:()
mset_perm_gray::operator =	src/comb/mset-perm-gray.h	/^    mset_perm_gray & operator = (const mset_perm_gray&);  \/\/ forbidden$/;"	p	class:mset_perm_gray	access:private	signature:(const mset_perm_gray&)
mset_perm_gray::r_	src/comb/mset-perm-gray.h	/^    ulong *r_;   \/\/ number of elements '1' in r[0], '2' in r[1], ..., 'k' in r[k-1]$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::sw1_	src/comb/mset-perm-gray.h	/^    ulong sw1_, sw2_;  \/\/ positions swapped with last update$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::sw2_	src/comb/mset-perm-gray.h	/^    ulong sw1_, sw2_;  \/\/ positions swapped with last update$/;"	m	class:mset_perm_gray	access:public
mset_perm_gray::~mset_perm_gray	src/comb/mset-perm-gray.h	/^    ~mset_perm_gray()$/;"	f	class:mset_perm_gray	access:public	signature:()
mset_perm_lex	src/comb/mset-perm-lex.h	/^    explicit mset_perm_lex(const ulong *r, ulong k)$/;"	f	class:mset_perm_lex	access:public	signature:(const ulong *r, ulong k)
mset_perm_lex	src/comb/mset-perm-lex.h	/^    mset_perm_lex(const mset_perm_lex&);  \/\/ forbidden$/;"	p	class:mset_perm_lex	access:private	signature:(const mset_perm_lex&)
mset_perm_lex	src/comb/mset-perm-lex.h	/^class mset_perm_lex$/;"	c
mset_perm_lex::data	src/comb/mset-perm-lex.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
mset_perm_lex::first	src/comb/mset-perm-lex.h	/^    void first()$/;"	f	class:mset_perm_lex	access:public	signature:()
mset_perm_lex::k_	src/comb/mset-perm-lex.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_lex	access:public
mset_perm_lex::ms_	src/comb/mset-perm-lex.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1], sentinels at [-1] and [-2]$/;"	m	class:mset_perm_lex	access:public
mset_perm_lex::mset_perm_lex	src/comb/mset-perm-lex.h	/^    explicit mset_perm_lex(const ulong *r, ulong k)$/;"	f	class:mset_perm_lex	access:public	signature:(const ulong *r, ulong k)
mset_perm_lex::mset_perm_lex	src/comb/mset-perm-lex.h	/^    mset_perm_lex(const mset_perm_lex&);  \/\/ forbidden$/;"	p	class:mset_perm_lex	access:private	signature:(const mset_perm_lex&)
mset_perm_lex::n_	src/comb/mset-perm-lex.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_lex	access:public
mset_perm_lex::next	src/comb/mset-perm-lex.h	/^    ulong next()$/;"	f	class:mset_perm_lex	access:public	signature:()
mset_perm_lex::num_parts	src/comb/mset-perm-lex.h	/^    ulong num_parts()  const { return n_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
mset_perm_lex::num_sorts	src/comb/mset-perm-lex.h	/^    ulong num_sorts()  const { return k_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
mset_perm_lex::operator =	src/comb/mset-perm-lex.h	/^    mset_perm_lex & operator = (const mset_perm_lex&);  \/\/ forbidden$/;"	p	class:mset_perm_lex	access:private	signature:(const mset_perm_lex&)
mset_perm_lex::print	src/comb/mset-perm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mset_perm_lex	access:public	signature:(const char *bla, bool dfz=false) const
mset_perm_lex::r_	src/comb/mset-perm-lex.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_lex	access:public
mset_perm_lex::~mset_perm_lex	src/comb/mset-perm-lex.h	/^    ~mset_perm_lex()$/;"	f	class:mset_perm_lex	access:public	signature:()
mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    explicit mset_perm_lex_rec(ulong *r, ulong k)$/;"	f	class:mset_perm_lex_rec	access:public	signature:(ulong *r, ulong k)
mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    mset_perm_lex_rec(const mset_perm_lex_rec&);  \/\/ forbidden$/;"	p	class:mset_perm_lex_rec	access:private	signature:(const mset_perm_lex_rec&)
mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^class mset_perm_lex_rec$/;"	c
mset_perm_lex_rec::ct_	src/comb/mset-perm-lex-rec.h	/^    ulong ct_;  \/\/ count objects$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::generate	src/comb/mset-perm-lex-rec.h	/^    void generate(void (*visit)(const mset_perm_lex_rec &))$/;"	f	class:mset_perm_lex_rec	access:public	signature:(void (*visit)(const mset_perm_lex_rec &))
mset_perm_lex_rec::k_	src/comb/mset-perm-lex-rec.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::ms_	src/comb/mset-perm-lex-rec.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1]$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    explicit mset_perm_lex_rec(ulong *r, ulong k)$/;"	f	class:mset_perm_lex_rec	access:public	signature:(ulong *r, ulong k)
mset_perm_lex_rec::mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    mset_perm_lex_rec(const mset_perm_lex_rec&);  \/\/ forbidden$/;"	p	class:mset_perm_lex_rec	access:private	signature:(const mset_perm_lex_rec&)
mset_perm_lex_rec::mset_perm_rec	src/comb/mset-perm-lex-rec.cc	/^mset_perm_lex_rec::mset_perm_rec(ulong d)$/;"	f	class:mset_perm_lex_rec	signature:(ulong d)
mset_perm_lex_rec::mset_perm_rec	src/comb/mset-perm-lex-rec.h	/^    void mset_perm_rec(ulong d);$/;"	p	class:mset_perm_lex_rec	access:private	signature:(ulong d)
mset_perm_lex_rec::n_	src/comb/mset-perm-lex-rec.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::nn_	src/comb/mset-perm-lex-rec.h	/^    ulong *nn_;  \/\/ position of next nonempty bucket$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::operator =	src/comb/mset-perm-lex-rec.h	/^    mset_perm_lex_rec & operator = (const mset_perm_lex_rec&);  \/\/ forbidden$/;"	p	class:mset_perm_lex_rec	access:private	signature:(const mset_perm_lex_rec&)
mset_perm_lex_rec::r_	src/comb/mset-perm-lex-rec.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::rct_	src/comb/mset-perm-lex-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::visit_	src/comb/mset-perm-lex-rec.h	/^    void (*visit_)(const mset_perm_lex_rec &);  \/\/ function to call with each permutation$/;"	m	class:mset_perm_lex_rec	access:public
mset_perm_lex_rec::~mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    ~mset_perm_lex_rec()$/;"	f	class:mset_perm_lex_rec	access:public	signature:()
mset_perm_pref	src/comb/mset-perm-pref.h	/^    explicit mset_perm_pref(const ulong *r, ulong k)$/;"	f	class:mset_perm_pref	access:public	signature:(const ulong *r, ulong k)
mset_perm_pref	src/comb/mset-perm-pref.h	/^    mset_perm_pref(const mset_perm_pref&);  \/\/ forbidden$/;"	p	class:mset_perm_pref	access:private	signature:(const mset_perm_pref&)
mset_perm_pref	src/comb/mset-perm-pref.h	/^class mset_perm_pref$/;"	c
mset_perm_pref::data	src/comb/mset-perm-pref.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:mset_perm_pref	access:public	signature:() const
mset_perm_pref::first	src/comb/mset-perm-pref.h	/^    void first()$/;"	f	class:mset_perm_pref	access:public	signature:()
mset_perm_pref::k_	src/comb/mset-perm-pref.h	/^    ulong k_;    \/\/ number of different sorts of objects$/;"	m	class:mset_perm_pref	access:public
mset_perm_pref::ln_	src/comb/mset-perm-pref.h	/^    ulong ln_;   \/\/ length of the longest non-increasing prefix$/;"	m	class:mset_perm_pref	access:public
mset_perm_pref::ms_	src/comb/mset-perm-pref.h	/^    ulong *ms_;  \/\/ multiset data in ms[0], ..., ms[n-1], sentinel at [n]$/;"	m	class:mset_perm_pref	access:public
mset_perm_pref::mset_perm_pref	src/comb/mset-perm-pref.h	/^    explicit mset_perm_pref(const ulong *r, ulong k)$/;"	f	class:mset_perm_pref	access:public	signature:(const ulong *r, ulong k)
mset_perm_pref::mset_perm_pref	src/comb/mset-perm-pref.h	/^    mset_perm_pref(const mset_perm_pref&);  \/\/ forbidden$/;"	p	class:mset_perm_pref	access:private	signature:(const mset_perm_pref&)
mset_perm_pref::n_	src/comb/mset-perm-pref.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_pref	access:public
mset_perm_pref::next	src/comb/mset-perm-pref.h	/^    ulong next()$/;"	f	class:mset_perm_pref	access:public	signature:()
mset_perm_pref::operator =	src/comb/mset-perm-pref.h	/^    mset_perm_pref & operator = (const mset_perm_pref&);  \/\/ forbidden$/;"	p	class:mset_perm_pref	access:private	signature:(const mset_perm_pref&)
mset_perm_pref::r_	src/comb/mset-perm-pref.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_pref	access:public
mset_perm_pref::~mset_perm_pref	src/comb/mset-perm-pref.h	/^    ~mset_perm_pref()$/;"	f	class:mset_perm_pref	access:public	signature:()
mset_perm_rec	demo/comb/mset-perm-lex-rec-demo.cc	/^void mset_perm_rec(ulong d)$/;"	f	signature:(ulong d)
mset_perm_rec	src/comb/mset-perm-lex-rec.cc	/^mset_perm_lex_rec::mset_perm_rec(ulong d)$/;"	f	class:mset_perm_lex_rec	signature:(ulong d)
mset_perm_rec	src/comb/mset-perm-lex-rec.h	/^    void mset_perm_rec(ulong d);$/;"	p	class:mset_perm_lex_rec	access:private	signature:(ulong d)
mset_perm_to_linvtab	src/comb/attic/mset-perm-invtab.h	/^void mset_perm_to_linvtab(const Type *ms, ulong n, ulong *t)$/;"	f	signature:(const Type *ms, ulong n, ulong *t)
mset_perm_to_rinvtab	src/comb/attic/mset-perm-invtab.h	/^void mset_perm_to_rinvtab(const Type *ms, ulong n, ulong *t)$/;"	f	signature:(const Type *ms, ulong n, ulong *t)
msqr	src/matrix/attic/mmult.h	/^void msqr(const matrix<Type> &a, matrix<Type> &b)$/;"	f	signature:(const matrix<Type> &a, matrix<Type> &b)
msqr	src/matrix/attic/mmult.h	/^void msqr(matrix<Type> &a)$/;"	f	signature:(matrix<Type> &a)
mt	demo/bits/modular-lookup-demo.cc	/^ulong mt[m+1];$/;"	v
mt_setup	demo/bits/modular-lookup-demo.cc	/^static void mt_setup()$/;"	f	file:	signature:()
mtab	src/mod/mod.cc	/^mod  * mod::mtab = 0;$/;"	m	class:mod	file:
mtab	src/mod/mod.h	/^    static mod *mtab;  \/\/ data for root_2pow[] ... isinm[] (all below)$/;"	m	class:mod	access:public
mul_mod	doc/mod-doc.txt	/^inline umod_t mul_mod(umod_t a, umod_t b, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t b, umod_t m)
mul_mod	src/mod/modarith.h	/^inline umod_t mul_mod(umod_t a, umod_t b, umod_t m)$/;"	f	signature:(umod_t a, umod_t b, umod_t m)
mul_mod_m1dd	doc/mod-doc.txt	/^inline umod_t mul_mod_m1dd(umod_t a, umod_t b, umod_t m, long double m1dd);$/;"	p	file:	signature:(umod_t a, umod_t b, umod_t m, long double m1dd)
mul_mod_m1dd	src/mod/modarith.h	/^inline umod_t mul_mod_m1dd(umod_t a, umod_t b, umod_t m, long double m1dd)$/;"	f	signature:(umod_t a, umod_t b, umod_t m, long double m1dd)
multiply	doc/aux1-doc.txt	/^inline void multiply(Type *f, ulong n, const Type *g);$/;"	p	file:	signature:(Type *f, ulong n, const Type *g)
multiply	src/aux1/arith1.h	/^inline void multiply(Type *f, ulong n, const Type *g)$/;"	f	signature:(Type *f, ulong n, const Type *g)
multiply	src/aux2/attic/arith2d.h	/^inline void multiply(Type **f, ulong nr, ulong nc, const Type *const*g)$/;"	f	signature:(Type **f, ulong nr, ulong nc, const Type *const*g)
multiply_val	doc/aux1-doc.txt	/^inline void multiply_val(Type *f, ulong n, Type s);$/;"	p	file:	signature:(Type *f, ulong n, Type s)
multiply_val	src/aux1/arith1.h	/^inline void multiply_val(Type *f, ulong n, Type s)$/;"	f	signature:(Type *f, ulong n, Type s)
multiply_val	src/aux2/attic/arith2d.h	/^inline void multiply_val(Type **f, ulong nr, ulong nc, Type s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type s)
multiply_val	src/mod/attic/auxfuncs.cc	/^multiply_val(mod *f, ulong n, mod s)$/;"	f	signature:(mod *f, ulong n, mod s)
multisets	fxt.lsm	/^                subsets, multisets, Gray codes, Catalan objects, necklaces, Lyndon words.$/;"	v
mv_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong mv_;  \/\/ value of maximal digit(s)$/;"	m	class:composition_nz_weakly_unimodal	access:public
mv_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong mv_;  \/\/ value of maximal digit(s)$/;"	m	class:weakly_unimodal_rgs_lex	access:public
mvmult	src/matrix/attic/mmult.h	/^void mvmult(const matrix<Type> &A, const Type *x, Type *b)$/;"	f	signature:(const matrix<Type> &A, const Type *x, Type *b)
mvmulttr	src/matrix/attic/mmult.h	/^void mvmulttr(const matrix<Type> &A, const Type *x, Type *b)$/;"	f	signature:(const matrix<Type> &A, const Type *x, Type *b)
mw_	src/bits/bitfibgray.h	/^    ulong mw_;  \/\/ max(fw_, lw_)$/;"	m	class:bit_fibgray	access:public
mwrk_	src/comb/composition-nz-i-smooth.h	/^    ulong mwrk_;  \/\/ max work with last call of next() so far$/;"	m	class:composition_nz_i_smooth	access:public
mx_	src/comb/cayley-perm.h	/^    ulong mx_;  \/\/ maximal allowed digit (== max value of m_)$/;"	m	class:cayley_perm	access:public
mx_	src/comb/composition-nz-max.h	/^    ulong mx_;  \/\/ all parts <= mx$/;"	m	class:composition_nz_max	access:public
mx_	src/comb/dyck-gray.h	/^    ulong *mx_;  \/\/ aux: max position         (max[])$/;"	m	class:dyck_gray	access:public
my_cmp	demo/graph/graph-fibrepgray-demo.cc	/^static int my_cmp(const ulong &a, const ulong &b)$/;"	f	file:	signature:(const ulong &a, const ulong &b)
my_cmp	demo/graph/graph-monotonicgray-demo.cc	/^int my_cmp(const ulong &a, const ulong &b)$/;"	f	signature:(const ulong &a, const ulong &b)
my_lyndon_cmp	demo/graph/graph-lyndon-gray-demo.cc	/^static int my_lyndon_cmp(const ulong &a, const ulong &b)$/;"	f	file:	signature:(const ulong &a, const ulong &b)
my_strcmp	demo/sort/sort-string-demo.cc	/^int my_strcmp(const Cstr &a, const Cstr &b)$/;"	f	signature:(const Cstr &a, const Cstr &b)
myfq_	src/aux1/attic/array.h	/^    bool myfq_;  \/\/ whether f_ was allocated by constructor$/;"	m	class:array	access:protected
myfq_	src/ds/array2d.h	/^    bool myfq_;      \/\/ whether f_ was allocated by constructor$/;"	m	class:array2d	access:protected
myfq_	src/ds/array3d.h	/^    bool myfq_;      \/\/ whether f_ was allocated by constructor$/;"	m	class:array3d	access:protected
myfq_	src/ds/bitarray.h	/^    bool myfq_;  \/\/ whether f[] was allocated by class$/;"	m	class:bitarray	access:public
n	demo/arith/zero-divisors-demo.cc	/^ulong ldn, n;$/;"	v
n	demo/arith/zero-divisors-pairs-demo.cc	/^ulong ldn, n;$/;"	v
n	demo/comb/fib-alt-gray-demo.cc	/^ulong n;    \/\/ number of bits in words$/;"	v
n	demo/comb/fibgray-rec-demo.cc	/^ulong n;    \/\/ number of bits in words$/;"	v
n	demo/comb/gexz-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/hanoi-rec-demo.cc	/^ulong n;$/;"	v
n	demo/comb/maxrep-gray-demo.cc	/^ulong n;    \/\/ number of bits in words$/;"	v
n	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong n;    \/\/ number of objects$/;"	v
n	demo/comb/naf-gray-rec-demo.cc	/^ulong n;   \/\/ number of digits of the string$/;"	v
n	demo/comb/naf-pos-rec-demo.cc	/^ulong n;  \/\/ length of strings$/;"	v
n	demo/comb/necklace-sigma-tau-demo.cc	/^ulong n, ct;$/;"	v
n	demo/comb/no111-gray-demo.cc	/^ulong n;   \/\/ number of bits in words$/;"	v
n	demo/comb/no1111-gray-demo.cc	/^ulong n;   \/\/ number of bits in words$/;"	v
n	demo/comb/no1x1-gray-demo.cc	/^ulong n;    \/\/ number of bits in words$/;"	v
n	demo/comb/no1xy1-gray-demo.cc	/^ulong n;   \/\/ number of bits in words$/;"	v
n	demo/comb/ntnz-gray-demo.cc	/^ulong n;     \/\/ length of strings$/;"	v
n	demo/comb/ntz-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/paren-gray-rec-demo.cc	/^ulong n;    \/\/ Number of paren pairs$/;"	v
n	demo/comb/pellgen-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/pellgray-rec-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/perm-dist1-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/perm-l1r2-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/perm-right1-gray-demo.cc	/^ulong n;    \/\/ number of digits in words$/;"	v
n	demo/comb/rll-rec-demo.cc	/^ulong n;    \/\/ number of bits in words$/;"	v
n	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
n	demo/comb/shift-subsets-demo.cc	/^ulong n;  \/\/ number of bits$/;"	v
n	demo/graph/graph-perm-pref-rev-demo.cc	/^ulong n;$/;"	v
n	demo/graph/graph-perm-pref-rot-demo.cc	/^ulong n;$/;"	v
n	demo/graph/sta-graph-acgray-demo.cc	/^ulong n=0;$/;"	v
n	demo/graph/sta-graph-macgray-demo.cc	/^ulong n=0;$/;"	v
n	demo/seq/A000793-demo.cc	/^ulong n = 7;$/;"	v
n	demo/seq/A278479-demo.cc	/^    ulong n;$/;"	m	class:triang_num	file:	access:private
n	doc/wfl-hilbert-doc.txt	/^backtrack will usually be small: for consecutive steps  \\Delta n = 1 , this$/;"	v
n	doc/wfl-hilbert-doc.txt	/^is now zero, and the final step  n = 4+2 = 6  as expected.$/;"	v
n	src/comb/attic/combination-rec-demo.cc	/^ulong n, k; \/\/ (n choose k)$/;"	v
n	src/comb/attic/permvisit.h	/^    ulong n;$/;"	m	class:perm_visit	access:protected
n	src/comb/attic/subset-monotone.h	/^    ulong n;$/;"	m	class:subset_monotone	access:protected
n	src/comb/lyndon-words.h	/^    ulong n;  \/\/ max number of letters$/;"	m	class:lyndon_words	access:protected
n	src/comb/paren-gray.h	/^    ulong n, j;$/;"	m	class:paren_gray	access:private
n	src/comb/perm-restrpref.h	/^    ulong n;   \/\/ number of elements to permute$/;"	m	class:perm_restrpref	access:protected
n	src/comb/word-stats.h	/^    ulong n;    \/\/ Number of digits$/;"	m	class:word_stats	access:private
n	src/ds/attic/coroutine-paren-demo.cc	/^    int n;$/;"	m	class:paren	file:	access:protected
n	src/fht/fhtmayer.txt	/^int n;$/;"	v
n	src/perm/attic/partition.h	/^    int n;$/;"	m	class:partition	access:private
n01	src/bits/print-bin.cc	/^static const char n01[] = {'.', '1'};$/;"	v	file:
n01	src/comb/print-set.cc	/^static const char n01[] = {'.', '1'};$/;"	v	file:
n01pm	src/bits/print-bindiff.cc	/^static const char n01pm[] = {'.', '1', '+', '-'};$/;"	v	file:
n1_	src/comb/ascent-rgs-subset-lex.h	/^    ulong n1_;  \/\/ last track$/;"	m	class:ascent_rgs_subset_lex	access:public
n1_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong n1_;  \/\/ n-1 if n!=0, otherwise 0$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
n1_	src/comb/partition-dist-desc.h	/^    ulong n1_;  \/\/ number of elements in first partition ( == floor((sqrt(1+8*n)-1)\/2) )$/;"	m	class:partition_dist_desc	access:public
n1_	src/comb/subset-lex.h	/^    ulong n1_;  \/\/ == n - 1 for n >=1, and == 0 for n==0$/;"	m	class:subset_lex	access:public
n1f	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong n1f;  \/\/ (N-1)!$/;"	v
n1k_	src/comb/dyck-pref.h	/^    ulong n1k_;  \/\/ ==k*(n-1), aux$/;"	m	class:dyck_pref	access:public
n1k_	src/comb/dyck-pref2.h	/^    ulong n1k_;  \/\/ ==k*(n-1), aux$/;"	m	class:dyck_pref2	access:public
n2_	src/bits/bit-necklace.h	/^    ulong n2_;  \/\/ bit representing n: n2==2**(n-1)$/;"	m	class:bit_necklace	access:public
n2_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong n2_;  \/\/ aux: min(n,2).$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
n2_	src/graph/lyndon-gray.h	/^    ulong n_, n2_;  \/\/ n-bit Lyndon words, n2=2**n$/;"	m	class:lyndon_gray	access:public
n2b_	src/bpol/all-irredpoly.h	/^    necklace2bitpol n2b_;$/;"	m	class:all_irredpoly	access:public
n2p	src/bpol/gf2n.cc	/^GF2n::n2p(ulong f)$/;"	f	class:GF2n	signature:(ulong f)
n2p	src/bpol/gf2n.h	/^    static ulong n2p(ulong f);$/;"	p	class:GF2n	access:public	signature:(ulong f)
n2p_tab	src/bpol/gf2n.cc	/^ulong GF2n::n2p_tab[BITS_PER_LONG];  \/\/ normal to polynomial$/;"	m	class:GF2n	file:
n2p_tab	src/bpol/gf2n.h	/^    static ulong n2p_tab[BITS_PER_LONG];  \/\/ normal to polynomial$/;"	m	class:GF2n	access:public
n2qt	doc/mod-doc.txt	/^void n2qt(const umod_t n, umod_t &q, uint &t);$/;"	p	file:	signature:(const umod_t n, umod_t &q, uint &t)
n2qt	src/mod/primes.h	/^void n2qt(const umod_t n, umod_t &q, uint &t);$/;"	p	signature:(const umod_t n, umod_t &q, uint &t)
n2qt	src/mod/rabinmiller.cc	/^n2qt(const umod_t n, umod_t &q, uint &t)$/;"	f	signature:(const umod_t n, umod_t &q, uint &t)
n_	src/aux1/attic/array.h	/^    ulong n_;  \/\/ #elems$/;"	m	class:array	access:public
n_	src/bits/bit-necklace.h	/^    ulong n_;   \/\/ number of bits in words$/;"	m	class:bit_necklace	access:public
n_	src/bits/bitcombshifts.h	/^    ulong n_, k_;  \/\/ combinations (n choose k)$/;"	m	class:bit_comb_shifts	access:public
n_	src/bits/bitfibgray.h	/^    ulong n_;   \/\/ Number of bits$/;"	m	class:bit_fibgray	access:public
n_	src/bpol/gf2n.cc	/^ulong GF2n::n_ = 0;  \/\/ the 'n' in GF(2**n)$/;"	m	class:GF2n	file:
n_	src/bpol/gf2n.h	/^    static ulong n_;  \/\/ the 'n' in GF(2**n)$/;"	m	class:GF2n	access:public
n_	src/bpol/lfsr.h	/^    ulong n_;  \/\/ degree of polynomial  e.g. (above) == 4$/;"	m	class:lfsr	access:public
n_	src/bpol/necklace2bitpol.h	/^    ulong n_;  \/\/ degree of c_$/;"	m	class:necklace2bitpol	access:public
n_	src/comb/acyclic-map.h	/^    ulong n_;  \/\/ Number of elements$/;"	m	class:acyclic_map	access:public
n_	src/comb/arrangement-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:arrangement_rgs	access:public
n_	src/comb/ascent-alt-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_alt_rgs	access:public
n_	src/comb/ascent-nonflat-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_nonflat_rgs	access:public
n_	src/comb/ascent-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs_subset_lex	access:public
n_	src/comb/ascent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs	access:public
n_	src/comb/attic/all-compositions-minchange.h	/^    ulong &n_, &k_;$/;"	m	class:all_compositions_minchange	access:public
n_	src/comb/attic/allsetpartitions.h	/^    ulong n_;  \/\/ Number of elements in set; set = {1,2,3,...,n}$/;"	m	class:all_set_partitions	access:public
n_	src/comb/attic/ascent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:ascent_rgs	access:public
n_	src/comb/attic/binarydebruijn.h	/^    ulong n_;$/;"	m	class:binary_debruijn	access:public
n_	src/comb/attic/combcolex.h	/^    ulong n_;$/;"	m	class:comb_colex	access:public
n_	src/comb/attic/combination-altminchange.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:combination_altminchange	access:public
n_	src/comb/attic/combination-minchange.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:combination_minchange	access:public
n_	src/comb/attic/comblex.h	/^    ulong n_;$/;"	m	class:comb_lex	access:public
n_	src/comb/attic/combminchange.h	/^    ulong n_;$/;"	m	class:comb_minchange	access:public
n_	src/comb/attic/composition-chase.h	/^    ulong n_, k_;  \/\/ k-composition of n$/;"	m	class:composition_chase	access:public
n_	src/comb/attic/compositionalt.h	/^    ulong n_;  \/\/ number of elements to choose from$/;"	m	class:composition_alt	access:public
n_	src/comb/attic/perm-minchange.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_minchange	access:public
n_	src/comb/attic/perm-trotter.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_trotter	access:public
n_	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:balanced_ordered_tree_lev_seq	access:private
n_	src/comb/binary-huffman.h	/^    ulong n_;   \/\/ partitions into n parts$/;"	m	class:binary_huffman	access:public
n_	src/comb/binary-necklace.h	/^    ulong n_;  \/\/ length of strings$/;"	m	class:binary_necklace	access:public
n_	src/comb/binary-sl-gray.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:binary_sl_gray	access:public
n_	src/comb/catalan-path-lex.h	/^    ulong n_;$/;"	m	class:catalan_path_lex	access:public
n_	src/comb/catalan-rgs-gray.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs_gray	access:public
n_	src/comb/catalan-rgs-gslex.h	/^    ulong n_;   \/\/ number of digits (paren pairs)$/;"	m	class:catalan_rgs_gslex	access:public
n_	src/comb/catalan-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs_subset_lex	access:public
n_	src/comb/catalan-rgs.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan_rgs	access:public
n_	src/comb/catalan-step-rgs-colex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:catalan_step_rgs_colex	access:public
n_	src/comb/catalan-step-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:catalan_step_rgs_lex	access:public
n_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
n_	src/comb/catalan.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:catalan	access:public
n_	src/comb/cayley-perm.h	/^    ulong n_;   \/\/ number of objects$/;"	m	class:cayley_perm	access:public
n_	src/comb/change-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:change_rgs	access:public
n_	src/comb/check-kpermgen.h	/^    ulong n_;$/;"	m	class:check_kpermgen	access:public
n_	src/comb/check-mixedradix.h	/^    ulong n_;$/;"	m	class:check_mixedradix	access:public
n_	src/comb/check-permgen.h	/^    ulong n_;$/;"	m	class:check_permgen	access:public
n_	src/comb/combination-chase.h	/^    ulong n_;  \/\/ (n choose k)  n>=1$/;"	m	class:combination_chase	access:public
n_	src/comb/combination-colex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_colex	access:public
n_	src/comb/combination-emk.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_emk	access:public
n_	src/comb/combination-endo.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_endo	access:public
n_	src/comb/combination-enup.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_enup	access:public
n_	src/comb/combination-lex.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_lex	access:public
n_	src/comb/combination-mod.h	/^    ulong n_, k_;  \/\/ Combination (n choose k)$/;"	m	class:combination_mod	access:public
n_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
n_	src/comb/combination-rec.h	/^    ulong n_, k_;  \/\/ (n choose k)$/;"	m	class:comb_rec	access:public
n_	src/comb/combination-revdoor.h	/^    ulong n_, k_;  \/\/ (n choose k)  n>=1,  1<=k<=n$/;"	m	class:combination_revdoor	access:public
n_	src/comb/composition-colex.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex	access:public
n_	src/comb/composition-colex2.h	/^    ulong n_, k_;  \/\/ composition of n into k parts$/;"	m	class:composition_colex2	access:public
n_	src/comb/composition-dist-unimodal.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:composition_dist_unimodal	access:public
n_	src/comb/composition-ex-colex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_colex	access:public
n_	src/comb/composition-ex-lex.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_ex_lex	access:public
n_	src/comb/composition-nz-binary.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_binary	access:public
n_	src/comb/composition-nz-carlitz.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_carlitz	access:public
n_	src/comb/composition-nz-first-max.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_first_max	access:public
n_	src/comb/composition-nz-gray.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_gray	access:public
n_	src/comb/composition-nz-gray2.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_gray2	access:public
n_	src/comb/composition-nz-i-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_i_smooth	access:public
n_	src/comb/composition-nz-left-2smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_left_2smooth	access:public
n_	src/comb/composition-nz-left-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_left_smooth	access:public
n_	src/comb/composition-nz-max.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_max	access:public
n_	src/comb/composition-nz-min.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_min	access:public
n_	src/comb/composition-nz-minc.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_minc	access:public
n_	src/comb/composition-nz-numparts.h	/^    ulong n_, k_;  \/\/ composition of n into exactly k parts$/;"	m	class:composition_nz_numparts	access:public
n_	src/comb/composition-nz-odd-subset-lex.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_odd_subset_lex	access:public
n_	src/comb/composition-nz-odd.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_odd	access:public
n_	src/comb/composition-nz-restrpref.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_restrpref	access:public
n_	src/comb/composition-nz-rl.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_rl	access:public
n_	src/comb/composition-nz-smooth.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_smooth	access:public
n_	src/comb/composition-nz-sorts.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts	access:public
n_	src/comb/composition-nz-sorts2-pp.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts2_pp	access:public
n_	src/comb/composition-nz-sorts2.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_sorts2	access:public
n_	src/comb/composition-nz-subset-lex.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_subset_lex	access:public
n_	src/comb/composition-nz-superdiagonal.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_superdiagonal	access:public
n_	src/comb/composition-nz-upstep.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz_upstep	access:public
n_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong n_;   \/\/ compositions of n$/;"	m	class:composition_nz_weakly_unimodal	access:public
n_	src/comb/composition-nz.h	/^    ulong n_;   \/\/ composition of n$/;"	m	class:composition_nz	access:public
n_	src/comb/composition-unimodal.h	/^    ulong n_;   \/\/ integer compositions of n$/;"	m	class:composition_unimodal	access:public
n_	src/comb/cyclic-perm.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:cyclic_perm	access:public
n_	src/comb/descent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:descent_rgs	access:public
n_	src/comb/dyck-gray.h	/^    ulong n_;    \/\/ n (internal) nodes$/;"	m	class:dyck_gray	access:public
n_	src/comb/dyck-pref.h	/^    ulong n_;    \/\/ number of ones (variable t in the paper)$/;"	m	class:dyck_pref	access:public
n_	src/comb/dyck-pref2.h	/^    ulong n_;    \/\/ number of ones (variable t in the paper)$/;"	m	class:dyck_pref2	access:public
n_	src/comb/dyck-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits in RGS$/;"	m	class:dyck_rgs_subset_lex	access:public
n_	src/comb/dyck-rgs.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:dyck_rgs	access:public
n_	src/comb/id-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:id_tree_lev_seq	access:private
n_	src/comb/involution-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:involution_zero_map_rgs	access:public
n_	src/comb/isoscent-rgs.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:isoscent_rgs	access:public
n_	src/comb/kperm-gray.h	/^    ulong n_;   \/\/ total of n elements$/;"	m	class:kperm_gray	access:public
n_	src/comb/kperm-lex.h	/^    ulong n_;   \/\/ total number of elements$/;"	m	class:kperm_lex	access:public
n_	src/comb/ksubset-gray.h	/^    ulong n_;   \/\/ k-subsets of {1, 2, ..., n}$/;"	m	class:ksubset_gray	access:public
n_	src/comb/ksubset-lex.h	/^    ulong n_;  \/\/ number of elements in set, should have n>=1$/;"	m	class:ksubset_lex	access:public
n_	src/comb/ksubset-rec.h	/^    ulong n_;    \/\/ subsets of a n-element set$/;"	m	class:ksubset_rec	access:public
n_	src/comb/ksubset-twoclose.h	/^    ulong n_;    \/\/ subsets of the n-element set$/;"	m	class:ksubset_twoclose	access:public
n_	src/comb/map23-rgs.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:map23_rgs	access:public
n_	src/comb/mixedradix-colex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_colex	access:public
n_	src/comb/mixedradix-endo-gray.h	/^    ulong n_;   \/\/ n_ digits$/;"	m	class:mixedradix_endo_gray	access:public
n_	src/comb/mixedradix-endo.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_endo	access:public
n_	src/comb/mixedradix-gray.h	/^    ulong n_;   \/\/ n_ digits$/;"	m	class:mixedradix_gray	access:public
n_	src/comb/mixedradix-gray2.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_gray2	access:public
n_	src/comb/mixedradix-gslex-alt.h	/^    ulong n_;   \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex_alt	access:public
n_	src/comb/mixedradix-gslex-alt2.h	/^    ulong n_;   \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_gslex_alt2	access:public
n_	src/comb/mixedradix-gslex.h	/^    ulong n_;   \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex	access:public
n_	src/comb/mixedradix-gslex2.h	/^    ulong n_;    \/\/ n-digit numbers$/;"	m	class:mixedradix_gslex2	access:public
n_	src/comb/mixedradix-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_lex	access:public
n_	src/comb/mixedradix-modular-gray.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_modular_gray	access:public
n_	src/comb/mixedradix-modular-gray2.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:mixedradix_modular_gray2	access:public
n_	src/comb/mixedradix-naf-gray.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_naf_gray	access:public
n_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong n_;     \/\/ Number of digits$/;"	m	class:mixedradix_naf_subset_lex	access:public
n_	src/comb/mixedradix-naf.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_naf	access:public
n_	src/comb/mixedradix-restrpref.h	/^    ulong n_;    \/\/ number of digits$/;"	m	class:mixedradix_restrpref	access:public
n_	src/comb/mixedradix-rfact.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_rfact	access:public
n_	src/comb/mixedradix-sl-gray.h	/^    ulong n_;    \/\/ Number of digits (n kinds of elements in multiset, n>=1)$/;"	m	class:mixedradix_sl_gray	access:public
n_	src/comb/mixedradix-sod-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:mixedradix_sod_lex	access:public
n_	src/comb/mixedradix-subset-lex.h	/^    ulong n_;    \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_subset_lex	access:public
n_	src/comb/mixedradix-subset-lexrev.h	/^    ulong n_;   \/\/ Number of digits (n kinds of elements in multiset)$/;"	m	class:mixedradix_subset_lexrev	access:public
n_	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong n_;   \/\/ Number of digits$/;"	m	class:motzkin_nonflat_rgs_lex	access:public
n_	src/comb/motzkin-path-lex.h	/^    ulong n_;$/;"	m	class:motzkin_path_lex	access:public
n_	src/comb/motzkin-rgs-lex.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:motzkin_rgs_lex	access:public
n_	src/comb/motzkin-step-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:motzkin_step_rgs_lex	access:public
n_	src/comb/mpartition.h	/^    ulong n_;   \/\/ integer partitions of n  (must have n>0)$/;"	m	class:mpartition	access:public
n_	src/comb/mpartition2.h	/^    ulong n_;   \/\/ integer partitions of n  (must have n>0)$/;"	m	class:mpartition2	access:public
n_	src/comb/mset-perm-gray.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_gray	access:public
n_	src/comb/mset-perm-lex-rec.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_lex_rec	access:public
n_	src/comb/mset-perm-lex.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_lex	access:public
n_	src/comb/mset-perm-pref.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:mset_perm_pref	access:public
n_	src/comb/necklace.h	/^    ulong n_;   \/\/ length of strings$/;"	m	class:necklace	access:public
n_	src/comb/num-compositions.h	/^    ulong n_;  \/\/ max n$/;"	m	class:num_compositions	access:public
n_	src/comb/ordered-tree-branches.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:ordered_tree_branches	access:public
n_	src/comb/ordered-tree-branching-seq.h	/^    ulong n_;  \/\/ number of non-root nodes$/;"	m	class:ordered_tree_branching_seq	access:public
n_	src/comb/ordered-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:ordered_tree_lev_seq	access:private
n_	src/comb/paren-lex.h	/^    ulong n_;    \/\/ ==2*k$/;"	m	class:paren_lex	access:public
n_	src/comb/paren.h	/^    ulong n_;    \/\/ ==2*k$/;"	m	class:paren	access:public
n_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_asc_subset_lex	access:public
n_	src/comb/partition-2fall-asc.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_asc	access:public
n_	src/comb/partition-2fall-desc.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_desc	access:public
n_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc_2rep_subset_lex	access:public
n_	src/comb/partition-asc-2rep.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc_2rep	access:public
n_	src/comb/partition-asc-perim.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_perim	access:public
n_	src/comb/partition-asc-sorts.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts	access:public
n_	src/comb/partition-asc-sorts2-pp.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts2_pp	access:public
n_	src/comb/partition-asc-sorts2.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts2	access:public
n_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_subset_lex_csh	access:public
n_	src/comb/partition-asc-subset-lex.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_subset_lex	access:public
n_	src/comb/partition-asc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc	access:public
n_	src/comb/partition-binary-asc.h	/^    ulong n_;   \/\/ binary integer partitions of n$/;"	m	class:partition_binary_asc	access:public
n_	src/comb/partition-binary-desc.h	/^    ulong n_;   \/\/ binary integer partitions of n$/;"	m	class:partition_binary_desc	access:public
n_	src/comb/partition-desc-bb.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_desc_bb	access:public
n_	src/comb/partition-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_desc	access:public
n_	src/comb/partition-dist-asc-len.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc_len	access:public
n_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc_subset_lex	access:public
n_	src/comb/partition-dist-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc	access:public
n_	src/comb/partition-dist-d-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_d_asc	access:public
n_	src/comb/partition-dist-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_dist_desc	access:public
n_	src/comb/partition-gen.h	/^    ulong n_;   \/\/ Number of values$/;"	m	class:partition_gen	access:public
n_	src/comb/partition-nonsquashing-desc.h	/^    ulong n_;   \/\/ non-squashing integer partition of n$/;"	m	class:partition_nonsquashing_desc	access:public
n_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
n_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc_subset_lex	access:public
n_	src/comb/partition-odd-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc	access:public
n_	src/comb/partition-odd-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_odd_desc	access:public
n_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong n_;   \/\/ non-squashing integer partition of n$/;"	m	class:partition_odd_nonsquashing_desc	access:public
n_	src/comb/partition-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:partition_rgs_lex	access:public
n_	src/comb/partition-s-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_s_desc	access:public
n_	src/comb/partition-strongly-decr-desc.h	/^    ulong n_;   \/\/ strongly decreasing integer partition of n$/;"	m	class:partition_strongly_decr_desc	access:public
n_	src/comb/partition.h	/^    ulong n_;   \/\/ partitions of n$/;"	m	class:partition	access:public
n_	src/comb/perm-colex.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_colex	access:public
n_	src/comb/perm-derange.h	/^    ulong n_;   \/\/ number of elements$/;"	m	class:perm_derange	access:public
n_	src/comb/perm-gray-ffact.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_ffact	access:public
n_	src/comb/perm-gray-ffact2.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_ffact2	access:public
n_	src/comb/perm-gray-lipski.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_lipski	access:public
n_	src/comb/perm-gray-rfact.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_rfact	access:public
n_	src/comb/perm-gray-rot1.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_rot1	access:public
n_	src/comb/perm-gray-wells.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_wells	access:public
n_	src/comb/perm-heap.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap	access:public
n_	src/comb/perm-heap2-swaps.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap2_swaps	access:public
n_	src/comb/perm-heap2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap2	access:public
n_	src/comb/perm-involution.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_involution	access:public
n_	src/comb/perm-ives.h	/^    ulong n_;    \/\/ permutations of n elements$/;"	m	class:perm_ives	access:public
n_	src/comb/perm-lex-inv.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_lex_inv	access:public
n_	src/comb/perm-lex.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_lex	access:public
n_	src/comb/perm-lex2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_lex2	access:public
n_	src/comb/perm-mv0.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_mv0	access:public
n_	src/comb/perm-pref.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:perm_pref	access:public
n_	src/comb/perm-rec.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_rec	access:public
n_	src/comb/perm-rev.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_rev	access:public
n_	src/comb/perm-rev2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_rev2	access:public
n_	src/comb/perm-rot.h	/^    ulong n_;   \/\/ Number of elements$/;"	m	class:perm_rot	access:public
n_	src/comb/perm-st-gray.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_st_gray	access:public
n_	src/comb/perm-st-pref.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_st_pref	access:public
n_	src/comb/perm-st.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_st	access:public
n_	src/comb/perm-star-swaps.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_star_swaps	access:public
n_	src/comb/perm-star.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_star	access:public
n_	src/comb/perm-trotter-lg.h	/^    ulong n_;     \/\/ number of elements to permute$/;"	m	class:perm_trotter_lg	access:public
n_	src/comb/perm-trotter.h	/^    ulong n_;     \/\/ number of elements to permute$/;"	m	class:perm_trotter	access:public
n_	src/comb/rgs-fincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_fincr	access:public
n_	src/comb/rgs-kincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_kincr	access:public
n_	src/comb/rgs-maxincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_maxincr	access:public
n_	src/comb/ruler-func.h	/^    ulong n_;$/;"	m	class:ruler_func	access:public
n_	src/comb/schroeder-path-lex.h	/^    ulong n_;$/;"	m	class:schroeder_path_lex	access:public
n_	src/comb/schroeder-rgs-lex.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:schroeder_rgs_lex	access:public
n_	src/comb/score-sequence.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:score_sequence	access:public
n_	src/comb/setpart-ccf-rgs-lex.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_ccf_rgs_lex	access:public
n_	src/comb/setpart-ck-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_ck_rgs	access:public
n_	src/comb/setpart-p-rgs-lex.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_p_rgs_lex	access:public
n_	src/comb/setpart-rgs-gray.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_rgs_gray	access:public
n_	src/comb/setpart-rgs-lex.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_rgs_lex	access:public
n_	src/comb/setpart-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits in RGS$/;"	m	class:setpart_rgs_subset_lex	access:public
n_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
n_	src/comb/setpart-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_zero_map_rgs	access:public
n_	src/comb/setpart.h	/^    int n_;     \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart	access:public
n_	src/comb/skew-binary.h	/^    ulong n_;    \/\/ Number of digits$/;"	m	class:skew_binary	access:public
n_	src/comb/smooth-rfact-rgs.h	/^    ulong n_;    \/\/ number of digits$/;"	m	class:smooth_rfact_rgs	access:public
n_	src/comb/subset-deltalex.h	/^    ulong n_;   \/\/ subsets of the  n-set {0,1,2,...,n-1}$/;"	m	class:subset_deltalex	access:public
n_	src/comb/subset-gray-delta.h	/^    ulong n_;   \/\/ number of elements in set <= BITS_PER_LONG$/;"	m	class:subset_gray_delta	access:public
n_	src/comb/subset-gray.h	/^    ulong n_;   \/\/ subsets of the n-set;  must have n>=1$/;"	m	class:subset_gray	access:public
n_	src/comb/subset-lex.h	/^    ulong n_;   \/\/ number of elements in set, should have n>=1$/;"	m	class:subset_lex	access:public
n_	src/comb/tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:tree_lev_seq	access:private
n_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:weakly_unimodal_rgs_lex	access:public
n_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong n_;   \/\/ length of string$/;"	m	class:young_tab_rgs_subset_lex	access:public
n_	src/comb/young-tab-rgs.h	/^    ulong n_;   \/\/ length of string$/;"	m	class:young_tab_rgs	access:public
n_	src/ds/attic/coroutine.h	/^    ulong  n_;  \/\/ size of stacks$/;"	m	class:coroutine	access:public
n_	src/ds/attic/priorityqueue1.h	/^    ulong n_;    \/\/ current number of events$/;"	m	class:priority_queue1	access:public
n_	src/ds/attic/rarray.h	/^    ulong  n_;  \/\/ position of next write, top entry @ n-1$/;"	m	class:rarray	access:public
n_	src/ds/attic/rset.h	/^    ulong  n_;  \/\/ position of next write, top entry @ n-1$/;"	m	class:rset	access:public
n_	src/ds/bitarray.h	/^    ulong n_;    \/\/ number of bits$/;"	m	class:bitarray	access:public
n_	src/ds/deque.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:deque	access:public
n_	src/ds/left-right-array.h	/^    ulong n_;    \/\/ total number of indices$/;"	m	class:left_right_array	access:public
n_	src/ds/priorityqueue.h	/^    ulong n_;    \/\/ current number of events$/;"	m	class:priority_queue	access:public
n_	src/ds/queue.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:queue	access:public
n_	src/ds/ringbuffer.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:ringbuffer	access:public
n_	src/graph/lyndon-gray.h	/^    ulong n_, n2_;  \/\/ n-bit Lyndon words, n2=2**n$/;"	m	class:lyndon_gray	access:public
n_	src/matrix/vector.h	/^    ulong n_;  \/\/ #elems$/;"	m	class:vector	access:public
n_	src/mod/divisors.h	/^    ulong n_;    \/\/ number of prime factors$/;"	m	class:divisors	access:public
n_	src/perm/attic/cycles.h	/^    ulong n_;   \/\/ # of allocated elements$/;"	m	class:cycles	access:public
n_	src/wavelet/waveletfilter.h	/^    ulong n_;    \/\/ number of taps$/;"	m	class:wavelet_filter	access:public
n_equiv_q	demo/sort/equivclass-necklaces-demo.cc	/^bool n_equiv_q(ulong x, ulong y)  \/\/ necklaces$/;"	f	signature:(ulong x, ulong y)
naf2bin	doc/bits-doc.txt	/^static inline ulong naf2bin(ulong np, ulong nm);$/;"	p	file:	signature:(ulong np, ulong nm)
naf2bin	src/bits/bin2naf.h	/^static inline ulong naf2bin(ulong np, ulong nm)$/;"	f	signature:(ulong np, ulong nm)
names	scripts/chkxfiles.sh	/^    TT=${TT\/$f\/};  # unsafe: can remove part of names, e.g., autodoc.log --> auto.log$/;"	v
nb	demo/sort/equivclass-bitstring-demo.cc	/^static ulong nb;  \/\/ number of bits$/;"	v	file:
nb	demo/sort/equivclass-bracelets-demo.cc	/^static ulong nb;  \/\/ number of bits$/;"	v	file:
nb	demo/sort/equivclass-necklaces-demo.cc	/^static ulong nb;  \/\/ number of bits$/;"	v	file:
nbits	src/graph/mk-special-digraphs.h	/^    ulong nbits;  \/\/ number of bits of Lyndon words$/;"	m	class:lyngray_dat	access:public
nc_	src/comb/num-compositions.h	/^    ulong **nc_;  \/\/ nc[n-1][k-1] = binomial(n+k-1, n)$/;"	m	class:num_compositions	access:public
nc_	src/ds/array2d.h	/^    ulong nr_, nc_;  \/\/ #rows, #cols$/;"	m	class:array2d	access:protected
nc_	src/perm/attic/cycles.h	/^    ulong nc_;  \/\/ # of cycles$/;"	m	class:cycles	access:public
nce_	src/perm/attic/cycles.h	/^    ulong nce_; \/\/ # of elements in nontrivial cycles$/;"	m	class:cycles	access:public
nd	demo/arith/briggs-log-demo.cc	/^const long nd = 9;  \/\/ Number of Digits displayed$/;"	v
nd	demo/arith/cordic-circ-demo.cc	/^const long nd = 9;  \/\/ Number of Digits displayed$/;"	v
nd	demo/arith/cordic-hyp-demo.cc	/^const long nd = 9;  \/\/ Number of Digits displayed$/;"	v
nd	demo/arith/shiftadd-exp-demo.cc	/^const long nd = 9;  \/\/ Number of Digits displayed$/;"	v
nd	demo/arith/shiftadd-log-demo.cc	/^const long nd = 9;  \/\/ Number of Digits displayed$/;"	v
nd	src/aux0/attic/funcemu.h	/^    ulong  nd;  \/\/ size of data stack$/;"	m	class:funcemu	access:public
ndb_	src/comb/attic/binarydebruijn.h	/^    ulong ndb_;$/;"	m	class:binary_debruijn	access:public
ndbac_	src/comb/attic/binarydebruijn.h	/^    ulong ndbac_;  \/\/ to avoid cyclic search$/;"	m	class:binary_debruijn	access:public
ndim_fft	src/fft/attic/ndimfft.cc	/^ndim_fft(double *fr, double *fi,$/;"	f	signature:(double *fr, double *fi, ulong ndim, const ulong *ldn, int is)
ne_count	src/sort/attic/ucount.h	/^inline ulong ne_count(const Type *f, ulong n, Type v)$/;"	f	signature:(const Type *f, ulong n, Type v)
necklace	src/comb/necklace.h	/^    explicit necklace(ulong m, ulong n)$/;"	f	class:necklace	access:public	signature:(ulong m, ulong n)
necklace	src/comb/necklace.h	/^    necklace(const necklace&);  \/\/ forbidden$/;"	p	class:necklace	access:private	signature:(const necklace&)
necklace	src/comb/necklace.h	/^class necklace$/;"	c
necklace2bitpol	src/bpol/necklace2bitpol.h	/^    explicit necklace2bitpol(ulong n, ulong c=0, ulong a=0)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong n, ulong c=0, ulong a=0)
necklace2bitpol	src/bpol/necklace2bitpol.h	/^    necklace2bitpol(const necklace2bitpol&);  \/\/ forbidden$/;"	p	class:necklace2bitpol	access:private	signature:(const necklace2bitpol&)
necklace2bitpol	src/bpol/necklace2bitpol.h	/^class necklace2bitpol$/;"	c
necklace2bitpol::a_	src/bpol/necklace2bitpol.h	/^    ulong a_;  \/\/ generator modulo c$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::bp_	src/bpol/necklace2bitpol.h	/^    ulong bp_;  \/\/ result as bit-vector$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::c_	src/bpol/necklace2bitpol.h	/^    ulong c_;  \/\/ modulus (irreducible polynomial)$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::e_	src/bpol/necklace2bitpol.h	/^    ulong e_;  \/\/ a^b$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::h_	src/bpol/necklace2bitpol.h	/^    ulong h_;  \/\/ mask used for computation$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::init	src/bpol/necklace2bitpol.h	/^    void init(ulong n, ulong c=0, ulong a=0)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong n, ulong c=0, ulong a=0)
necklace2bitpol::n_	src/bpol/necklace2bitpol.h	/^    ulong n_;  \/\/ degree of c_$/;"	m	class:necklace2bitpol	access:public
necklace2bitpol::necklace2bitpol	src/bpol/necklace2bitpol.h	/^    explicit necklace2bitpol(ulong n, ulong c=0, ulong a=0)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong n, ulong c=0, ulong a=0)
necklace2bitpol::necklace2bitpol	src/bpol/necklace2bitpol.h	/^    necklace2bitpol(const necklace2bitpol&);  \/\/ forbidden$/;"	p	class:necklace2bitpol	access:private	signature:(const necklace2bitpol&)
necklace2bitpol::operator =	src/bpol/necklace2bitpol.h	/^    necklace2bitpol & operator = (const necklace2bitpol&);  \/\/ forbidden$/;"	p	class:necklace2bitpol	access:private	signature:(const necklace2bitpol&)
necklace2bitpol::poly	src/bpol/necklace2bitpol.h	/^    ulong poly(ulong b)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong b)
necklace2bitpol::~necklace2bitpol	src/bpol/necklace2bitpol.h	/^    ~necklace2bitpol()  { ; }$/;"	f	class:necklace2bitpol	access:public	signature:()
necklace::a_	src/comb/necklace.h	/^    ulong *a_;  \/\/ the string, NOTE: one-based$/;"	m	class:necklace	access:public
necklace::data	src/comb/necklace.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:necklace	access:public	signature:() const
necklace::dv_	src/comb/necklace.h	/^    ulong *dv_;  \/\/ delta sequence of divisors of n$/;"	m	class:necklace	access:public
necklace::first	src/comb/necklace.h	/^    void first()$/;"	f	class:necklace	access:public	signature:()
necklace::is_lyn	src/comb/necklace.h	/^    bool is_lyn()  const$/;"	f	class:necklace	access:public	signature:() const
necklace::is_necklace	src/comb/necklace.h	/^    bool is_necklace()  const$/;"	f	class:necklace	access:public	signature:() const
necklace::j_	src/comb/necklace.h	/^    ulong j_;   \/\/ period of the word (if necklaces)$/;"	m	class:necklace	access:public
necklace::m1_	src/comb/necklace.h	/^    ulong m1_;  \/\/ m-ary strings, m1=m-1$/;"	m	class:necklace	access:public
necklace::n_	src/comb/necklace.h	/^    ulong n_;   \/\/ length of strings$/;"	m	class:necklace	access:public
necklace::necklace	src/comb/necklace.h	/^    explicit necklace(ulong m, ulong n)$/;"	f	class:necklace	access:public	signature:(ulong m, ulong n)
necklace::necklace	src/comb/necklace.h	/^    necklace(const necklace&);  \/\/ forbidden$/;"	p	class:necklace	access:private	signature:(const necklace&)
necklace::next	src/comb/necklace.h	/^    ulong next()  \/\/ next necklace$/;"	f	class:necklace	access:public	signature:()
necklace::next_lyn	src/comb/necklace.h	/^    ulong next_lyn()  \/\/ next Lyndon word$/;"	f	class:necklace	access:public	signature:()
necklace::next_pre	src/comb/necklace.h	/^    ulong next_pre()  \/\/ next pre-necklace$/;"	f	class:necklace	access:public	signature:()
necklace::operator =	src/comb/necklace.h	/^    necklace & operator = (const necklace&);  \/\/ forbidden$/;"	p	class:necklace	access:private	signature:(const necklace&)
necklace::~necklace	src/comb/necklace.h	/^    ~necklace()$/;"	f	class:necklace	access:public	signature:()
necklaces	fxt.lsm	/^                subsets, multisets, Gray codes, Catalan objects, necklaces, Lyndon words.$/;"	v
neg2bin	doc/bits-doc.txt	/^static inline ulong neg2bin(ulong x);$/;"	p	file:	signature:(ulong x)
neg2bin	src/bits/negbin.h	/^static inline ulong neg2bin(ulong x)$/;"	f	signature:(ulong x)
neg_mod	doc/mod-doc.txt	/^inline umod_t neg_mod(umod_t b, umod_t m);$/;"	p	file:	signature:(umod_t b, umod_t m)
neg_mod	src/mod/modarith.h	/^inline umod_t neg_mod(umod_t b, umod_t m)$/;"	f	signature:(umod_t b, umod_t m)
negacyclic_complex_auto_convolution	doc/convolution-doc.txt	/^void negacyclic_complex_auto_convolution(Complex *f, ulong ldn, double v\/*=0.0*\/);$/;"	p	file:	signature:(Complex *f, ulong ldn, double v )
negacyclic_complex_auto_convolution	doc/convolution-doc.txt	/^void negacyclic_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, double v )
negacyclic_complex_auto_convolution	src/convolution/weightedconv.cc	/^negacyclic_complex_auto_convolution(Complex *f, ulong ldn, double v\/*=0.0*\/)$/;"	f	signature:(Complex *f, ulong ldn, double v )
negacyclic_complex_auto_convolution	src/convolution/weightedconv.cc	/^negacyclic_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	f	signature:(double *fr, double *fi, ulong ldn, double v )
negacyclic_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void negacyclic_complex_auto_convolution(Complex *f, ulong ldn, double v=0.0);$/;"	p	signature:(Complex *f, ulong ldn, double v=0.0)
negacyclic_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void negacyclic_complex_auto_convolution(double *fr, double *fi, ulong ldn, double v=0.0);$/;"	p	signature:(double *fr, double *fi, ulong ldn, double v=0.0)
negate	doc/aux1-doc.txt	/^inline void negate(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
negate	src/aux1/arith1.h	/^inline void negate(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
negate	src/aux2/attic/arith2d.h	/^inline void negate(Type **f, ulong nr, ulong nc)$/;"	f	signature:(Type **f, ulong nr, ulong nc)
negate	src/mod/mod.h	/^    mod & negate()  { x_ = neg_mod(x_, mod::modulus);  return *this; }$/;"	f	class:mod	access:public	signature:()
negate_all_blocks	src/bits/bitsubset.h	/^    ulong negate_all_blocks()  { complement();  return next_all_blocks(); }$/;"	f	class:bit_subset	access:public	signature:()
negbin_add	doc/bits-doc.txt	/^static inline ulong negbin_add(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
negbin_add	src/bits/negbin.h	/^static inline ulong negbin_add(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
negbin_fixed_point	doc/bits-doc.txt	/^static inline ulong negbin_fixed_point(ulong k);$/;"	p	file:	signature:(ulong k)
negbin_fixed_point	src/bits/negbin.h	/^static inline ulong negbin_fixed_point(ulong k)$/;"	f	signature:(ulong k)
negidx2lexrev	doc/bits-doc.txt	/^static inline ulong negidx2lexrev(ulong k);$/;"	p	file:	signature:(ulong k)
negidx2lexrev	src/bits/bitlex.h	/^static inline ulong negidx2lexrev(ulong k)$/;"	f	signature:(ulong k)
neighbors	src/graph/lyndon-gray.h	/^    ulong neighbors(ulong p)$/;"	f	class:lyndon_gray	access:public	signature:(ulong p)
neighbours	doc/wfl-hilbert-doc.txt	/^        neighbours, and visiting each node just once;$/;"	v
neighbours	doc/wfl-hilbert-doc.txt	/^d-space, and whose edges join nearest neighbours; the Cartesian coordinate$/;"	v
nelem	src/aux1/attic/array.h	/^    ulong nelem()  const  { return n_; }$/;"	f	class:array	access:public	signature:() const
new_array	src/ds/point2d.h	/^    static point2d * new_array(ulong n)  { return new point2d[n]; }$/;"	f	class:point2d	access:public	signature:(ulong n)
new_array	src/ds/point3d.h	/^    static point3d * new_array(ulong n)  { return new point3d[n]; }$/;"	f	class:point3d	access:public	signature:(ulong n)
new_array	src/ds/vector2d.h	/^    static vector2d * new_array(ulong n)  { return new vector2d[n]; }$/;"	f	class:vector2d	access:public	signature:(ulong n)
new_array	src/ds/vector3d.h	/^    static vector3d * new_array(ulong n)  { return new vector3d[n]; }$/;"	f	class:vector3d	access:public	signature:(ulong n)
next	demo/seq/A278479-demo.cc	/^    ulong next()$/;"	f	class:triang_num	access:public	signature:()
next	doc/wfl-hilbert-doc.txt	/^ jump(step), jump(coord), and next(), last() in terms of those.$/;"	p	file:	signature:()
next	src/aux0/attic/trigrec.h	/^    void next(Type &s, Type &c)$/;"	f	class:trigrec	access:public	signature:(Type &s, Type &c)
next	src/bits/bit-necklace.h	/^    ulong next()$/;"	f	class:bit_necklace	access:public	signature:()
next	src/bits/bit-rll2.h	/^    ulong next()  { return step( w_ ); }$/;"	f	class:bit_rll2	access:public	signature:()
next	src/bits/bit-sl-gray.h	/^    ulong next()$/;"	f	class:bit_sl_gray	access:public	signature:()
next	src/bits/bitcombshifts.h	/^    ulong next()$/;"	f	class:bit_comb_shifts	access:public	signature:()
next	src/bits/bitfibgray.h	/^    ulong next()$/;"	f	class:bit_fibgray	access:public	signature:()
next	src/bits/bitsubset-gray.h	/^    ulong next()$/;"	f	class:bit_subset_gray	access:public	signature:()
next	src/bits/bitsubset.h	/^    ulong next()  { U = (U - V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
next	src/bits/kolakoski-seq.h	/^    ulong next()$/;"	f	class:kolakoski_seq	access:public	signature:()
next	src/bits/thue-morse.h	/^    ulong next()$/;"	f	class:thue_morse	access:public	signature:()
next	src/bpol/all-irredpoly.h	/^    ulong next()  \/\/ return poly, zero if there are no more$/;"	f	class:all_irredpoly	access:public	signature:()
next	src/bpol/fcsr.h	/^    ulong next()$/;"	f	class:fcsr	access:public	signature:()
next	src/bpol/lfsr.h	/^    ulong next()$/;"	f	class:lfsr	access:public	signature:()
next	src/bpol/lfsr64.h	/^    unsigned long long next()$/;"	f	class:lfsr64	access:public	signature:()
next	src/bpol/mersenne-coprime.h	/^    bool next()$/;"	f	class:mersenne_coprime	access:public	signature:()
next	src/comb/acyclic-map.h	/^    bool next()$/;"	f	class:acyclic_map	access:public	signature:()
next	src/comb/arrangement-lex.h	/^    ulong next()$/;"	f	class:arrangement_lex	access:public	signature:()
next	src/comb/arrangement-rgs.h	/^    ulong next()$/;"	f	class:arrangement_rgs	access:public	signature:()
next	src/comb/ascent-alt-rgs.h	/^    ulong next()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
next	src/comb/ascent-nonflat-rgs.h	/^    ulong next()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
next	src/comb/ascent-rgs-subset-lex.h	/^    ulong next()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
next	src/comb/ascent-rgs.h	/^    ulong next()$/;"	f	class:ascent_rgs	access:public	signature:()
next	src/comb/attic/ascent-rgs.h	/^    ulong next()$/;"	f	class:ascent_rgs	access:public	signature:()
next	src/comb/attic/binarydebruijn.cc	/^binary_debruijn::next()$/;"	f	class:binary_debruijn	signature:()
next	src/comb/attic/binarydebruijn.h	/^    ulong next();$/;"	p	class:binary_debruijn	access:public	signature:()
next	src/comb/attic/combcolex.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_colex	access:public	signature:()
next	src/comb/attic/combination-altminchange.h	/^    ulong next()  \/\/ return zero if current combination is the last$/;"	f	class:combination_altminchange	access:public	signature:()
next	src/comb/attic/combination-minchange.h	/^    ulong next()  \/\/ return zero if current combination is the last$/;"	f	class:combination_minchange	access:public	signature:()
next	src/comb/attic/comblex.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_lex	access:public	signature:()
next	src/comb/attic/combminchange.h	/^    ulong next()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_minchange	access:public	signature:()
next	src/comb/attic/composition-chase.h	/^    bool next()$/;"	f	class:composition_chase	access:public	signature:()
next	src/comb/attic/compositionalt.h	/^    ulong next()  \/\/ return zero if current comb is the last$/;"	f	class:composition_alt	access:public	signature:()
next	src/comb/attic/perm-minchange.h	/^    ulong next()  { return make_next(n_-1); }  \/\/ return 0 if on last permutation$/;"	f	class:perm_minchange	access:public	signature:()
next	src/comb/attic/perm-trotter.h	/^    bool next()$/;"	f	class:perm_trotter	access:public	signature:()
next	src/comb/attic/permvisit.h	/^    ulong next()$/;"	f	class:perm_visit	access:public	signature:()
next	src/comb/attic/subset-monotone.h	/^    ulong next()  \/\/ return number of elements in subset$/;"	f	class:subset_monotone	access:public	signature:()
next	src/comb/attic/subsetdebruijn.h	/^    ulong next()  \/\/ return number of elements in subset$/;"	f	class:subset_debruijn	access:public	signature:()
next	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong next()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
next	src/comb/binary-huffman.h	/^    ulong next()$/;"	f	class:binary_huffman	access:public	signature:()
next	src/comb/binary-necklace.h	/^    ulong next()  \/\/ next necklace$/;"	f	class:binary_necklace	access:public	signature:()
next	src/comb/binary-sl-gray.h	/^    bool next()$/;"	f	class:binary_sl_gray	access:public	signature:()
next	src/comb/catalan-path-lex.h	/^    ulong next()$/;"	f	class:catalan_path_lex	access:public	signature:()
next	src/comb/catalan-rgs-gray.h	/^    ulong next()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
next	src/comb/catalan-rgs-gslex.h	/^    bool next()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
next	src/comb/catalan-rgs-subset-lex.h	/^    bool next()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
next	src/comb/catalan-rgs.h	/^    ulong next()$/;"	f	class:catalan_rgs	access:public	signature:()
next	src/comb/catalan-step-rgs-colex.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
next	src/comb/catalan-step-rgs-lex.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
next	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong next()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
next	src/comb/catalan.h	/^    bool next()  { return next_rec(n_-1); }$/;"	f	class:catalan	access:public	signature:()
next	src/comb/cayley-perm.h	/^    bool next()$/;"	f	class:cayley_perm	access:public	signature:()
next	src/comb/change-rgs.h	/^    ulong next()$/;"	f	class:change_rgs	access:public	signature:()
next	src/comb/combination-chase.h	/^    bool next()$/;"	f	class:combination_chase	access:public	signature:()
next	src/comb/combination-colex.h	/^    ulong next()$/;"	f	class:combination_colex	access:public	signature:()
next	src/comb/combination-emk.h	/^    ulong next()$/;"	f	class:combination_emk	access:public	signature:()
next	src/comb/combination-endo.h	/^    ulong next()$/;"	f	class:combination_endo	access:public	signature:()
next	src/comb/combination-enup.h	/^    ulong next()$/;"	f	class:combination_enup	access:public	signature:()
next	src/comb/combination-lex.h	/^    ulong next()$/;"	f	class:combination_lex	access:public	signature:()
next	src/comb/combination-mod.h	/^    ulong next()$/;"	f	class:combination_mod	access:public	signature:()
next	src/comb/combination-pref.h	/^    bool next()$/;"	f	class:combination_pref	access:public	signature:()
next	src/comb/combination-revdoor.h	/^    bool next()$/;"	f	class:combination_revdoor	access:public	signature:()
next	src/comb/composition-colex.h	/^    ulong next()$/;"	f	class:composition_colex	access:public	signature:()
next	src/comb/composition-colex2.h	/^    ulong next()$/;"	f	class:composition_colex2	access:public	signature:()
next	src/comb/composition-dist-unimodal.h	/^    ulong next()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
next	src/comb/composition-ex-colex.h	/^    ulong next()$/;"	f	class:composition_ex_colex	access:public	signature:()
next	src/comb/composition-ex-lex.h	/^    ulong next()$/;"	f	class:composition_ex_lex	access:public	signature:()
next	src/comb/composition-nz-binary.h	/^    ulong next()$/;"	f	class:composition_nz_binary	access:public	signature:()
next	src/comb/composition-nz-carlitz.h	/^    ulong next()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
next	src/comb/composition-nz-first-max.h	/^    ulong next()$/;"	f	class:composition_nz_first_max	access:public	signature:()
next	src/comb/composition-nz-gray.h	/^    ulong next()$/;"	f	class:composition_nz_gray	access:public	signature:()
next	src/comb/composition-nz-gray2.h	/^    ulong next()$/;"	f	class:composition_nz_gray2	access:public	signature:()
next	src/comb/composition-nz-i-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
next	src/comb/composition-nz-left-2smooth.h	/^    ulong next()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
next	src/comb/composition-nz-left-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
next	src/comb/composition-nz-max.h	/^    ulong next()$/;"	f	class:composition_nz_max	access:public	signature:()
next	src/comb/composition-nz-min.h	/^    ulong next()$/;"	f	class:composition_nz_min	access:public	signature:()
next	src/comb/composition-nz-minc.h	/^    ulong next()$/;"	f	class:composition_nz_minc	access:public	signature:()
next	src/comb/composition-nz-numparts.h	/^    ulong next()$/;"	f	class:composition_nz_numparts	access:public	signature:()
next	src/comb/composition-nz-odd-subset-lex.h	/^    ulong next()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
next	src/comb/composition-nz-odd.h	/^    ulong next()$/;"	f	class:composition_nz_odd	access:public	signature:()
next	src/comb/composition-nz-restrpref.h	/^    ulong next()$/;"	f	class:composition_nz_restrpref	access:public	signature:()
next	src/comb/composition-nz-rl.h	/^    ulong next()$/;"	f	class:composition_nz_rl	access:public	signature:()
next	src/comb/composition-nz-smooth.h	/^    ulong next()$/;"	f	class:composition_nz_smooth	access:public	signature:()
next	src/comb/composition-nz-sorts.h	/^    ulong next()$/;"	f	class:composition_nz_sorts	access:public	signature:()
next	src/comb/composition-nz-sorts2-pp.h	/^    ulong next()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
next	src/comb/composition-nz-sorts2.h	/^    ulong next()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
next	src/comb/composition-nz-subset-lex.h	/^    ulong next()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
next	src/comb/composition-nz-superdiagonal.h	/^    ulong next()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
next	src/comb/composition-nz-upstep.h	/^    ulong next()$/;"	f	class:composition_nz_upstep	access:public	signature:()
next	src/comb/composition-nz-weakly-unimodal.h	/^    ulong next()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
next	src/comb/composition-nz.h	/^    ulong next()$/;"	f	class:composition_nz	access:public	signature:()
next	src/comb/composition-unimodal.h	/^    ulong next()$/;"	f	class:composition_unimodal	access:public	signature:()
next	src/comb/cyclic-perm.h	/^    bool next()$/;"	f	class:cyclic_perm	access:public	signature:()
next	src/comb/descent-rgs.h	/^    ulong next()$/;"	f	class:descent_rgs	access:public	signature:()
next	src/comb/dyck-gray.h	/^    ulong next()$/;"	f	class:dyck_gray	access:public	signature:()
next	src/comb/dyck-gray2.h	/^    ulong next()$/;"	f	class:dyck_gray2	access:public	signature:()
next	src/comb/dyck-pref.h	/^    bool next()$/;"	f	class:dyck_pref	access:public	signature:()
next	src/comb/dyck-pref2.h	/^    bool next()$/;"	f	class:dyck_pref2	access:public	signature:()
next	src/comb/dyck-rgs-subset-lex.h	/^    bool next()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
next	src/comb/dyck-rgs.h	/^    ulong next()$/;"	f	class:dyck_rgs	access:public	signature:()
next	src/comb/gray-cycle-leaders.h	/^    bool next()  { return ( 0 != B_.next() ); }$/;"	f	class:gray_cycle_leaders	access:public	signature:()
next	src/comb/id-tree-lev-seq.h	/^    ulong next()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
next	src/comb/involution-zero-map-rgs.h	/^    ulong next()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
next	src/comb/isoscent-rgs.h	/^    ulong next()$/;"	f	class:isoscent_rgs	access:public	signature:()
next	src/comb/kperm-gray.h	/^    bool next()$/;"	f	class:kperm_gray	access:public	signature:()
next	src/comb/kperm-lex.h	/^    bool next()$/;"	f	class:kperm_lex	access:public	signature:()
next	src/comb/ksubset-gray.h	/^    ulong next()$/;"	f	class:ksubset_gray	access:public	signature:()
next	src/comb/ksubset-lex.h	/^    ulong next()$/;"	f	class:ksubset_lex	access:public	signature:()
next	src/comb/lyndon-words.h	/^    ulong next()$/;"	f	class:lyndon_words	access:public	signature:()
next	src/comb/map23-rgs.h	/^    ulong next()$/;"	f	class:map23_rgs	access:public	signature:()
next	src/comb/mixedradix-colex.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_colex	access:public	signature:()
next	src/comb/mixedradix-endo-gray.h	/^    bool next()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
next	src/comb/mixedradix-endo.h	/^    bool next()$/;"	f	class:mixedradix_endo	access:public	signature:()
next	src/comb/mixedradix-gray.h	/^    bool next()$/;"	f	class:mixedradix_gray	access:public	signature:()
next	src/comb/mixedradix-gray2.h	/^    bool next()$/;"	f	class:mixedradix_gray2	access:public	signature:()
next	src/comb/mixedradix-gslex-alt.h	/^    bool next()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
next	src/comb/mixedradix-gslex-alt2.h	/^    bool next()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
next	src/comb/mixedradix-gslex.h	/^    bool next()$/;"	f	class:mixedradix_gslex	access:public	signature:()
next	src/comb/mixedradix-gslex2.h	/^    ulong next()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
next	src/comb/mixedradix-lex.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_lex	access:public	signature:()
next	src/comb/mixedradix-modular-gray.h	/^    bool next()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
next	src/comb/mixedradix-modular-gray2.h	/^    bool next()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
next	src/comb/mixedradix-naf-gray.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
next	src/comb/mixedradix-naf-subset-lex.h	/^    bool next()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
next	src/comb/mixedradix-naf.h	/^    bool next()  \/\/ increment$/;"	f	class:mixedradix_naf	access:public	signature:()
next	src/comb/mixedradix-restrpref.h	/^    bool next()$/;"	f	class:mixedradix_restrpref	access:public	signature:()
next	src/comb/mixedradix-rfact.h	/^    ulong next()$/;"	f	class:mixedradix_rfact	access:public	signature:()
next	src/comb/mixedradix-sl-gray.h	/^    bool next()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
next	src/comb/mixedradix-sod-lex.h	/^    bool next()$/;"	f	class:mixedradix_sod_lex	access:public	signature:()
next	src/comb/mixedradix-subset-lex.h	/^    bool next()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
next	src/comb/mixedradix-subset-lexrev.h	/^    bool next()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
next	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
next	src/comb/motzkin-path-lex.h	/^    ulong next()$/;"	f	class:motzkin_path_lex	access:public	signature:()
next	src/comb/motzkin-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
next	src/comb/motzkin-step-rgs-lex.h	/^    ulong next()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
next	src/comb/mpartition.h	/^    bool next()$/;"	f	class:mpartition	access:public	signature:()
next	src/comb/mpartition2.h	/^    bool next()$/;"	f	class:mpartition2	access:public	signature:()
next	src/comb/mset-perm-gray.h	/^    bool next()$/;"	f	class:mset_perm_gray	access:public	signature:()
next	src/comb/mset-perm-lex.h	/^    ulong next()$/;"	f	class:mset_perm_lex	access:public	signature:()
next	src/comb/mset-perm-pref.h	/^    ulong next()$/;"	f	class:mset_perm_pref	access:public	signature:()
next	src/comb/necklace.h	/^    ulong next()  \/\/ next necklace$/;"	f	class:necklace	access:public	signature:()
next	src/comb/ordered-tree-branches.h	/^    ulong next()$/;"	f	class:ordered_tree_branches	access:public	signature:()
next	src/comb/ordered-tree-branching-seq.h	/^    ulong next()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
next	src/comb/ordered-tree-lev-seq.h	/^    ulong next()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
next	src/comb/paren-gray.h	/^    bool next()$/;"	f	class:paren_gray	access:public	signature:()
next	src/comb/paren-lex.h	/^    ulong next()$/;"	f	class:paren_lex	access:public	signature:()
next	src/comb/paren-pref.h	/^    bool next()$/;"	f	class:paren_pref	access:public	signature:()
next	src/comb/paren.h	/^    ulong next()  \/\/ return zero if current paren is the last$/;"	f	class:paren	access:public	signature:()
next	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
next	src/comb/partition-2fall-asc.h	/^    ulong next()$/;"	f	class:partition_2fall_asc	access:public	signature:()
next	src/comb/partition-2fall-desc.h	/^    ulong next()$/;"	f	class:partition_2fall_desc	access:public	signature:()
next	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong next()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
next	src/comb/partition-asc-2rep.h	/^    ulong next()$/;"	f	class:partition_asc_2rep	access:public	signature:()
next	src/comb/partition-asc-perim.h	/^    ulong next()$/;"	f	class:partition_asc_perim	access:public	signature:()
next	src/comb/partition-asc-sorts.h	/^    ulong next()$/;"	f	class:partition_asc_sorts	access:public	signature:()
next	src/comb/partition-asc-sorts2-pp.h	/^    ulong next()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
next	src/comb/partition-asc-sorts2.h	/^    ulong next()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
next	src/comb/partition-asc-subset-lex-csh.h	/^    ulong next()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
next	src/comb/partition-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
next	src/comb/partition-asc.h	/^    ulong next()$/;"	f	class:partition_asc	access:public	signature:()
next	src/comb/partition-binary-asc.h	/^    ulong next()$/;"	f	class:partition_binary_asc	access:public	signature:()
next	src/comb/partition-binary-desc.h	/^    ulong next()$/;"	f	class:partition_binary_desc	access:public	signature:()
next	src/comb/partition-desc-bb.h	/^    ulong next()$/;"	f	class:partition_desc_bb	access:public	signature:()
next	src/comb/partition-desc.h	/^    ulong next()$/;"	f	class:partition_desc	access:public	signature:()
next	src/comb/partition-dist-asc-len.h	/^    ulong next()$/;"	f	class:partition_dist_asc_len	access:public	signature:()
next	src/comb/partition-dist-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
next	src/comb/partition-dist-asc.h	/^    ulong next()$/;"	f	class:partition_dist_asc	access:public	signature:()
next	src/comb/partition-dist-d-asc.h	/^    ulong next()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
next	src/comb/partition-dist-desc.h	/^    ulong next()$/;"	f	class:partition_dist_desc	access:public	signature:()
next	src/comb/partition-gen.cc	/^partition_gen::next()$/;"	f	class:partition_gen	signature:()
next	src/comb/partition-gen.h	/^    ulong next();  \/\/ generate next partition$/;"	p	class:partition_gen	access:public	signature:()
next	src/comb/partition-nonsquashing-desc.h	/^    ulong next()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
next	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong next()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
next	src/comb/partition-odd-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
next	src/comb/partition-odd-asc.h	/^    ulong next()$/;"	f	class:partition_odd_asc	access:public	signature:()
next	src/comb/partition-odd-desc.h	/^    ulong next()$/;"	f	class:partition_odd_desc	access:public	signature:()
next	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong next()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
next	src/comb/partition-rgs-lex.h	/^    ulong next()$/;"	f	class:partition_rgs_lex	access:public	signature:()
next	src/comb/partition-s-desc.h	/^    ulong next()$/;"	f	class:partition_s_desc	access:public	signature:()
next	src/comb/partition-strongly-decr-desc.h	/^    ulong next()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
next	src/comb/partition.h	/^    bool next()$/;"	f	class:partition	access:public	signature:()
next	src/comb/perm-colex.h	/^    bool next()$/;"	f	class:perm_colex	access:public	signature:()
next	src/comb/perm-derange.h	/^    bool next()$/;"	f	class:perm_derange	access:public	signature:()
next	src/comb/perm-gray-ffact.h	/^    bool next()$/;"	f	class:perm_gray_ffact	access:public	signature:()
next	src/comb/perm-gray-ffact2.h	/^    bool next()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
next	src/comb/perm-gray-lipski.h	/^    bool next()$/;"	f	class:perm_gray_lipski	access:public	signature:()
next	src/comb/perm-gray-rfact.h	/^    bool next()$/;"	f	class:perm_gray_rfact	access:public	signature:()
next	src/comb/perm-gray-rot1.h	/^    bool next()$/;"	f	class:perm_gray_rot1	access:public	signature:()
next	src/comb/perm-gray-wells.h	/^    bool next()$/;"	f	class:perm_gray_wells	access:public	signature:()
next	src/comb/perm-heap.h	/^    bool next()$/;"	f	class:perm_heap	access:public	signature:()
next	src/comb/perm-heap2-swaps.h	/^    ulong next()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
next	src/comb/perm-heap2.h	/^    ulong next()$/;"	f	class:perm_heap2	access:public	signature:()
next	src/comb/perm-involution.h	/^    bool next()$/;"	f	class:perm_involution	access:public	signature:()
next	src/comb/perm-ives.h	/^    bool next()$/;"	f	class:perm_ives	access:public	signature:()
next	src/comb/perm-lex-inv.h	/^    bool next()$/;"	f	class:perm_lex_inv	access:public	signature:()
next	src/comb/perm-lex.h	/^    bool next()$/;"	f	class:perm_lex	access:public	signature:()
next	src/comb/perm-lex2.h	/^    bool next()$/;"	f	class:perm_lex2	access:public	signature:()
next	src/comb/perm-mv0.h	/^    bool next()$/;"	f	class:perm_mv0	access:public	signature:()
next	src/comb/perm-pref.h	/^    ulong next()$/;"	f	class:perm_pref	access:public	signature:()
next	src/comb/perm-rev.h	/^    bool next()$/;"	f	class:perm_rev	access:public	signature:()
next	src/comb/perm-rev2.h	/^    ulong next()$/;"	f	class:perm_rev2	access:public	signature:()
next	src/comb/perm-rot.h	/^    bool next()$/;"	f	class:perm_rot	access:public	signature:()
next	src/comb/perm-st-gray.h	/^    bool next()$/;"	f	class:perm_st_gray	access:public	signature:()
next	src/comb/perm-st-pref.h	/^    bool next()$/;"	f	class:perm_st_pref	access:public	signature:()
next	src/comb/perm-st.h	/^    bool next()$/;"	f	class:perm_st	access:public	signature:()
next	src/comb/perm-star-swaps.h	/^    bool next()$/;"	f	class:perm_star_swaps	access:public	signature:()
next	src/comb/perm-star.h	/^    bool next()$/;"	f	class:perm_star	access:public	signature:()
next	src/comb/perm-trotter-lg.h	/^    bool next()$/;"	f	class:perm_trotter_lg	access:public	signature:()
next	src/comb/perm-trotter.h	/^    bool next()$/;"	f	class:perm_trotter	access:public	signature:()
next	src/comb/rgs-fincr.h	/^    ulong next()$/;"	f	class:rgs_fincr	access:public	signature:()
next	src/comb/rgs-kincr.h	/^    ulong next()$/;"	f	class:rgs_kincr	access:public	signature:()
next	src/comb/rgs-maxincr.h	/^    ulong next()$/;"	f	class:rgs_maxincr	access:public	signature:()
next	src/comb/ruler-func-s.h	/^    ulong next()$/;"	f	class:ruler_func_s	access:public	signature:()
next	src/comb/ruler-func.h	/^    ulong next()$/;"	f	class:ruler_func	access:public	signature:()
next	src/comb/ruler-func1.h	/^    ulong next()$/;"	f	class:ruler_func1	access:public	signature:()
next	src/comb/schroeder-path-lex.h	/^    ulong next()$/;"	f	class:schroeder_path_lex	access:public	signature:()
next	src/comb/schroeder-rgs-lex.h	/^    ulong next()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
next	src/comb/score-sequence.h	/^    ulong next()$/;"	f	class:score_sequence	access:public	signature:()
next	src/comb/setpart-ccf-rgs-lex.h	/^    ulong next()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
next	src/comb/setpart-ck-rgs.h	/^    ulong next()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
next	src/comb/setpart-p-rgs-lex.h	/^    bool next()$/;"	f	class:setpart_p_rgs_lex	access:public	signature:()
next	src/comb/setpart-rgs-gray.h	/^    bool next()$/;"	f	class:setpart_rgs_gray	access:public	signature:()
next	src/comb/setpart-rgs-lex.h	/^    bool next()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
next	src/comb/setpart-rgs-subset-lex.h	/^    bool next()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
next	src/comb/setpart-s-zero-map-rgs.h	/^    ulong next()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
next	src/comb/setpart-zero-map-rgs.h	/^    ulong next()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
next	src/comb/setpart.h	/^    bool next()  { return next_rec(n_); }$/;"	f	class:setpart	access:public	signature:()
next	src/comb/skew-binary.h	/^    ulong next()$/;"	f	class:skew_binary	access:public	signature:()
next	src/comb/smooth-rfact-rgs.h	/^    bool next()$/;"	f	class:smooth_rfact_rgs	access:public	signature:()
next	src/comb/string-subst.h	/^    bool next()  { return  next(nlev_); }$/;"	f	class:string_subst	access:public	signature:()
next	src/comb/string-subst.h	/^    bool next(ulong lev)$/;"	f	class:string_subst	access:protected	signature:(ulong lev)
next	src/comb/subset-debruijn.h	/^    ulong next()  \/\/ return number of elements$/;"	f	class:subset_debruijn	access:public	signature:()
next	src/comb/subset-deltalex.h	/^    bool next()$/;"	f	class:subset_deltalex	access:public	signature:()
next	src/comb/subset-gray-delta.h	/^    ulong next()$/;"	f	class:subset_gray_delta	access:public	signature:()
next	src/comb/subset-gray.h	/^    ulong next()$/;"	f	class:subset_gray	access:public	signature:()
next	src/comb/subset-lex.h	/^    ulong next()$/;"	f	class:subset_lex	access:public	signature:()
next	src/comb/tree-lev-seq.h	/^    ulong next()$/;"	f	class:tree_lev_seq	access:public	signature:()
next	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong next()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
next	src/comb/wfl-hilbert.h	/^    ulong next()$/;"	f	class:wfl_hilbert	access:public	signature:()
next	src/comb/young-tab-rgs-subset-lex.h	/^    ulong next()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
next	src/comb/young-tab-rgs.h	/^    ulong next()$/;"	f	class:young_tab_rgs	access:public	signature:()
next	src/ds/attic/coroutine-paren-demo.cc	/^    int next()$/;"	f	class:paren	access:public	signature:()
next	src/graph/lyndon-gray.h	/^    ulong next()$/;"	f	class:lyndon_gray	access:public	signature:()
next	src/mod/divisors.h	/^    umod_t next()  \/\/ current is last?$/;"	f	class:divisors	access:public	signature:()
next	src/perm/attic/partition.h	/^    int next()$/;"	f	class:partition	access:public	signature:()
next0_even	src/bits/evenodd.h	/^static inline ulong next0_even(ulong x)  { return (x+1UL)&~1UL; }$/;"	f	signature:(ulong x)
next0_odd	src/bits/evenodd.h	/^static inline ulong next0_odd(ulong x)  { return x|1UL; }$/;"	f	signature:(ulong x)
next_all_blocks	src/bits/bitsubset.h	/^    ulong next_all_blocks()  { U = (U - V + ~V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
next_arg	src/nextarg.h	/^void next_arg(Type &v, const char *vname, const char *what,$/;"	f	signature:(Type &v, const char *vname, const char *what, int argc, char **argv)
next_clear	src/ds/bitarray.h	/^    ulong next_clear(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
next_colex_comb	doc/bits-doc.txt	/^static inline ulong next_colex_comb(ulong x);$/;"	p	file:	signature:(ulong x)
next_colex_comb	src/bits/bitcombcolex.h	/^static inline ulong next_colex_comb(ulong x)$/;"	f	signature:(ulong x)
next_comp	demo/comb/schroeder-tree-demo.cc	/^void next_comp()$/;"	f	signature:()
next_cond_path	src/graph/digraph-paths.h	/^    void next_cond_path(ulong ns, ulong p);  \/\/ called by all_cond_paths()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
next_cond_path	src/graph/search-digraph-cond.cc	/^digraph_paths::next_cond_path(ulong ns, ulong p)$/;"	f	class:digraph_paths	signature:(ulong ns, ulong p)
next_cycle	src/graph/attic/debruijngraph.cc	/^debruijn_cycles::next_cycle(ulong ns, ulong p)$/;"	f	class:debruijn_cycles	signature:(ulong ns, ulong p)
next_cycle	src/graph/attic/debruijngraph.h	/^    void next_cycle(ulong ns, ulong p);$/;"	p	class:debruijn_cycles	access:public	signature:(ulong ns, ulong p)
next_cycle	src/perm/attic/cycles.cc	/^cycles::next_cycle(ulong &k)  const$/;"	f	class:cycles	signature:(ulong &k) const
next_cycle	src/perm/attic/cycles.h	/^    ulong next_cycle(ulong &k)  const;$/;"	p	class:cycles	access:public	signature:(ulong &k) const
next_cyclic_rec	src/comb/perm-rec.h	/^    void next_cyclic_rec(ulong d)$/;"	f	class:perm_rec	access:private	signature:(ulong d)
next_dig	src/comb/young-tab-rgs-subset-lex.h	/^    ulong next_dig(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:private	signature:(ulong d) const
next_digit	src/comb/binary-debruijn.h	/^    ulong next_digit()$/;"	f	class:binary_debruijn	access:public	signature:()
next_digit	src/comb/debruijn.h	/^    ulong next_digit()$/;"	f	class:debruijn	access:public	signature:()
next_endo	src/comb/endo-enup.h	/^static inline ulong next_endo(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
next_enup	src/comb/endo-enup.h	/^static inline ulong next_enup(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
next_even	src/bits/evenodd.h	/^static inline ulong next_even(ulong x)  { return (x|1UL)+1UL; }$/;"	f	signature:(ulong x)
next_even	src/comb/subset-gray.h	/^    ulong next_even()$/;"	f	class:subset_gray	access:private	signature:()
next_even_zeq1	src/comb/composition-nz-gray.h	/^    ulong next_even_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray	access:protected	signature:()
next_exp_of_2	doc/bits-doc.txt	/^static inline ulong next_exp_of_2(ulong x);$/;"	p	file:	signature:(ulong x)
next_exp_of_2	src/bits/bit2pow.h	/^static inline ulong next_exp_of_2(ulong x)$/;"	f	signature:(ulong x)
next_fib	src/bits/bit-rll2.h	/^    ulong next_fib()  { next();  return fib(); }$/;"	f	class:bit_rll2	access:public	signature:()
next_fibrep	doc/bits-doc.txt	/^static inline ulong next_fibrep(ulong x);$/;"	p	file:	signature:(ulong x)
next_fibrep	src/bits/fibrep.h	/^static inline ulong next_fibrep(ulong x)$/;"	f	signature:(ulong x)
next_float_arg	src/nextarg.h	/^next_float_arg(double &v, const char *vname, const char *what,$/;"	f	signature:(double &v, const char *vname, const char *what, int argc, char **argv)
next_func	src/comb/partition-gen.cc	/^partition_gen::next_func(ulong i)$/;"	f	class:partition_gen	signature:(ulong i)
next_func	src/comb/partition-gen.h	/^    ulong next_func(ulong i);  \/\/ aux$/;"	p	class:partition_gen	access:public	signature:(ulong i)
next_gray2	doc/bits-doc.txt	/^static inline ulong next_gray2(ulong x);$/;"	p	file:	signature:(ulong x)
next_gray2	src/bits/nextgray.h	/^static inline ulong next_gray2(ulong x)$/;"	f	signature:(ulong x)
next_idx	src/sort/attic/usearchfunc.h	/^inline ulong next_idx(const Type *f, ulong n, bool (* func)(Type), ulong k0)$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type), ulong k0)
next_involution_branch_ratio	doc/perm-doc.txt	/^inline void next_involution_branch_ratio(double &rat, double &n1);$/;"	p	file:	signature:(double &rat, double &n1)
next_involution_branch_ratio	src/perm/permrand-self-inverse.h	/^inline void next_involution_branch_ratio(double &rat, double &n1)$/;"	f	signature:(double &rat, double &n1)
next_k	src/comb/composition-nz-numparts.h	/^    ulong next_k()$/;"	f	class:composition_nz_numparts	access:private	signature:()
next_lexrev	doc/bits-doc.txt	/^static inline ulong next_lexrev(ulong x);$/;"	p	file:	signature:(ulong x)
next_lexrev	src/bits/bitlex.h	/^static inline ulong next_lexrev(ulong x)$/;"	f	signature:(ulong x)
next_lucky	src/graph/digraph-paths.h	/^    void next_lucky(ulong ns, ulong p);  \/\/ called by try_lucky_path()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
next_lyn	src/bits/bit-necklace.h	/^    ulong next_lyn()$/;"	f	class:bit_necklace	access:public	signature:()
next_lyn	src/comb/binary-necklace.h	/^    ulong next_lyn()  \/\/ next Lyndon word$/;"	f	class:binary_necklace	access:public	signature:()
next_lyn	src/comb/necklace.h	/^    ulong next_lyn()  \/\/ next Lyndon word$/;"	f	class:necklace	access:public	signature:()
next_minchange_comb	doc/bits-doc.txt	/^static inline ulong next_minchange_comb(ulong x, ulong last);$/;"	p	file:	signature:(ulong x, ulong last)
next_minchange_comb	src/bits/bitcombminchange.h	/^static inline ulong next_minchange_comb(ulong x, ulong last)$/;"	f	signature:(ulong x, ulong last)
next_negbin	doc/bits-doc.txt	/^static inline ulong next_negbin(ulong x);$/;"	p	file:	signature:(ulong x)
next_negbin	src/bits/negbin.h	/^static inline ulong next_negbin(ulong x)$/;"	f	signature:(ulong x)
next_odd	src/bits/evenodd.h	/^static inline ulong next_odd(ulong x)  { return (x+1UL)|1UL; }$/;"	f	signature:(ulong x)
next_odd	src/comb/subset-gray.h	/^    ulong next_odd()$/;"	f	class:subset_gray	access:private	signature:()
next_odd_zeq1	src/comb/composition-nz-gray.h	/^    ulong next_odd_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray	access:protected	signature:()
next_parenword	doc/bits-doc.txt	/^static inline ulong next_parenword(ulong x);$/;"	p	file:	signature:(ulong x)
next_parenword	src/bits/parenwords.h	/^static inline ulong next_parenword(ulong x)$/;"	f	signature:(ulong x)
next_path	src/graph/digraph-paths.h	/^    void next_path(ulong ns, ulong p);  \/\/ called by all_paths()$/;"	p	class:digraph_paths	access:private	signature:(ulong ns, ulong p)
next_path	src/graph/search-digraph.cc	/^digraph_paths::next_path(ulong ns, ulong p)$/;"	f	class:digraph_paths	signature:(ulong ns, ulong p)
next_perm	src/comb/cayley-perm.h	/^    bool next_perm()$/;"	f	class:cayley_perm	access:private	signature:()
next_pow_of_2	doc/bits-doc.txt	/^static inline ulong next_pow_of_2(ulong x);$/;"	p	file:	signature:(ulong x)
next_pow_of_2	src/bits/bit2pow.h	/^static inline ulong next_pow_of_2(ulong x)$/;"	f	signature:(ulong x)
next_pre	src/comb/binary-necklace.h	/^    ulong next_pre()  \/\/ next pre-necklace$/;"	f	class:binary_necklace	access:public	signature:()
next_pre	src/comb/necklace.h	/^    ulong next_pre()  \/\/ next pre-necklace$/;"	f	class:necklace	access:public	signature:()
next_primitive	src/bpol/all-irredpoly.h	/^    ulong next_primitive()  \/\/ return poly, zero if there are no more$/;"	f	class:all_irredpoly	access:public	signature:()
next_radm4	doc/bits-doc.txt	/^static inline ulong next_radm4(ulong x);$/;"	p	file:	signature:(ulong x)
next_radm4	src/bits/radix-m4.h	/^static inline ulong next_radm4(ulong x)$/;"	f	signature:(ulong x)
next_rec	demo/comb/paren-gray-rec-demo.cc	/^void next_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
next_rec	src/comb/attic/combination-rec-demo.cc	/^void next_rec(ulong d)$/;"	f	signature:(ulong d)
next_rec	src/comb/catalan.cc	/^catalan::next_rec(ulong k)$/;"	f	class:catalan	signature:(ulong k)
next_rec	src/comb/catalan.h	/^    bool next_rec(ulong k);$/;"	p	class:catalan	access:protected	signature:(ulong k)
next_rec	src/comb/combination-rec.cc	/^comb_rec::next_rec(ulong d)$/;"	f	class:comb_rec	signature:(ulong d)
next_rec	src/comb/combination-rec.h	/^    void next_rec(ulong d);$/;"	p	class:comb_rec	access:private	signature:(ulong d)
next_rec	src/comb/id-tree-lev-seq.h	/^    ulong next_rec(ulong p)$/;"	f	class:id_tree_lev_seq	access:private	signature:(ulong p)
next_rec	src/comb/ksubset-rec.cc	/^ksubset_rec::next_rec(ulong d)$/;"	f	class:ksubset_rec	signature:(ulong d)
next_rec	src/comb/ksubset-rec.h	/^    void next_rec(ulong d);$/;"	p	class:ksubset_rec	access:private	signature:(ulong d)
next_rec	src/comb/ksubset-twoclose.h	/^    void next_rec(ulong d, ulong n1, ulong n0, bool q)$/;"	f	class:ksubset_twoclose	access:private	signature:(ulong d, ulong n1, ulong n0, bool q)
next_rec	src/comb/perm-rec.h	/^    void next_rec(ulong d)$/;"	f	class:perm_rec	access:private	signature:(ulong d)
next_rec	src/comb/setpart.cc	/^setpart::next_rec(int k)$/;"	f	class:setpart	signature:(int k)
next_rec	src/comb/setpart.h	/^    int next_rec(int k);$/;"	p	class:setpart	access:protected	signature:(int k)
next_recursion	src/comb/attic/combminchange.cc	/^comb_minchange::next_recursion()$/;"	f	class:comb_minchange	signature:()
next_recursion	src/comb/attic/combminchange.h	/^    ulong next_recursion();  \/\/ aux$/;"	p	class:comb_minchange	access:public	signature:()
next_recursion	src/comb/attic/permvisit.cc	/^perm_visit::next_recursion()$/;"	f	class:perm_visit	signature:()
next_recursion	src/comb/attic/permvisit.h	/^    ulong next_recursion();$/;"	p	class:perm_visit	access:protected	signature:()
next_recursion	src/ds/attic/coroutine-paren-demo.cc	/^    int next_recursion();$/;"	p	class:paren	file:	access:protected	signature:()
next_recursion	src/ds/attic/coroutine-paren-demo.cc	/^paren::next_recursion()$/;"	f	class:paren	signature:()
next_sequency	doc/bits-doc.txt	/^static inline ulong next_sequency(ulong x);$/;"	p	file:	signature:(ulong x)
next_sequency	src/bits/bitsequency.h	/^static inline ulong next_sequency(ulong x)$/;"	f	signature:(ulong x)
next_set	src/ds/bitarray.h	/^    ulong next_set(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
next_small_prime	doc/mod-doc.txt	/^ulong next_small_prime(ulong n, const bitarray *B\/*=0*\/);$/;"	p	file:	signature:(ulong n, const bitarray *B )
next_small_prime	src/mod/primes.cc	/^next_small_prime(ulong n, const bitarray *B\/*=0*\/)$/;"	f	signature:(ulong n, const bitarray *B )
next_small_prime	src/mod/primes.h	/^ulong  next_small_prime(ulong n, const bitarray *B=0);$/;"	p	signature:(ulong n, const bitarray *B=0)
next_string	src/comb/binary-debruijn.h	/^    ulong next_string()  \/\/ make new string, return length$/;"	f	class:binary_debruijn	access:public	signature:()
next_string	src/comb/debruijn.h	/^    ulong next_string()  \/\/ make new string, return its length$/;"	f	class:debruijn	access:public	signature:()
next_string_arg	src/nextarg.h	/^next_string_arg(char *&v, const char *vname, const char *what,$/;"	f	signature:(char *&v, const char *vname, const char *what, int argc, char **argv, char *def)
next_subset_lexrev_fib	doc/bits-doc.txt	/^static inline ulong next_subset_lexrev_fib(ulong x);$/;"	p	file:	signature:(ulong x)
next_subset_lexrev_fib	src/bits/fibrep-subset-lexrev.h	/^static inline ulong next_subset_lexrev_fib(ulong x)$/;"	f	signature:(ulong x)
next_w	src/bpol/fcsr.h	/^    void next_w()$/;"	f	class:fcsr	access:public	signature:()
next_w	src/bpol/lfsr.h	/^    ulong next_w()$/;"	f	class:lfsr	access:public	signature:()
next_w	src/bpol/lfsr64.h	/^    void next_w()$/;"	f	class:lfsr64	access:public	signature:()
next_zeq1	src/comb/composition-nz-gray2.h	/^    ulong next_zeq1()  \/\/ for Z == 1$/;"	f	class:composition_nz_gray2	access:protected	signature:()
next_zgt1	src/comb/composition-nz-gray.h	/^    ulong next_zgt1(bool qq)  \/\/ for Z > 1$/;"	f	class:composition_nz_gray	access:protected	signature:(bool qq)
next_zgt1	src/comb/composition-nz-gray2.h	/^    ulong next_zgt1()  \/\/ for Z > 1$/;"	f	class:composition_nz_gray2	access:protected	signature:()
nextarg_act	src/nextarg.h	/^static int nextarg_act = 0;$/;"	v
nf	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong nf;  \/\/ N!$/;"	v
nf	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong nf;  \/\/ N!$/;"	v
nf_	src/perm/attic/cycles.h	/^    ulong nf_;  \/\/ # of fixed points (fixed points recorded at the end of f_[])$/;"	m	class:cycles	access:public
nfw_	src/ds/bitarray.h	/^    ulong nfw_;  \/\/ number of words where all bits are used, may be zero$/;"	m	class:bitarray	access:public
ng_	src/graph/attic/debruijngraph.h	/^    ulong & ng_; \/\/ == size of graph$/;"	m	class:debruijn_cycles	access:public
ng_	src/graph/attic/debruijngraph.h	/^    ulong ng_;         \/\/ number of Nodes of Graph$/;"	m	class:debruijn_graph	access:public
ng_	src/graph/digraph-paths.h	/^    ulong ng_;  \/\/ == g_.ng_$/;"	m	class:digraph_paths	access:public
ng_	src/graph/digraph.h	/^    ulong ng_;   \/\/ number of Nodes of Graph$/;"	m	class:digraph	access:public
ngbits_	src/graph/attic/debruijngraph.h	/^    ulong ngbits_; \/\/ number of bits in ng_, useful for printing$/;"	m	class:debruijn_cycles	access:public
ngbits_	src/graph/digraph-paths.h	/^    ulong ngbits_;  \/\/ number of bits in ng_, used for printing$/;"	m	class:digraph_paths	access:public
ngct	demo/comb/gexz-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/naf-gray-rec-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/naf-pos-rec-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/ntnz-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/ntz-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/perm-dist1-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/perm-l1r2-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ngct	demo/comb/perm-right1-gray-demo.cc	/^ulong ngct;  \/\/ count non-Gray transitions$/;"	v
ni_	demo/arith/zero-divisors-demo.cc	/^bool ni_, nj_;$/;"	v
ni_	demo/arith/zero-divisors-pairs-demo.cc	/^bool ni_, nj_;$/;"	v
ni_	src/comb/mixedradix-naf-subset-lex.h	/^    ulong ni_;    \/\/ Number of elements in iset[]$/;"	m	class:mixedradix_naf_subset_lex	access:public
nibble_in	src/bits/tcrc64.h	/^    void nibble_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
nj_	demo/arith/zero-divisors-demo.cc	/^bool ni_, nj_;$/;"	v
nj_	demo/arith/zero-divisors-pairs-demo.cc	/^bool ni_, nj_;$/;"	v
nk1_	src/comb/composition-ex-colex.h	/^    ulong nk1_;    \/\/ == n - k + 1$/;"	m	class:composition_ex_colex	access:public
nk1_	src/comb/composition-ex-lex.h	/^    ulong nk1_;    \/\/ == n - k + 1$/;"	m	class:composition_ex_lex	access:public
nk1_	src/comb/composition-nz-numparts.h	/^    ulong nk1_;    \/\/ ==n-k+1$/;"	m	class:composition_nz_numparts	access:public
nk_	src/comb/attic/combination-altminchange.h	/^    ulong nk_;  \/\/ n_ - k_$/;"	m	class:combination_altminchange	access:public
nlev_	src/comb/string-subst.h	/^    ulong nlev_;  \/\/ that many levels (iterate of the L-system)$/;"	m	class:string_subst	access:public
nlyn_	src/graph/lyndon-gray.h	/^    ulong nlyn_;  \/\/ number of n-bit Lyndon words for prime n, else$/;"	m	class:lyndon_gray	access:public
nmask_	src/comb/attic/comblex.h	/^    ulong nmask_;  \/\/ ~mask_$/;"	m	class:comb_lex	access:public
nmax_	src/comb/attic/binarydebruijn.h	/^    const ulong nmax_;$/;"	m	class:binary_debruijn	access:public
nn	demo/seq/A003043-demo.cc	/^ulong nn = 0;$/;"	v
nn	demo/sort/merge-sort-demo.cc	/^ulong nn;$/;"	v
nn	demo/sort/merge-sort4-demo.cc	/^ulong nn;$/;"	v
nn	src/comb/attic/binarydebruijn.h	/^    ulong nn;$/;"	m	class:binary_debruijn	access:private
nn_	src/comb/mset-perm-lex-rec.h	/^    ulong *nn_;  \/\/ position of next nonempty bucket$/;"	m	class:mset_perm_lex_rec	access:public
nn_	src/perm/attic/cycles.h	/^    ulong nn_;  \/\/ # of elements actually used == nce_ + nf_$/;"	m	class:cycles	access:public
no111_rec	demo/comb/no111-gray-demo.cc	/^void no111_rec(long p1, long p2, bool z)$/;"	f	signature:(long p1, long p2, bool z)
no1x1_rec	demo/comb/no1x1-gray-demo.cc	/^no1x1_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
node	doc/wfl-hilbert-doc.txt	/^    Either the level  l = 0 , when the cell comprises just a single node; or$/;"	v
node	doc/wfl-hilbert-doc.txt	/^decoding to  [1,1] ; double the vector and add the node, yielding$/;"	v
node	doc/wfl-hilbert-doc.txt	/^from the entry node, perpendicular to the common hyperplane between subcells$/;"	v
norm_L1	src/ds/vector2d.h	/^    Type norm_L1()  const$/;"	f	class:vector2d	access:public	signature:() const
norm_L1	src/ds/vector3d.h	/^    Type norm_L1()  const$/;"	f	class:vector3d	access:public	signature:() const
norm_l2	src/aux1/attic/aux1double.cc	/^norm_l2(const double *f, ulong n)$/;"	f	signature:(const double *f, ulong n)
norm_l2	src/aux1/attic/aux1double.h	/^double norm_l2(const double *f, ulong n);$/;"	p	signature:(const double *f, ulong n)
norm_l2	src/aux1/attic/norm.h	/^static inline double norm_l2(const Complex *f, ulong n)$/;"	f	signature:(const Complex *f, ulong n)
norm_l2	src/aux1/attic/norm.h	/^static inline double norm_l2(const double *f, ulong n)$/;"	f	signature:(const double *f, ulong n)
norm_sqr	src/aux1/attic/norm.h	/^static inline double norm_sqr(const Complex *f, ulong n)$/;"	f	signature:(const Complex *f, ulong n)
norm_sqr	src/aux1/attic/norm.h	/^static inline double norm_sqr(const double *f, ulong n)$/;"	f	signature:(const double *f, ulong n)
norm_sqr	src/ds/vector2d.h	/^    Type norm_sqr()  const  { return x_ * x_ + y_ * y_; }$/;"	f	class:vector2d	access:public	signature:() const
norm_sqr	src/ds/vector3d.h	/^    Type norm_sqr()  const  { return x_ * x_ + y_ * y_ + z_ * z_; }$/;"	f	class:vector3d	access:public	signature:() const
norm_sqr	src/wavelet/waveletfilter.h	/^    double norm_sqr(ulong s=0)  const  { return norm_sqr(h_, n_, s); }$/;"	f	class:wavelet_filter	access:public	signature:(ulong s=0) const
norm_sqr	src/wavelet/waveletfilter.h	/^    static double norm_sqr(const double *h, ulong n, ulong s=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, ulong n, ulong s=0)
normal_mult	doc/bpol-doc.txt	/^ulong normal_mult(ulong a, ulong b, const ulong *M, ulong n);$/;"	p	file:	signature:(ulong a, ulong b, const ulong *M, ulong n)
normal_mult	src/bpol/normal-mult.cc	/^normal_mult(ulong a, ulong b, const ulong *M, ulong n)$/;"	f	signature:(ulong a, ulong b, const ulong *M, ulong n)
normal_mult	src/bpol/normalbasis.h	/^ulong normal_mult(ulong a, ulong b, const ulong *M, ulong n);$/;"	p	signature:(ulong a, ulong b, const ulong *M, ulong n)
normal_solve_reduced_quadratic	doc/bpol-doc.txt	/^inline ulong normal_solve_reduced_quadratic(ulong c);$/;"	p	file:	signature:(ulong c)
normal_solve_reduced_quadratic	src/bpol/normal-solvequadratic.h	/^inline ulong normal_solve_reduced_quadratic(ulong c)$/;"	f	signature:(ulong c)
normal_solve_reduced_quadratic_q	doc/bpol-doc.txt	/^inline ulong normal_solve_reduced_quadratic_q(ulong c, ulong &x);$/;"	p	file:	signature:(ulong c, ulong &x)
normal_solve_reduced_quadratic_q	src/bpol/normal-solvequadratic.h	/^inline ulong normal_solve_reduced_quadratic_q(ulong c, ulong &x)$/;"	f	signature:(ulong c, ulong &x)
normalize	src/aux1/attic/aux1double.cc	/^normalize(double *f, ulong n, double v\/*=1.0*\/)$/;"	f	signature:(double *f, ulong n, double v )
normalize	src/aux1/attic/aux1double.h	/^double normalize(double *f, ulong n, double v=1.0);$/;"	p	signature:(double *f, ulong n, double v=1.0)
normalize_l2	src/aux1/attic/norm.h	/^static inline void normalize_l2(Complex *f, ulong n)$/;"	f	signature:(Complex *f, ulong n)
normalize_l2	src/aux1/attic/norm.h	/^static inline void normalize_l2(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
np	demo/comb/combination-pref-demo.cc	/^ulong np, kp;$/;"	v
np_	src/bpol/mersenne-coprime.h	/^    ulong np_;   \/\/ number of prime factors$/;"	m	class:mersenne_coprime	access:public
np_	src/comb/attic/allsetpartitions.h	/^    ulong np_; \/\/ Number of chars in array p points to$/;"	m	class:all_set_partitions	access:public
np_	src/comb/dyck-gray.h	/^    ulong *np_;  \/\/ aux: next position        (nextPos[])$/;"	m	class:dyck_gray	access:public
npeek	src/aux0/attic/funcemu.h	/^    void npeek(Type &x, ulong n)  { chk_dp(n);  x = d_[dp_-n]; }$/;"	f	class:funcemu	access:public	signature:(Type &x, ulong n)
npoke	src/aux0/attic/funcemu.h	/^    void npoke(Type &x, ulong n)  { chk_dp(n);  d_[dp_-n] = x; }$/;"	f	class:funcemu	access:public	signature:(Type &x, ulong n)
npqr_tab	src/mod/attic/testnum.cc	/^const ulong npqr_tab[] =$/;"	v
npr_	src/mod/factor.h	/^    ulong  npr_;$/;"	m	class:factorization	access:protected
nprimes	src/mod/factor.h	/^    ulong nprimes()  const  { return npr_; }$/;"	f	class:factorization	access:public	signature:() const
nq	src/comb/attic/combination-rec-demo.cc	/^ulong nq;   \/\/ whether to reverse order$/;"	v
nq_	src/comb/combination-rec.h	/^    ulong nq_;   \/\/ whether to reverse order$/;"	m	class:comb_rec	access:public
nq_	src/comb/ksubset-rec.h	/^    ulong nq_;   \/\/ whether to reverse order$/;"	m	class:ksubset_rec	access:public
nq_	src/comb/paren-pref.h	/^    const ulong nq_;  \/\/ aux$/;"	m	class:paren_pref	access:public
nr_	src/ds/array2d.h	/^    ulong nr_, nc_;  \/\/ #rows, #cols$/;"	m	class:array2d	access:protected
ns1_	src/comb/composition-nz-sorts.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:composition_nz_sorts	access:public
ns1_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *ns1_;  \/\/ ns1[j] is sort of part a[j]$/;"	m	class:composition_nz_sorts2_pp	access:public
ns1_	src/comb/composition-nz-sorts2.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:composition_nz_sorts2	access:public
ns1_	src/comb/partition-asc-sorts.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:partition_asc_sorts	access:public
ns1_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *ns1_;  \/\/ ns1[j] is sort of part a[j]$/;"	m	class:partition_asc_sorts2_pp	access:public
ns1_	src/comb/partition-asc-sorts2.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:partition_asc_sorts2	access:public
ns_	src/comb/setpart.h	/^    int *ns_;   \/\/ ns[k] Number of Sets in set partition k$/;"	m	class:setpart	access:public
nsym_	src/comb/attic/stringsubst.h	/^    ulong nsym_;    \/\/ number of symbols$/;"	m	class:string_subst	access:public
nt	src/aux0/attic/funcemu.h	/^    ulong  nt;  \/\/ size of state stack$/;"	m	class:funcemu	access:public
ntnz_rec	demo/comb/ntnz-gray-demo.cc	/^void ntnz_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
ntt_2dim	src/ntt/attic/nttndim.cc	/^ntt_2dim(mod *f, ulong d1, ulong d2, int is)$/;"	f	signature:(mod *f, ulong d1, ulong d2, int is)
ntt_2dim	src/ntt/attic/nttndim.cc	/^void ntt_2dim(mod *f, ulong d1, ulong d2, int is);$/;"	p	file:	signature:(mod *f, ulong d1, ulong d2, int is)
ntt_3dim	src/ntt/attic/nttndim.cc	/^ntt_3dim(mod *f, ulong d1, ulong d2, ulong d3, int is)$/;"	f	signature:(mod *f, ulong d1, ulong d2, ulong d3, int is)
ntt_3dim	src/ntt/attic/nttndim.cc	/^void ntt_3dim(mod *f, ulong d1, ulong d2, ulong d3, int is);$/;"	p	file:	signature:(mod *f, ulong d1, ulong d2, ulong d3, int is)
ntt_4dim	src/ntt/attic/nttndim.cc	/^ntt_4dim(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, int is)$/;"	f	signature:(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, int is)
ntt_4dim	src/ntt/attic/nttndim.cc	/^void ntt_4dim(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, int is);$/;"	p	file:	signature:(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, int is)
ntt_5dim	src/ntt/attic/nttndim.cc	/^ntt_5dim(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is)$/;"	f	signature:(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is)
ntt_5dim	src/ntt/attic/nttndim.cc	/^void ntt_5dim(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is);$/;"	p	file:	signature:(mod *f, ulong d1, ulong d2, ulong d3, ulong d4, ulong d5, int is)
ntt_auto_convolution	doc/ntt-doc.txt	/^void ntt_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
ntt_auto_convolution	doc/ntt-doc.txt	/^void ntt_auto_convolution(mod *f, ulong ldn);$/;"	p	file:	signature:(mod *f, ulong ldn)
ntt_auto_convolution	src/ntt/ntt.h	/^void ntt_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
ntt_auto_convolution	src/ntt/ntt.h	/^void ntt_auto_convolution(mod *f, ulong ldn);$/;"	p	signature:(mod *f, ulong ldn)
ntt_auto_convolution	src/ntt/nttcnvl.cc	/^ntt_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
ntt_auto_convolution	src/ntt/nttcnvl.cc	/^ntt_auto_convolution(mod *f, ulong ldn)$/;"	f	signature:(mod *f, ulong ldn)
ntt_convolution	doc/ntt-doc.txt	/^void ntt_convolution(double *f, double *g, ulong ldn);$/;"	p	file:	signature:(double *f, double *g, ulong ldn)
ntt_convolution	doc/ntt-doc.txt	/^void ntt_convolution(mod * restrict f, mod * restrict g, ulong ldn);$/;"	p	file:	signature:(mod * restrict f, mod * restrict g, ulong ldn)
ntt_convolution	src/ntt/ntt.h	/^void ntt_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	signature:(double * restrict f, double * restrict g, ulong ldn)
ntt_convolution	src/ntt/ntt.h	/^void ntt_convolution(mod *f, mod *g, ulong ldn);$/;"	p	signature:(mod *f, mod *g, ulong ldn)
ntt_convolution	src/ntt/nttcnvl.cc	/^ntt_convolution(double *f, double *g, ulong ldn)$/;"	f	signature:(double *f, double *g, ulong ldn)
ntt_convolution	src/ntt/nttcnvl.cc	/^ntt_convolution(mod * restrict f, mod * restrict g, ulong ldn)$/;"	f	signature:(mod * restrict f, mod * restrict g, ulong ldn)
ntt_dif2	doc/ntt-doc.txt	/^void ntt_dif2(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dif2	src/ntt/ntt.h	/^void ntt_dif2(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dif2	src/ntt/nttdif2.cc	/^ntt_dif2(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dif2_core	doc/ntt-doc.txt	/^void ntt_dif2_core(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dif2_core	src/ntt/ntt.h	/^void ntt_dif2_core(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dif2_core	src/ntt/nttdif2.cc	/^ntt_dif2_core(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dif2_noncyclic	src/ntt/attic/nttdif2nc.cc	/^ntt_dif2_noncyclic(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dif2l	doc/ntt-doc.txt	/^void ntt_dif2l(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dif2l	src/ntt/ntt.h	/^void ntt_dif2l(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dif2l	src/ntt/nttlearn.cc	/^ntt_dif2l(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dif4	doc/ntt-doc.txt	/^void ntt_dif4(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dif4	src/ntt/ntt.h	/^void ntt_dif4(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dif4	src/ntt/nttdif4.cc	/^ntt_dif4(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dif4_core	doc/ntt-doc.txt	/^void ntt_dif4_core(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dif4_core	src/ntt/ntt.h	/^void ntt_dif4_core(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dif4_core	src/ntt/nttdif4.cc	/^ntt_dif4_core(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dit2	doc/ntt-doc.txt	/^void ntt_dit2(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dit2	src/ntt/ntt.h	/^void ntt_dit2(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dit2	src/ntt/nttdit2.cc	/^ntt_dit2(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dit2_core	doc/ntt-doc.txt	/^void ntt_dit2_core(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dit2_core	src/ntt/ntt.h	/^void ntt_dit2_core(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dit2_core	src/ntt/nttdit2.cc	/^ntt_dit2_core(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dit2l	doc/ntt-doc.txt	/^void ntt_dit2l(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dit2l	src/ntt/ntt.h	/^void ntt_dit2l(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dit2l	src/ntt/nttlearn.cc	/^ntt_dit2l(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dit4	doc/ntt-doc.txt	/^void ntt_dit4(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dit4	src/ntt/ntt.h	/^void ntt_dit4(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dit4	src/ntt/nttdit4.cc	/^ntt_dit4(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_dit4_core	doc/ntt-doc.txt	/^void ntt_dit4_core(mod *f, ulong ldn, int is);$/;"	p	file:	signature:(mod *f, ulong ldn, int is)
ntt_dit4_core	src/ntt/ntt.h	/^void ntt_dit4_core(mod *f, ulong ldn, int is);$/;"	p	signature:(mod *f, ulong ldn, int is)
ntt_dit4_core	src/ntt/nttdit4.cc	/^ntt_dit4_core(mod *f, ulong ldn, int is)$/;"	f	signature:(mod *f, ulong ldn, int is)
ntt_ndim	src/ntt/attic/nttndim.cc	/^ntt_ndim(mod *f, ulong ndim, ulong *ldn, int is)$/;"	f	signature:(mod *f, ulong ndim, ulong *ldn, int is)
ntz_rec	demo/comb/ntz-gray-demo.cc	/^void ntz_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
nu_equiv_q	demo/sort/equivclass-necklaces-demo.cc	/^bool nu_equiv_q(ulong x, ulong y)  \/\/ unlabeled necklaces$/;"	f	signature:(ulong x, ulong y)
null	doc/aux1-doc.txt	/^inline void null(Type *dst, ulong n);$/;"	p	file:	signature:(Type *dst, ulong n)
null	src/aux1/attic/array.h	/^    void null()  { ::null(f_, n_); }$/;"	f	class:array	access:public	signature:()
null	src/aux1/copy.h	/^inline void null(Complex *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(Complex *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(Type *dst, ulong n)$/;"	f	signature:(Type *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(char *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(char *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(double *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(double *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(float *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(float *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(int *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(int *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(long *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(long *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(uint *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(uint *dst, ulong n)
null	src/aux1/copy.h	/^inline void null(ulong *dst, ulong n)  { memzero(dst, n); }$/;"	f	signature:(ulong *dst, ulong n)
null	src/aux2/attic/copy2d.h	/^void null(Type **f, ulong nr, ulong nc)$/;"	f	signature:(Type **f, ulong nr, ulong nc)
null	src/ds/array2d.h	/^    void null()$/;"	f	class:array2d	access:public	signature:()
null	src/ds/array3d.h	/^    void null()$/;"	f	class:array3d	access:public	signature:()
null	src/ds/centered-array2d.h	/^    void null()  { A.null(); }$/;"	f	class:centered_array2d	access:public	signature:()
null	src/ds/centered-array3d.h	/^    void null()  { A.null(); }$/;"	f	class:centered_array3d	access:public	signature:()
num	src/comb/arrangement-lex.h	/^    ulong num()  const  { return e_; }$/;"	f	class:arrangement_lex	access:public	signature:() const
num	src/comb/attic/subset-monotone.h	/^    ulong num;$/;"	m	class:subset_monotone	access:protected
num	src/comb/ksubset-gray.h	/^    ulong num()  const  { return k_; }$/;"	f	class:ksubset_gray	access:public	signature:() const
num	src/comb/subset-gray.h	/^    ulong num() const { return k_; }$/;"	f	class:subset_gray	access:public	signature:() const
num	src/ds/attic/priorityqueue1.h	/^    ulong num()  const  { return n_; }$/;"	f	class:priority_queue1	access:public	signature:() const
num	src/ds/attic/rarray.h	/^    ulong num()  const$/;"	f	class:rarray	access:public	signature:() const
num	src/ds/attic/rset.h	/^    ulong num()  const$/;"	f	class:rset	access:public	signature:() const
num	src/ds/deque.h	/^    ulong num()  const  { return n_; }$/;"	f	class:deque	access:public	signature:() const
num	src/ds/priorityqueue.h	/^    ulong num()  const  { return n_; }$/;"	f	class:priority_queue	access:public	signature:() const
num	src/ds/queue.h	/^    ulong num()  const  { return n_; }$/;"	f	class:queue	access:public	signature:() const
num	src/ds/ringbuffer.h	/^    ulong num()  const  { return n_; }$/;"	f	class:ringbuffer	access:public	signature:() const
num	src/ds/stack.h	/^    ulong num()  const  { return p_; }  \/\/ Return number of entries.$/;"	f	class:stack	access:public	signature:() const
num2ffact	src/comb/fact2num.cc	/^num2ffact(ulong x, ulong *fc, ulong n)$/;"	f	signature:(ulong x, ulong *fc, ulong n)
num2ffact	src/comb/fact2num.h	/^bool num2ffact(ulong x, ulong *fc, ulong n);$/;"	p	signature:(ulong x, ulong *fc, ulong n)
num2mixedradix	src/comb/attic/num2mixedradix.h	/^inline void num2mixedradix(ulong n, const ulong *r, ulong k, ulong * restrict d)$/;"	f	signature:(ulong n, const ulong *r, ulong k, ulong * restrict d)
num2mixedradix	src/comb/mixedradix.h	/^void num2mixedradix(ulong N, ulong *x, const ulong *m1, ulong n);$/;"	p	signature:(ulong N, ulong *x, const ulong *m1, ulong n)
num2mixedradix	src/comb/mixedradix2num.cc	/^num2mixedradix(ulong N, ulong *x, const ulong *m1, ulong n)$/;"	f	signature:(ulong N, ulong *x, const ulong *m1, ulong n)
num2perm_ffact	src/comb/num2perm.cc	/^num2perm_ffact(ulong x, ulong *f, ulong n)$/;"	f	signature:(ulong x, ulong *f, ulong n)
num2perm_ffact	src/comb/num2perm.h	/^void num2perm_ffact(ulong x, ulong *f, ulong n);$/;"	p	signature:(ulong x, ulong *f, ulong n)
num2perm_rfact	src/comb/num2perm.cc	/^num2perm_rfact(ulong x, ulong *f, ulong n)$/;"	f	signature:(ulong x, ulong *f, ulong n)
num2perm_rfact	src/comb/num2perm.h	/^void num2perm_rfact(ulong x, ulong *f, ulong n);$/;"	p	signature:(ulong x, ulong *f, ulong n)
num2perm_swp	src/comb/num2perm.cc	/^num2perm_swp(ulong x, ulong *f, ulong n)$/;"	f	signature:(ulong x, ulong *f, ulong n)
num2perm_swp	src/comb/num2perm.h	/^void num2perm_swp(ulong x, ulong *f, ulong n);$/;"	p	signature:(ulong x, ulong *f, ulong n)
num2rfact	src/comb/fact2num.cc	/^num2rfact(ulong x, ulong *fc, ulong n)$/;"	f	signature:(ulong x, ulong *fc, ulong n)
num2rfact	src/comb/fact2num.h	/^bool num2rfact(ulong x, ulong *fc, ulong n);$/;"	p	signature:(ulong x, ulong *fc, ulong n)
num2str	doc/aux1-doc.txt	/^void num2str(ulong x, ulong rd, char *str);$/;"	p	file:	signature:(ulong x, ulong rd, char *str)
num2str	src/aux1/num2str.cc	/^num2str(ulong x, ulong rd, char *str)$/;"	f	signature:(ulong x, ulong rd, char *str)
num2str	src/aux1/num2str.h	/^void num2str(ulong x, ulong rd, char *str);$/;"	p	signature:(ulong x, ulong rd, char *str)
num_	src/comb/gray-cycle-leaders.h	/^    ulong num_;  \/\/ number of cycles$/;"	m	class:gray_cycle_leaders	access:public
num_	src/comb/subset-debruijn.h	/^    ulong num_;  \/\/ number of elements in subset$/;"	m	class:subset_debruijn	access:protected
num_FLE	src/ds/left-right-array.h	/^    ulong num_FLE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FLE_dumb	src/ds/left-right-array.h	/^    ulong num_FLE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FLI	src/ds/left-right-array.h	/^    ulong num_FLI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FLI_dumb	src/ds/left-right-array.h	/^    ulong num_FLI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FRE	src/ds/left-right-array.h	/^    ulong num_FRE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FRE_dumb	src/ds/left-right-array.h	/^    ulong num_FRE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FRI	src/ds/left-right-array.h	/^    ulong num_FRI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_FRI_dumb	src/ds/left-right-array.h	/^    ulong num_FRI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SLE	src/ds/left-right-array.h	/^    ulong num_SLE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SLE_dumb	src/ds/left-right-array.h	/^    ulong num_SLE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SLI	src/ds/left-right-array.h	/^    ulong num_SLI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SLI_dumb	src/ds/left-right-array.h	/^    ulong num_SLI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SRE	src/ds/left-right-array.h	/^    ulong num_SRE(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SRE_dumb	src/ds/left-right-array.h	/^    ulong num_SRE_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SRI	src/ds/left-right-array.h	/^    ulong num_SRI(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_SRI_dumb	src/ds/left-right-array.h	/^    ulong num_SRI_dumb(ulong i)  const$/;"	f	class:left_right_array	access:public	signature:(ulong i) const
num_ascents	src/comb/ascent-nonflat-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:() const
num_ascents	src/comb/ascent-rgs-subset-lex.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:() const
num_ascents	src/comb/ascent-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
num_ascents	src/comb/attic/ascent-rgs.h	/^    ulong num_ascents()  const$/;"	f	class:ascent_rgs	access:public	signature:() const
num_ascents	src/comb/word-stats.h	/^    ulong num_ascents()  const$/;"	f	class:word_stats	access:public	signature:() const
num_branches	src/comb/ordered-tree-branches.h	/^    ulong num_branches()  const  {  return m_; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
num_changes	src/comb/change-rgs.h	/^    ulong num_changes()  const$/;"	f	class:change_rgs	access:public	signature:() const
num_cols	src/ds/array2d.h	/^    ulong num_cols()  const  { return nc_; }$/;"	f	class:array2d	access:public	signature:() const
num_comp	src/comb/num-compositions.h	/^    ulong num_comp(ulong n, ulong k)  const$/;"	f	class:num_compositions	access:public	signature:(ulong n, ulong k) const
num_compositions	src/comb/num-compositions.h	/^    explicit num_compositions(ulong n, ulong k)$/;"	f	class:num_compositions	access:public	signature:(ulong n, ulong k)
num_compositions	src/comb/num-compositions.h	/^    num_compositions(const num_compositions&);  \/\/ forbidden$/;"	p	class:num_compositions	access:private	signature:(const num_compositions&)
num_compositions	src/comb/num-compositions.h	/^class num_compositions$/;"	c
num_compositions::cc_	src/comb/num-compositions.h	/^    ulong *cc_;  \/\/ data (binomial coefficients)$/;"	m	class:num_compositions	access:public
num_compositions::init	src/comb/num-compositions.h	/^    void init()$/;"	f	class:num_compositions	access:public	signature:()
num_compositions::k_	src/comb/num-compositions.h	/^    ulong k_;  \/\/ max k$/;"	m	class:num_compositions	access:public
num_compositions::n_	src/comb/num-compositions.h	/^    ulong n_;  \/\/ max n$/;"	m	class:num_compositions	access:public
num_compositions::nc_	src/comb/num-compositions.h	/^    ulong **nc_;  \/\/ nc[n-1][k-1] = binomial(n+k-1, n)$/;"	m	class:num_compositions	access:public
num_compositions::num_comp	src/comb/num-compositions.h	/^    ulong num_comp(ulong n, ulong k)  const$/;"	f	class:num_compositions	access:public	signature:(ulong n, ulong k) const
num_compositions::num_compositions	src/comb/num-compositions.h	/^    explicit num_compositions(ulong n, ulong k)$/;"	f	class:num_compositions	access:public	signature:(ulong n, ulong k)
num_compositions::num_compositions	src/comb/num-compositions.h	/^    num_compositions(const num_compositions&);  \/\/ forbidden$/;"	p	class:num_compositions	access:private	signature:(const num_compositions&)
num_compositions::operator =	src/comb/num-compositions.h	/^    num_compositions & operator = (const num_compositions&);  \/\/ forbidden$/;"	p	class:num_compositions	access:private	signature:(const num_compositions&)
num_compositions::~num_compositions	src/comb/num-compositions.h	/^    ~num_compositions()$/;"	f	class:num_compositions	access:public	signature:()
num_cycles	src/comb/gray-cycle-leaders.h	/^    ulong num_cycles()  const  { return num_; }$/;"	f	class:gray_cycle_leaders	access:public	signature:() const
num_descents	src/comb/descent-rgs.h	/^    ulong num_descents()  const$/;"	f	class:descent_rgs	access:public	signature:() const
num_descents	src/comb/word-stats.h	/^    ulong num_descents()  const$/;"	f	class:word_stats	access:public	signature:() const
num_edges	src/graph/digraph.cc	/^digraph::num_edges(ulong p)  const$/;"	f	class:digraph	signature:(ulong p) const
num_edges	src/graph/digraph.h	/^    ulong num_edges()  const  { return ep_[num_nodes()]; }$/;"	f	class:digraph	access:public	signature:() const
num_edges	src/graph/digraph.h	/^    ulong num_edges(ulong p)  const;$/;"	p	class:digraph	access:public	signature:(ulong p) const
num_elem	src/ds/array2d.h	/^    ulong num_elem()  const  { return num_elem_; }$/;"	f	class:array2d	access:public	signature:() const
num_elem	src/ds/array3d.h	/^    ulong num_elem()  const  { return num_elem_; }$/;"	f	class:array3d	access:public	signature:() const
num_elem_	src/ds/array2d.h	/^    ulong num_elem_;  \/\/ number of elements$/;"	m	class:array2d	access:protected
num_elem_	src/ds/array3d.h	/^    ulong num_elem_;  \/\/ number of elements$/;"	m	class:array3d	access:protected
num_even_val	src/comb/word-stats.h	/^    ulong num_even_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_fixed_points	src/comb/word-stats.h	/^    ulong num_fixed_points()  const$/;"	f	class:word_stats	access:public	signature:() const
num_fixed_points_1	src/comb/word-stats.h	/^    ulong num_fixed_points_1()  const$/;"	f	class:word_stats	access:public	signature:() const
num_flat_steps	src/comb/isoscent-rgs.h	/^    ulong num_flat_steps()  const$/;"	f	class:isoscent_rgs	access:public	signature:() const
num_flat_steps	src/comb/word-stats.h	/^    ulong num_flat_steps()  const$/;"	f	class:word_stats	access:public	signature:() const
num_free	src/ds/left-right-array.h	/^    ulong num_free() const  { return f_; }$/;"	f	class:left_right_array	access:public	signature:() const
num_inversions	src/comb/perm-lex2.h	/^    ulong num_inversions()  const$/;"	f	class:perm_lex2	access:public	signature:() const
num_irredpol_tab	src/bpol/num-bitpol.cc	/^extern const ulong * const num_irredpol_tab = num_lyndon_tab;$/;"	v
num_leading_equal_val	src/comb/word-stats.h	/^    ulong num_leading_equal_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_leaves	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
num_leaves	src/comb/id-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
num_leaves	src/comb/ordered-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
num_leaves	src/comb/tree-lev-seq-aux.h	/^    ulong num_leaves(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
num_leaves	src/comb/tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
num_lyndon_tab	src/comb/num-necklaces.cc	/^extern const ulong num_lyndon_tab[BITS_PER_LONG+1] = {$/;"	v
num_maps	src/comb/lindenmayer-system.h	/^    ulong num_maps()  const  { return num_maps_; };$/;"	f	class:lindenmayer_system	access:public	signature:() const
num_maps	src/comb/string-subst.cc	/^string_subst::num_maps()  const$/;"	f	class:string_subst	signature:() const
num_maps	src/comb/string-subst.h	/^    ulong num_maps()  const;$/;"	p	class:string_subst	access:public	signature:() const
num_maps_	src/comb/lindenmayer-system.h	/^    ulong num_maps_;$/;"	m	class:lindenmayer_system	access:protected
num_max_val	src/comb/word-stats.h	/^    ulong num_max_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_min_val	src/comb/word-stats.h	/^    ulong num_min_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_necklaces_tab	src/comb/num-necklaces.cc	/^extern const ulong num_necklaces_tab[BITS_PER_LONG+1] = {$/;"	v
num_nodes	src/graph/digraph.h	/^    ulong num_nodes()  const  { return ng_; }$/;"	f	class:digraph	access:public	signature:() const
num_nonflat_steps	src/comb/word-stats.h	/^    ulong num_nonflat_steps()  const$/;"	f	class:word_stats	access:public	signature:() const
num_normalpol_tab	src/bpol/num-bitpol.cc	/^extern const ulong num_normalpol_tab[BITS_PER_LONG+1] =$/;"	v
num_odd_parts	demo/seq/A100749-demo.cc	/^inline ulong num_odd_parts(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
num_odd_val	src/comb/word-stats.h	/^    ulong num_odd_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_of	src/comb/partition.h	/^    ulong num_of(ulong m)  const$/;"	f	class:partition	access:public	signature:(ulong m) const
num_parts	src/comb/cayley-perm.h	/^    ulong num_parts()  const { return n_; }$/;"	f	class:cayley_perm	access:public	signature:() const
num_parts	src/comb/composition-dist-unimodal.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
num_parts	src/comb/composition-ex-colex.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_ex_colex	access:public	signature:() const
num_parts	src/comb/composition-ex-lex.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_ex_lex	access:public	signature:() const
num_parts	src/comb/composition-nz-binary.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_binary	access:public	signature:() const
num_parts	src/comb/composition-nz-carlitz.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_carlitz	access:public	signature:() const
num_parts	src/comb/composition-nz-first-max.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_first_max	access:public	signature:() const
num_parts	src/comb/composition-nz-gray.h	/^    ulong num_parts()  const  {  return m_ - (n_==0); }$/;"	f	class:composition_nz_gray	access:public	signature:() const
num_parts	src/comb/composition-nz-gray2.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_gray2	access:public	signature:() const
num_parts	src/comb/composition-nz-i-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
num_parts	src/comb/composition-nz-left-2smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
num_parts	src/comb/composition-nz-left-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
num_parts	src/comb/composition-nz-max.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_max	access:public	signature:() const
num_parts	src/comb/composition-nz-min.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_min	access:public	signature:() const
num_parts	src/comb/composition-nz-minc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_minc	access:public	signature:() const
num_parts	src/comb/composition-nz-numparts.h	/^    ulong num_parts()  const  { return k_; }$/;"	f	class:composition_nz_numparts	access:public	signature:() const
num_parts	src/comb/composition-nz-odd-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:() const
num_parts	src/comb/composition-nz-odd.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_odd	access:public	signature:() const
num_parts	src/comb/composition-nz-restrpref.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
num_parts	src/comb/composition-nz-rl.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_rl	access:public	signature:() const
num_parts	src/comb/composition-nz-smooth.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_smooth	access:public	signature:() const
num_parts	src/comb/composition-nz-sorts.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
num_parts	src/comb/composition-nz-sorts2-pp.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
num_parts	src/comb/composition-nz-sorts2.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
num_parts	src/comb/composition-nz-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
num_parts	src/comb/composition-nz-superdiagonal.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
num_parts	src/comb/composition-nz-upstep.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz_upstep	access:public	signature:() const
num_parts	src/comb/composition-nz-weakly-unimodal.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
num_parts	src/comb/composition-nz.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_nz	access:public	signature:() const
num_parts	src/comb/composition-unimodal.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:composition_unimodal	access:public	signature:() const
num_parts	src/comb/ksubset-lex.h	/^    ulong num_parts()  const  {  return  j_; }$/;"	f	class:ksubset_lex	access:public	signature:() const
num_parts	src/comb/mset-perm-lex.h	/^    ulong num_parts()  const { return n_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
num_parts	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong num_parts()  const  { return m_ - (n_==0); }$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
num_parts	src/comb/partition-2fall-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_2fall_asc	access:public	signature:() const
num_parts	src/comb/partition-2fall-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_2fall_desc	access:public	signature:() const
num_parts	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
num_parts	src/comb/partition-asc-2rep.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc_2rep	access:public	signature:() const
num_parts	src/comb/partition-asc-perim.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
num_parts	src/comb/partition-asc-sorts.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
num_parts	src/comb/partition-asc-sorts2-pp.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
num_parts	src/comb/partition-asc-sorts2.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
num_parts	src/comb/partition-asc-subset-lex-csh.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
num_parts	src/comb/partition-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
num_parts	src/comb/partition-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc	access:public	signature:() const
num_parts	src/comb/partition-binary-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_binary_asc	access:public	signature:() const
num_parts	src/comb/partition-binary-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_binary_desc	access:public	signature:() const
num_parts	src/comb/partition-desc-bb.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
num_parts	src/comb/partition-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_desc	access:public	signature:() const
num_parts	src/comb/partition-dist-asc-len.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
num_parts	src/comb/partition-dist-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
num_parts	src/comb/partition-dist-asc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc	access:public	signature:() const
num_parts	src/comb/partition-dist-d-asc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
num_parts	src/comb/partition-dist-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_dist_desc	access:public	signature:() const
num_parts	src/comb/partition-nonsquashing-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
num_parts	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
num_parts	src/comb/partition-odd-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
num_parts	src/comb/partition-odd-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_asc	access:public	signature:() const
num_parts	src/comb/partition-odd-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_desc	access:public	signature:() const
num_parts	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
num_parts	src/comb/partition-s-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_s_desc	access:public	signature:() const
num_parts	src/comb/partition-strongly-decr-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
num_parts	src/comb/partition.h	/^    ulong num_parts()  const$/;"	f	class:partition	access:public	signature:() const
num_parts	src/comb/subset-lex.h	/^    ulong num_parts()  const  {  return  k_ + 1; }$/;"	f	class:subset_lex	access:public	signature:() const
num_peaks	src/comb/word-stats.h	/^    ulong num_peaks()  const$/;"	f	class:word_stats	access:public	signature:() const
num_primpol_tab	src/bpol/num-bitpol.cc	/^extern const ulong num_primpol_tab[BITS_PER_LONG+1] =$/;"	v
num_rows	src/ds/array2d.h	/^    ulong num_rows()  const  { return nr_; }$/;"	f	class:array2d	access:public	signature:() const
num_set	src/ds/left-right-array.h	/^    ulong num_set() const  { return  n_ - f_; }$/;"	f	class:left_right_array	access:public	signature:() const
num_sets	src/comb/setpart-rgs-gray.h	/^    ulong num_sets()  const  { return ( n_ ? m_[n_] : 0 ); }$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
num_sets	src/comb/setpart-rgs-lex.h	/^    ulong num_sets()  const  { return ( n_ ? m_[n_] : 0 ); }$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
num_sets	src/comb/setpart-rgs-subset-lex.h	/^    ulong num_sets()  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
num_sorts	src/comb/mset-perm-lex.h	/^    ulong num_sorts()  const { return k_; }$/;"	f	class:mset_perm_lex	access:public	signature:() const
num_sorts	src/comb/partition.h	/^    ulong num_sorts()  const$/;"	f	class:partition	access:public	signature:() const
num_sorts	src/comb/word-stats.h	/^    ulong num_sorts()  const$/;"	f	class:word_stats	access:public	signature:() const
num_tr_le	src/comb/partition-dist-desc.h	/^    ulong num_tr_le(ulong s, ulong &tr)$/;"	f	class:partition_dist_desc	access:private	signature:(ulong s, ulong &tr)
num_trailing_equal_val	src/comb/word-stats.h	/^    ulong num_trailing_equal_val()  const$/;"	f	class:word_stats	access:public	signature:() const
num_val	src/comb/word-stats.h	/^    ulong num_val(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
num_valleys	src/comb/word-stats.h	/^    ulong num_valleys()  const$/;"	f	class:word_stats	access:public	signature:() const
num_x	src/ds/array3d.h	/^    ulong num_x()  const  { return nx_; }$/;"	f	class:array3d	access:public	signature:() const
num_y	src/ds/array3d.h	/^    ulong num_y()  const  { return ny_; }$/;"	f	class:array3d	access:public	signature:() const
num_z	src/ds/array3d.h	/^    ulong num_z()  const  { return nz_; }$/;"	f	class:array3d	access:public	signature:() const
num_zeros	src/comb/word-stats.h	/^    ulong num_zeros()  const$/;"	f	class:word_stats	access:public	signature:() const
number_strict_inversions	src/comb/young-tab-rgs.h	/^    ulong number_strict_inversions()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
number_weak_inversions	src/comb/young-tab-rgs.h	/^    ulong number_weak_inversions()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
numdiv	src/mod/factor.cc	/^ulong factorization::numdiv() const$/;"	f	class:factorization	signature:() const
numdiv	src/mod/factor.h	/^    ulong  numdiv() const;$/;"	p	class:factorization	access:public	signature:() const
numtrees	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
nx_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
ny_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
nz_	src/comb/setpart-ck-rgs.h	/^    ulong *nz_; \/\/ ordered list of non-zero digits in a[0,1,...,m-1]$/;"	m	class:setpart_ck_rgs	access:public
nz_	src/ds/array3d.h	/^    ulong nx_, ny_, nz_;  \/\/ dimensions$/;"	m	class:array3d	access:protected
o	src/mod/mersenne-factors.o	/^/;"	v
objects	fxt.lsm	/^                subsets, multisets, Gray codes, Catalan objects, necklaces, Lyndon words.$/;"	v
odd2lower	doc/perm-doc.txt	/^inline void odd2lower(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
odd2lower	src/perm/even2lower.h	/^inline void odd2lower(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
oddprime_bitarray	src/mod/primes.cc	/^static bitarray * oddprime_bitarray = 0;$/;"	v	file:
oddq	src/comb/composition-nz-gray.h	/^    bool oddq(ulong x)  const  { return  0 != ( x & 1UL ); }$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
oddq	src/comb/composition-nz-gray2.h	/^    bool oddq(ulong x)  const  { return  0 != ( x & 1UL ); }$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
off_range_q	src/aux0/attic/range.h	/^static inline bool off_range_q(Type x, Type xmin, Type xmax)$/;"	f	signature:(Type x, Type xmin, Type xmax)
offset_copy	src/aux2/attic/copy2d.h	/^void offset_copy(const Type1 *const*src, ulong nrs, ulong ncs,$/;"	f	signature:(const Type1 *const*src, ulong nrs, ulong ncs, Type2 **dst, ulong nrd, ulong ncd, ulong coff=0, ulong roff=0)
once	doc/wfl-hilbert-doc.txt	/^        neighbours, and visiting each node just once;$/;"	v
one	src/bpol/gf2n.cc	/^GF2n GF2n::one;  \/\/ one (neutral element wrt. multiplication) in GF(2**n)$/;"	m	class:GF2n	file:
one	src/bpol/gf2n.h	/^    static GF2n one;  \/\/ one (neutral element wrt. multiplication) in GF(2**n)$/;"	m	class:GF2n	access:public
one	src/mod/mod.cc	/^mod    mod::one;$/;"	m	class:mod	file:
one	src/mod/mod.h	/^    static mod one;              \/\/ = 1$/;"	m	class:mod	access:public
one_bit_q	doc/bits-doc.txt	/^static inline bool one_bit_q(ulong x);$/;"	p	file:	signature:(ulong x)
one_bit_q	src/bits/bit2pow.h	/^static inline bool one_bit_q(ulong x)$/;"	f	signature:(ulong x)
open$	tags	/^$srcopenq	scripts\/autodoc.pl	\/^$srcopenq = 0;    # whether srcfile is open$\/;"	v$/;"	v
operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (const GF2n &f, ulong v)    { return  f.v_ != v; }$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f, ulong v)
operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator !=	src/bpol/gf2n.h	/^    friend inline bool operator != (ulong v, const GF2n &f)    { return  f.v_ != v; }$/;"	f	class:GF2n	access:friend	signature:(ulong v, const GF2n &f)
operator !=	src/ds/point2d.h	/^    bool operator != (const point2d & P) const { return ( x_ != P.x_ || y_ != P.y_); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
operator !=	src/ds/point3d.h	/^    bool operator != (const point3d & P) const { return ( x_ != P.x_ || y_ != P.y_ || z_ != P.z_); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
operator !=	src/ds/vector2d.h	/^    bool operator != (const vector2d & V) const { return ( x_ != V.x_ || y_ != V.y_); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
operator !=	src/ds/vector3d.h	/^    bool operator != (const vector3d & V) const { return ( x_ != V.x_ || y_ != V.y_ || z_ != V.z_); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
operator !=	src/mod/mod.h	/^    friend inline bool operator != (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator *	src/bpol/gf2n.h	/^    friend inline const GF2n operator * (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator *	src/ds/vector2d.h	/^inline Type operator *(const vector2d<Type> &V, const vector2d<Type> &W)$/;"	f	signature:(const vector2d<Type> &V, const vector2d<Type> &W)
operator *	src/ds/vector2d.h	/^inline vector2d<Type> operator *(const Type &a, const vector2d<Type> &V)$/;"	f	signature:(const Type &a, const vector2d<Type> &V)
operator *	src/ds/vector3d.h	/^inline Type operator *(const vector3d<Type> &V, const vector3d<Type> &W)$/;"	f	signature:(const vector3d<Type> &V, const vector3d<Type> &W)
operator *	src/ds/vector3d.h	/^inline vector3d<Type> operator *(const Type &a, const vector3d<Type> &V)$/;"	f	signature:(const Type &a, const vector3d<Type> &V)
operator *	src/matrix/matrix.h	/^    matrix<Type> operator *(const matrix<Type> &B)  const$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &B) const
operator *	src/mod/mod.h	/^    friend inline mod operator * (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator *=	src/bpol/gf2n.h	/^    friend inline GF2n & operator *= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
operator *=	src/ds/vector2d.h	/^    vector2d & operator *= (const Type & s) { x_ *= s,  y_ *= s;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const Type & s)
operator *=	src/ds/vector3d.h	/^    vector3d & operator *= (const Type & s) { x_ *= s,  y_ *= s;  z_ *= s;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const Type & s)
operator *=	src/matrix/matrix.h	/^    matrix<Type> & operator *=(const matrix<Type> &B)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &B)
operator *=	src/matrix/vector.h	/^    vector<Type> & operator *= (const Type & i)$/;"	f	class:vector	access:public	signature:(const Type & i)
operator *=	src/mod/mod.h	/^    friend inline mod & operator *= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
operator +	src/bpol/gf2n.h	/^    friend inline const GF2n operator + (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator +	src/ds/point2d.h	/^    point2d operator + (const vec2d & V)  const { return point2d( x_ + V.x(),  y_ + V.y() ); }$/;"	f	class:point2d	access:public	signature:(const vec2d & V) const
operator +	src/ds/point3d.h	/^    point3d operator + (const vec3d & V)  const { return point3d( x_ + V.x(),  y_ + V.y(),  z_ + V.z() ); }$/;"	f	class:point3d	access:public	signature:(const vec3d & V) const
operator +	src/ds/vector2d.h	/^    vector2d operator + ()  const { return vector2d( +x_,  +y_ ); }$/;"	f	class:vector2d	access:public	signature:() const
operator +	src/ds/vector2d.h	/^    vector2d operator + (const vector2d & V)  const { return vector2d( x_ + V.x_,  y_ + V.y_ ); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
operator +	src/ds/vector3d.h	/^    vector3d operator + ()  const { return vector3d( +x_,  +y_, +z_ ); }$/;"	f	class:vector3d	access:public	signature:() const
operator +	src/ds/vector3d.h	/^    vector3d operator + (const vector3d & V)  const { return vector3d( x_ + V.x_,  y_ + V.y_,  z_ + V.z_ ); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
operator +	src/mod/mod.h	/^    friend inline mod operator + (const mod &h)  { return h; }$/;"	f	class:mod	access:friend	signature:(const mod &h)
operator +	src/mod/mod.h	/^    friend inline mod operator + (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator ++	src/mod/mod.h	/^    friend inline mod & operator ++ (mod &z)$/;"	f	class:mod	access:friend	signature:(mod &z)
operator +=	src/bpol/gf2n.h	/^    friend inline GF2n & operator += (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
operator +=	src/ds/point2d.h	/^    point2d & operator += (const vec2d & V) { x_ += V.x(),  y_ += V.y();  return *this; }$/;"	f	class:point2d	access:public	signature:(const vec2d & V)
operator +=	src/ds/point3d.h	/^    point3d & operator += (const vec3d & V) { x_ += V.x(),  y_ += V.y(),  z_ += V.z();  return *this; }$/;"	f	class:point3d	access:public	signature:(const vec3d & V)
operator +=	src/ds/vector2d.h	/^    vector2d & operator += (const vector2d & V) { x_ += V.x_,  y_ += V.y_;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V)
operator +=	src/ds/vector3d.h	/^    vector3d & operator += (const vector3d & V) { x_ += V.x_,  y_ += V.y_;  z_ += V.z_;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V)
operator +=	src/matrix/matrix.h	/^    matrix<Type> & operator += (const matrix<Type> &h)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &h)
operator +=	src/matrix/vector.h	/^    vector<Type> & operator += (const vector<Type> &h)$/;"	f	class:vector	access:public	signature:(const vector<Type> &h)
operator +=	src/mod/mod.h	/^    friend inline mod & operator += (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
operator -	src/bpol/gf2n.h	/^    friend inline const GF2n operator - (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator -	src/ds/point2d.h	/^    point2d operator - (const vec2d & V)  const { return point2d( x_ - V.x(),  y_ - V.y() ); }$/;"	f	class:point2d	access:public	signature:(const vec2d & V) const
operator -	src/ds/point2d.h	/^    vec2d operator - (const point2d & P)  const { return vec2d( x_ - P.x_,  y_ - P.y_ ); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
operator -	src/ds/point3d.h	/^    point3d operator - (const vec3d & V)  const { return point3d( x_ - V.x(),  y_ - V.y(),  z_ - V.z() ); }$/;"	f	class:point3d	access:public	signature:(const vec3d & V) const
operator -	src/ds/point3d.h	/^    vec3d operator - (const point3d & P)  const { return vec3d( x_ - P.x_,  y_ - P.y_,  z_ - P.z_ ); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
operator -	src/ds/vector2d.h	/^    vector2d operator - ()  const { return vector2d( -x_,  -y_ ); }$/;"	f	class:vector2d	access:public	signature:() const
operator -	src/ds/vector2d.h	/^    vector2d operator - (const vector2d & V)  const { return vector2d( x_ - V.x_,  y_ - V.y_ ); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
operator -	src/ds/vector3d.h	/^    vector3d operator - ()  const { return vector3d( -x_,  -y_, -z_ ); }$/;"	f	class:vector3d	access:public	signature:() const
operator -	src/ds/vector3d.h	/^    vector3d operator - (const vector3d & V)  const { return vector3d( x_ - V.x_,  y_ - V.y_,  z_ - V.z_  ); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
operator -	src/mod/mod.h	/^    friend inline mod operator - (const mod &h)$/;"	f	class:mod	access:friend	signature:(const mod &h)
operator -	src/mod/mod.h	/^    friend inline mod operator - (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator --	src/mod/mod.h	/^    friend inline mod & operator -- (mod &z)$/;"	f	class:mod	access:friend	signature:(mod &z)
operator -=	src/bpol/gf2n.h	/^    friend inline GF2n & operator -= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
operator -=	src/ds/point2d.h	/^    point2d & operator -= (const vec2d & V) { x_ -= V.x(),  y_ -= V.y();  return *this; }$/;"	f	class:point2d	access:public	signature:(const vec2d & V)
operator -=	src/ds/point3d.h	/^    point3d & operator -= (const vec3d & V) { x_ -= V.x(),  y_ -= V.y();  z_ -= V.z();  return *this; }$/;"	f	class:point3d	access:public	signature:(const vec3d & V)
operator -=	src/ds/vector2d.h	/^    vector2d & operator -= (const vector2d & V) { x_ -= V.x_,  y_ -= V.y_;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V)
operator -=	src/ds/vector3d.h	/^    vector3d & operator -= (const vector3d & V) { x_ -= V.x_,  y_ -= V.y_;  z_ -= V.z_;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V)
operator -=	src/matrix/matrix.h	/^    matrix<Type> & operator -= (const matrix<Type> &h)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &h)
operator -=	src/matrix/vector.h	/^    vector<Type> & operator -= (const vector<Type> &h)$/;"	f	class:vector	access:public	signature:(const vector<Type> &h)
operator -=	src/mod/mod.h	/^    friend inline mod & operator -= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
operator /	src/bpol/gf2n.h	/^    friend inline const GF2n operator \/ (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator /	src/mod/mod.h	/^    friend inline mod operator \/ (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator /=	src/bpol/gf2n.h	/^    friend inline GF2n & operator \/= (GF2n &z, const GF2n &f)$/;"	f	class:GF2n	access:friend	signature:(GF2n &z, const GF2n &f)
operator /=	src/mod/mod.h	/^    friend inline mod & operator \/= (mod &z, const mod &h)$/;"	f	class:mod	access:friend	signature:(mod &z, const mod &h)
operator <	src/mod/mod.h	/^    friend inline bool operator < (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator <<	src/bpol/gf2n.cc	/^std::ostream & operator << (std::ostream & os, const GF2n & f)$/;"	f	signature:(std::ostream & os, const GF2n & f)
operator <<	src/bpol/gf2n.h	/^std::ostream&  operator << (std::ostream& os, const GF2n& f);$/;"	p	signature:(std::ostream& os, const GF2n& f)
operator <<	src/comb/attic/combcolex.h	/^    friend ostream & operator << (ostream &os, const comb_colex &x);$/;"	p	class:comb_colex	access:friend	signature:(ostream &os, const comb_colex &x)
operator <<	src/comb/attic/comblex.h	/^    friend ostream & operator << (ostream &os, const comb_lex &x);$/;"	p	class:comb_lex	access:friend	signature:(ostream &os, const comb_lex &x)
operator <<	src/comb/attic/combminchange.cc	/^ostream & operator << (ostream &os, const comb_minchange &x)$/;"	f	signature:(ostream &os, const comb_minchange &x)
operator <<	src/comb/attic/combminchange.h	/^    friend ostream & operator << (ostream &os, const comb_minchange &x);$/;"	p	class:comb_minchange	access:friend	signature:(ostream &os, const comb_minchange &x)
operator <<	src/ds/bounding-box.h	/^inline std::ostream & operator << (std::ostream & os, const bounding_box<Type> &B)$/;"	f	signature:(std::ostream & os, const bounding_box<Type> &B)
operator <<	src/ds/point2d.h	/^inline std::ostream & operator << (std::ostream & os, const point2d<Type> &P)$/;"	f	signature:(std::ostream & os, const point2d<Type> &P)
operator <<	src/ds/point3d.h	/^inline std::ostream & operator << (std::ostream & os, const point3d<Type> &P)$/;"	f	signature:(std::ostream & os, const point3d<Type> &P)
operator <<	src/ds/vector2d.h	/^inline std::ostream & operator << (std::ostream & os, const vector2d<Type> &V)$/;"	f	signature:(std::ostream & os, const vector2d<Type> &V)
operator <<	src/ds/vector3d.h	/^inline std::ostream & operator << (std::ostream & os, const vector3d<Type> &V)$/;"	f	signature:(std::ostream & os, const vector3d<Type> &V)
operator <<	src/mod/factor.cc	/^std::ostream&  operator << (std::ostream& os, const factorization& h)$/;"	f	signature:(std::ostream& os, const factorization& h)
operator <<	src/mod/factor.h	/^std::ostream&  operator << (std::ostream& os, const factorization& h);$/;"	p	signature:(std::ostream& os, const factorization& h)
operator <<	src/mod/mod.cc	/^std::ostream & operator << (std::ostream & os, const mod & h)$/;"	f	signature:(std::ostream & os, const mod & h)
operator <<	src/mod/mod.h	/^std::ostream&  operator << (std::ostream& os, const mod& h);$/;"	p	signature:(std::ostream& os, const mod& h)
operator <=	src/mod/mod.h	/^    friend inline bool operator <= (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator =	src/aux0/attic/funcemu.h	/^    funcemu & operator = (const funcemu &);  \/\/ forbidden$/;"	p	class:funcemu	access:private	signature:(const funcemu &)
operator =	src/bpol/gf2n.h	/^    inline GF2n & operator = (const GF2n &f)  { v_ = f.v_;  return *this; }$/;"	f	class:GF2n	access:public	signature:(const GF2n &f)
operator =	src/bpol/gf2n.h	/^    inline GF2n & operator = (ulong i)  { (*this) = GF2n(i);  return *this; }$/;"	f	class:GF2n	access:public	signature:(ulong i)
operator =	src/bpol/mersenne-coprime.h	/^    mersenne_coprime & operator = (const mersenne_coprime&);  \/\/ forbidden$/;"	p	class:mersenne_coprime	access:private	signature:(const mersenne_coprime&)
operator =	src/bpol/necklace2bitpol.h	/^    necklace2bitpol & operator = (const necklace2bitpol&);  \/\/ forbidden$/;"	p	class:necklace2bitpol	access:private	signature:(const necklace2bitpol&)
operator =	src/comb/acyclic-map.h	/^    acyclic_map & operator = (const acyclic_map&);  \/\/ forbidden$/;"	p	class:acyclic_map	access:private	signature:(const acyclic_map&)
operator =	src/comb/arrangement-rgs.h	/^    arrangement_rgs & operator = (const arrangement_rgs&);  \/\/ forbidden$/;"	p	class:arrangement_rgs	access:private	signature:(const arrangement_rgs&)
operator =	src/comb/ascent-alt-rgs.h	/^    ascent_alt_rgs & operator = (const ascent_alt_rgs&);  \/\/ forbidden$/;"	p	class:ascent_alt_rgs	access:private	signature:(const ascent_alt_rgs&)
operator =	src/comb/ascent-nonflat-rgs.h	/^    ascent_nonflat_rgs & operator = (const ascent_nonflat_rgs&);  \/\/ forbidden$/;"	p	class:ascent_nonflat_rgs	access:private	signature:(const ascent_nonflat_rgs&)
operator =	src/comb/ascent-rgs-subset-lex.h	/^    ascent_rgs_subset_lex & operator = (const ascent_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:ascent_rgs_subset_lex	access:private	signature:(const ascent_rgs_subset_lex&)
operator =	src/comb/ascent-rgs.h	/^    ascent_rgs & operator = (const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
operator =	src/comb/attic/ascent-rgs.h	/^    ascent_rgs & operator = (const ascent_rgs&);  \/\/ forbidden$/;"	p	class:ascent_rgs	access:private	signature:(const ascent_rgs&)
operator =	src/comb/attic/stringsubst.h	/^    string_subst & operator = (const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:private	signature:(const string_subst&)
operator =	src/comb/attic/subset-monotone.h	/^    subset_monotone & operator = (const subset_monotone&);  \/\/ forbidden$/;"	p	class:subset_monotone	access:private	signature:(const subset_monotone&)
operator =	src/comb/balanced-ordered-tree-lev-seq.h	/^    balanced_ordered_tree_lev_seq & operator = (const balanced_ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:balanced_ordered_tree_lev_seq	access:private	signature:(const balanced_ordered_tree_lev_seq&)
operator =	src/comb/binary-huffman.h	/^    binary_huffman & operator = (const binary_huffman&);  \/\/ forbidden$/;"	p	class:binary_huffman	access:private	signature:(const binary_huffman&)
operator =	src/comb/binary-necklace.h	/^    binary_necklace & operator = (const binary_necklace&);  \/\/ forbidden$/;"	p	class:binary_necklace	access:private	signature:(const binary_necklace&)
operator =	src/comb/binary-sl-gray.h	/^    binary_sl_gray & operator = (const binary_sl_gray&);  \/\/ forbidden$/;"	p	class:binary_sl_gray	access:private	signature:(const binary_sl_gray&)
operator =	src/comb/catalan-path-lex.h	/^    catalan_path_lex & operator = (const catalan_path_lex&);  \/\/ forbidden$/;"	p	class:catalan_path_lex	access:private	signature:(const catalan_path_lex&)
operator =	src/comb/catalan-rgs-gray.h	/^    catalan_rgs_gray & operator = (const catalan_rgs_gray&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gray	access:private	signature:(const catalan_rgs_gray&)
operator =	src/comb/catalan-rgs-gslex.h	/^    catalan_rgs_gslex & operator = (const catalan_rgs_gslex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_gslex	access:private	signature:(const catalan_rgs_gslex&)
operator =	src/comb/catalan-rgs-subset-lex.h	/^    catalan_rgs_subset_lex & operator = (const catalan_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:catalan_rgs_subset_lex	access:private	signature:(const catalan_rgs_subset_lex&)
operator =	src/comb/catalan-rgs.h	/^    catalan_rgs & operator = (const catalan_rgs&);  \/\/ forbidden$/;"	p	class:catalan_rgs	access:private	signature:(const catalan_rgs&)
operator =	src/comb/catalan-step-rgs-colex.h	/^    catalan_step_rgs_colex & operator = (const catalan_step_rgs_colex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_colex	access:private	signature:(const catalan_step_rgs_colex&)
operator =	src/comb/catalan-step-rgs-lex.h	/^    catalan_step_rgs_lex & operator = (const catalan_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_lex	access:private	signature:(const catalan_step_rgs_lex&)
operator =	src/comb/catalan-step-rgs-subset-lexrev.h	/^    catalan_step_rgs_subset_lexrev & operator = (const catalan_step_rgs_subset_lexrev&);  \/\/ forbidden$/;"	p	class:catalan_step_rgs_subset_lexrev	access:private	signature:(const catalan_step_rgs_subset_lexrev&)
operator =	src/comb/catalan.h	/^    catalan & operator = (const catalan&);  \/\/ forbidden$/;"	p	class:catalan	access:private	signature:(const catalan&)
operator =	src/comb/cayley-perm.h	/^    cayley_perm & operator = (const cayley_perm&);  \/\/ forbidden$/;"	p	class:cayley_perm	access:private	signature:(const cayley_perm&)
operator =	src/comb/change-rgs.h	/^    change_rgs & operator = (const change_rgs&);  \/\/ forbidden$/;"	p	class:change_rgs	access:private	signature:(const change_rgs&)
operator =	src/comb/check-kpermgen.h	/^    check_kpermgen & operator = (const check_kpermgen&);  \/\/ forbidden$/;"	p	class:check_kpermgen	access:private	signature:(const check_kpermgen&)
operator =	src/comb/check-mixedradix.h	/^    check_mixedradix & operator = (const check_mixedradix&);  \/\/ forbidden$/;"	p	class:check_mixedradix	access:private	signature:(const check_mixedradix&)
operator =	src/comb/check-permgen.h	/^    check_permgen & operator = (const check_permgen&);  \/\/ forbidden$/;"	p	class:check_permgen	access:private	signature:(const check_permgen&)
operator =	src/comb/combination-chase.h	/^    combination_chase & operator = (const combination_chase&);  \/\/ forbidden$/;"	p	class:combination_chase	access:private	signature:(const combination_chase&)
operator =	src/comb/combination-colex.h	/^    combination_colex & operator = (const combination_colex&);  \/\/ forbidden$/;"	p	class:combination_colex	access:private	signature:(const combination_colex&)
operator =	src/comb/combination-emk.h	/^    combination_emk & operator = (const combination_emk&);  \/\/ forbidden$/;"	p	class:combination_emk	access:private	signature:(const combination_emk&)
operator =	src/comb/combination-endo.h	/^    combination_endo & operator = (const combination_endo&);  \/\/ forbidden$/;"	p	class:combination_endo	access:private	signature:(const combination_endo&)
operator =	src/comb/combination-enup.h	/^    combination_enup & operator = (const combination_enup&);  \/\/ forbidden$/;"	p	class:combination_enup	access:private	signature:(const combination_enup&)
operator =	src/comb/combination-lex.h	/^    combination_lex & operator = (const combination_lex&);  \/\/ forbidden$/;"	p	class:combination_lex	access:private	signature:(const combination_lex&)
operator =	src/comb/combination-mod.h	/^    combination_mod & operator = (const combination_mod&);  \/\/ forbidden$/;"	p	class:combination_mod	access:private	signature:(const combination_mod&)
operator =	src/comb/combination-pref.h	/^    combination_pref & operator = (const combination_pref&);  \/\/ forbidden$/;"	p	class:combination_pref	access:private	signature:(const combination_pref&)
operator =	src/comb/combination-rec.h	/^    comb_rec & operator = (const comb_rec&);  \/\/ forbidden$/;"	p	class:comb_rec	access:private	signature:(const comb_rec&)
operator =	src/comb/combination-revdoor.h	/^    combination_revdoor & operator = (const combination_revdoor&);  \/\/ forbidden$/;"	p	class:combination_revdoor	access:private	signature:(const combination_revdoor&)
operator =	src/comb/composition-colex.h	/^    composition_colex & operator = (const composition_colex&);  \/\/ forbidden$/;"	p	class:composition_colex	access:private	signature:(const composition_colex&)
operator =	src/comb/composition-colex2.h	/^    composition_colex2 & operator = (const composition_colex2&);  \/\/ forbidden$/;"	p	class:composition_colex2	access:private	signature:(const composition_colex2&)
operator =	src/comb/composition-dist-unimodal.h	/^    composition_dist_unimodal & operator = (const composition_dist_unimodal&);  \/\/ forbidden$/;"	p	class:composition_dist_unimodal	access:private	signature:(const composition_dist_unimodal&)
operator =	src/comb/composition-ex-colex.h	/^    composition_ex_colex & operator = (const composition_ex_colex&);  \/\/ forbidden$/;"	p	class:composition_ex_colex	access:private	signature:(const composition_ex_colex&)
operator =	src/comb/composition-ex-lex.h	/^    composition_ex_lex & operator = (const composition_ex_lex&);  \/\/ forbidden$/;"	p	class:composition_ex_lex	access:private	signature:(const composition_ex_lex&)
operator =	src/comb/composition-nz-binary.h	/^    composition_nz_binary & operator = (const composition_nz_binary&);  \/\/ forbidden$/;"	p	class:composition_nz_binary	access:private	signature:(const composition_nz_binary&)
operator =	src/comb/composition-nz-carlitz.h	/^    composition_nz_carlitz & operator = (const composition_nz_carlitz&);  \/\/ forbidden$/;"	p	class:composition_nz_carlitz	access:private	signature:(const composition_nz_carlitz&)
operator =	src/comb/composition-nz-first-max.h	/^    composition_nz_first_max & operator = (const composition_nz_first_max&);  \/\/ forbidden$/;"	p	class:composition_nz_first_max	access:private	signature:(const composition_nz_first_max&)
operator =	src/comb/composition-nz-gray.h	/^    composition_nz_gray & operator = (const composition_nz_gray&);  \/\/ forbidden$/;"	p	class:composition_nz_gray	access:private	signature:(const composition_nz_gray&)
operator =	src/comb/composition-nz-gray2.h	/^    composition_nz_gray2 & operator = (const composition_nz_gray2&);  \/\/ forbidden$/;"	p	class:composition_nz_gray2	access:private	signature:(const composition_nz_gray2&)
operator =	src/comb/composition-nz-i-smooth.h	/^    composition_nz_i_smooth & operator = (const composition_nz_i_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_i_smooth	access:private	signature:(const composition_nz_i_smooth&)
operator =	src/comb/composition-nz-left-2smooth.h	/^    composition_nz_left_2smooth & operator = (const composition_nz_left_2smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_2smooth	access:private	signature:(const composition_nz_left_2smooth&)
operator =	src/comb/composition-nz-left-smooth.h	/^    composition_nz_left_smooth & operator = (const composition_nz_left_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_left_smooth	access:private	signature:(const composition_nz_left_smooth&)
operator =	src/comb/composition-nz-max.h	/^    composition_nz_max & operator = (const composition_nz_max&);  \/\/ forbidden$/;"	p	class:composition_nz_max	access:private	signature:(const composition_nz_max&)
operator =	src/comb/composition-nz-min.h	/^    composition_nz_min & operator = (const composition_nz_min&);  \/\/ forbidden$/;"	p	class:composition_nz_min	access:private	signature:(const composition_nz_min&)
operator =	src/comb/composition-nz-minc.h	/^    composition_nz_minc & operator = (const composition_nz_minc&);  \/\/ forbidden$/;"	p	class:composition_nz_minc	access:private	signature:(const composition_nz_minc&)
operator =	src/comb/composition-nz-numparts.h	/^    composition_nz_numparts & operator = (const composition_nz_numparts&);  \/\/ forbidden$/;"	p	class:composition_nz_numparts	access:private	signature:(const composition_nz_numparts&)
operator =	src/comb/composition-nz-odd-subset-lex.h	/^    composition_nz_odd_subset_lex & operator = (const composition_nz_odd_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_odd_subset_lex	access:private	signature:(const composition_nz_odd_subset_lex&)
operator =	src/comb/composition-nz-odd.h	/^    composition_nz_odd & operator = (const composition_nz_odd&);  \/\/ forbidden$/;"	p	class:composition_nz_odd	access:private	signature:(const composition_nz_odd&)
operator =	src/comb/composition-nz-restrpref.h	/^    composition_nz_restrpref & operator = (const composition_nz_restrpref&);  \/\/ forbidden$/;"	p	class:composition_nz_restrpref	access:private	signature:(const composition_nz_restrpref&)
operator =	src/comb/composition-nz-rl.h	/^    composition_nz_rl & operator = (const composition_nz_rl&);  \/\/ forbidden$/;"	p	class:composition_nz_rl	access:private	signature:(const composition_nz_rl&)
operator =	src/comb/composition-nz-smooth.h	/^    composition_nz_smooth & operator = (const composition_nz_smooth&);  \/\/ forbidden$/;"	p	class:composition_nz_smooth	access:private	signature:(const composition_nz_smooth&)
operator =	src/comb/composition-nz-sorts.h	/^    composition_nz_sorts & operator = (const composition_nz_sorts&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts	access:private	signature:(const composition_nz_sorts&)
operator =	src/comb/composition-nz-sorts2-pp.h	/^    composition_nz_sorts2_pp & operator = (const composition_nz_sorts2_pp&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2_pp	access:private	signature:(const composition_nz_sorts2_pp&)
operator =	src/comb/composition-nz-sorts2.h	/^    composition_nz_sorts2 & operator = (const composition_nz_sorts2&);  \/\/ forbidden$/;"	p	class:composition_nz_sorts2	access:private	signature:(const composition_nz_sorts2&)
operator =	src/comb/composition-nz-subset-lex.h	/^    composition_nz_subset_lex & operator = (const composition_nz_subset_lex&);  \/\/ forbidden$/;"	p	class:composition_nz_subset_lex	access:private	signature:(const composition_nz_subset_lex&)
operator =	src/comb/composition-nz-superdiagonal.h	/^    composition_nz_superdiagonal & operator = (const composition_nz_superdiagonal&);  \/\/ forbidden$/;"	p	class:composition_nz_superdiagonal	access:private	signature:(const composition_nz_superdiagonal&)
operator =	src/comb/composition-nz-upstep.h	/^    composition_nz_upstep & operator = (const composition_nz_upstep&);  \/\/ forbidden$/;"	p	class:composition_nz_upstep	access:private	signature:(const composition_nz_upstep&)
operator =	src/comb/composition-nz-weakly-unimodal.h	/^    composition_nz_weakly_unimodal & operator = (const composition_nz_weakly_unimodal&);  \/\/ forbidden$/;"	p	class:composition_nz_weakly_unimodal	access:private	signature:(const composition_nz_weakly_unimodal&)
operator =	src/comb/composition-nz.h	/^    composition_nz & operator = (const composition_nz&);  \/\/ forbidden$/;"	p	class:composition_nz	access:private	signature:(const composition_nz&)
operator =	src/comb/composition-unimodal.h	/^    composition_unimodal & operator = (const composition_unimodal&);  \/\/ forbidden$/;"	p	class:composition_unimodal	access:private	signature:(const composition_unimodal&)
operator =	src/comb/cyclic-perm.h	/^    cyclic_perm & operator = (const cyclic_perm&);  \/\/ forbidden$/;"	p	class:cyclic_perm	access:private	signature:(const cyclic_perm&)
operator =	src/comb/descent-rgs.h	/^    descent_rgs & operator = (const descent_rgs&);  \/\/ forbidden$/;"	p	class:descent_rgs	access:private	signature:(const descent_rgs&)
operator =	src/comb/dyck-gray.h	/^    dyck_gray & operator = (const dyck_gray&);  \/\/ forbidden$/;"	p	class:dyck_gray	access:private	signature:(const dyck_gray&)
operator =	src/comb/dyck-gray2.h	/^    dyck_gray2 & operator = (const dyck_gray2&);  \/\/ forbidden$/;"	p	class:dyck_gray2	access:private	signature:(const dyck_gray2&)
operator =	src/comb/dyck-pref.h	/^    dyck_pref & operator = (const dyck_pref&);  \/\/ forbidden$/;"	p	class:dyck_pref	access:private	signature:(const dyck_pref&)
operator =	src/comb/dyck-pref2.h	/^    dyck_pref2 & operator = (const dyck_pref2&);  \/\/ forbidden$/;"	p	class:dyck_pref2	access:private	signature:(const dyck_pref2&)
operator =	src/comb/dyck-rgs-subset-lex.h	/^    dyck_rgs_subset_lex & operator = (const dyck_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:dyck_rgs_subset_lex	access:private	signature:(const dyck_rgs_subset_lex&)
operator =	src/comb/dyck-rgs.h	/^    dyck_rgs & operator = (const dyck_rgs&);  \/\/ forbidden$/;"	p	class:dyck_rgs	access:private	signature:(const dyck_rgs&)
operator =	src/comb/hilbert-ndim-rec.h	/^    hilbert_ndim_rec & operator = (const hilbert_ndim_rec&);  \/\/ forbidden$/;"	p	class:hilbert_ndim_rec	access:private	signature:(const hilbert_ndim_rec&)
operator =	src/comb/hilbert-ndim.h	/^    hilbert_ndim & operator = (const hilbert_ndim&);  \/\/ forbidden$/;"	p	class:hilbert_ndim	access:private	signature:(const hilbert_ndim&)
operator =	src/comb/involution-zero-map-rgs.h	/^    involution_zero_map_rgs & operator = (const involution_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:involution_zero_map_rgs	access:private	signature:(const involution_zero_map_rgs&)
operator =	src/comb/isoscent-rgs.h	/^    isoscent_rgs & operator = (const isoscent_rgs&);  \/\/ forbidden$/;"	p	class:isoscent_rgs	access:private	signature:(const isoscent_rgs&)
operator =	src/comb/kperm-gray.h	/^    kperm_gray & operator = (const kperm_gray&);  \/\/ forbidden$/;"	p	class:kperm_gray	access:private	signature:(const kperm_gray&)
operator =	src/comb/kperm-lex.h	/^    kperm_lex & operator = (const kperm_lex&);  \/\/ forbidden$/;"	p	class:kperm_lex	access:private	signature:(const kperm_lex&)
operator =	src/comb/ksubset-gray.h	/^    ksubset_gray & operator = (const ksubset_gray&);  \/\/ forbidden$/;"	p	class:ksubset_gray	access:private	signature:(const ksubset_gray&)
operator =	src/comb/ksubset-lex.h	/^    ksubset_lex & operator = (const ksubset_lex&);  \/\/ forbidden$/;"	p	class:ksubset_lex	access:private	signature:(const ksubset_lex&)
operator =	src/comb/ksubset-rec.h	/^    ksubset_rec & operator = (const ksubset_rec&);  \/\/ forbidden$/;"	p	class:ksubset_rec	access:private	signature:(const ksubset_rec&)
operator =	src/comb/ksubset-twoclose.h	/^    ksubset_twoclose & operator = (const ksubset_twoclose&);  \/\/ forbidden$/;"	p	class:ksubset_twoclose	access:private	signature:(const ksubset_twoclose&)
operator =	src/comb/map23-rgs.h	/^    map23_rgs & operator = (const map23_rgs&);  \/\/ forbidden$/;"	p	class:map23_rgs	access:private	signature:(const map23_rgs&)
operator =	src/comb/mixedradix-colex.h	/^    mixedradix_colex & operator = (const mixedradix_colex&);  \/\/ forbidden$/;"	p	class:mixedradix_colex	access:private	signature:(const mixedradix_colex&)
operator =	src/comb/mixedradix-endo-gray.h	/^    mixedradix_endo_gray & operator = (const mixedradix_endo_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_endo_gray	access:private	signature:(const mixedradix_endo_gray&)
operator =	src/comb/mixedradix-endo.h	/^    mixedradix_endo & operator = (const mixedradix_endo&);  \/\/ forbidden$/;"	p	class:mixedradix_endo	access:private	signature:(const mixedradix_endo&)
operator =	src/comb/mixedradix-gray.h	/^    mixedradix_gray & operator = (const mixedradix_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_gray	access:private	signature:(const mixedradix_gray&)
operator =	src/comb/mixedradix-gray2.h	/^    mixedradix_gray2 & operator = (const mixedradix_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_gray2	access:private	signature:(const mixedradix_gray2&)
operator =	src/comb/mixedradix-gslex-alt.h	/^    mixedradix_gslex_alt & operator = (const mixedradix_gslex_alt&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt	access:private	signature:(const mixedradix_gslex_alt&)
operator =	src/comb/mixedradix-gslex-alt2.h	/^    mixedradix_gslex_alt2 & operator = (const mixedradix_gslex_alt2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex_alt2	access:private	signature:(const mixedradix_gslex_alt2&)
operator =	src/comb/mixedradix-gslex.h	/^    mixedradix_gslex & operator = (const mixedradix_gslex&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex	access:private	signature:(const mixedradix_gslex&)
operator =	src/comb/mixedradix-gslex2.h	/^    mixedradix_gslex2 & operator = (const mixedradix_gslex2&);  \/\/ forbidden$/;"	p	class:mixedradix_gslex2	access:private	signature:(const mixedradix_gslex2&)
operator =	src/comb/mixedradix-lex.h	/^    mixedradix_lex & operator = (const mixedradix_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_lex	access:private	signature:(const mixedradix_lex&)
operator =	src/comb/mixedradix-modular-gray.h	/^    mixedradix_modular_gray & operator = (const mixedradix_modular_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray	access:private	signature:(const mixedradix_modular_gray&)
operator =	src/comb/mixedradix-modular-gray2.h	/^    mixedradix_modular_gray2 & operator = (const mixedradix_modular_gray2&);  \/\/ forbidden$/;"	p	class:mixedradix_modular_gray2	access:private	signature:(const mixedradix_modular_gray2&)
operator =	src/comb/mixedradix-naf-gray.h	/^    mixedradix_naf_gray & operator = (const mixedradix_naf_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_gray	access:private	signature:(const mixedradix_naf_gray&)
operator =	src/comb/mixedradix-naf-subset-lex.h	/^    mixedradix_naf_subset_lex & operator = (const mixedradix_naf_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_naf_subset_lex	access:private	signature:(const mixedradix_naf_subset_lex&)
operator =	src/comb/mixedradix-naf.h	/^    mixedradix_naf & operator = (const mixedradix_naf&);  \/\/ forbidden$/;"	p	class:mixedradix_naf	access:private	signature:(const mixedradix_naf&)
operator =	src/comb/mixedradix-restrpref.h	/^    mixedradix_restrpref & operator = (const mixedradix_restrpref&);  \/\/ forbidden$/;"	p	class:mixedradix_restrpref	access:private	signature:(const mixedradix_restrpref&)
operator =	src/comb/mixedradix-rfact.h	/^    mixedradix_rfact & operator = (const mixedradix_rfact&);  \/\/ forbidden$/;"	p	class:mixedradix_rfact	access:private	signature:(const mixedradix_rfact&)
operator =	src/comb/mixedradix-sl-gray.h	/^    mixedradix_sl_gray & operator = (const mixedradix_sl_gray&);  \/\/ forbidden$/;"	p	class:mixedradix_sl_gray	access:private	signature:(const mixedradix_sl_gray&)
operator =	src/comb/mixedradix-sod-lex.h	/^    mixedradix_sod_lex & operator = (const mixedradix_sod_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_sod_lex	access:private	signature:(const mixedradix_sod_lex&)
operator =	src/comb/mixedradix-subset-lex.h	/^    mixedradix_subset_lex & operator = (const mixedradix_subset_lex&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lex	access:private	signature:(const mixedradix_subset_lex&)
operator =	src/comb/mixedradix-subset-lexrev.h	/^    mixedradix_subset_lexrev & operator = (const mixedradix_subset_lexrev&);  \/\/ forbidden$/;"	p	class:mixedradix_subset_lexrev	access:private	signature:(const mixedradix_subset_lexrev&)
operator =	src/comb/motzkin-nonflat-rgs-lex.h	/^    motzkin_nonflat_rgs_lex & operator = (const motzkin_nonflat_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_nonflat_rgs_lex	access:private	signature:(const motzkin_nonflat_rgs_lex&)
operator =	src/comb/motzkin-path-lex.h	/^    motzkin_path_lex & operator = (const motzkin_path_lex&);  \/\/ forbidden$/;"	p	class:motzkin_path_lex	access:private	signature:(const motzkin_path_lex&)
operator =	src/comb/motzkin-rgs-lex.h	/^    motzkin_rgs_lex & operator = (const motzkin_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_rgs_lex	access:private	signature:(const motzkin_rgs_lex&)
operator =	src/comb/motzkin-step-rgs-lex.h	/^    motzkin_step_rgs_lex & operator = (const motzkin_step_rgs_lex&);  \/\/ forbidden$/;"	p	class:motzkin_step_rgs_lex	access:private	signature:(const motzkin_step_rgs_lex&)
operator =	src/comb/mpartition.h	/^    mpartition & operator = (const mpartition&);  \/\/ forbidden$/;"	p	class:mpartition	access:private	signature:(const mpartition&)
operator =	src/comb/mpartition2.h	/^    mpartition2 & operator = (const mpartition2&);  \/\/ forbidden$/;"	p	class:mpartition2	access:private	signature:(const mpartition2&)
operator =	src/comb/mset-perm-gray.h	/^    mset_perm_gray & operator = (const mset_perm_gray&);  \/\/ forbidden$/;"	p	class:mset_perm_gray	access:private	signature:(const mset_perm_gray&)
operator =	src/comb/mset-perm-lex-rec.h	/^    mset_perm_lex_rec & operator = (const mset_perm_lex_rec&);  \/\/ forbidden$/;"	p	class:mset_perm_lex_rec	access:private	signature:(const mset_perm_lex_rec&)
operator =	src/comb/mset-perm-lex.h	/^    mset_perm_lex & operator = (const mset_perm_lex&);  \/\/ forbidden$/;"	p	class:mset_perm_lex	access:private	signature:(const mset_perm_lex&)
operator =	src/comb/mset-perm-pref.h	/^    mset_perm_pref & operator = (const mset_perm_pref&);  \/\/ forbidden$/;"	p	class:mset_perm_pref	access:private	signature:(const mset_perm_pref&)
operator =	src/comb/necklace.h	/^    necklace & operator = (const necklace&);  \/\/ forbidden$/;"	p	class:necklace	access:private	signature:(const necklace&)
operator =	src/comb/num-compositions.h	/^    num_compositions & operator = (const num_compositions&);  \/\/ forbidden$/;"	p	class:num_compositions	access:private	signature:(const num_compositions&)
operator =	src/comb/ordered-tree-branches.h	/^    ordered_tree_branches & operator = (const ordered_tree_branches&);  \/\/ forbidden$/;"	p	class:ordered_tree_branches	access:private	signature:(const ordered_tree_branches&)
operator =	src/comb/ordered-tree-branching-seq.h	/^    ordered_tree_branching_seq & operator = (const ordered_tree_branching_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_branching_seq	access:private	signature:(const ordered_tree_branching_seq&)
operator =	src/comb/ordered-tree-lev-seq.h	/^    ordered_tree_lev_seq & operator = (const ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_lev_seq	access:private	signature:(const ordered_tree_lev_seq&)
operator =	src/comb/paren-gray.h	/^    paren_gray & operator = (const paren_gray&);  \/\/ forbidden$/;"	p	class:paren_gray	access:private	signature:(const paren_gray&)
operator =	src/comb/paren-lex.h	/^    paren_lex & operator = (const paren_lex&);  \/\/ forbidden$/;"	p	class:paren_lex	access:private	signature:(const paren_lex&)
operator =	src/comb/paren-pref.h	/^    paren_pref & operator = (const paren_pref&);  \/\/ forbidden$/;"	p	class:paren_pref	access:private	signature:(const paren_pref&)
operator =	src/comb/paren.h	/^    paren & operator = (const paren&);  \/\/ forbidden$/;"	p	class:paren	access:private	signature:(const paren&)
operator =	src/comb/partition-2fall-asc-subset-lex.h	/^    partition_2fall_asc_subset_lex & operator = (const partition_2fall_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc_subset_lex	access:private	signature:(const partition_2fall_asc_subset_lex&)
operator =	src/comb/partition-2fall-asc.h	/^    partition_2fall_asc & operator = (const partition_2fall_asc&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc	access:private	signature:(const partition_2fall_asc&)
operator =	src/comb/partition-2fall-desc.h	/^    partition_2fall_desc & operator = (const partition_2fall_desc&);  \/\/ forbidden$/;"	p	class:partition_2fall_desc	access:private	signature:(const partition_2fall_desc&)
operator =	src/comb/partition-asc-2rep-subset-lex.h	/^    partition_asc_2rep_subset_lex & operator = (const partition_asc_2rep_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep_subset_lex	access:private	signature:(const partition_asc_2rep_subset_lex&)
operator =	src/comb/partition-asc-2rep.h	/^    partition_asc_2rep & operator = (const partition_asc_2rep&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep	access:private	signature:(const partition_asc_2rep&)
operator =	src/comb/partition-asc-perim.h	/^    partition_asc_perim & operator = (const partition_asc_perim&);  \/\/ forbidden$/;"	p	class:partition_asc_perim	access:private	signature:(const partition_asc_perim&)
operator =	src/comb/partition-asc-sorts.h	/^    partition_asc_sorts & operator = (const partition_asc_sorts&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts	access:private	signature:(const partition_asc_sorts&)
operator =	src/comb/partition-asc-sorts2-pp.h	/^    partition_asc_sorts2_pp & operator = (const partition_asc_sorts2_pp&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2_pp	access:private	signature:(const partition_asc_sorts2_pp&)
operator =	src/comb/partition-asc-sorts2.h	/^    partition_asc_sorts2 & operator = (const partition_asc_sorts2&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2	access:private	signature:(const partition_asc_sorts2&)
operator =	src/comb/partition-asc-subset-lex-csh.h	/^    partition_asc_subset_lex_csh & operator = (const partition_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex_csh	access:private	signature:(const partition_asc_subset_lex_csh&)
operator =	src/comb/partition-asc-subset-lex.h	/^    partition_asc_subset_lex & operator = (const partition_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex	access:private	signature:(const partition_asc_subset_lex&)
operator =	src/comb/partition-asc.h	/^    partition_asc & operator = (const partition_asc&);  \/\/ forbidden$/;"	p	class:partition_asc	access:private	signature:(const partition_asc&)
operator =	src/comb/partition-binary-asc.h	/^    partition_binary_asc & operator = (const partition_binary_asc&);  \/\/ forbidden$/;"	p	class:partition_binary_asc	access:private	signature:(const partition_binary_asc&)
operator =	src/comb/partition-binary-desc.h	/^    partition_binary_desc & operator = (const partition_binary_desc&);  \/\/ forbidden$/;"	p	class:partition_binary_desc	access:private	signature:(const partition_binary_desc&)
operator =	src/comb/partition-desc-bb.h	/^    partition_desc_bb & operator = (const partition_desc_bb&);  \/\/ forbidden$/;"	p	class:partition_desc_bb	access:private	signature:(const partition_desc_bb&)
operator =	src/comb/partition-desc.h	/^    partition_desc & operator = (const partition_desc&);  \/\/ forbidden$/;"	p	class:partition_desc	access:private	signature:(const partition_desc&)
operator =	src/comb/partition-dist-asc-len.h	/^    partition_dist_asc_len & operator = (const partition_dist_asc_len&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_len	access:private	signature:(const partition_dist_asc_len&)
operator =	src/comb/partition-dist-asc-subset-lex.h	/^    partition_dist_asc_subset_lex & operator = (const partition_dist_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_subset_lex	access:private	signature:(const partition_dist_asc_subset_lex&)
operator =	src/comb/partition-dist-asc.h	/^    partition_dist_asc & operator = (const partition_dist_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_asc	access:private	signature:(const partition_dist_asc&)
operator =	src/comb/partition-dist-d-asc.h	/^    partition_dist_d_asc & operator = (const partition_dist_d_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_d_asc	access:private	signature:(const partition_dist_d_asc&)
operator =	src/comb/partition-dist-desc.h	/^    partition_dist_desc & operator = (const partition_dist_desc&);  \/\/ forbidden$/;"	p	class:partition_dist_desc	access:private	signature:(const partition_dist_desc&)
operator =	src/comb/partition-gen.h	/^    partition_gen & operator = (const partition_gen&);  \/\/ forbidden$/;"	p	class:partition_gen	access:private	signature:(const partition_gen&)
operator =	src/comb/partition-nonsquashing-desc.h	/^    partition_nonsquashing_desc & operator = (const partition_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_nonsquashing_desc	access:private	signature:(const partition_nonsquashing_desc&)
operator =	src/comb/partition-odd-asc-subset-lex-csh.h	/^    partition_odd_asc_subset_lex_csh & operator = (const partition_odd_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex_csh	access:private	signature:(const partition_odd_asc_subset_lex_csh&)
operator =	src/comb/partition-odd-asc-subset-lex.h	/^    partition_odd_asc_subset_lex & operator = (const partition_odd_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex	access:private	signature:(const partition_odd_asc_subset_lex&)
operator =	src/comb/partition-odd-asc.h	/^    partition_odd_asc & operator = (const partition_odd_asc&);  \/\/ forbidden$/;"	p	class:partition_odd_asc	access:private	signature:(const partition_odd_asc&)
operator =	src/comb/partition-odd-desc.h	/^    partition_odd_desc & operator = (const partition_odd_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_desc	access:private	signature:(const partition_odd_desc&)
operator =	src/comb/partition-odd-nonsquashing-desc.h	/^    partition_odd_nonsquashing_desc & operator = (const partition_odd_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_nonsquashing_desc	access:private	signature:(const partition_odd_nonsquashing_desc&)
operator =	src/comb/partition-rgs-lex.h	/^    partition_rgs_lex & operator = (const partition_rgs_lex&);  \/\/ forbidden$/;"	p	class:partition_rgs_lex	access:private	signature:(const partition_rgs_lex&)
operator =	src/comb/partition-s-desc.h	/^    partition_s_desc & operator = (const partition_s_desc&);  \/\/ forbidden$/;"	p	class:partition_s_desc	access:private	signature:(const partition_s_desc&)
operator =	src/comb/partition-strongly-decr-desc.h	/^    partition_strongly_decr_desc & operator = (const partition_strongly_decr_desc&);  \/\/ forbidden$/;"	p	class:partition_strongly_decr_desc	access:private	signature:(const partition_strongly_decr_desc&)
operator =	src/comb/partition.h	/^    partition & operator = (const partition&);  \/\/ forbidden$/;"	p	class:partition	access:private	signature:(const partition&)
operator =	src/comb/perm-colex.h	/^    perm_colex & operator = (const perm_colex&);  \/\/ forbidden$/;"	p	class:perm_colex	access:private	signature:(const perm_colex&)
operator =	src/comb/perm-derange.h	/^    perm_derange & operator = (const perm_derange&);  \/\/ forbidden$/;"	p	class:perm_derange	access:private	signature:(const perm_derange&)
operator =	src/comb/perm-gray-ffact.h	/^    perm_gray_ffact & operator = (const perm_gray_ffact&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact	access:private	signature:(const perm_gray_ffact&)
operator =	src/comb/perm-gray-ffact2.h	/^    perm_gray_ffact2 & operator = (const perm_gray_ffact2&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact2	access:private	signature:(const perm_gray_ffact2&)
operator =	src/comb/perm-gray-lipski.h	/^    perm_gray_lipski & operator = (const perm_gray_lipski&);  \/\/ forbidden$/;"	p	class:perm_gray_lipski	access:private	signature:(const perm_gray_lipski&)
operator =	src/comb/perm-gray-rfact.h	/^    perm_gray_rfact & operator = (const perm_gray_rfact&);  \/\/ forbidden$/;"	p	class:perm_gray_rfact	access:private	signature:(const perm_gray_rfact&)
operator =	src/comb/perm-gray-rot1.h	/^    perm_gray_rot1 & operator = (const perm_gray_rot1&);  \/\/ forbidden$/;"	p	class:perm_gray_rot1	access:private	signature:(const perm_gray_rot1&)
operator =	src/comb/perm-gray-wells.h	/^    perm_gray_wells & operator = (const perm_gray_wells&);  \/\/ forbidden$/;"	p	class:perm_gray_wells	access:private	signature:(const perm_gray_wells&)
operator =	src/comb/perm-heap.h	/^    perm_heap & operator = (const perm_heap&);  \/\/ forbidden$/;"	p	class:perm_heap	access:private	signature:(const perm_heap&)
operator =	src/comb/perm-heap2-swaps.h	/^    perm_heap2_swaps & operator = (const perm_heap2_swaps&);  \/\/ forbidden$/;"	p	class:perm_heap2_swaps	access:private	signature:(const perm_heap2_swaps&)
operator =	src/comb/perm-heap2.h	/^    perm_heap2 & operator = (const perm_heap2&);  \/\/ forbidden$/;"	p	class:perm_heap2	access:private	signature:(const perm_heap2&)
operator =	src/comb/perm-involution.h	/^    perm_involution & operator = (const perm_involution&);  \/\/ forbidden$/;"	p	class:perm_involution	access:private	signature:(const perm_involution&)
operator =	src/comb/perm-ives.h	/^    perm_ives & operator = (const perm_ives&);  \/\/ forbidden$/;"	p	class:perm_ives	access:private	signature:(const perm_ives&)
operator =	src/comb/perm-lex-inv.h	/^    perm_lex_inv & operator = (const perm_lex_inv&);  \/\/ forbidden$/;"	p	class:perm_lex_inv	access:private	signature:(const perm_lex_inv&)
operator =	src/comb/perm-lex.h	/^    perm_lex & operator = (const perm_lex&);  \/\/ forbidden$/;"	p	class:perm_lex	access:private	signature:(const perm_lex&)
operator =	src/comb/perm-lex2.h	/^    perm_lex2 & operator = (const perm_lex2&);  \/\/ forbidden$/;"	p	class:perm_lex2	access:private	signature:(const perm_lex2&)
operator =	src/comb/perm-mv0.h	/^    perm_mv0 & operator = (const perm_mv0&);  \/\/ forbidden$/;"	p	class:perm_mv0	access:private	signature:(const perm_mv0&)
operator =	src/comb/perm-pref.h	/^    perm_pref & operator = (const perm_pref&);  \/\/ forbidden$/;"	p	class:perm_pref	access:private	signature:(const perm_pref&)
operator =	src/comb/perm-rec.h	/^    perm_rec & operator = (const perm_rec&);  \/\/ forbidden$/;"	p	class:perm_rec	access:private	signature:(const perm_rec&)
operator =	src/comb/perm-restrpref.h	/^    perm_restrpref & operator = (const perm_restrpref&);  \/\/ forbidden$/;"	p	class:perm_restrpref	access:private	signature:(const perm_restrpref&)
operator =	src/comb/perm-rev.h	/^    perm_rev & operator = (const perm_rev&);  \/\/ forbidden$/;"	p	class:perm_rev	access:private	signature:(const perm_rev&)
operator =	src/comb/perm-rev2.h	/^    perm_rev2 & operator = (const perm_rev2&);  \/\/ forbidden$/;"	p	class:perm_rev2	access:private	signature:(const perm_rev2&)
operator =	src/comb/perm-rot.h	/^    perm_rot & operator = (const perm_rot&);  \/\/ forbidden$/;"	p	class:perm_rot	access:private	signature:(const perm_rot&)
operator =	src/comb/perm-st-gray.h	/^    perm_st_gray & operator = (const perm_st_gray&);  \/\/ forbidden$/;"	p	class:perm_st_gray	access:private	signature:(const perm_st_gray&)
operator =	src/comb/perm-st-pref.h	/^    perm_st_pref & operator = (const perm_st_pref&);  \/\/ forbidden$/;"	p	class:perm_st_pref	access:private	signature:(const perm_st_pref&)
operator =	src/comb/perm-st.h	/^    perm_st & operator = (const perm_st&);  \/\/ forbidden$/;"	p	class:perm_st	access:private	signature:(const perm_st&)
operator =	src/comb/perm-star-swaps.h	/^    perm_star_swaps & operator = (const perm_star_swaps&);  \/\/ forbidden$/;"	p	class:perm_star_swaps	access:private	signature:(const perm_star_swaps&)
operator =	src/comb/perm-star.h	/^    perm_star & operator = (const perm_star&);  \/\/ forbidden$/;"	p	class:perm_star	access:private	signature:(const perm_star&)
operator =	src/comb/perm-trotter-lg.h	/^    perm_trotter_lg & operator = (const perm_trotter_lg&);  \/\/ forbidden$/;"	p	class:perm_trotter_lg	access:private	signature:(const perm_trotter_lg&)
operator =	src/comb/perm-trotter.h	/^    perm_trotter & operator = (const perm_trotter&);  \/\/ forbidden$/;"	p	class:perm_trotter	access:private	signature:(const perm_trotter&)
operator =	src/comb/rgs-fincr.h	/^    rgs_fincr & operator = (const rgs_fincr&);  \/\/ forbidden$/;"	p	class:rgs_fincr	access:private	signature:(const rgs_fincr&)
operator =	src/comb/rgs-kincr.h	/^    rgs_kincr & operator = (const rgs_kincr&);  \/\/ forbidden$/;"	p	class:rgs_kincr	access:private	signature:(const rgs_kincr&)
operator =	src/comb/rgs-maxincr.h	/^    rgs_maxincr & operator = (const rgs_maxincr&);  \/\/ forbidden$/;"	p	class:rgs_maxincr	access:private	signature:(const rgs_maxincr&)
operator =	src/comb/ruler-func.h	/^    ruler_func & operator = (const ruler_func&);  \/\/ forbidden$/;"	p	class:ruler_func	access:private	signature:(const ruler_func&)
operator =	src/comb/schroeder-path-lex.h	/^    schroeder_path_lex & operator = (const schroeder_path_lex&);  \/\/ forbidden$/;"	p	class:schroeder_path_lex	access:private	signature:(const schroeder_path_lex&)
operator =	src/comb/schroeder-rgs-lex.h	/^    schroeder_rgs_lex & operator = (const schroeder_rgs_lex&);  \/\/ forbidden$/;"	p	class:schroeder_rgs_lex	access:private	signature:(const schroeder_rgs_lex&)
operator =	src/comb/score-sequence.h	/^    score_sequence & operator = (const score_sequence&);  \/\/ forbidden$/;"	p	class:score_sequence	access:private	signature:(const score_sequence&)
operator =	src/comb/setpart-ccf-rgs-lex.h	/^    setpart_ccf_rgs_lex & operator = (const setpart_ccf_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_ccf_rgs_lex	access:private	signature:(const setpart_ccf_rgs_lex&)
operator =	src/comb/setpart-ck-rgs.h	/^    setpart_ck_rgs & operator = (const setpart_ck_rgs&);  \/\/ forbidden$/;"	p	class:setpart_ck_rgs	access:private	signature:(const setpart_ck_rgs&)
operator =	src/comb/setpart-p-rgs-lex.h	/^    setpart_p_rgs_lex & operator = (const setpart_p_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_p_rgs_lex	access:private	signature:(const setpart_p_rgs_lex&)
operator =	src/comb/setpart-rgs-gray.h	/^    setpart_rgs_gray & operator = (const setpart_rgs_gray&);  \/\/ forbidden$/;"	p	class:setpart_rgs_gray	access:private	signature:(const setpart_rgs_gray&)
operator =	src/comb/setpart-rgs-lex.h	/^    setpart_rgs_lex & operator = (const setpart_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_lex	access:private	signature:(const setpart_rgs_lex&)
operator =	src/comb/setpart-rgs-subset-lex.h	/^    setpart_rgs_subset_lex & operator = (const setpart_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_subset_lex	access:private	signature:(const setpart_rgs_subset_lex&)
operator =	src/comb/setpart-s-zero-map-rgs.h	/^    setpart_s_zero_map_rgs & operator = (const setpart_s_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_s_zero_map_rgs	access:private	signature:(const setpart_s_zero_map_rgs&)
operator =	src/comb/setpart-zero-map-rgs.h	/^    setpart_zero_map_rgs & operator = (const setpart_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_zero_map_rgs	access:private	signature:(const setpart_zero_map_rgs&)
operator =	src/comb/setpart.h	/^    setpart & operator = (const setpart&);  \/\/ forbidden$/;"	p	class:setpart	access:private	signature:(const setpart&)
operator =	src/comb/skew-binary.h	/^    skew_binary & operator = (const skew_binary&);  \/\/ forbidden$/;"	p	class:skew_binary	access:private	signature:(const skew_binary&)
operator =	src/comb/smooth-rfact-rgs.h	/^    smooth_rfact_rgs & operator = (const smooth_rfact_rgs&);  \/\/ forbidden$/;"	p	class:smooth_rfact_rgs	access:private	signature:(const smooth_rfact_rgs&)
operator =	src/comb/string-subst.h	/^    string_subst & operator = (const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:protected	signature:(const string_subst&)
operator =	src/comb/subset-debruijn.h	/^    subset_debruijn & operator = (const subset_debruijn&);  \/\/ forbidden$/;"	p	class:subset_debruijn	access:private	signature:(const subset_debruijn&)
operator =	src/comb/subset-deltalex.h	/^    subset_deltalex & operator = (const subset_deltalex&);  \/\/ forbidden$/;"	p	class:subset_deltalex	access:private	signature:(const subset_deltalex&)
operator =	src/comb/subset-gray-delta.h	/^    subset_gray_delta & operator = (const subset_gray_delta&);  \/\/ forbidden$/;"	p	class:subset_gray_delta	access:private	signature:(const subset_gray_delta&)
operator =	src/comb/subset-gray.h	/^    subset_gray & operator = (const subset_gray&);  \/\/ forbidden$/;"	p	class:subset_gray	access:private	signature:(const subset_gray&)
operator =	src/comb/subset-lex.h	/^    subset_lex & operator = (const subset_lex&);  \/\/ forbidden$/;"	p	class:subset_lex	access:private	signature:(const subset_lex&)
operator =	src/comb/weakly-unimodal-rgs-lex.h	/^    weakly_unimodal_rgs_lex & operator = (const weakly_unimodal_rgs_lex&);  \/\/ forbidden$/;"	p	class:weakly_unimodal_rgs_lex	access:private	signature:(const weakly_unimodal_rgs_lex&)
operator =	src/comb/word-stats.h	/^    word_stats & operator = (const word_stats&);  \/\/ forbidden$/;"	p	class:word_stats	access:private	signature:(const word_stats&)
operator =	src/comb/young-tab-rgs-subset-lex.h	/^    young_tab_rgs_subset_lex & operator = (const young_tab_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:young_tab_rgs_subset_lex	access:private	signature:(const young_tab_rgs_subset_lex&)
operator =	src/comb/young-tab-rgs.h	/^    young_tab_rgs & operator = (const young_tab_rgs&);  \/\/ forbidden$/;"	p	class:young_tab_rgs	access:private	signature:(const young_tab_rgs&)
operator =	src/ds/array2d.h	/^    array2d & operator = (const array2d&);  \/\/ forbidden$/;"	p	class:array2d	access:private	signature:(const array2d&)
operator =	src/ds/array3d.h	/^    array3d & operator = (const array3d&);  \/\/ forbidden$/;"	p	class:array3d	access:private	signature:(const array3d&)
operator =	src/ds/attic/coroutine.h	/^    coroutine & operator = (const coroutine &);  \/\/ forbidden$/;"	p	class:coroutine	access:private	signature:(const coroutine &)
operator =	src/ds/attic/orderedrarray.h	/^    ordered_rarray & operator = (const ordered_rarray &);  \/\/ forbidden$/;"	p	class:ordered_rarray	access:private	signature:(const ordered_rarray &)
operator =	src/ds/attic/rarray.h	/^    rarray & operator = (const rarray &);  \/\/ forbidden$/;"	p	class:rarray	access:private	signature:(const rarray &)
operator =	src/ds/attic/rset.h	/^    rset & operator = (const rset &);  \/\/ forbidden$/;"	p	class:rset	access:private	signature:(const rset &)
operator =	src/ds/bitarray.h	/^    bitarray & operator = (const bitarray&);  \/\/ forbidden$/;"	p	class:bitarray	access:private	signature:(const bitarray&)
operator =	src/ds/deque.h	/^    deque & operator = (const deque&);  \/\/ forbidden$/;"	p	class:deque	access:private	signature:(const deque&)
operator =	src/ds/left-right-array.h	/^    left_right_array & operator = (const left_right_array&);  \/\/ forbidden$/;"	p	class:left_right_array	access:private	signature:(const left_right_array&)
operator =	src/ds/priorityqueue.h	/^    priority_queue & operator = (const priority_queue&);  \/\/ forbidden$/;"	p	class:priority_queue	access:private	signature:(const priority_queue&)
operator =	src/ds/queue.h	/^    queue & operator = (const queue&);  \/\/ forbidden$/;"	p	class:queue	access:private	signature:(const queue&)
operator =	src/ds/ringbuffer.h	/^    ringbuffer & operator = (const ringbuffer&);  \/\/ forbidden$/;"	p	class:ringbuffer	access:private	signature:(const ringbuffer&)
operator =	src/ds/stack.h	/^    stack& operator = (const stack&);  \/\/ forbidden$/;"	p	class:stack	access:private	signature:(const stack&)
operator =	src/graph/digraph-paths.h	/^    digraph_paths & operator = (const digraph_paths&);  \/\/ forbidden$/;"	p	class:digraph_paths	access:private	signature:(const digraph_paths&)
operator =	src/graph/digraph.h	/^    digraph & operator = (const digraph&);  \/\/ forbidden$/;"	p	class:digraph	access:private	signature:(const digraph&)
operator =	src/graph/lyndon-gray.h	/^    lyndon_gray & operator = (const lyndon_gray&);  \/\/ forbidden$/;"	p	class:lyndon_gray	access:private	signature:(const lyndon_gray&)
operator =	src/graph/mk-special-digraphs.h	/^    lyngray_dat & operator = (const lyngray_dat&);  \/\/ forbidden$/;"	p	class:lyngray_dat	access:private	signature:(const lyngray_dat&)
operator =	src/matrix/matrix.h	/^    matrix<Type> & operator =(const matrix<Type> &m)$/;"	f	class:matrix	access:public	signature:(const matrix<Type> &m)
operator =	src/matrix/vector.h	/^    vector<Type> & operator =(const vector<Type> &m)$/;"	f	class:vector	access:public	signature:(const vector<Type> &m)
operator =	src/mod/divisors.h	/^    divisors & operator = (const divisors&);  \/\/ forbidden$/;"	p	class:divisors	access:private	signature:(const divisors&)
operator =	src/mod/factor.h	/^    const factorization & operator = (const factorization &);  \/\/ forbidden$/;"	p	class:factorization	access:private	signature:(const factorization &)
operator =	src/mod/mod.h	/^    inline mod & operator = (const mod &h)  { x_ = h.x_;  return *this; }$/;"	f	class:mod	access:public	signature:(const mod &h)
operator =	src/mod/mod.h	/^    inline mod & operator = (uint i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(uint i)
operator =	src/mod/mod.h	/^    inline mod & operator = (ulong i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(ulong i)
operator =	src/mod/mod.h	/^    inline mod & operator = (umod_t i)  { (*this) = mod(i);  return *this; }$/;"	f	class:mod	access:public	signature:(umod_t i)
operator =	src/wavelet/waveletfilter.h	/^    const wavelet_filter & operator =(const wavelet_filter &);$/;"	p	class:wavelet_filter	access:private	signature:(const wavelet_filter &)
operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (const GF2n &f, ulong v)    { return  f.v_ == v; }$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f, ulong v)
operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (const GF2n &f1, const GF2n &f2)$/;"	f	class:GF2n	access:friend	signature:(const GF2n &f1, const GF2n &f2)
operator ==	src/bpol/gf2n.h	/^    friend inline bool operator == (ulong v, const GF2n &f)    { return  f.v_ == v; }$/;"	f	class:GF2n	access:friend	signature:(ulong v, const GF2n &f)
operator ==	src/ds/point2d.h	/^    bool operator == (const point2d & P) const { return ( x_ == P.x_ && y_ == P.y_); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
operator ==	src/ds/point3d.h	/^    bool operator == (const point3d & P) const { return ( x_ == P.x_ && y_ == P.y_ && z_ == P.z_); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
operator ==	src/ds/vector2d.h	/^    bool operator == (const vector2d & V) const { return ( x_ == V.x_ && y_ == V.y_); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
operator ==	src/ds/vector3d.h	/^    bool operator == (const vector3d & V) const { return ( x_ == V.x_ && y_ == V.y_ && z_ == V.z_); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
operator ==	src/mod/mod.h	/^    friend inline bool operator == (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator >	src/mod/mod.h	/^    friend inline bool operator > (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator >=	src/mod/mod.h	/^    friend inline bool operator >= (const mod &h1, const mod &h2)$/;"	f	class:mod	access:friend	signature:(const mod &h1, const mod &h2)
operator >>	src/mod/mod.cc	/^std::istream & operator >> (std::istream & is, mod & h)$/;"	f	signature:(std::istream & is, mod & h)
operator >>	src/mod/mod.h	/^std::istream&  operator >> (std::istream& is, mod& h);$/;"	p	signature:(std::istream& is, mod& h)
operator []	src/aux1/attic/array.h	/^    Type *operator [] (ulong x) const  { return f_[x]; }$/;"	f	class:array	access:public	signature:(ulong x) const
operator []	src/ds/array2d.h	/^    Type * operator [] (ulong r)$/;"	f	class:array2d	access:public	signature:(ulong r)
operator []	src/ds/array2d.h	/^    const Type * operator [] (ulong r)  const$/;"	f	class:array2d	access:public	signature:(ulong r) const
operator []	src/ds/array3d.h	/^    array2d<Type> & operator [] (ulong x)$/;"	f	class:array3d	access:public	signature:(ulong x)
operator []	src/ds/array3d.h	/^    const array3d<Type> & operator [] (ulong x)  const$/;"	f	class:array3d	access:public	signature:(ulong x) const
operator []	src/ds/centered-array2d.h	/^    Type & operator [] (const Pnt & P)$/;"	f	class:centered_array2d	access:public	signature:(const Pnt & P)
operator []	src/ds/centered-array2d.h	/^    Type & operator [] (const Vec & V)$/;"	f	class:centered_array2d	access:public	signature:(const Vec & V)
operator []	src/ds/centered-array2d.h	/^    const Type & operator [] (const Pnt & P)  const$/;"	f	class:centered_array2d	access:public	signature:(const Pnt & P) const
operator []	src/ds/centered-array2d.h	/^    const Type & operator [] (const Vec & V)  const$/;"	f	class:centered_array2d	access:public	signature:(const Vec & V) const
operator []	src/ds/centered-array3d.h	/^    Type & operator [] (const Pnt & P)$/;"	f	class:centered_array3d	access:public	signature:(const Pnt & P)
operator []	src/ds/centered-array3d.h	/^    Type & operator [] (const Vec & V)$/;"	f	class:centered_array3d	access:public	signature:(const Vec & V)
operator []	src/ds/centered-array3d.h	/^    const Type & operator [] (const Pnt & P)  const$/;"	f	class:centered_array3d	access:public	signature:(const Pnt & P) const
operator []	src/ds/centered-array3d.h	/^    const Type & operator [] (const Vec & V)  const$/;"	f	class:centered_array3d	access:public	signature:(const Vec & V) const
or	doc/wfl-hilbert-doc.txt	/^the node  1  or  [1,0] , and new coordinate equals  2[0,1] + [1,0] = [1,2] .$/;"	v
or_auto_convolution	doc/walsh-doc.txt	/^inline void or_auto_convolution(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
or_auto_convolution	src/walsh/or-convolution.h	/^inline void or_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
or_convolution	doc/walsh-doc.txt	/^inline void or_convolution(Type * restrict f, Type * restrict g, ulong ldn);$/;"	p	file:	signature:(Type * restrict f, Type * restrict g, ulong ldn)
or_convolution	src/walsh/or-convolution.h	/^inline void or_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
order	src/bpol/gf2n.h	/^    ulong order() const$/;"	f	class:GF2n	access:public	signature:() const
order	src/mod/mod.h	/^    umod_t order()  const$/;"	f	class:mod	access:public	signature:() const
order_mod	doc/mod-doc.txt	/^umod_t order_mod(umod_t x, umod_t m,$/;"	p	file:	signature:(umod_t x, umod_t m, const factorization &phifact)
order_mod	src/mod/numtheory.h	/^umod_t order_mod(umod_t x, umod_t m, const factorization &phifact);$/;"	p	signature:(umod_t x, umod_t m, const factorization &phifact)
order_mod	src/mod/order.cc	/^order_mod(umod_t x, umod_t m,$/;"	f	signature:(umod_t x, umod_t m, const factorization &phifact)
ordered_rarray	src/ds/attic/orderedrarray.h	/^    explicit ordered_rarray(ulong n, ulong growq=0)$/;"	f	class:ordered_rarray	access:public	signature:(ulong n, ulong growq=0)
ordered_rarray	src/ds/attic/orderedrarray.h	/^class ordered_rarray : private rarray<Type>$/;"	c	inherits:rarray
ordered_rarray::insert	src/ds/attic/orderedrarray.h	/^    ulong insert(const Type & v)$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v)
ordered_rarray::insert_uniq	src/ds/attic/orderedrarray.h	/^    ulong insert_uniq(const Type & v)$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v)
ordered_rarray::operator =	src/ds/attic/orderedrarray.h	/^    ordered_rarray & operator = (const ordered_rarray &);  \/\/ forbidden$/;"	p	class:ordered_rarray	access:private	signature:(const ordered_rarray &)
ordered_rarray::ordered_rarray	src/ds/attic/orderedrarray.h	/^    explicit ordered_rarray(ulong n, ulong growq=0)$/;"	f	class:ordered_rarray	access:public	signature:(ulong n, ulong growq=0)
ordered_rarray::search	src/ds/attic/orderedrarray.h	/^    ulong search(const Type & v)  const$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v) const
ordered_rarray::search_geq	src/ds/attic/orderedrarray.h	/^    ulong search_geq(const Type & v)  const$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v) const
ordered_rarray::~ordered_rarray	src/ds/attic/orderedrarray.h	/^    ~ordered_rarray()  { ; }$/;"	f	class:ordered_rarray	access:public	signature:()
ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    explicit ordered_tree_branches(ulong n)$/;"	f	class:ordered_tree_branches	access:public	signature:(ulong n)
ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    ordered_tree_branches(const ordered_tree_branches&);  \/\/ forbidden$/;"	p	class:ordered_tree_branches	access:private	signature:(const ordered_tree_branches&)
ordered_tree_branches	src/comb/ordered-tree-branches.h	/^class ordered_tree_branches$/;"	c
ordered_tree_branches::OK	src/comb/ordered-tree-branches.h	/^    bool OK()  const$/;"	f	class:ordered_tree_branches	access:public	signature:() const
ordered_tree_branches::a_	src/comb/ordered-tree-branches.h	/^    ulong *a_;  \/\/ branch lengths (limbs): a composition a[1] + a[2] + ... + a[m] = n$/;"	m	class:ordered_tree_branches	access:public
ordered_tree_branches::b_	src/comb/ordered-tree-branches.h	/^    ulong *b_;  \/\/ branch heights (absolute, above root)$/;"	m	class:ordered_tree_branches	access:public
ordered_tree_branches::first	src/comb/ordered-tree-branches.h	/^    void first()$/;"	f	class:ordered_tree_branches	access:public	signature:()
ordered_tree_branches::height_data	src/comb/ordered-tree-branches.h	/^    const ulong * height_data()  const  { return  b_ + 1; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
ordered_tree_branches::length_data	src/comb/ordered-tree-branches.h	/^    const ulong * length_data()  const  { return  a_ + 1; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
ordered_tree_branches::m_	src/comb/ordered-tree-branches.h	/^    ulong m_;   \/\/ number of branches (composition has m parts)$/;"	m	class:ordered_tree_branches	access:public
ordered_tree_branches::n_	src/comb/ordered-tree-branches.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:ordered_tree_branches	access:public
ordered_tree_branches::next	src/comb/ordered-tree-branches.h	/^    ulong next()$/;"	f	class:ordered_tree_branches	access:public	signature:()
ordered_tree_branches::num_branches	src/comb/ordered-tree-branches.h	/^    ulong num_branches()  const  {  return m_; }$/;"	f	class:ordered_tree_branches	access:public	signature:() const
ordered_tree_branches::operator =	src/comb/ordered-tree-branches.h	/^    ordered_tree_branches & operator = (const ordered_tree_branches&);  \/\/ forbidden$/;"	p	class:ordered_tree_branches	access:private	signature:(const ordered_tree_branches&)
ordered_tree_branches::ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    explicit ordered_tree_branches(ulong n)$/;"	f	class:ordered_tree_branches	access:public	signature:(ulong n)
ordered_tree_branches::ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    ordered_tree_branches(const ordered_tree_branches&);  \/\/ forbidden$/;"	p	class:ordered_tree_branches	access:private	signature:(const ordered_tree_branches&)
ordered_tree_branches::print	src/comb/ordered-tree-branches.h	/^    void print(const char *bla)  const$/;"	f	class:ordered_tree_branches	access:public	signature:(const char *bla) const
ordered_tree_branches::print_aa	src/comb/ordered-tree-branches.cc	/^ordered_tree_branches::print_aa()  const$/;"	f	class:ordered_tree_branches	signature:() const
ordered_tree_branches::print_aa	src/comb/ordered-tree-branches.h	/^    void print_aa()  const;  \/\/ ASCII art$/;"	p	class:ordered_tree_branches	access:public	signature:() const
ordered_tree_branches::print_level_seq	src/comb/ordered-tree-branches.cc	/^ordered_tree_branches::print_level_seq(const char *bla)  const$/;"	f	class:ordered_tree_branches	signature:(const char *bla) const
ordered_tree_branches::print_level_seq	src/comb/ordered-tree-branches.h	/^    void print_level_seq(const char *bla)  const;$/;"	p	class:ordered_tree_branches	access:public	signature:(const char *bla) const
ordered_tree_branches::~ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    ~ordered_tree_branches()$/;"	f	class:ordered_tree_branches	access:public	signature:()
ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    explicit ordered_tree_branching_seq(ulong n)$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(ulong n)
ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    ordered_tree_branching_seq(const ordered_tree_branching_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_branching_seq	access:private	signature:(const ordered_tree_branching_seq&)
ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^class ordered_tree_branching_seq$/;"	c
ordered_tree_branching_seq::OK	src/comb/ordered-tree-branching-seq.h	/^    bool OK()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
ordered_tree_branching_seq::b_	src/comb/ordered-tree-branching-seq.h	/^    ulong *b_;  \/\/ branching sequence$/;"	m	class:ordered_tree_branching_seq	access:public
ordered_tree_branching_seq::branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(ulong j) const
ordered_tree_branching_seq::data	src/comb/ordered-tree-branching-seq.h	/^    const ulong *data()  const  { return b_; }$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
ordered_tree_branching_seq::e_	src/comb/ordered-tree-branching-seq.h	/^    ulong e_;  \/\/ index last nonzero value; set to 0 for n==0$/;"	m	class:ordered_tree_branching_seq	access:public
ordered_tree_branching_seq::first	src/comb/ordered-tree-branching-seq.h	/^    void first()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
ordered_tree_branching_seq::max_branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
ordered_tree_branching_seq::min_branching_number	src/comb/ordered-tree-branching-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
ordered_tree_branching_seq::n_	src/comb/ordered-tree-branching-seq.h	/^    ulong n_;  \/\/ number of non-root nodes$/;"	m	class:ordered_tree_branching_seq	access:public
ordered_tree_branching_seq::next	src/comb/ordered-tree-branching-seq.h	/^    ulong next()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
ordered_tree_branching_seq::operator =	src/comb/ordered-tree-branching-seq.h	/^    ordered_tree_branching_seq & operator = (const ordered_tree_branching_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_branching_seq	access:private	signature:(const ordered_tree_branching_seq&)
ordered_tree_branching_seq::ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    explicit ordered_tree_branching_seq(ulong n)$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(ulong n)
ordered_tree_branching_seq::ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    ordered_tree_branching_seq(const ordered_tree_branching_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_branching_seq	access:private	signature:(const ordered_tree_branching_seq&)
ordered_tree_branching_seq::print	src/comb/ordered-tree-branching-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(const char *bla, bool dfz=false) const
ordered_tree_branching_seq::print_level_seq	src/comb/ordered-tree-branching-seq.cc	/^ordered_tree_branching_seq::print_level_seq(const char *bla, bool dfz)  const$/;"	f	class:ordered_tree_branching_seq	signature:(const char *bla, bool dfz) const
ordered_tree_branching_seq::print_level_seq	src/comb/ordered-tree-branching-seq.h	/^    void print_level_seq(const char *bla, bool dfz=false)  const;$/;"	p	class:ordered_tree_branching_seq	access:public	signature:(const char *bla, bool dfz=false) const
ordered_tree_branching_seq::size	src/comb/ordered-tree-branching-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
ordered_tree_branching_seq::~ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    ~ordered_tree_branching_seq()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    explicit ordered_tree_lev_seq(ulong n)$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong n)
ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    ordered_tree_lev_seq(const ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_lev_seq	access:private	signature:(const ordered_tree_lev_seq&)
ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^class ordered_tree_lev_seq$/;"	c
ordered_tree_lev_seq::OK	src/comb/ordered-tree-lev-seq.h	/^    bool OK()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::a_	src/comb/ordered-tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:ordered_tree_lev_seq	access:private
ordered_tree_lev_seq::aux	src/comb/ordered-tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:ordered_tree_lev_seq	access:private
ordered_tree_lev_seq::branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
ordered_tree_lev_seq::data	src/comb/ordered-tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::first	src/comb/ordered-tree-lev-seq.h	/^    void first()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
ordered_tree_lev_seq::height	src/comb/ordered-tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::is_balanced	src/comb/ordered-tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::is_branch	src/comb/ordered-tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
ordered_tree_lev_seq::is_leaf	src/comb/ordered-tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
ordered_tree_lev_seq::lev	src/comb/ordered-tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong k) const
ordered_tree_lev_seq::limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
ordered_tree_lev_seq::max_branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::max_limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::min_branching_number	src/comb/ordered-tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::min_limb_length	src/comb/ordered-tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::n_	src/comb/ordered-tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:ordered_tree_lev_seq	access:private
ordered_tree_lev_seq::next	src/comb/ordered-tree-lev-seq.h	/^    ulong next()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
ordered_tree_lev_seq::num_leaves	src/comb/ordered-tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::operator =	src/comb/ordered-tree-lev-seq.h	/^    ordered_tree_lev_seq & operator = (const ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_lev_seq	access:private	signature:(const ordered_tree_lev_seq&)
ordered_tree_lev_seq::ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    explicit ordered_tree_lev_seq(ulong n)$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong n)
ordered_tree_lev_seq::ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    ordered_tree_lev_seq(const ordered_tree_lev_seq&);  \/\/ forbidden$/;"	p	class:ordered_tree_lev_seq	access:private	signature:(const ordered_tree_lev_seq&)
ordered_tree_lev_seq::print	src/comb/ordered-tree-lev-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=false) const
ordered_tree_lev_seq::print_aa	src/comb/ordered-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla) const
ordered_tree_lev_seq::print_branching_numbers	src/comb/ordered-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
ordered_tree_lev_seq::print_paren_word	src/comb/ordered-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
ordered_tree_lev_seq::size	src/comb/ordered-tree-lev-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
ordered_tree_lev_seq::valency	src/comb/ordered-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
ordered_tree_lev_seq::~ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    ~ordered_tree_lev_seq()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
orth_q	src/matrix/attic/reorth.h	/^double orth_q(const MAT &m)$/;"	f	signature:(const MAT &m)
out	demo/seq/A003040-demo.cc	/^static void out(Type x)$/;"	f	file:	signature:(Type x)
out	demo/seq/A218293-demo.cc	/^static void out(Type x)$/;"	f	file:	signature:(Type x)
outer_left	doc/ds-doc.txt	/^inline vector3d<Type> outer_left(const vector3d<Type> &V, const vector3d<Type> &W);$/;"	p	file:	signature:(const vector3d<Type> &V, const vector3d<Type> &W)
outer_left	src/ds/vector3d.h	/^inline vector3d<Type> outer_left(const vector3d<Type> &V, const vector3d<Type> &W)$/;"	f	signature:(const vector3d<Type> &V, const vector3d<Type> &W)
outer_right	doc/ds-doc.txt	/^inline vector3d<Type> outer_right(const vector3d<Type> &V, const vector3d<Type> &W);$/;"	p	file:	signature:(const vector3d<Type> &V, const vector3d<Type> &W)
outer_right	src/ds/vector3d.h	/^inline vector3d<Type> outer_right(const vector3d<Type> &V, const vector3d<Type> &W)$/;"	f	signature:(const vector3d<Type> &V, const vector3d<Type> &W)
outer_z_left	doc/ds-doc.txt	/^inline Type outer_z_left(const vector2d<Type> &V, const vector2d<Type> &W);$/;"	p	file:	signature:(const vector2d<Type> &V, const vector2d<Type> &W)
outer_z_left	src/ds/vector2d.h	/^inline Type outer_z_left(const vector2d<Type> &V, const vector2d<Type> &W)$/;"	f	signature:(const vector2d<Type> &V, const vector2d<Type> &W)
outer_z_right	doc/ds-doc.txt	/^inline Type outer_z_right(const vector2d<Type> &V, const vector2d<Type> &W);$/;"	p	file:	signature:(const vector2d<Type> &V, const vector2d<Type> &W)
outer_z_right	src/ds/vector2d.h	/^inline Type outer_z_right(const vector2d<Type> &V, const vector2d<Type> &W)$/;"	f	signature:(const vector2d<Type> &V, const vector2d<Type> &W)
p	demo/comb/combination-rec-demo.cc	/^ulong *p;  \/\/ composition$/;"	v
p	demo/comb/composition-gray-rec-demo.cc	/^ulong *p;  \/\/ composition data (Kp elements)$/;"	v
p	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
p	src/bpol/gf2n.o	/^/;"	v
p	src/mod/mersenne-exponents.o	/^ELF/;"	v
p0_	src/comb/composition-colex2.h	/^    ulong p0_;     \/\/ position of the first nonzero element$/;"	m	class:composition_colex2	access:public
p1_func	demo/perm/perm-decomp-demo.cc	/^void p1_func(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
p2_func	demo/perm/perm-decomp-demo.cc	/^void p2_func(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
p2d1	src/comb/wfl-hilbert.h	/^    ulong p2d1; \/\/ 2^d - 1$/;"	m	class:wfl_hilbert	access:public
p2n	src/bpol/gf2n.cc	/^GF2n::p2n(ulong f)$/;"	f	class:GF2n	signature:(ulong f)
p2n	src/bpol/gf2n.h	/^    static ulong p2n(ulong f);$/;"	p	class:GF2n	access:public	signature:(ulong f)
p2n_tab	src/bpol/gf2n.cc	/^ulong GF2n::p2n_tab[BITS_PER_LONG];  \/\/ polynomial to normal$/;"	m	class:GF2n	file:
p2n_tab	src/bpol/gf2n.h	/^    static ulong p2n_tab[BITS_PER_LONG];  \/\/ polynomial to normal$/;"	m	class:GF2n	access:public
p_	src/bpol/all-irredpoly.h	/^    ulong p_;$/;"	m	class:all_irredpoly	access:public
p_	src/bpol/mersenne-coprime.h	/^    umod_t p_[15];  \/\/ prime factors (OK for e<=128)$/;"	m	class:mersenne_coprime	access:public
p_	src/comb/ascent-alt-rgs.h	/^    ulong *p_;  \/\/ (prefix) stats: p[d] = number of digits d$/;"	m	class:ascent_alt_rgs	access:public
p_	src/comb/attic/allsetpartitions.h	/^    signed char *p_;  \/\/ Table of all set partitions$/;"	m	class:all_set_partitions	access:public
p_	src/comb/attic/composition-chase.h	/^    ulong *p_; \/\/ data: composition$/;"	m	class:composition_chase	access:public
p_	src/comb/attic/perm-minchange.h	/^    ulong *p_;  \/\/ p[n] contains a permutation of {0, 1, ..., n-1}$/;"	m	class:perm_minchange	access:public
p_	src/comb/attic/perm-trotter.h	/^    ulong *p_;  \/\/ auxiliary: mixed radix counting$/;"	m	class:perm_trotter	access:public
p_	src/comb/dyck-gray2.h	/^    bool *p_;    \/\/ parity (1-based)$/;"	m	class:dyck_gray2	access:public
p_	src/comb/kperm-lex.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:kperm_lex	access:public
p_	src/comb/perm-gray-lipski.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_gray_lipski	access:public
p_	src/comb/perm-gray-wells.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_gray_wells	access:public
p_	src/comb/perm-heap.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_heap	access:public
p_	src/comb/perm-heap2.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_heap2	access:public
p_	src/comb/perm-involution.h	/^    ulong *p_;  \/\/ self-inverse permutation in 0, 1, ..., n-1$/;"	m	class:perm_involution	access:public
p_	src/comb/perm-involution.h	/^    ulong p_[64];$/;"	m	class:perm_involution	access:public
p_	src/comb/perm-ives.h	/^    ulong *p_;   \/\/ permutation$/;"	m	class:perm_ives	access:public
p_	src/comb/perm-lex-inv.h	/^    ulong p_;   \/\/ position of leftmost change with last update$/;"	m	class:perm_lex_inv	access:public
p_	src/comb/perm-lex.h	/^    ulong *p_;  \/\/ permutation in 0, 1, ..., n-1, sentinel at [-1]$/;"	m	class:perm_lex	access:public
p_	src/comb/perm-rev.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_rev	access:public
p_	src/comb/perm-rev2.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_rev2	access:public
p_	src/comb/perm-st-pref.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_st_pref	access:public
p_	src/comb/perm-st.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_st	access:public
p_	src/comb/setpart-p-rgs-lex.h	/^    ulong p_;    \/\/ Exactly p subsets$/;"	m	class:setpart_p_rgs_lex	access:public
p_	src/comb/setpart.h	/^    int *p_;    \/\/ p[] contains set partitions of length 1,2,3,...,n$/;"	m	class:setpart	access:public
p_	src/ds/stack.h	/^    ulong  p_;  \/\/ stack pointer (position of next write), top entry @ p-1$/;"	m	class:stack	access:public
p_	src/graph/lyndon-gray.h	/^    ulong p_;  \/\/ position$/;"	m	class:lyndon_gray	access:public
p_	src/mod/divisors.h	/^    umod_t *p_;   \/\/ primes$/;"	m	class:divisors	access:public
pany_	src/graph/digraph-paths.h	/^    bool pany_;    \/\/ whether to print anything (set automatically)$/;"	m	class:digraph_paths	access:public
par	src/comb/paren-gray.h	/^    char *par;  \/\/ parenthesis string in p[1,...,2*n]$/;"	m	class:paren_gray	access:private
par_to_dir_even	src/comb/composition-nz-gray.h	/^    ulong par_to_dir_even(ulong x)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
par_to_dir_even	src/comb/composition-nz-gray2.h	/^    ulong par_to_dir_even(ulong x)  const$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
par_to_dir_odd	src/comb/composition-nz-gray.h	/^    ulong par_to_dir_odd(ulong x)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x) const
par_to_dir_odd	src/comb/composition-nz-gray2.h	/^    ulong par_to_dir_odd(ulong x)  const$/;"	f	class:composition_nz_gray2	access:protected	signature:(ulong x) const
paren	src/comb/paren.h	/^    explicit paren(ulong k)$/;"	f	class:paren	access:public	signature:(ulong k)
paren	src/comb/paren.h	/^    paren(const paren&);  \/\/ forbidden$/;"	p	class:paren	access:private	signature:(const paren&)
paren	src/comb/paren.h	/^class paren$/;"	c
paren	src/ds/attic/coroutine-paren-demo.cc	/^    paren(int nn);$/;"	p	class:paren	file:	access:public	signature:(int nn)
paren	src/ds/attic/coroutine-paren-demo.cc	/^class paren$/;"	c	file:
paren	src/ds/attic/coroutine-paren-demo.cc	/^paren::paren(int nn)$/;"	f	class:paren	signature:(int nn)
paren::OK	src/comb/paren.h	/^    bool OK()  const$/;"	f	class:paren	access:public	signature:() const
paren::__anon2::i	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
paren::__anon2::k	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
paren::__anon2::s	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
paren::__anon2::t	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
paren::cr_	src/ds/attic/coroutine-paren-demo.cc	/^    coroutine<vars> *cr_;$/;"	m	class:paren	file:	access:protected
paren::current	src/ds/attic/coroutine-paren-demo.cc	/^    int current()  const  { return idx; }$/;"	f	class:paren	access:public	signature:() const
paren::data	src/comb/paren.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:paren	access:public	signature:() const
paren::data	src/ds/attic/coroutine-paren-demo.cc	/^    const int *data()  const  { return x; }$/;"	f	class:paren	access:public	signature:() const
paren::first	src/comb/paren.h	/^    void first()  { for (ulong i=0; i<k_; ++i)  x_[i] = i; }$/;"	f	class:paren	access:public	signature:()
paren::idx	src/ds/attic/coroutine-paren-demo.cc	/^    int idx;$/;"	m	class:paren	file:	access:protected
paren::k_	src/comb/paren.h	/^    ulong k_;    \/\/ Number of paren pairs$/;"	m	class:paren	access:public
paren::last	src/comb/paren.h	/^    void last()  { for (ulong i=0; i<k_; ++i)  x_[i] = 2*i; }$/;"	f	class:paren	access:public	signature:()
paren::n	src/ds/attic/coroutine-paren-demo.cc	/^    int n;$/;"	m	class:paren	file:	access:protected
paren::n_	src/comb/paren.h	/^    ulong n_;    \/\/ ==2*k$/;"	m	class:paren	access:public
paren::next	src/comb/paren.h	/^    ulong next()  \/\/ return zero if current paren is the last$/;"	f	class:paren	access:public	signature:()
paren::next	src/ds/attic/coroutine-paren-demo.cc	/^    int next()$/;"	f	class:paren	access:public	signature:()
paren::next_recursion	src/ds/attic/coroutine-paren-demo.cc	/^    int next_recursion();$/;"	p	class:paren	file:	access:protected	signature:()
paren::next_recursion	src/ds/attic/coroutine-paren-demo.cc	/^paren::next_recursion()$/;"	f	class:paren	signature:()
paren::operator =	src/comb/paren.h	/^    paren & operator = (const paren&);  \/\/ forbidden$/;"	p	class:paren	access:private	signature:(const paren&)
paren::paren	src/comb/paren.h	/^    explicit paren(ulong k)$/;"	f	class:paren	access:public	signature:(ulong k)
paren::paren	src/comb/paren.h	/^    paren(const paren&);  \/\/ forbidden$/;"	p	class:paren	access:private	signature:(const paren&)
paren::paren	src/ds/attic/coroutine-paren-demo.cc	/^    paren(int nn);$/;"	p	class:paren	file:	access:public	signature:(int nn)
paren::paren	src/ds/attic/coroutine-paren-demo.cc	/^paren::paren(int nn)$/;"	f	class:paren	signature:(int nn)
paren::prev	src/comb/paren.h	/^    ulong prev()  \/\/ return zero if current paren is the first$/;"	f	class:paren	access:public	signature:()
paren::q	src/ds/attic/coroutine-paren-demo.cc	/^    int q;$/;"	m	class:paren	file:	access:protected
paren::str	src/ds/attic/coroutine-paren-demo.cc	/^    char *str;$/;"	m	class:paren	file:	access:protected
paren::str_	src/comb/paren.h	/^    char *str_;  \/\/ String representation,  e.g. "((())())()"$/;"	m	class:paren	access:public
paren::string	src/comb/paren.h	/^    const char * string()  \/\/ generate on demand$/;"	f	class:paren	access:public	signature:()
paren::string	src/ds/attic/coroutine-paren-demo.cc	/^    const char *string()  const  { return str; }$/;"	f	class:paren	access:public	signature:() const
paren::vars	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	t	class:paren	typeref:struct:paren::__anon2	file:	access:protected
paren::x	src/ds/attic/coroutine-paren-demo.cc	/^    int *x;$/;"	m	class:paren	file:	access:protected
paren::x_	src/comb/paren.h	/^    ulong *x_;   \/\/ Positions of opening parenthesis$/;"	m	class:paren	access:public
paren::~paren	src/comb/paren.h	/^    ~paren()$/;"	f	class:paren	access:public	signature:()
paren::~paren	src/ds/attic/coroutine-paren-demo.cc	/^    ~paren();$/;"	p	class:paren	file:	access:public	signature:()
paren::~paren	src/ds/attic/coroutine-paren-demo.cc	/^paren::~paren()$/;"	f	class:paren	signature:()
paren_bit_string_to_rgs	src/comb/paren-string-to-rgs.cc	/^paren_bit_string_to_rgs(const char *str, ulong *rgs)$/;"	f	signature:(const char *str, ulong *rgs)
paren_bit_string_to_rgs	src/comb/paren-string-to-rgs.h	/^bool paren_bit_string_to_rgs(const char *str, ulong *rgs);$/;"	p	signature:(const char *str, ulong *rgs)
paren_gray	src/comb/paren-gray.h	/^    explicit paren_gray(ulong nn)$/;"	f	class:paren_gray	access:public	signature:(ulong nn)
paren_gray	src/comb/paren-gray.h	/^    paren_gray(const paren_gray&);  \/\/ forbidden$/;"	p	class:paren_gray	access:private	signature:(const paren_gray&)
paren_gray	src/comb/paren-gray.h	/^class paren_gray$/;"	c
paren_gray::d	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
paren_gray::e	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
paren_gray::first	src/comb/paren-gray.h	/^    void first()$/;"	f	class:paren_gray	access:public	signature:()
paren_gray::j	src/comb/paren-gray.h	/^    ulong n, j;$/;"	m	class:paren_gray	access:private
paren_gray::jj	src/comb/paren-gray.h	/^    bool jj;  \/\/ whether current string is the last$/;"	m	class:paren_gray	access:private
paren_gray::l	src/comb/paren-gray.h	/^    ulong *l, *d, *e;$/;"	m	class:paren_gray	access:private
paren_gray::n	src/comb/paren-gray.h	/^    ulong n, j;$/;"	m	class:paren_gray	access:private
paren_gray::next	src/comb/paren-gray.h	/^    bool next()$/;"	f	class:paren_gray	access:public	signature:()
paren_gray::operator =	src/comb/paren-gray.h	/^    paren_gray & operator = (const paren_gray&);  \/\/ forbidden$/;"	p	class:paren_gray	access:private	signature:(const paren_gray&)
paren_gray::par	src/comb/paren-gray.h	/^    char *par;  \/\/ parenthesis string in p[1,...,2*n]$/;"	m	class:paren_gray	access:private
paren_gray::paren_gray	src/comb/paren-gray.h	/^    explicit paren_gray(ulong nn)$/;"	f	class:paren_gray	access:public	signature:(ulong nn)
paren_gray::paren_gray	src/comb/paren-gray.h	/^    paren_gray(const paren_gray&);  \/\/ forbidden$/;"	p	class:paren_gray	access:private	signature:(const paren_gray&)
paren_gray::paren_string	src/comb/paren-gray.h	/^    const char * paren_string() const  { return par+1; }$/;"	f	class:paren_gray	access:public	signature:() const
paren_gray::~paren_gray	src/comb/paren-gray.h	/^    ~paren_gray()$/;"	f	class:paren_gray	access:public	signature:()
paren_lex	src/comb/paren-lex.h	/^    explicit paren_lex(ulong k)$/;"	f	class:paren_lex	access:public	signature:(ulong k)
paren_lex	src/comb/paren-lex.h	/^    paren_lex(const paren_lex&);  \/\/ forbidden$/;"	p	class:paren_lex	access:private	signature:(const paren_lex&)
paren_lex	src/comb/paren-lex.h	/^class paren_lex$/;"	c
paren_lex::OK	src/comb/paren-lex.h	/^    bool OK()  const$/;"	f	class:paren_lex	access:public	signature:() const
paren_lex::data	src/comb/paren-lex.h	/^    const ulong * data()  const  { return x_ + 1; }$/;"	f	class:paren_lex	access:public	signature:() const
paren_lex::first	src/comb/paren-lex.h	/^    void first()  { for (ulong i=1; i<=k_; ++i)  x_[i] = i - 1; }$/;"	f	class:paren_lex	access:public	signature:()
paren_lex::k_	src/comb/paren-lex.h	/^    ulong k_;    \/\/ Number of paren pairs$/;"	m	class:paren_lex	access:public
paren_lex::last	src/comb/paren-lex.h	/^    void last()  { for (ulong i=1; i<=k_; ++i)  x_[i] = 2*i-2; }$/;"	f	class:paren_lex	access:public	signature:()
paren_lex::n_	src/comb/paren-lex.h	/^    ulong n_;    \/\/ ==2*k$/;"	m	class:paren_lex	access:public
paren_lex::next	src/comb/paren-lex.h	/^    ulong next()$/;"	f	class:paren_lex	access:public	signature:()
paren_lex::operator =	src/comb/paren-lex.h	/^    paren_lex & operator = (const paren_lex&);  \/\/ forbidden$/;"	p	class:paren_lex	access:private	signature:(const paren_lex&)
paren_lex::paren_lex	src/comb/paren-lex.h	/^    explicit paren_lex(ulong k)$/;"	f	class:paren_lex	access:public	signature:(ulong k)
paren_lex::paren_lex	src/comb/paren-lex.h	/^    paren_lex(const paren_lex&);  \/\/ forbidden$/;"	p	class:paren_lex	access:private	signature:(const paren_lex&)
paren_lex::prev	src/comb/paren-lex.h	/^    ulong prev()$/;"	f	class:paren_lex	access:public	signature:()
paren_lex::str_	src/comb/paren-lex.h	/^    char *str_;  \/\/ String representation,  e.g. "((())())()"$/;"	m	class:paren_lex	access:public
paren_lex::string	src/comb/paren-lex.h	/^    const char * string()  \/\/ generate on demand$/;"	f	class:paren_lex	access:public	signature:()
paren_lex::x_	src/comb/paren-lex.h	/^    ulong *x_;   \/\/ Positions of opening parenthesis (RGS)$/;"	m	class:paren_lex	access:public
paren_lex::~paren_lex	src/comb/paren-lex.h	/^    ~paren_lex()$/;"	f	class:paren_lex	access:public	signature:()
paren_pref	src/comb/paren-pref.h	/^    explicit paren_pref(ulong t, ulong s)$/;"	f	class:paren_pref	access:public	signature:(ulong t, ulong s)
paren_pref	src/comb/paren-pref.h	/^    paren_pref(const paren_pref&);  \/\/ forbidden$/;"	p	class:paren_pref	access:private	signature:(const paren_pref&)
paren_pref	src/comb/paren-pref.h	/^class paren_pref$/;"	c
paren_pref::OK	src/comb/paren-pref.h	/^    bool OK()  const$/;"	f	class:paren_pref	access:public	signature:() const
paren_pref::b_	src/comb/paren-pref.h	/^    ulong *b_;     \/\/ array of t ones and s zeros$/;"	m	class:paren_pref	access:public
paren_pref::b_	src/comb/paren-pref.h	/^    ulong b_[64];  \/\/ array of t ones and s zeros$/;"	m	class:paren_pref	access:public
paren_pref::data	src/comb/paren-pref.h	/^    const ulong * data()  const  { return b_+1; }$/;"	f	class:paren_pref	access:public	signature:() const
paren_pref::data	src/comb/paren-pref.h	/^    const ulong * data()  const  { return b_; }$/;"	f	class:paren_pref	access:public	signature:() const
paren_pref::first	src/comb/paren-pref.h	/^    void first()$/;"	f	class:paren_pref	access:public	signature:()
paren_pref::next	src/comb/paren-pref.h	/^    bool next()$/;"	f	class:paren_pref	access:public	signature:()
paren_pref::nq_	src/comb/paren-pref.h	/^    const ulong nq_;  \/\/ aux$/;"	m	class:paren_pref	access:public
paren_pref::operator =	src/comb/paren-pref.h	/^    paren_pref & operator = (const paren_pref&);  \/\/ forbidden$/;"	p	class:paren_pref	access:private	signature:(const paren_pref&)
paren_pref::paren_pref	src/comb/paren-pref.h	/^    explicit paren_pref(ulong t, ulong s)$/;"	f	class:paren_pref	access:public	signature:(ulong t, ulong s)
paren_pref::paren_pref	src/comb/paren-pref.h	/^    paren_pref(const paren_pref&);  \/\/ forbidden$/;"	p	class:paren_pref	access:private	signature:(const paren_pref&)
paren_pref::s_	src/comb/paren-pref.h	/^    const ulong t_, s_;  \/\/ t: number of ones, s: number of zeros$/;"	m	class:paren_pref	access:public
paren_pref::t_	src/comb/paren-pref.h	/^    const ulong t_, s_;  \/\/ t: number of ones, s: number of zeros$/;"	m	class:paren_pref	access:public
paren_pref::x_	src/comb/paren-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:paren_pref	access:public
paren_pref::y_	src/comb/paren-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:paren_pref	access:public
paren_pref::~paren_pref	src/comb/paren-pref.h	/^    ~paren_pref()$/;"	f	class:paren_pref	access:public	signature:()
paren_string	src/comb/catalan-rgs-gray.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
paren_string	src/comb/catalan-rgs-gslex.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
paren_string	src/comb/catalan-rgs-subset-lex.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
paren_string	src/comb/catalan-rgs.h	/^    const char* paren_string()$/;"	f	class:catalan_rgs	access:public	signature:()
paren_string	src/comb/catalan.h	/^    const char* paren_string()$/;"	f	class:catalan	access:public	signature:()
paren_string	src/comb/motzkin-rgs-lex.h	/^    const char* paren_string()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
paren_string	src/comb/paren-gray.h	/^    const char * paren_string() const  { return par+1; }$/;"	f	class:paren_gray	access:public	signature:() const
paren_string_to_rgs	src/comb/paren-string-to-rgs.cc	/^paren_string_to_rgs(const char *str, ulong *rgs)$/;"	f	signature:(const char *str, ulong *rgs)
paren_string_to_rgs	src/comb/paren-string-to-rgs.h	/^bool paren_string_to_rgs(const char *str, ulong *rgs);$/;"	p	signature:(const char *str, ulong *rgs)
parengray_is_neighbor	doc/graph-doc.txt	/^static bool parengray_is_neighbor(ulong fk, ulong fj, ulong pcd, ulong \/*nb*\/);$/;"	p	file:	signature:(ulong fk, ulong fj, ulong pcd, ulong )
parengray_is_neighbor	src/graph/mk-paren-gray-digraph.cc	/^parengray_is_neighbor(ulong fk, ulong fj, ulong pcd, ulong \/*nb*\/)$/;"	f	file:	signature:(ulong fk, ulong fj, ulong pcd, ulong )
parenword2str	doc/bits-doc.txt	/^static inline void parenword2str(ulong x, char *str);$/;"	p	file:	signature:(ulong x, char *str)
parenword2str	src/bits/parenwords.h	/^static inline void parenword2str(ulong x, char *str)$/;"	f	signature:(ulong x, char *str)
parity	doc/bits-doc.txt	/^static inline ulong parity(ulong x);$/;"	p	file:	signature:(ulong x)
parity	src/bits/parity.h	/^static inline ulong parity(ulong x)$/;"	f	signature:(ulong x)
parity_transform	src/walsh/attic/parity-transform.h	/^inline void parity_transform(Type *f, ulong ldn, int is, Type w)$/;"	f	signature:(Type *f, ulong ldn, int is, Type w)
parity_transform	src/walsh/attic/parity-transform.h	/^void parity_transform(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
part_dist_lex_rec	src/comb/attic/partition-dist-lex-rec-demo.cc	/^void part_dist_lex_rec(ulong n, ulong mp, ulong off=0)$/;"	f	signature:(ulong n, ulong mp, ulong off=0)
part_lex_rec	src/comb/attic/partition-lex-rec-demo.cc	/^void part_lex_rec(ulong n, ulong mp, ulong off=0)$/;"	f	signature:(ulong n, ulong mp, ulong off=0)
partial	doc/wfl-hilbert-doc.txt	/^its origin vector <coord>, partial <step>, <edge>-pair encoding$/;"	v
partition	doc/sort-doc.txt	/^ulong partition(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
partition	doc/sort-doc.txt	/^ulong partition(Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
partition	src/comb/partition.h	/^    explicit partition(ulong n)$/;"	f	class:partition	access:public	signature:(ulong n)
partition	src/comb/partition.h	/^    partition(const partition&);  \/\/ forbidden$/;"	p	class:partition	access:private	signature:(const partition&)
partition	src/comb/partition.h	/^class partition$/;"	c
partition	src/perm/attic/partition.cc	/^partition::partition(int nn)$/;"	f	class:partition	signature:(int nn)
partition	src/perm/attic/partition.h	/^    partition(int nn);$/;"	p	class:partition	access:public	signature:(int nn)
partition	src/perm/attic/partition.h	/^class partition$/;"	c
partition	src/sort/attic/sort.h	/^ulong partition(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
partition	src/sort/sort.h	/^ulong partition(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
partition	src/sort/sortfunc.h	/^ulong partition(Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
partition::OK	src/comb/partition.h	/^    bool OK()  const$/;"	f	class:partition	access:public	signature:() const
partition::c_	src/comb/partition.h	/^    ulong *c_;  \/\/ partition:  c[1]* 1 + c[2]* 2 + ... + c[n]* n == n$/;"	m	class:partition	access:public
partition::data	src/comb/partition.h	/^    const ulong * data()  const  { return c_; }  \/\/ one-based!$/;"	f	class:partition	access:public	signature:() const
partition::data	src/perm/attic/partition.h	/^    const int *data()  const  { return x;}$/;"	f	class:partition	access:public	signature:() const
partition::first	src/comb/partition.h	/^    void first()$/;"	f	class:partition	access:public	signature:()
partition::i	src/perm/attic/partition.h	/^    int i;$/;"	m	class:partition	access:private
partition::idx	src/perm/attic/partition.h	/^    int idx;$/;"	m	class:partition	access:private
partition::index	src/perm/attic/partition.h	/^    int index()  const  { return idx; }$/;"	f	class:partition	access:public	signature:() const
partition::init	src/perm/attic/partition.cc	/^partition::init()$/;"	f	class:partition	signature:()
partition::init	src/perm/attic/partition.h	/^    void init();$/;"	p	class:partition	access:public	signature:()
partition::is_dist_parts	src/comb/partition.h	/^    bool is_dist_parts()  const$/;"	f	class:partition	access:public	signature:() const
partition::is_into_even_parts	src/comb/partition.h	/^    bool is_into_even_parts()  const$/;"	f	class:partition	access:public	signature:() const
partition::is_into_odd_parts	src/comb/partition.h	/^    bool is_into_odd_parts()  const$/;"	f	class:partition	access:public	signature:() const
partition::k	src/perm/attic/partition.h	/^    int k;$/;"	m	class:partition	access:private
partition::largest_part	src/comb/partition.h	/^    ulong largest_part()  const$/;"	f	class:partition	access:public	signature:() const
partition::last	src/comb/partition.h	/^    void last()$/;"	f	class:partition	access:public	signature:()
partition::length	src/perm/attic/partition.h	/^    int length()  const  { return k+1; }$/;"	f	class:partition	access:public	signature:() const
partition::make_next	src/perm/attic/partition.cc	/^partition::make_next()$/;"	f	class:partition	signature:()
partition::make_next	src/perm/attic/partition.h	/^    void make_next();$/;"	p	class:partition	access:private	signature:()
partition::n	src/perm/attic/partition.h	/^    int n;$/;"	m	class:partition	access:private
partition::n_	src/comb/partition.h	/^    ulong n_;   \/\/ partitions of n$/;"	m	class:partition	access:public
partition::next	src/comb/partition.h	/^    bool next()$/;"	f	class:partition	access:public	signature:()
partition::next	src/perm/attic/partition.h	/^    int next()$/;"	f	class:partition	access:public	signature:()
partition::num_of	src/comb/partition.h	/^    ulong num_of(ulong m)  const$/;"	f	class:partition	access:public	signature:(ulong m) const
partition::num_parts	src/comb/partition.h	/^    ulong num_parts()  const$/;"	f	class:partition	access:public	signature:() const
partition::num_sorts	src/comb/partition.h	/^    ulong num_sorts()  const$/;"	f	class:partition	access:public	signature:() const
partition::operator =	src/comb/partition.h	/^    partition & operator = (const partition&);  \/\/ forbidden$/;"	p	class:partition	access:private	signature:(const partition&)
partition::partition	src/comb/partition.h	/^    explicit partition(ulong n)$/;"	f	class:partition	access:public	signature:(ulong n)
partition::partition	src/comb/partition.h	/^    partition(const partition&);  \/\/ forbidden$/;"	p	class:partition	access:private	signature:(const partition&)
partition::partition	src/perm/attic/partition.cc	/^partition::partition(int nn)$/;"	f	class:partition	signature:(int nn)
partition::partition	src/perm/attic/partition.h	/^    partition(int nn);$/;"	p	class:partition	access:public	signature:(int nn)
partition::prev	src/comb/partition.h	/^    bool prev()$/;"	f	class:partition	access:public	signature:()
partition::print	src/comb/partition.cc	/^partition::print()  const$/;"	f	class:partition	signature:() const
partition::print	src/comb/partition.h	/^    void print()  const;$/;"	p	class:partition	access:public	signature:() const
partition::print_falling	src/comb/partition.cc	/^partition::print_falling()  const$/;"	f	class:partition	signature:() const
partition::print_falling	src/comb/partition.h	/^    void print_falling()  const;$/;"	p	class:partition	access:public	signature:() const
partition::print_long	src/comb/partition.cc	/^partition::print_long(bool szq)  const$/;"	f	class:partition	signature:(bool szq) const
partition::print_long	src/comb/partition.h	/^    void print_long(bool szq)  const;$/;"	p	class:partition	access:public	signature:(bool szq) const
partition::rank	src/comb/partition.h	/^    long rank()  const$/;"	f	class:partition	access:public	signature:() const
partition::s_	src/comb/partition.h	/^    ulong *s_;  \/\/ cumulative sums:  s[j+1] = c[1]* 1 + c[2]* 2 + ... + c[j]* j$/;"	m	class:partition	access:public
partition::smallest_part	src/comb/partition.h	/^    ulong smallest_part()  const$/;"	f	class:partition	access:public	signature:() const
partition::x	src/perm/attic/partition.h	/^    int *x;$/;"	m	class:partition	access:private
partition::~partition	src/comb/partition.h	/^    ~partition()$/;"	f	class:partition	access:public	signature:()
partition::~partition	src/perm/attic/partition.cc	/^partition::~partition()$/;"	f	class:partition	signature:()
partition::~partition	src/perm/attic/partition.h	/^    ~partition();$/;"	p	class:partition	access:public	signature:()
partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    explicit partition_2fall_asc(ulong n)$/;"	f	class:partition_2fall_asc	access:public	signature:(ulong n)
partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    partition_2fall_asc(const partition_2fall_asc&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc	access:private	signature:(const partition_2fall_asc&)
partition_2fall_asc	src/comb/partition-2fall-asc.h	/^class partition_2fall_asc$/;"	c
partition_2fall_asc::OK	src/comb/partition-2fall-asc.h	/^    bool OK()  const$/;"	f	class:partition_2fall_asc	access:public	signature:() const
partition_2fall_asc::a_	src/comb/partition-2fall-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_asc	access:public
partition_2fall_asc::a_	src/comb/partition-2fall-asc.h	/^    ulong a_[62];$/;"	m	class:partition_2fall_asc	access:public
partition_2fall_asc::data	src/comb/partition-2fall-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_asc	access:public	signature:() const
partition_2fall_asc::first	src/comb/partition-2fall-asc.h	/^    void first()$/;"	f	class:partition_2fall_asc	access:public	signature:()
partition_2fall_asc::m_	src/comb/partition-2fall-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_asc	access:public
partition_2fall_asc::mers_t	src/comb/partition-2fall-asc.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_asc	access:private	signature:(ulong s)
partition_2fall_asc::n_	src/comb/partition-2fall-asc.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_asc	access:public
partition_2fall_asc::next	src/comb/partition-2fall-asc.h	/^    ulong next()$/;"	f	class:partition_2fall_asc	access:public	signature:()
partition_2fall_asc::num_parts	src/comb/partition-2fall-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_2fall_asc	access:public	signature:() const
partition_2fall_asc::operator =	src/comb/partition-2fall-asc.h	/^    partition_2fall_asc & operator = (const partition_2fall_asc&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc	access:private	signature:(const partition_2fall_asc&)
partition_2fall_asc::partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    explicit partition_2fall_asc(ulong n)$/;"	f	class:partition_2fall_asc	access:public	signature:(ulong n)
partition_2fall_asc::partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    partition_2fall_asc(const partition_2fall_asc&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc	access:private	signature:(const partition_2fall_asc&)
partition_2fall_asc::print	src/comb/partition-2fall-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_2fall_asc::print_aa	src/comb/partition-2fall-asc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc	access:public	signature:() const
partition_2fall_asc::print_conj_aa	src/comb/partition-2fall-asc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc	access:public	signature:() const
partition_2fall_asc::~partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    ~partition_2fall_asc()$/;"	f	class:partition_2fall_asc	access:public	signature:()
partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    explicit partition_2fall_asc_subset_lex(ulong n)$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:(ulong n)
partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    partition_2fall_asc_subset_lex(const partition_2fall_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc_subset_lex	access:private	signature:(const partition_2fall_asc_subset_lex&)
partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^class partition_2fall_asc_subset_lex$/;"	c
partition_2fall_asc_subset_lex::OK	src/comb/partition-2fall-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
partition_2fall_asc_subset_lex::a_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_asc_subset_lex	access:public
partition_2fall_asc_subset_lex::a_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong a_[62];$/;"	m	class:partition_2fall_asc_subset_lex	access:public
partition_2fall_asc_subset_lex::data	src/comb/partition-2fall-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
partition_2fall_asc_subset_lex::first	src/comb/partition-2fall-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
partition_2fall_asc_subset_lex::m_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_asc_subset_lex	access:public
partition_2fall_asc_subset_lex::mers_t	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_asc_subset_lex	access:private	signature:(ulong s)
partition_2fall_asc_subset_lex::n_	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_asc_subset_lex	access:public
partition_2fall_asc_subset_lex::next	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
partition_2fall_asc_subset_lex::num_parts	src/comb/partition-2fall-asc-subset-lex.h	/^    ulong num_parts()  const  { return m_ - (n_==0); }$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
partition_2fall_asc_subset_lex::operator =	src/comb/partition-2fall-asc-subset-lex.h	/^    partition_2fall_asc_subset_lex & operator = (const partition_2fall_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc_subset_lex	access:private	signature:(const partition_2fall_asc_subset_lex&)
partition_2fall_asc_subset_lex::partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    explicit partition_2fall_asc_subset_lex(ulong n)$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:(ulong n)
partition_2fall_asc_subset_lex::partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    partition_2fall_asc_subset_lex(const partition_2fall_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_2fall_asc_subset_lex	access:private	signature:(const partition_2fall_asc_subset_lex&)
partition_2fall_asc_subset_lex::print	src/comb/partition-2fall-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
partition_2fall_asc_subset_lex::print_aa	src/comb/partition-2fall-asc-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
partition_2fall_asc_subset_lex::print_conj_aa	src/comb/partition-2fall-asc-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
partition_2fall_asc_subset_lex::~partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    ~partition_2fall_asc_subset_lex()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    explicit partition_2fall_desc(ulong n)$/;"	f	class:partition_2fall_desc	access:public	signature:(ulong n)
partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    partition_2fall_desc(const partition_2fall_desc&);  \/\/ forbidden$/;"	p	class:partition_2fall_desc	access:private	signature:(const partition_2fall_desc&)
partition_2fall_desc	src/comb/partition-2fall-desc.h	/^class partition_2fall_desc$/;"	c
partition_2fall_desc::OK	src/comb/partition-2fall-desc.h	/^    bool OK()  const$/;"	f	class:partition_2fall_desc	access:public	signature:() const
partition_2fall_desc::a_	src/comb/partition-2fall-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_2fall_desc	access:public
partition_2fall_desc::data	src/comb/partition-2fall-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_2fall_desc	access:public	signature:() const
partition_2fall_desc::first	src/comb/partition-2fall-desc.h	/^    void first()$/;"	f	class:partition_2fall_desc	access:public	signature:()
partition_2fall_desc::m_	src/comb/partition-2fall-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_2fall_desc	access:public
partition_2fall_desc::mers_t	src/comb/partition-2fall-desc.h	/^    ulong mers_t(ulong s)$/;"	f	class:partition_2fall_desc	access:private	signature:(ulong s)
partition_2fall_desc::n_	src/comb/partition-2fall-desc.h	/^    ulong n_;   \/\/ integer partition of n$/;"	m	class:partition_2fall_desc	access:public
partition_2fall_desc::next	src/comb/partition-2fall-desc.h	/^    ulong next()$/;"	f	class:partition_2fall_desc	access:public	signature:()
partition_2fall_desc::num_parts	src/comb/partition-2fall-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_2fall_desc	access:public	signature:() const
partition_2fall_desc::operator =	src/comb/partition-2fall-desc.h	/^    partition_2fall_desc & operator = (const partition_2fall_desc&);  \/\/ forbidden$/;"	p	class:partition_2fall_desc	access:private	signature:(const partition_2fall_desc&)
partition_2fall_desc::partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    explicit partition_2fall_desc(ulong n)$/;"	f	class:partition_2fall_desc	access:public	signature:(ulong n)
partition_2fall_desc::partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    partition_2fall_desc(const partition_2fall_desc&);  \/\/ forbidden$/;"	p	class:partition_2fall_desc	access:private	signature:(const partition_2fall_desc&)
partition_2fall_desc::print	src/comb/partition-2fall-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_2fall_desc::print_aa	src/comb/partition-2fall-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_desc	access:public	signature:() const
partition_2fall_desc::print_conj_aa	src/comb/partition-2fall-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_desc	access:public	signature:() const
partition_2fall_desc::write_tail	src/comb/partition-2fall-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_2fall_desc	access:private	signature:(ulong s, ulong j)
partition_2fall_desc::~partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    ~partition_2fall_desc()$/;"	f	class:partition_2fall_desc	access:public	signature:()
partition_asc	src/comb/partition-asc.h	/^    explicit partition_asc(ulong n)$/;"	f	class:partition_asc	access:public	signature:(ulong n)
partition_asc	src/comb/partition-asc.h	/^    partition_asc(const partition_asc&);  \/\/ forbidden$/;"	p	class:partition_asc	access:private	signature:(const partition_asc&)
partition_asc	src/comb/partition-asc.h	/^class partition_asc$/;"	c
partition_asc::OK	src/comb/partition-asc.h	/^    bool OK()  const$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::a_	src/comb/partition-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc	access:public
partition_asc::data	src/comb/partition-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::durfee_n	src/comb/partition-asc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::first	src/comb/partition-asc.h	/^    void first()$/;"	f	class:partition_asc	access:public	signature:()
partition_asc::first_part	src/comb/partition-asc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::last	src/comb/partition-asc.h	/^    void last()$/;"	f	class:partition_asc	access:public	signature:()
partition_asc::last_part	src/comb/partition-asc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::m_	src/comb/partition-asc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc	access:public
partition_asc::n_	src/comb/partition-asc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc	access:public
partition_asc::next	src/comb/partition-asc.h	/^    ulong next()$/;"	f	class:partition_asc	access:public	signature:()
partition_asc::num_parts	src/comb/partition-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::operator =	src/comb/partition-asc.h	/^    partition_asc & operator = (const partition_asc&);  \/\/ forbidden$/;"	p	class:partition_asc	access:private	signature:(const partition_asc&)
partition_asc::partition_asc	src/comb/partition-asc.h	/^    explicit partition_asc(ulong n)$/;"	f	class:partition_asc	access:public	signature:(ulong n)
partition_asc::partition_asc	src/comb/partition-asc.h	/^    partition_asc(const partition_asc&);  \/\/ forbidden$/;"	p	class:partition_asc	access:private	signature:(const partition_asc&)
partition_asc::prev	src/comb/partition-asc.h	/^    ulong prev()$/;"	f	class:partition_asc	access:public	signature:()
partition_asc::print	src/comb/partition-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_asc::print_aa	src/comb/partition-asc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::print_conj_aa	src/comb/partition-asc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc	access:public	signature:() const
partition_asc::~partition_asc	src/comb/partition-asc.h	/^    ~partition_asc()$/;"	f	class:partition_asc	access:public	signature:()
partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    explicit partition_asc_2rep(ulong n)$/;"	f	class:partition_asc_2rep	access:public	signature:(ulong n)
partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    partition_asc_2rep(const partition_asc_2rep&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep	access:private	signature:(const partition_asc_2rep&)
partition_asc_2rep	src/comb/partition-asc-2rep.h	/^class partition_asc_2rep$/;"	c
partition_asc_2rep::OK	src/comb/partition-asc-2rep.h	/^    bool OK()  const$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::a_	src/comb/partition-asc-2rep.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_2rep	access:public
partition_asc_2rep::data	src/comb/partition-asc-2rep.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::durfee_n	src/comb/partition-asc-2rep.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::first	src/comb/partition-asc-2rep.h	/^    void first()$/;"	f	class:partition_asc_2rep	access:public	signature:()
partition_asc_2rep::m_	src/comb/partition-asc-2rep.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc_2rep	access:public
partition_asc_2rep::n_	src/comb/partition-asc-2rep.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc_2rep	access:public
partition_asc_2rep::next	src/comb/partition-asc-2rep.h	/^    ulong next()$/;"	f	class:partition_asc_2rep	access:public	signature:()
partition_asc_2rep::num_parts	src/comb/partition-asc-2rep.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::operator =	src/comb/partition-asc-2rep.h	/^    partition_asc_2rep & operator = (const partition_asc_2rep&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep	access:private	signature:(const partition_asc_2rep&)
partition_asc_2rep::partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    explicit partition_asc_2rep(ulong n)$/;"	f	class:partition_asc_2rep	access:public	signature:(ulong n)
partition_asc_2rep::partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    partition_asc_2rep(const partition_asc_2rep&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep	access:private	signature:(const partition_asc_2rep&)
partition_asc_2rep::print	src/comb/partition-asc-2rep.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_2rep	access:public	signature:(const char *bla, bool dfz=false) const
partition_asc_2rep::print_aa	src/comb/partition-asc-2rep.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::print_conj_aa	src/comb/partition-asc-2rep.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep	access:public	signature:() const
partition_asc_2rep::~partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    ~partition_asc_2rep()$/;"	f	class:partition_asc_2rep	access:public	signature:()
partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    explicit partition_asc_2rep_subset_lex(ulong n)$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:(ulong n)
partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    partition_asc_2rep_subset_lex(const partition_asc_2rep_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep_subset_lex	access:private	signature:(const partition_asc_2rep_subset_lex&)
partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^class partition_asc_2rep_subset_lex$/;"	c
partition_asc_2rep_subset_lex::OK	src/comb/partition-asc-2rep-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::a_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_2rep_subset_lex	access:public
partition_asc_2rep_subset_lex::data	src/comb/partition-asc-2rep-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::durfee_n	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong durfee_n()  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::first	src/comb/partition-asc-2rep-subset-lex.h	/^    void first()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
partition_asc_2rep_subset_lex::m_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_asc_2rep_subset_lex	access:public
partition_asc_2rep_subset_lex::n_	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_asc_2rep_subset_lex	access:public
partition_asc_2rep_subset_lex::next	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong next()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
partition_asc_2rep_subset_lex::num_parts	src/comb/partition-asc-2rep-subset-lex.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::operator =	src/comb/partition-asc-2rep-subset-lex.h	/^    partition_asc_2rep_subset_lex & operator = (const partition_asc_2rep_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep_subset_lex	access:private	signature:(const partition_asc_2rep_subset_lex&)
partition_asc_2rep_subset_lex::partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    explicit partition_asc_2rep_subset_lex(ulong n)$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:(ulong n)
partition_asc_2rep_subset_lex::partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    partition_asc_2rep_subset_lex(const partition_asc_2rep_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_2rep_subset_lex	access:private	signature:(const partition_asc_2rep_subset_lex&)
partition_asc_2rep_subset_lex::print	src/comb/partition-asc-2rep-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
partition_asc_2rep_subset_lex::print_aa	src/comb/partition-asc-2rep-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::print_conj_aa	src/comb/partition-asc-2rep-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
partition_asc_2rep_subset_lex::~partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    ~partition_asc_2rep_subset_lex()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
partition_asc_boundary_size	src/comb/partition-boundary.h	/^static inline ulong partition_asc_boundary_size(const ulong *x, ulong m)$/;"	f	signature:(const ulong *x, ulong m)
partition_asc_conj	src/comb/partition-conj.cc	/^partition_asc_conj(const ulong *a, ulong m, ulong *b)$/;"	f	signature:(const ulong *a, ulong m, ulong *b)
partition_asc_conj	src/comb/partition-conj.h	/^ulong partition_asc_conj(const ulong *a, ulong m, ulong *b);$/;"	p	signature:(const ulong *a, ulong m, ulong *b)
partition_asc_dist_to_odd	src/comb/partition-odd-to-dist.h	/^inline ulong partition_asc_dist_to_odd(const ulong *a, ulong ma, ulong *t)$/;"	f	signature:(const ulong *a, ulong ma, ulong *t)
partition_asc_hook_prod	src/comb/partition-hook-prod.h	/^inline Type partition_asc_hook_prod(const ulong *a, ulong m, ulong *b)$/;"	f	signature:(const ulong *a, ulong m, ulong *b)
partition_asc_is_conj	src/comb/partition-conj.cc	/^partition_asc_is_conj(const ulong *a, ulong ma, const ulong *b=0, ulong mb=0)$/;"	f	signature:(const ulong *a, ulong ma, const ulong *b=0, ulong mb=0)
partition_asc_is_conj	src/comb/partition-conj.h	/^bool partition_asc_is_conj(const ulong *a, ulong ma, const ulong *b, ulong mb);$/;"	p	signature:(const ulong *a, ulong ma, const ulong *b, ulong mb)
partition_asc_is_self_conj	src/comb/partition-conj.cc	/^partition_asc_is_self_conj(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
partition_asc_is_self_conj	src/comb/partition-conj.h	/^bool partition_asc_is_self_conj(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
partition_asc_odd_to_dist	src/comb/partition-odd-to-dist.h	/^inline ulong partition_asc_odd_to_dist(const ulong *a, ulong ma, ulong *t)$/;"	f	signature:(const ulong *a, ulong ma, ulong *t)
partition_asc_perim	src/comb/partition-asc-perim.h	/^    explicit partition_asc_perim(ulong n)$/;"	f	class:partition_asc_perim	access:public	signature:(ulong n)
partition_asc_perim	src/comb/partition-asc-perim.h	/^    partition_asc_perim(const partition_asc_perim&);  \/\/ forbidden$/;"	p	class:partition_asc_perim	access:private	signature:(const partition_asc_perim&)
partition_asc_perim	src/comb/partition-asc-perim.h	/^class partition_asc_perim$/;"	c
partition_asc_perim::OK	src/comb/partition-asc-perim.h	/^    bool OK()  const$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::a_	src/comb/partition-asc-perim.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_perim	access:public
partition_asc_perim::data	src/comb/partition-asc-perim.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::first	src/comb/partition-asc-perim.h	/^    void first()$/;"	f	class:partition_asc_perim	access:public	signature:()
partition_asc_perim::first_part	src/comb/partition-asc-perim.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::first_sort	src/comb/partition-asc-perim.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::last_part	src/comb/partition-asc-perim.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::last_sort	src/comb/partition-asc-perim.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::m_	src/comb/partition-asc-perim.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_perim	access:public
partition_asc_perim::n_	src/comb/partition-asc-perim.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_perim	access:public
partition_asc_perim::next	src/comb/partition-asc-perim.h	/^    ulong next()$/;"	f	class:partition_asc_perim	access:public	signature:()
partition_asc_perim::num_parts	src/comb/partition-asc-perim.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::operator =	src/comb/partition-asc-perim.h	/^    partition_asc_perim & operator = (const partition_asc_perim&);  \/\/ forbidden$/;"	p	class:partition_asc_perim	access:private	signature:(const partition_asc_perim&)
partition_asc_perim::partition_asc_perim	src/comb/partition-asc-perim.h	/^    explicit partition_asc_perim(ulong n)$/;"	f	class:partition_asc_perim	access:public	signature:(ulong n)
partition_asc_perim::partition_asc_perim	src/comb/partition-asc-perim.h	/^    partition_asc_perim(const partition_asc_perim&);  \/\/ forbidden$/;"	p	class:partition_asc_perim	access:private	signature:(const partition_asc_perim&)
partition_asc_perim::print	src/comb/partition-asc-perim.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
partition_asc_perim::print_by_sorts	src/comb/partition-asc-perim.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
partition_asc_perim::print_rev	src/comb/partition-asc-perim.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
partition_asc_perim::s_	src/comb/partition-asc-perim.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_perim	access:public
partition_asc_perim::sdata	src/comb/partition-asc-perim.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
partition_asc_perim::write_tail	src/comb/partition-asc-perim.h	/^    ulong write_tail(ulong j, ulong s)$/;"	f	class:partition_asc_perim	access:private	signature:(ulong j, ulong s)
partition_asc_perim::~partition_asc_perim	src/comb/partition-asc-perim.h	/^    ~partition_asc_perim()$/;"	f	class:partition_asc_perim	access:public	signature:()
partition_asc_perimeter	src/comb/partition-boundary.h	/^static inline ulong partition_asc_perimeter(const ulong *x, ulong m)$/;"	f	signature:(const ulong *x, ulong m)
partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    explicit partition_asc_sorts(ulong n, ulong ns)$/;"	f	class:partition_asc_sorts	access:public	signature:(ulong n, ulong ns)
partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    partition_asc_sorts(const partition_asc_sorts&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts	access:private	signature:(const partition_asc_sorts&)
partition_asc_sorts	src/comb/partition-asc-sorts.h	/^class partition_asc_sorts$/;"	c
partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    explicit partition_asc_sorts2(ulong n, ulong ns)$/;"	f	class:partition_asc_sorts2	access:public	signature:(ulong n, ulong ns)
partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    partition_asc_sorts2(const partition_asc_sorts2&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2	access:private	signature:(const partition_asc_sorts2&)
partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^class partition_asc_sorts2$/;"	c
partition_asc_sorts2::OK	src/comb/partition-asc-sorts2.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::a_	src/comb/partition-asc-sorts2.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts2	access:public
partition_asc_sorts2::data	src/comb/partition-asc-sorts2.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::first	src/comb/partition-asc-sorts2.h	/^    void first()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
partition_asc_sorts2::first_part	src/comb/partition-asc-sorts2.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::first_sort	src/comb/partition-asc-sorts2.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::last_part	src/comb/partition-asc-sorts2.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::last_sort	src/comb/partition-asc-sorts2.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::m_	src/comb/partition-asc-sorts2.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts2	access:public
partition_asc_sorts2::n_	src/comb/partition-asc-sorts2.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts2	access:public
partition_asc_sorts2::next	src/comb/partition-asc-sorts2.h	/^    ulong next()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
partition_asc_sorts2::ns1_	src/comb/partition-asc-sorts2.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:partition_asc_sorts2	access:public
partition_asc_sorts2::num_parts	src/comb/partition-asc-sorts2.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::operator =	src/comb/partition-asc-sorts2.h	/^    partition_asc_sorts2 & operator = (const partition_asc_sorts2&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2	access:private	signature:(const partition_asc_sorts2&)
partition_asc_sorts2::partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    explicit partition_asc_sorts2(ulong n, ulong ns)$/;"	f	class:partition_asc_sorts2	access:public	signature:(ulong n, ulong ns)
partition_asc_sorts2::partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    partition_asc_sorts2(const partition_asc_sorts2&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2	access:private	signature:(const partition_asc_sorts2&)
partition_asc_sorts2::print	src/comb/partition-asc-sorts2.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
partition_asc_sorts2::print_by_sorts	src/comb/partition-asc-sorts2.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
partition_asc_sorts2::print_rev	src/comb/partition-asc-sorts2.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
partition_asc_sorts2::s_	src/comb/partition-asc-sorts2.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts2	access:public
partition_asc_sorts2::sdata	src/comb/partition-asc-sorts2.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
partition_asc_sorts2::~partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    ~partition_asc_sorts2()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    explicit partition_asc_sorts2_pp(ulong n, ulong ns, const ulong *vns=0)$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(ulong n, ulong ns, const ulong *vns=0)
partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    partition_asc_sorts2_pp(const partition_asc_sorts2_pp&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2_pp	access:private	signature:(const partition_asc_sorts2_pp&)
partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^class partition_asc_sorts2_pp$/;"	c
partition_asc_sorts2_pp::OK	src/comb/partition-asc-sorts2-pp.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::a_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts2_pp	access:public
partition_asc_sorts2_pp::data	src/comb/partition-asc-sorts2-pp.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::first	src/comb/partition-asc-sorts2-pp.h	/^    void first()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
partition_asc_sorts2_pp::first_part	src/comb/partition-asc-sorts2-pp.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::first_sort	src/comb/partition-asc-sorts2-pp.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::last_part	src/comb/partition-asc-sorts2-pp.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::last_sort	src/comb/partition-asc-sorts2-pp.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::m_	src/comb/partition-asc-sorts2-pp.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts2_pp	access:public
partition_asc_sorts2_pp::n_	src/comb/partition-asc-sorts2-pp.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts2_pp	access:public
partition_asc_sorts2_pp::next	src/comb/partition-asc-sorts2-pp.h	/^    ulong next()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
partition_asc_sorts2_pp::ns1_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *ns1_;  \/\/ ns1[j] is sort of part a[j]$/;"	m	class:partition_asc_sorts2_pp	access:public
partition_asc_sorts2_pp::num_parts	src/comb/partition-asc-sorts2-pp.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::operator =	src/comb/partition-asc-sorts2-pp.h	/^    partition_asc_sorts2_pp & operator = (const partition_asc_sorts2_pp&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2_pp	access:private	signature:(const partition_asc_sorts2_pp&)
partition_asc_sorts2_pp::partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    explicit partition_asc_sorts2_pp(ulong n, ulong ns, const ulong *vns=0)$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(ulong n, ulong ns, const ulong *vns=0)
partition_asc_sorts2_pp::partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    partition_asc_sorts2_pp(const partition_asc_sorts2_pp&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts2_pp	access:private	signature:(const partition_asc_sorts2_pp&)
partition_asc_sorts2_pp::print	src/comb/partition-asc-sorts2-pp.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
partition_asc_sorts2_pp::print_by_sorts	src/comb/partition-asc-sorts2-pp.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
partition_asc_sorts2_pp::print_rev	src/comb/partition-asc-sorts2-pp.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
partition_asc_sorts2_pp::s_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts2_pp	access:public
partition_asc_sorts2_pp::sdata	src/comb/partition-asc-sorts2-pp.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
partition_asc_sorts2_pp::~partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    ~partition_asc_sorts2_pp()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
partition_asc_sorts::OK	src/comb/partition-asc-sorts.h	/^    bool OK()  const$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::a_	src/comb/partition-asc-sorts.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_sorts	access:public
partition_asc_sorts::data	src/comb/partition-asc-sorts.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::first	src/comb/partition-asc-sorts.h	/^    void first()$/;"	f	class:partition_asc_sorts	access:public	signature:()
partition_asc_sorts::first_part	src/comb/partition-asc-sorts.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::first_sort	src/comb/partition-asc-sorts.h	/^    ulong first_sort()  const  { return s_[1]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::last_part	src/comb/partition-asc-sorts.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::last_sort	src/comb/partition-asc-sorts.h	/^    ulong last_sort()  const  { return s_[m_]; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::m_	src/comb/partition-asc-sorts.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_sorts	access:public
partition_asc_sorts::n_	src/comb/partition-asc-sorts.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_sorts	access:public
partition_asc_sorts::next	src/comb/partition-asc-sorts.h	/^    ulong next()$/;"	f	class:partition_asc_sorts	access:public	signature:()
partition_asc_sorts::ns1_	src/comb/partition-asc-sorts.h	/^    ulong ns1_; \/\/ number of sorts - 1$/;"	m	class:partition_asc_sorts	access:public
partition_asc_sorts::num_parts	src/comb/partition-asc-sorts.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::operator =	src/comb/partition-asc-sorts.h	/^    partition_asc_sorts & operator = (const partition_asc_sorts&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts	access:private	signature:(const partition_asc_sorts&)
partition_asc_sorts::partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    explicit partition_asc_sorts(ulong n, ulong ns)$/;"	f	class:partition_asc_sorts	access:public	signature:(ulong n, ulong ns)
partition_asc_sorts::partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    partition_asc_sorts(const partition_asc_sorts&);  \/\/ forbidden$/;"	p	class:partition_asc_sorts	access:private	signature:(const partition_asc_sorts&)
partition_asc_sorts::print	src/comb/partition-asc-sorts.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
partition_asc_sorts::print_by_sorts	src/comb/partition-asc-sorts.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
partition_asc_sorts::print_rev	src/comb/partition-asc-sorts.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
partition_asc_sorts::s_	src/comb/partition-asc-sorts.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts	access:public
partition_asc_sorts::sdata	src/comb/partition-asc-sorts.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
partition_asc_sorts::write_s0_tail	src/comb/partition-asc-sorts.h	/^    ulong write_s0_tail(ulong j, ulong w, ulong y)$/;"	f	class:partition_asc_sorts	access:private	signature:(ulong j, ulong w, ulong y)
partition_asc_sorts::~partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    ~partition_asc_sorts()$/;"	f	class:partition_asc_sorts	access:public	signature:()
partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    explicit partition_asc_subset_lex(ulong n)$/;"	f	class:partition_asc_subset_lex	access:public	signature:(ulong n)
partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    partition_asc_subset_lex(const partition_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex	access:private	signature:(const partition_asc_subset_lex&)
partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^class partition_asc_subset_lex$/;"	c
partition_asc_subset_lex::OK	src/comb/partition-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::a_	src/comb/partition-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_subset_lex	access:public
partition_asc_subset_lex::data	src/comb/partition-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::first	src/comb/partition-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
partition_asc_subset_lex::first_part	src/comb/partition-asc-subset-lex.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::last_part	src/comb/partition-asc-subset-lex.h	/^    ulong last_part()  const  { return a_[m_]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::m_	src/comb/partition-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_subset_lex	access:public
partition_asc_subset_lex::n_	src/comb/partition-asc-subset-lex.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_subset_lex	access:public
partition_asc_subset_lex::next	src/comb/partition-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
partition_asc_subset_lex::num_parts	src/comb/partition-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::operator =	src/comb/partition-asc-subset-lex.h	/^    partition_asc_subset_lex & operator = (const partition_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex	access:private	signature:(const partition_asc_subset_lex&)
partition_asc_subset_lex::partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    explicit partition_asc_subset_lex(ulong n)$/;"	f	class:partition_asc_subset_lex	access:public	signature:(ulong n)
partition_asc_subset_lex::partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    partition_asc_subset_lex(const partition_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex	access:private	signature:(const partition_asc_subset_lex&)
partition_asc_subset_lex::print	src/comb/partition-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
partition_asc_subset_lex::print_aa	src/comb/partition-asc-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::print_conj_aa	src/comb/partition-asc-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
partition_asc_subset_lex::~partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    ~partition_asc_subset_lex()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    explicit partition_asc_subset_lex_csh(ulong n)$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:(ulong n)
partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    partition_asc_subset_lex_csh(const partition_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex_csh	access:private	signature:(const partition_asc_subset_lex_csh&)
partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^class partition_asc_subset_lex_csh$/;"	c
partition_asc_subset_lex_csh::OK	src/comb/partition-asc-subset-lex-csh.h	/^    bool OK()  const$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::a_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_asc_subset_lex_csh	access:public
partition_asc_subset_lex_csh::data	src/comb/partition-asc-subset-lex-csh.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::first	src/comb/partition-asc-subset-lex-csh.h	/^    void first()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
partition_asc_subset_lex_csh::first_part	src/comb/partition-asc-subset-lex-csh.h	/^    ulong first_part()  const  { return a_[1]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::last_part	src/comb/partition-asc-subset-lex-csh.h	/^    ulong last_part()  const  { return a_[m_]; }  \/\/ returns 0 for n==0$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::m_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_asc_subset_lex_csh	access:public
partition_asc_subset_lex_csh::n_	src/comb/partition-asc-subset-lex-csh.h	/^    ulong n_;   \/\/ partition of n$/;"	m	class:partition_asc_subset_lex_csh	access:public
partition_asc_subset_lex_csh::next	src/comb/partition-asc-subset-lex-csh.h	/^    ulong next()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
partition_asc_subset_lex_csh::num_parts	src/comb/partition-asc-subset-lex-csh.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::operator =	src/comb/partition-asc-subset-lex-csh.h	/^    partition_asc_subset_lex_csh & operator = (const partition_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex_csh	access:private	signature:(const partition_asc_subset_lex_csh&)
partition_asc_subset_lex_csh::partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    explicit partition_asc_subset_lex_csh(ulong n)$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:(ulong n)
partition_asc_subset_lex_csh::partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    partition_asc_subset_lex_csh(const partition_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_asc_subset_lex_csh	access:private	signature:(const partition_asc_subset_lex_csh&)
partition_asc_subset_lex_csh::print	src/comb/partition-asc-subset-lex-csh.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:(const char *bla, bool dfz=false) const
partition_asc_subset_lex_csh::print_aa	src/comb/partition-asc-subset-lex-csh.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::print_conj_aa	src/comb/partition-asc-subset-lex-csh.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
partition_asc_subset_lex_csh::~partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    ~partition_asc_subset_lex_csh()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
partition_binary_asc	src/comb/partition-binary-asc.h	/^    explicit partition_binary_asc(ulong n)$/;"	f	class:partition_binary_asc	access:public	signature:(ulong n)
partition_binary_asc	src/comb/partition-binary-asc.h	/^    partition_binary_asc(const partition_binary_asc&);  \/\/ forbidden$/;"	p	class:partition_binary_asc	access:private	signature:(const partition_binary_asc&)
partition_binary_asc	src/comb/partition-binary-asc.h	/^class partition_binary_asc$/;"	c
partition_binary_asc::OK	src/comb/partition-binary-asc.h	/^    bool OK()  const$/;"	f	class:partition_binary_asc	access:public	signature:() const
partition_binary_asc::a_	src/comb/partition-binary-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_binary_asc	access:public
partition_binary_asc::data	src/comb/partition-binary-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_binary_asc	access:public	signature:() const
partition_binary_asc::first	src/comb/partition-binary-asc.h	/^    void first()$/;"	f	class:partition_binary_asc	access:public	signature:()
partition_binary_asc::m_	src/comb/partition-binary-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_binary_asc	access:public
partition_binary_asc::ml_	src/comb/partition-binary-asc.h	/^    ulong ml_;  \/\/ last m (== Hamming weight of n)$/;"	m	class:partition_binary_asc	access:public
partition_binary_asc::n_	src/comb/partition-binary-asc.h	/^    ulong n_;   \/\/ binary integer partitions of n$/;"	m	class:partition_binary_asc	access:public
partition_binary_asc::next	src/comb/partition-binary-asc.h	/^    ulong next()$/;"	f	class:partition_binary_asc	access:public	signature:()
partition_binary_asc::num_parts	src/comb/partition-binary-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_binary_asc	access:public	signature:() const
partition_binary_asc::operator =	src/comb/partition-binary-asc.h	/^    partition_binary_asc & operator = (const partition_binary_asc&);  \/\/ forbidden$/;"	p	class:partition_binary_asc	access:private	signature:(const partition_binary_asc&)
partition_binary_asc::partition_binary_asc	src/comb/partition-binary-asc.h	/^    explicit partition_binary_asc(ulong n)$/;"	f	class:partition_binary_asc	access:public	signature:(ulong n)
partition_binary_asc::partition_binary_asc	src/comb/partition-binary-asc.h	/^    partition_binary_asc(const partition_binary_asc&);  \/\/ forbidden$/;"	p	class:partition_binary_asc	access:private	signature:(const partition_binary_asc&)
partition_binary_asc::print	src/comb/partition-binary-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_binary_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_binary_asc::~partition_binary_asc	src/comb/partition-binary-asc.h	/^    ~partition_binary_asc()$/;"	f	class:partition_binary_asc	access:public	signature:()
partition_binary_desc	src/comb/partition-binary-desc.h	/^    explicit partition_binary_desc(ulong n)$/;"	f	class:partition_binary_desc	access:public	signature:(ulong n)
partition_binary_desc	src/comb/partition-binary-desc.h	/^    partition_binary_desc(const partition_binary_desc&);  \/\/ forbidden$/;"	p	class:partition_binary_desc	access:private	signature:(const partition_binary_desc&)
partition_binary_desc	src/comb/partition-binary-desc.h	/^class partition_binary_desc$/;"	c
partition_binary_desc::OK	src/comb/partition-binary-desc.h	/^    bool OK()  const$/;"	f	class:partition_binary_desc	access:public	signature:() const
partition_binary_desc::a_	src/comb/partition-binary-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_binary_desc	access:public
partition_binary_desc::data	src/comb/partition-binary-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_binary_desc	access:public	signature:() const
partition_binary_desc::first	src/comb/partition-binary-desc.h	/^    void first()$/;"	f	class:partition_binary_desc	access:public	signature:()
partition_binary_desc::m_	src/comb/partition-binary-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_binary_desc	access:public
partition_binary_desc::ml_	src/comb/partition-binary-desc.h	/^    ulong ml_;  \/\/ last m (== Hamming weight of n)$/;"	m	class:partition_binary_desc	access:public
partition_binary_desc::n_	src/comb/partition-binary-desc.h	/^    ulong n_;   \/\/ binary integer partitions of n$/;"	m	class:partition_binary_desc	access:public
partition_binary_desc::next	src/comb/partition-binary-desc.h	/^    ulong next()$/;"	f	class:partition_binary_desc	access:public	signature:()
partition_binary_desc::num_parts	src/comb/partition-binary-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_binary_desc	access:public	signature:() const
partition_binary_desc::operator =	src/comb/partition-binary-desc.h	/^    partition_binary_desc & operator = (const partition_binary_desc&);  \/\/ forbidden$/;"	p	class:partition_binary_desc	access:private	signature:(const partition_binary_desc&)
partition_binary_desc::partition_binary_desc	src/comb/partition-binary-desc.h	/^    explicit partition_binary_desc(ulong n)$/;"	f	class:partition_binary_desc	access:public	signature:(ulong n)
partition_binary_desc::partition_binary_desc	src/comb/partition-binary-desc.h	/^    partition_binary_desc(const partition_binary_desc&);  \/\/ forbidden$/;"	p	class:partition_binary_desc	access:private	signature:(const partition_binary_desc&)
partition_binary_desc::print	src/comb/partition-binary-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_binary_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_binary_desc::s_	src/comb/partition-binary-desc.h	/^    ulong s_;   \/\/ position of downstep where we can add:$/;"	m	class:partition_binary_desc	access:public
partition_binary_desc::~partition_binary_desc	src/comb/partition-binary-desc.h	/^    ~partition_binary_desc()$/;"	f	class:partition_binary_desc	access:public	signature:()
partition_desc	src/comb/partition-desc.h	/^    explicit partition_desc(ulong n)$/;"	f	class:partition_desc	access:public	signature:(ulong n)
partition_desc	src/comb/partition-desc.h	/^    partition_desc(const partition_desc&);  \/\/ forbidden$/;"	p	class:partition_desc	access:private	signature:(const partition_desc&)
partition_desc	src/comb/partition-desc.h	/^class partition_desc$/;"	c
partition_desc::OK	src/comb/partition-desc.h	/^    bool OK()  const$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::a_	src/comb/partition-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_desc	access:public
partition_desc::a_	src/comb/partition-desc.h	/^    ulong a_[448];  \/\/ > 2^66 partitions$/;"	m	class:partition_desc	access:public
partition_desc::data	src/comb/partition-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::durfee_n	src/comb/partition-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::first	src/comb/partition-desc.h	/^    void first()$/;"	f	class:partition_desc	access:public	signature:()
partition_desc::first_part	src/comb/partition-desc.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::last	src/comb/partition-desc.h	/^    void last()$/;"	f	class:partition_desc	access:public	signature:()
partition_desc::last_part	src/comb/partition-desc.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::m_	src/comb/partition-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_desc	access:public
partition_desc::n_	src/comb/partition-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_desc	access:public
partition_desc::next	src/comb/partition-desc.h	/^    ulong next()$/;"	f	class:partition_desc	access:public	signature:()
partition_desc::num_parts	src/comb/partition-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::operator =	src/comb/partition-desc.h	/^    partition_desc & operator = (const partition_desc&);  \/\/ forbidden$/;"	p	class:partition_desc	access:private	signature:(const partition_desc&)
partition_desc::partition_desc	src/comb/partition-desc.h	/^    explicit partition_desc(ulong n)$/;"	f	class:partition_desc	access:public	signature:(ulong n)
partition_desc::partition_desc	src/comb/partition-desc.h	/^    partition_desc(const partition_desc&);  \/\/ forbidden$/;"	p	class:partition_desc	access:private	signature:(const partition_desc&)
partition_desc::prev	src/comb/partition-desc.h	/^    ulong prev()$/;"	f	class:partition_desc	access:public	signature:()
partition_desc::print	src/comb/partition-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_desc::print_aa	src/comb/partition-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::print_conj_aa	src/comb/partition-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc	access:public	signature:() const
partition_desc::s_	src/comb/partition-desc.h	/^    ulong s_;  \/\/ position of downstep where we can add 1:$/;"	m	class:partition_desc	access:public
partition_desc::~partition_desc	src/comb/partition-desc.h	/^    ~partition_desc()$/;"	f	class:partition_desc	access:public	signature:()
partition_desc_bb	src/comb/partition-desc-bb.h	/^    explicit partition_desc_bb(ulong n, ulong ba, ulong bm)$/;"	f	class:partition_desc_bb	access:public	signature:(ulong n, ulong ba, ulong bm)
partition_desc_bb	src/comb/partition-desc-bb.h	/^    partition_desc_bb(const partition_desc_bb&);  \/\/ forbidden$/;"	p	class:partition_desc_bb	access:private	signature:(const partition_desc_bb&)
partition_desc_bb	src/comb/partition-desc-bb.h	/^class partition_desc_bb$/;"	c
partition_desc_bb::OK	src/comb/partition-desc-bb.h	/^    bool OK()  const$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::a_	src/comb/partition-desc-bb.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::a_	src/comb/partition-desc-bb.h	/^    ulong a_[448];  \/\/ > 2^66 partitions$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::ba_	src/comb/partition-desc-bb.h	/^    ulong ba_;  \/\/ bound for size of parts$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::bm_	src/comb/partition-desc-bb.h	/^    ulong bm_;  \/\/ bound for number of parts$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::data	src/comb/partition-desc-bb.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::durfee_n	src/comb/partition-desc-bb.h	/^    ulong durfee_n()  const$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::first	src/comb/partition-desc-bb.h	/^    bool first()$/;"	f	class:partition_desc_bb	access:public	signature:()
partition_desc_bb::first_part	src/comb/partition-desc-bb.h	/^    ulong first_part()  const  { return a_[1]; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::last_part	src/comb/partition-desc-bb.h	/^    ulong last_part()  const  { return a_[m_]; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::m_	src/comb/partition-desc-bb.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::n_	src/comb/partition-desc-bb.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::next	src/comb/partition-desc-bb.h	/^    ulong next()$/;"	f	class:partition_desc_bb	access:public	signature:()
partition_desc_bb::num_parts	src/comb/partition-desc-bb.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::operator =	src/comb/partition-desc-bb.h	/^    partition_desc_bb & operator = (const partition_desc_bb&);  \/\/ forbidden$/;"	p	class:partition_desc_bb	access:private	signature:(const partition_desc_bb&)
partition_desc_bb::partition_desc_bb	src/comb/partition-desc-bb.h	/^    explicit partition_desc_bb(ulong n, ulong ba, ulong bm)$/;"	f	class:partition_desc_bb	access:public	signature:(ulong n, ulong ba, ulong bm)
partition_desc_bb::partition_desc_bb	src/comb/partition-desc-bb.h	/^    partition_desc_bb(const partition_desc_bb&);  \/\/ forbidden$/;"	p	class:partition_desc_bb	access:private	signature:(const partition_desc_bb&)
partition_desc_bb::print	src/comb/partition-desc-bb.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_desc_bb	access:public	signature:(const char *bla, bool dfz=false) const
partition_desc_bb::print_aa	src/comb/partition-desc-bb.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::print_conj_aa	src/comb/partition-desc-bb.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc_bb	access:public	signature:() const
partition_desc_bb::s_	src/comb/partition-desc-bb.h	/^    ulong s_;  \/\/ position of downstep where we can add 1:$/;"	m	class:partition_desc_bb	access:public
partition_desc_bb::write_tail	src/comb/partition-desc-bb.h	/^    ulong write_tail(ulong j, ulong s)$/;"	f	class:partition_desc_bb	access:private	signature:(ulong j, ulong s)
partition_desc_bb::~partition_desc_bb	src/comb/partition-desc-bb.h	/^    ~partition_desc_bb()$/;"	f	class:partition_desc_bb	access:public	signature:()
partition_desc_conj	src/comb/partition-conj.cc	/^partition_desc_conj(const ulong *a, ulong m, ulong *b)$/;"	f	signature:(const ulong *a, ulong m, ulong *b)
partition_desc_conj	src/comb/partition-conj.h	/^ulong partition_desc_conj(const ulong *a, ulong m, ulong *b);$/;"	p	signature:(const ulong *a, ulong m, ulong *b)
partition_desc_dist_to_odd	src/comb/partition-odd-to-dist.h	/^inline ulong partition_desc_dist_to_odd(const ulong *a, ulong ma, ulong *t)$/;"	f	signature:(const ulong *a, ulong ma, ulong *t)
partition_desc_hook_prod	src/comb/partition-hook-prod.h	/^inline Type partition_desc_hook_prod(const ulong *a, ulong m, ulong *b)$/;"	f	signature:(const ulong *a, ulong m, ulong *b)
partition_desc_is_conj	src/comb/partition-conj.cc	/^partition_desc_is_conj(const ulong *a, ulong ma, const ulong *b=0, ulong mb=0)$/;"	f	signature:(const ulong *a, ulong ma, const ulong *b=0, ulong mb=0)
partition_desc_is_conj	src/comb/partition-conj.h	/^bool partition_desc_is_conj(const ulong *a, ulong ma, const ulong *b, ulong mb);$/;"	p	signature:(const ulong *a, ulong ma, const ulong *b, ulong mb)
partition_desc_is_self_conj	src/comb/partition-conj.cc	/^partition_desc_is_self_conj(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
partition_desc_is_self_conj	src/comb/partition-conj.h	/^bool partition_desc_is_self_conj(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
partition_desc_odd_to_dist	src/comb/partition-odd-to-dist.h	/^inline ulong partition_desc_odd_to_dist(const ulong *a, ulong ma, ulong *t)$/;"	f	signature:(const ulong *a, ulong ma, ulong *t)
partition_dist_asc	src/comb/partition-dist-asc.h	/^    explicit partition_dist_asc(ulong n)$/;"	f	class:partition_dist_asc	access:public	signature:(ulong n)
partition_dist_asc	src/comb/partition-dist-asc.h	/^    partition_dist_asc(const partition_dist_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_asc	access:private	signature:(const partition_dist_asc&)
partition_dist_asc	src/comb/partition-dist-asc.h	/^class partition_dist_asc$/;"	c
partition_dist_asc::OK	src/comb/partition-dist-asc.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc	access:public	signature:() const
partition_dist_asc::a_	src/comb/partition-dist-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc	access:public
partition_dist_asc::data	src/comb/partition-dist-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc	access:public	signature:() const
partition_dist_asc::first	src/comb/partition-dist-asc.h	/^    void first()$/;"	f	class:partition_dist_asc	access:public	signature:()
partition_dist_asc::m_	src/comb/partition-dist-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc	access:public
partition_dist_asc::n_	src/comb/partition-dist-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc	access:public
partition_dist_asc::next	src/comb/partition-dist-asc.h	/^    ulong next()$/;"	f	class:partition_dist_asc	access:public	signature:()
partition_dist_asc::num_parts	src/comb/partition-dist-asc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc	access:public	signature:() const
partition_dist_asc::operator =	src/comb/partition-dist-asc.h	/^    partition_dist_asc & operator = (const partition_dist_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_asc	access:private	signature:(const partition_dist_asc&)
partition_dist_asc::partition_dist_asc	src/comb/partition-dist-asc.h	/^    explicit partition_dist_asc(ulong n)$/;"	f	class:partition_dist_asc	access:public	signature:(ulong n)
partition_dist_asc::partition_dist_asc	src/comb/partition-dist-asc.h	/^    partition_dist_asc(const partition_dist_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_asc	access:private	signature:(const partition_dist_asc&)
partition_dist_asc::print	src/comb/partition-dist-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_dist_asc::~partition_dist_asc	src/comb/partition-dist-asc.h	/^    ~partition_dist_asc()$/;"	f	class:partition_dist_asc	access:public	signature:()
partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    explicit partition_dist_asc_len(ulong n)$/;"	f	class:partition_dist_asc_len	access:public	signature:(ulong n)
partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    partition_dist_asc_len(const partition_dist_asc_len&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_len	access:private	signature:(const partition_dist_asc_len&)
partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^class partition_dist_asc_len$/;"	c
partition_dist_asc_len::OK	src/comb/partition-dist-asc-len.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
partition_dist_asc_len::a_	src/comb/partition-dist-asc-len.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc_len	access:public
partition_dist_asc_len::data	src/comb/partition-dist-asc-len.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
partition_dist_asc_len::first	src/comb/partition-dist-asc-len.h	/^    bool first(ulong m=1)$/;"	f	class:partition_dist_asc_len	access:public	signature:(ulong m=1)
partition_dist_asc_len::m_	src/comb/partition-dist-asc-len.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc_len	access:public
partition_dist_asc_len::max_num_parts	src/comb/partition-dist-asc-len.h	/^    ulong max_num_parts()  const  {  return mm_; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
partition_dist_asc_len::mm_	src/comb/partition-dist-asc-len.h	/^    ulong mm_;   \/\/ max number of parts$/;"	m	class:partition_dist_asc_len	access:public
partition_dist_asc_len::n_	src/comb/partition-dist-asc-len.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc_len	access:public
partition_dist_asc_len::next	src/comb/partition-dist-asc-len.h	/^    ulong next()$/;"	f	class:partition_dist_asc_len	access:public	signature:()
partition_dist_asc_len::num_parts	src/comb/partition-dist-asc-len.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc_len	access:public	signature:() const
partition_dist_asc_len::operator =	src/comb/partition-dist-asc-len.h	/^    partition_dist_asc_len & operator = (const partition_dist_asc_len&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_len	access:private	signature:(const partition_dist_asc_len&)
partition_dist_asc_len::partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    explicit partition_dist_asc_len(ulong n)$/;"	f	class:partition_dist_asc_len	access:public	signature:(ulong n)
partition_dist_asc_len::partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    partition_dist_asc_len(const partition_dist_asc_len&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_len	access:private	signature:(const partition_dist_asc_len&)
partition_dist_asc_len::print	src/comb/partition-dist-asc-len.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc_len	access:public	signature:(const char *bla, bool dfz=false) const
partition_dist_asc_len::~partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    ~partition_dist_asc_len()$/;"	f	class:partition_dist_asc_len	access:public	signature:()
partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    explicit partition_dist_asc_subset_lex(ulong n)$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:(ulong n)
partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    partition_dist_asc_subset_lex(const partition_dist_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_subset_lex	access:private	signature:(const partition_dist_asc_subset_lex&)
partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^class partition_dist_asc_subset_lex$/;"	c
partition_dist_asc_subset_lex::OK	src/comb/partition-dist-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
partition_dist_asc_subset_lex::a_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_asc_subset_lex	access:public
partition_dist_asc_subset_lex::data	src/comb/partition-dist-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
partition_dist_asc_subset_lex::first	src/comb/partition-dist-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
partition_dist_asc_subset_lex::m_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_asc_subset_lex	access:public
partition_dist_asc_subset_lex::n_	src/comb/partition-dist-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_asc_subset_lex	access:public
partition_dist_asc_subset_lex::next	src/comb/partition-dist-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
partition_dist_asc_subset_lex::num_parts	src/comb/partition-dist-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:() const
partition_dist_asc_subset_lex::operator =	src/comb/partition-dist-asc-subset-lex.h	/^    partition_dist_asc_subset_lex & operator = (const partition_dist_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_subset_lex	access:private	signature:(const partition_dist_asc_subset_lex&)
partition_dist_asc_subset_lex::partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    explicit partition_dist_asc_subset_lex(ulong n)$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:(ulong n)
partition_dist_asc_subset_lex::partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    partition_dist_asc_subset_lex(const partition_dist_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_dist_asc_subset_lex	access:private	signature:(const partition_dist_asc_subset_lex&)
partition_dist_asc_subset_lex::print	src/comb/partition-dist-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
partition_dist_asc_subset_lex::~partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    ~partition_dist_asc_subset_lex()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    explicit partition_dist_d_asc(ulong n, ulong d)$/;"	f	class:partition_dist_d_asc	access:public	signature:(ulong n, ulong d)
partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    partition_dist_d_asc(const partition_dist_d_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_d_asc	access:private	signature:(const partition_dist_d_asc&)
partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^class partition_dist_d_asc$/;"	c
partition_dist_d_asc::OK	src/comb/partition-dist-d-asc.h	/^    bool OK()  const$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
partition_dist_d_asc::a_	src/comb/partition-dist-d-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_d_asc	access:public
partition_dist_d_asc::d_	src/comb/partition-dist-d-asc.h	/^    ulong d_;   \/\/ minimal difference of parts$/;"	m	class:partition_dist_d_asc	access:public
partition_dist_d_asc::data	src/comb/partition-dist-d-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
partition_dist_d_asc::first	src/comb/partition-dist-d-asc.h	/^    void first()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
partition_dist_d_asc::m_	src/comb/partition-dist-d-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_dist_d_asc	access:public
partition_dist_d_asc::n_	src/comb/partition-dist-d-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_dist_d_asc	access:public
partition_dist_d_asc::next	src/comb/partition-dist-d-asc.h	/^    ulong next()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
partition_dist_d_asc::num_parts	src/comb/partition-dist-d-asc.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_dist_d_asc	access:public	signature:() const
partition_dist_d_asc::operator =	src/comb/partition-dist-d-asc.h	/^    partition_dist_d_asc & operator = (const partition_dist_d_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_d_asc	access:private	signature:(const partition_dist_d_asc&)
partition_dist_d_asc::partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    explicit partition_dist_d_asc(ulong n, ulong d)$/;"	f	class:partition_dist_d_asc	access:public	signature:(ulong n, ulong d)
partition_dist_d_asc::partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    partition_dist_d_asc(const partition_dist_d_asc&);  \/\/ forbidden$/;"	p	class:partition_dist_d_asc	access:private	signature:(const partition_dist_d_asc&)
partition_dist_d_asc::print	src/comb/partition-dist-d-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_d_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_dist_d_asc::~partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    ~partition_dist_d_asc()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
partition_dist_desc	src/comb/partition-dist-desc.h	/^    explicit partition_dist_desc(ulong n)$/;"	f	class:partition_dist_desc	access:public	signature:(ulong n)
partition_dist_desc	src/comb/partition-dist-desc.h	/^    partition_dist_desc(const partition_dist_desc&);  \/\/ forbidden$/;"	p	class:partition_dist_desc	access:private	signature:(const partition_dist_desc&)
partition_dist_desc	src/comb/partition-dist-desc.h	/^class partition_dist_desc$/;"	c
partition_dist_desc::OK	src/comb/partition-dist-desc.h	/^    bool OK()  const$/;"	f	class:partition_dist_desc	access:public	signature:() const
partition_dist_desc::a_	src/comb/partition-dist-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_dist_desc	access:public
partition_dist_desc::data	src/comb/partition-dist-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_dist_desc	access:public	signature:() const
partition_dist_desc::first	src/comb/partition-dist-desc.h	/^    void first()$/;"	f	class:partition_dist_desc	access:public	signature:()
partition_dist_desc::first_partition	src/comb/partition-dist-desc.h	/^    ulong first_partition(ulong s, ulong j)$/;"	f	class:partition_dist_desc	access:private	signature:(ulong s, ulong j)
partition_dist_desc::m_	src/comb/partition-dist-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_dist_desc	access:public
partition_dist_desc::n1_	src/comb/partition-dist-desc.h	/^    ulong n1_;  \/\/ number of elements in first partition ( == floor((sqrt(1+8*n)-1)\/2) )$/;"	m	class:partition_dist_desc	access:public
partition_dist_desc::n_	src/comb/partition-dist-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_dist_desc	access:public
partition_dist_desc::next	src/comb/partition-dist-desc.h	/^    ulong next()$/;"	f	class:partition_dist_desc	access:public	signature:()
partition_dist_desc::num_parts	src/comb/partition-dist-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_dist_desc	access:public	signature:() const
partition_dist_desc::num_tr_le	src/comb/partition-dist-desc.h	/^    ulong num_tr_le(ulong s, ulong &tr)$/;"	f	class:partition_dist_desc	access:private	signature:(ulong s, ulong &tr)
partition_dist_desc::operator =	src/comb/partition-dist-desc.h	/^    partition_dist_desc & operator = (const partition_dist_desc&);  \/\/ forbidden$/;"	p	class:partition_dist_desc	access:private	signature:(const partition_dist_desc&)
partition_dist_desc::partition_dist_desc	src/comb/partition-dist-desc.h	/^    explicit partition_dist_desc(ulong n)$/;"	f	class:partition_dist_desc	access:public	signature:(ulong n)
partition_dist_desc::partition_dist_desc	src/comb/partition-dist-desc.h	/^    partition_dist_desc(const partition_dist_desc&);  \/\/ forbidden$/;"	p	class:partition_dist_desc	access:private	signature:(const partition_dist_desc&)
partition_dist_desc::print	src/comb/partition-dist-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_dist_desc::~partition_dist_desc	src/comb/partition-dist-desc.h	/^    ~partition_dist_desc()$/;"	f	class:partition_dist_desc	access:public	signature:()
partition_gen	src/comb/partition-gen.h	/^    explicit partition_gen(ulong x, ulong n=0, const ulong *pv=0)$/;"	f	class:partition_gen	access:public	signature:(ulong x, ulong n=0, const ulong *pv=0)
partition_gen	src/comb/partition-gen.h	/^    partition_gen(const partition_gen&);  \/\/ forbidden$/;"	p	class:partition_gen	access:private	signature:(const partition_gen&)
partition_gen	src/comb/partition-gen.h	/^class partition_gen$/;"	c
partition_gen::check	src/comb/partition-gen.cc	/^partition_gen::check(ulong i\/*=0*\/)  const$/;"	f	class:partition_gen	signature:(ulong i ) const
partition_gen::check	src/comb/partition-gen.h	/^    bool check(ulong i=0)  const;$/;"	p	class:partition_gen	access:public	signature:(ulong i=0) const
partition_gen::count	src/comb/partition-gen.cc	/^partition_gen::count(ulong x)$/;"	f	class:partition_gen	signature:(ulong x)
partition_gen::count	src/comb/partition-gen.h	/^    ulong count(ulong x);  \/\/ count number of partitions$/;"	p	class:partition_gen	access:public	signature:(ulong x)
partition_gen::count_func	src/comb/partition-gen.cc	/^partition_gen::count_func(ulong i)$/;"	f	class:partition_gen	signature:(ulong i)
partition_gen::count_func	src/comb/partition-gen.h	/^    ulong count_func(ulong i);  \/\/ aux$/;"	p	class:partition_gen	access:public	signature:(ulong i)
partition_gen::ct_	src/comb/partition-gen.h	/^    ulong ct_;  \/\/ Number of partitions found so far$/;"	m	class:partition_gen	access:public
partition_gen::first	src/comb/partition-gen.h	/^    void first(ulong x)$/;"	f	class:partition_gen	access:public	signature:(ulong x)
partition_gen::i_	src/comb/partition-gen.h	/^    ulong i_;   \/\/ level in iterative search$/;"	m	class:partition_gen	access:public
partition_gen::n_	src/comb/partition-gen.h	/^    ulong n_;   \/\/ Number of values$/;"	m	class:partition_gen	access:public
partition_gen::next	src/comb/partition-gen.cc	/^partition_gen::next()$/;"	f	class:partition_gen	signature:()
partition_gen::next	src/comb/partition-gen.h	/^    ulong next();  \/\/ generate next partition$/;"	p	class:partition_gen	access:public	signature:()
partition_gen::next_func	src/comb/partition-gen.cc	/^partition_gen::next_func(ulong i)$/;"	f	class:partition_gen	signature:(ulong i)
partition_gen::next_func	src/comb/partition-gen.h	/^    ulong next_func(ulong i);  \/\/ aux$/;"	p	class:partition_gen	access:public	signature:(ulong i)
partition_gen::operator =	src/comb/partition-gen.h	/^    partition_gen & operator = (const partition_gen&);  \/\/ forbidden$/;"	p	class:partition_gen	access:private	signature:(const partition_gen&)
partition_gen::partition_gen	src/comb/partition-gen.h	/^    explicit partition_gen(ulong x, ulong n=0, const ulong *pv=0)$/;"	f	class:partition_gen	access:public	signature:(ulong x, ulong n=0, const ulong *pv=0)
partition_gen::partition_gen	src/comb/partition-gen.h	/^    partition_gen(const partition_gen&);  \/\/ forbidden$/;"	p	class:partition_gen	access:private	signature:(const partition_gen&)
partition_gen::pc_	src/comb/partition-gen.h	/^    ulong *pc_;  \/\/ multipliers for values$/;"	m	class:partition_gen	access:public
partition_gen::pci_	src/comb/partition-gen.h	/^    ulong pci_;  \/\/ temporary for pc_[i_]$/;"	m	class:partition_gen	access:public
partition_gen::print	src/comb/partition-gen.cc	/^partition_gen::print()  const$/;"	f	class:partition_gen	signature:() const
partition_gen::print	src/comb/partition-gen.h	/^    void print()  const;$/;"	p	class:partition_gen	access:public	signature:() const
partition_gen::print2	src/comb/partition-gen.cc	/^partition_gen::print2()  const$/;"	f	class:partition_gen	signature:() const
partition_gen::print2	src/comb/partition-gen.h	/^    void print2()  const;$/;"	p	class:partition_gen	access:public	signature:() const
partition_gen::pv_	src/comb/partition-gen.h	/^    ulong *pv_;  \/\/ values into which to partition$/;"	m	class:partition_gen	access:public
partition_gen::r_	src/comb/partition-gen.h	/^    ulong *r_;   \/\/ rest$/;"	m	class:partition_gen	access:public
partition_gen::ri_	src/comb/partition-gen.h	/^    ulong ri_;   \/\/ temporary for r_[i_]$/;"	m	class:partition_gen	access:public
partition_gen::x_	src/comb/partition-gen.h	/^    ulong x_;    \/\/ value to partition$/;"	m	class:partition_gen	access:public
partition_gen::~partition_gen	src/comb/partition-gen.h	/^    ~partition_gen()$/;"	f	class:partition_gen	access:public	signature:()
partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    explicit partition_nonsquashing_desc(ulong n, bool sd=false)$/;"	f	class:partition_nonsquashing_desc	access:public	signature:(ulong n, bool sd=false)
partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    partition_nonsquashing_desc(const partition_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_nonsquashing_desc	access:private	signature:(const partition_nonsquashing_desc&)
partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^class partition_nonsquashing_desc$/;"	c
partition_nonsquashing_desc::OK	src/comb/partition-nonsquashing-desc.h	/^    bool OK()  const$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
partition_nonsquashing_desc::a_	src/comb/partition-nonsquashing-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_nonsquashing_desc	access:public
partition_nonsquashing_desc::data	src/comb/partition-nonsquashing-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
partition_nonsquashing_desc::first	src/comb/partition-nonsquashing-desc.h	/^    void first()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
partition_nonsquashing_desc::m_	src/comb/partition-nonsquashing-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_nonsquashing_desc	access:public
partition_nonsquashing_desc::n_	src/comb/partition-nonsquashing-desc.h	/^    ulong n_;   \/\/ non-squashing integer partition of n$/;"	m	class:partition_nonsquashing_desc	access:public
partition_nonsquashing_desc::next	src/comb/partition-nonsquashing-desc.h	/^    ulong next()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
partition_nonsquashing_desc::num_parts	src/comb/partition-nonsquashing-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
partition_nonsquashing_desc::operator =	src/comb/partition-nonsquashing-desc.h	/^    partition_nonsquashing_desc & operator = (const partition_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_nonsquashing_desc	access:private	signature:(const partition_nonsquashing_desc&)
partition_nonsquashing_desc::partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    explicit partition_nonsquashing_desc(ulong n, bool sd=false)$/;"	f	class:partition_nonsquashing_desc	access:public	signature:(ulong n, bool sd=false)
partition_nonsquashing_desc::partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    partition_nonsquashing_desc(const partition_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_nonsquashing_desc	access:private	signature:(const partition_nonsquashing_desc&)
partition_nonsquashing_desc::print	src/comb/partition-nonsquashing-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_nonsquashing_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_nonsquashing_desc::print_aa	src/comb/partition-nonsquashing-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
partition_nonsquashing_desc::print_conj_aa	src/comb/partition-nonsquashing-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
partition_nonsquashing_desc::sd_	src/comb/partition-nonsquashing-desc.h	/^    ulong sd_;  \/\/ whether strongly decreasing (otherwise non-squashing)$/;"	m	class:partition_nonsquashing_desc	access:public
partition_nonsquashing_desc::write_tail	src/comb/partition-nonsquashing-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_nonsquashing_desc	access:private	signature:(ulong s, ulong j)
partition_nonsquashing_desc::~partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    ~partition_nonsquashing_desc()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
partition_odd_asc	src/comb/partition-odd-asc.h	/^    explicit partition_odd_asc(ulong n)$/;"	f	class:partition_odd_asc	access:public	signature:(ulong n)
partition_odd_asc	src/comb/partition-odd-asc.h	/^    partition_odd_asc(const partition_odd_asc&);  \/\/ forbidden$/;"	p	class:partition_odd_asc	access:private	signature:(const partition_odd_asc&)
partition_odd_asc	src/comb/partition-odd-asc.h	/^class partition_odd_asc$/;"	c
partition_odd_asc::OK	src/comb/partition-odd-asc.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc	access:public	signature:() const
partition_odd_asc::a_	src/comb/partition-odd-asc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc	access:public
partition_odd_asc::data	src/comb/partition-odd-asc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc	access:public	signature:() const
partition_odd_asc::first	src/comb/partition-odd-asc.h	/^    void first()$/;"	f	class:partition_odd_asc	access:public	signature:()
partition_odd_asc::m_	src/comb/partition-odd-asc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc	access:public
partition_odd_asc::n_	src/comb/partition-odd-asc.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc	access:public
partition_odd_asc::next	src/comb/partition-odd-asc.h	/^    ulong next()$/;"	f	class:partition_odd_asc	access:public	signature:()
partition_odd_asc::num_parts	src/comb/partition-odd-asc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_asc	access:public	signature:() const
partition_odd_asc::operator =	src/comb/partition-odd-asc.h	/^    partition_odd_asc & operator = (const partition_odd_asc&);  \/\/ forbidden$/;"	p	class:partition_odd_asc	access:private	signature:(const partition_odd_asc&)
partition_odd_asc::partition_odd_asc	src/comb/partition-odd-asc.h	/^    explicit partition_odd_asc(ulong n)$/;"	f	class:partition_odd_asc	access:public	signature:(ulong n)
partition_odd_asc::partition_odd_asc	src/comb/partition-odd-asc.h	/^    partition_odd_asc(const partition_odd_asc&);  \/\/ forbidden$/;"	p	class:partition_odd_asc	access:private	signature:(const partition_odd_asc&)
partition_odd_asc::print	src/comb/partition-odd-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc	access:public	signature:(const char *bla, bool dfz=false) const
partition_odd_asc::~partition_odd_asc	src/comb/partition-odd-asc.h	/^    ~partition_odd_asc()$/;"	f	class:partition_odd_asc	access:public	signature:()
partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    explicit partition_odd_asc_subset_lex(ulong n)$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:(ulong n)
partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    partition_odd_asc_subset_lex(const partition_odd_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex	access:private	signature:(const partition_odd_asc_subset_lex&)
partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^class partition_odd_asc_subset_lex$/;"	c
partition_odd_asc_subset_lex::OK	src/comb/partition-odd-asc-subset-lex.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
partition_odd_asc_subset_lex::a_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc_subset_lex	access:public
partition_odd_asc_subset_lex::a_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong a_[1000]; \/\/ > 10^21$/;"	m	class:partition_odd_asc_subset_lex	access:public
partition_odd_asc_subset_lex::data	src/comb/partition-odd-asc-subset-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
partition_odd_asc_subset_lex::first	src/comb/partition-odd-asc-subset-lex.h	/^    void first()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
partition_odd_asc_subset_lex::first_part	src/comb/partition-odd-asc-subset-lex.h	/^    ulong first_part()  const  {  return a_[1]; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
partition_odd_asc_subset_lex::last_part	src/comb/partition-odd-asc-subset-lex.h	/^    ulong last_part()  const  {  return a_[m_]; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
partition_odd_asc_subset_lex::m_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc_subset_lex	access:public
partition_odd_asc_subset_lex::n_	src/comb/partition-odd-asc-subset-lex.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc_subset_lex	access:public
partition_odd_asc_subset_lex::next	src/comb/partition-odd-asc-subset-lex.h	/^    ulong next()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
partition_odd_asc_subset_lex::num_parts	src/comb/partition-odd-asc-subset-lex.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:() const
partition_odd_asc_subset_lex::operator =	src/comb/partition-odd-asc-subset-lex.h	/^    partition_odd_asc_subset_lex & operator = (const partition_odd_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex	access:private	signature:(const partition_odd_asc_subset_lex&)
partition_odd_asc_subset_lex::partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    explicit partition_odd_asc_subset_lex(ulong n)$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:(ulong n)
partition_odd_asc_subset_lex::partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    partition_odd_asc_subset_lex(const partition_odd_asc_subset_lex&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex	access:private	signature:(const partition_odd_asc_subset_lex&)
partition_odd_asc_subset_lex::print	src/comb/partition-odd-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
partition_odd_asc_subset_lex::~partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    ~partition_odd_asc_subset_lex()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    explicit partition_odd_asc_subset_lex_csh(ulong n)$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:(ulong n)
partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    partition_odd_asc_subset_lex_csh(const partition_odd_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex_csh	access:private	signature:(const partition_odd_asc_subset_lex_csh&)
partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^class partition_odd_asc_subset_lex_csh$/;"	c
partition_odd_asc_subset_lex_csh::OK	src/comb/partition-odd-asc-subset-lex-csh.h	/^    bool OK()  const$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
partition_odd_asc_subset_lex_csh::a_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
partition_odd_asc_subset_lex_csh::a_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong a_[1000]; \/\/ > 10^21$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
partition_odd_asc_subset_lex_csh::data	src/comb/partition-odd-asc-subset-lex-csh.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
partition_odd_asc_subset_lex_csh::first	src/comb/partition-odd-asc-subset-lex-csh.h	/^    void first()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
partition_odd_asc_subset_lex_csh::first_part	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong first_part()  const  {  return a_[1]; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
partition_odd_asc_subset_lex_csh::last_part	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong last_part()  const  {  return a_[m_]; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
partition_odd_asc_subset_lex_csh::m_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
partition_odd_asc_subset_lex_csh::n_	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong n_;   \/\/ integer partitions of n$/;"	m	class:partition_odd_asc_subset_lex_csh	access:public
partition_odd_asc_subset_lex_csh::next	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong next()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
partition_odd_asc_subset_lex_csh::num_parts	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ulong num_parts()  const  {  return m_; }$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:() const
partition_odd_asc_subset_lex_csh::operator =	src/comb/partition-odd-asc-subset-lex-csh.h	/^    partition_odd_asc_subset_lex_csh & operator = (const partition_odd_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex_csh	access:private	signature:(const partition_odd_asc_subset_lex_csh&)
partition_odd_asc_subset_lex_csh::partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    explicit partition_odd_asc_subset_lex_csh(ulong n)$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:(ulong n)
partition_odd_asc_subset_lex_csh::partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    partition_odd_asc_subset_lex_csh(const partition_odd_asc_subset_lex_csh&);  \/\/ forbidden$/;"	p	class:partition_odd_asc_subset_lex_csh	access:private	signature:(const partition_odd_asc_subset_lex_csh&)
partition_odd_asc_subset_lex_csh::print	src/comb/partition-odd-asc-subset-lex-csh.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:(const char *bla, bool dfz=false) const
partition_odd_asc_subset_lex_csh::~partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ~partition_odd_asc_subset_lex_csh()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
partition_odd_desc	src/comb/partition-odd-desc.h	/^    explicit partition_odd_desc(ulong n)$/;"	f	class:partition_odd_desc	access:public	signature:(ulong n)
partition_odd_desc	src/comb/partition-odd-desc.h	/^    partition_odd_desc(const partition_odd_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_desc	access:private	signature:(const partition_odd_desc&)
partition_odd_desc	src/comb/partition-odd-desc.h	/^class partition_odd_desc$/;"	c
partition_odd_desc::OK	src/comb/partition-odd-desc.h	/^    bool OK()  const$/;"	f	class:partition_odd_desc	access:public	signature:() const
partition_odd_desc::a_	src/comb/partition-odd-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_desc	access:public
partition_odd_desc::data	src/comb/partition-odd-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_desc	access:public	signature:() const
partition_odd_desc::durfee_n	src/comb/partition-odd-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_odd_desc	access:public	signature:() const
partition_odd_desc::first	src/comb/partition-odd-desc.h	/^    void first()$/;"	f	class:partition_odd_desc	access:public	signature:()
partition_odd_desc::m_	src/comb/partition-odd-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_odd_desc	access:public
partition_odd_desc::n_	src/comb/partition-odd-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_odd_desc	access:public
partition_odd_desc::next	src/comb/partition-odd-desc.h	/^    ulong next()$/;"	f	class:partition_odd_desc	access:public	signature:()
partition_odd_desc::num_parts	src/comb/partition-odd-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_desc	access:public	signature:() const
partition_odd_desc::operator =	src/comb/partition-odd-desc.h	/^    partition_odd_desc & operator = (const partition_odd_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_desc	access:private	signature:(const partition_odd_desc&)
partition_odd_desc::partition_odd_desc	src/comb/partition-odd-desc.h	/^    explicit partition_odd_desc(ulong n)$/;"	f	class:partition_odd_desc	access:public	signature:(ulong n)
partition_odd_desc::partition_odd_desc	src/comb/partition-odd-desc.h	/^    partition_odd_desc(const partition_odd_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_desc	access:private	signature:(const partition_odd_desc&)
partition_odd_desc::print	src/comb/partition-odd-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_odd_desc::s_	src/comb/partition-odd-desc.h	/^    ulong s_;  \/\/ position of downstep where we can add 2:$/;"	m	class:partition_odd_desc	access:public
partition_odd_desc::~partition_odd_desc	src/comb/partition-odd-desc.h	/^    ~partition_odd_desc()$/;"	f	class:partition_odd_desc	access:public	signature:()
partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    explicit partition_odd_nonsquashing_desc(ulong n)$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:(ulong n)
partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    partition_odd_nonsquashing_desc(const partition_odd_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_nonsquashing_desc	access:private	signature:(const partition_odd_nonsquashing_desc&)
partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^class partition_odd_nonsquashing_desc$/;"	c
partition_odd_nonsquashing_desc::OK	src/comb/partition-odd-nonsquashing-desc.h	/^    bool OK()  const$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
partition_odd_nonsquashing_desc::a_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_odd_nonsquashing_desc	access:public
partition_odd_nonsquashing_desc::data	src/comb/partition-odd-nonsquashing-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
partition_odd_nonsquashing_desc::first	src/comb/partition-odd-nonsquashing-desc.h	/^    void first()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
partition_odd_nonsquashing_desc::m_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_odd_nonsquashing_desc	access:public
partition_odd_nonsquashing_desc::n_	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong n_;   \/\/ non-squashing integer partition of n$/;"	m	class:partition_odd_nonsquashing_desc	access:public
partition_odd_nonsquashing_desc::next	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong next()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
partition_odd_nonsquashing_desc::num_parts	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:() const
partition_odd_nonsquashing_desc::operator =	src/comb/partition-odd-nonsquashing-desc.h	/^    partition_odd_nonsquashing_desc & operator = (const partition_odd_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_nonsquashing_desc	access:private	signature:(const partition_odd_nonsquashing_desc&)
partition_odd_nonsquashing_desc::partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    explicit partition_odd_nonsquashing_desc(ulong n)$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:(ulong n)
partition_odd_nonsquashing_desc::partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    partition_odd_nonsquashing_desc(const partition_odd_nonsquashing_desc&);  \/\/ forbidden$/;"	p	class:partition_odd_nonsquashing_desc	access:private	signature:(const partition_odd_nonsquashing_desc&)
partition_odd_nonsquashing_desc::print	src/comb/partition-odd-nonsquashing-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_odd_nonsquashing_desc::write_tail	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_odd_nonsquashing_desc	access:private	signature:(ulong s, ulong j)
partition_odd_nonsquashing_desc::~partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    ~partition_odd_nonsquashing_desc()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    explicit partition_rgs_lex(ulong n)$/;"	f	class:partition_rgs_lex	access:public	signature:(ulong n)
partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    partition_rgs_lex(const partition_rgs_lex&);  \/\/ forbidden$/;"	p	class:partition_rgs_lex	access:private	signature:(const partition_rgs_lex&)
partition_rgs_lex	src/comb/partition-rgs-lex.h	/^class partition_rgs_lex$/;"	c
partition_rgs_lex::OK	src/comb/partition-rgs-lex.h	/^    bool OK()  const$/;"	f	class:partition_rgs_lex	access:public	signature:() const
partition_rgs_lex::a_	src/comb/partition-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:partition_rgs_lex	access:public
partition_rgs_lex::data	src/comb/partition-rgs-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:partition_rgs_lex	access:public	signature:() const
partition_rgs_lex::first	src/comb/partition-rgs-lex.h	/^    void first()$/;"	f	class:partition_rgs_lex	access:public	signature:()
partition_rgs_lex::n_	src/comb/partition-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:partition_rgs_lex	access:public
partition_rgs_lex::next	src/comb/partition-rgs-lex.h	/^    ulong next()$/;"	f	class:partition_rgs_lex	access:public	signature:()
partition_rgs_lex::operator =	src/comb/partition-rgs-lex.h	/^    partition_rgs_lex & operator = (const partition_rgs_lex&);  \/\/ forbidden$/;"	p	class:partition_rgs_lex	access:private	signature:(const partition_rgs_lex&)
partition_rgs_lex::partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    explicit partition_rgs_lex(ulong n)$/;"	f	class:partition_rgs_lex	access:public	signature:(ulong n)
partition_rgs_lex::partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    partition_rgs_lex(const partition_rgs_lex&);  \/\/ forbidden$/;"	p	class:partition_rgs_lex	access:private	signature:(const partition_rgs_lex&)
partition_rgs_lex::print	src/comb/partition-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:partition_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
partition_rgs_lex::print_partition	src/comb/partition-rgs-lex.cc	/^partition_rgs_lex::print_partition(const char *bla)  const$/;"	f	class:partition_rgs_lex	signature:(const char *bla) const
partition_rgs_lex::print_partition	src/comb/partition-rgs-lex.h	/^    void print_partition(const char *bla)  const;$/;"	p	class:partition_rgs_lex	access:public	signature:(const char *bla) const
partition_rgs_lex::print_sym	src/comb/partition-rgs-lex.h	/^    void print_sym(const char *bla)  const$/;"	f	class:partition_rgs_lex	access:public	signature:(const char *bla) const
partition_rgs_lex::st_	src/comb/partition-rgs-lex.h	/^    ulong *st_; \/\/ stats (a partition of n)$/;"	m	class:partition_rgs_lex	access:public
partition_rgs_lex::~partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    ~partition_rgs_lex()$/;"	f	class:partition_rgs_lex	access:public	signature:()
partition_s_desc	src/comb/partition-s-desc.h	/^    explicit partition_s_desc(ulong n)$/;"	f	class:partition_s_desc	access:public	signature:(ulong n)
partition_s_desc	src/comb/partition-s-desc.h	/^    partition_s_desc(const partition_s_desc&);  \/\/ forbidden$/;"	p	class:partition_s_desc	access:private	signature:(const partition_s_desc&)
partition_s_desc	src/comb/partition-s-desc.h	/^class partition_s_desc$/;"	c
partition_s_desc::OK	src/comb/partition-s-desc.h	/^    bool OK()  const$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::a_	src/comb/partition-s-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_s_desc	access:public
partition_s_desc::data	src/comb/partition-s-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::durfee_n	src/comb/partition-s-desc.h	/^    ulong durfee_n()  const$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::first	src/comb/partition-s-desc.h	/^    void first()$/;"	f	class:partition_s_desc	access:public	signature:()
partition_s_desc::m_	src/comb/partition-s-desc.h	/^    ulong m_;  \/\/ current partition has m parts$/;"	m	class:partition_s_desc	access:public
partition_s_desc::n_	src/comb/partition-s-desc.h	/^    ulong n_;  \/\/ integer partitions of n$/;"	m	class:partition_s_desc	access:public
partition_s_desc::next	src/comb/partition-s-desc.h	/^    ulong next()$/;"	f	class:partition_s_desc	access:public	signature:()
partition_s_desc::num_parts	src/comb/partition-s-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::operator =	src/comb/partition-s-desc.h	/^    partition_s_desc & operator = (const partition_s_desc&);  \/\/ forbidden$/;"	p	class:partition_s_desc	access:private	signature:(const partition_s_desc&)
partition_s_desc::partition_s_desc	src/comb/partition-s-desc.h	/^    explicit partition_s_desc(ulong n)$/;"	f	class:partition_s_desc	access:public	signature:(ulong n)
partition_s_desc::partition_s_desc	src/comb/partition-s-desc.h	/^    partition_s_desc(const partition_s_desc&);  \/\/ forbidden$/;"	p	class:partition_s_desc	access:private	signature:(const partition_s_desc&)
partition_s_desc::print	src/comb/partition-s-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_s_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_s_desc::print_aa	src/comb/partition-s-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::print_conj_aa	src/comb/partition-s-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_s_desc	access:public	signature:() const
partition_s_desc::s_	src/comb/partition-s-desc.h	/^    ulong s_;    \/\/ position of downstep where we can add 1:$/;"	m	class:partition_s_desc	access:public
partition_s_desc::~partition_s_desc	src/comb/partition-s-desc.h	/^    ~partition_s_desc()$/;"	f	class:partition_s_desc	access:public	signature:()
partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    explicit partition_strongly_decr_desc(ulong n)$/;"	f	class:partition_strongly_decr_desc	access:public	signature:(ulong n)
partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    partition_strongly_decr_desc(const partition_strongly_decr_desc&);  \/\/ forbidden$/;"	p	class:partition_strongly_decr_desc	access:private	signature:(const partition_strongly_decr_desc&)
partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^class partition_strongly_decr_desc$/;"	c
partition_strongly_decr_desc::OK	src/comb/partition-strongly-decr-desc.h	/^    bool OK()  const$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
partition_strongly_decr_desc::a_	src/comb/partition-strongly-decr-desc.h	/^    ulong *a_;  \/\/ partition: a[1] + a[2] + ... + a[m] = n$/;"	m	class:partition_strongly_decr_desc	access:public
partition_strongly_decr_desc::data	src/comb/partition-strongly-decr-desc.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
partition_strongly_decr_desc::first	src/comb/partition-strongly-decr-desc.h	/^    void first()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
partition_strongly_decr_desc::m_	src/comb/partition-strongly-decr-desc.h	/^    ulong m_;   \/\/ current partition has m parts$/;"	m	class:partition_strongly_decr_desc	access:public
partition_strongly_decr_desc::n_	src/comb/partition-strongly-decr-desc.h	/^    ulong n_;   \/\/ strongly decreasing integer partition of n$/;"	m	class:partition_strongly_decr_desc	access:public
partition_strongly_decr_desc::next	src/comb/partition-strongly-decr-desc.h	/^    ulong next()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
partition_strongly_decr_desc::num_parts	src/comb/partition-strongly-decr-desc.h	/^    ulong num_parts()  const  { return m_; }$/;"	f	class:partition_strongly_decr_desc	access:public	signature:() const
partition_strongly_decr_desc::operator =	src/comb/partition-strongly-decr-desc.h	/^    partition_strongly_decr_desc & operator = (const partition_strongly_decr_desc&);  \/\/ forbidden$/;"	p	class:partition_strongly_decr_desc	access:private	signature:(const partition_strongly_decr_desc&)
partition_strongly_decr_desc::partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    explicit partition_strongly_decr_desc(ulong n)$/;"	f	class:partition_strongly_decr_desc	access:public	signature:(ulong n)
partition_strongly_decr_desc::partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    partition_strongly_decr_desc(const partition_strongly_decr_desc&);  \/\/ forbidden$/;"	p	class:partition_strongly_decr_desc	access:private	signature:(const partition_strongly_decr_desc&)
partition_strongly_decr_desc::print	src/comb/partition-strongly-decr-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_strongly_decr_desc	access:public	signature:(const char *bla, bool dfz=false) const
partition_strongly_decr_desc::write_tail	src/comb/partition-strongly-decr-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_strongly_decr_desc	access:private	signature:(ulong s, ulong j)
partition_strongly_decr_desc::~partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    ~partition_strongly_decr_desc()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
path_is_cycle	src/graph/attic/debruijngraph.h	/^    bool path_is_cycle()  const$/;"	f	class:debruijn_cycles	access:public	signature:() const
path_is_cycle	src/graph/digraph-paths.cc	/^digraph_paths::path_is_cycle()  const$/;"	f	class:digraph_paths	signature:() const
path_is_cycle	src/graph/digraph-paths.h	/^    bool path_is_cycle()  const;$/;"	p	class:digraph_paths	access:public	signature:() const
pba_	src/graph/lyndon-gray.h	/^    bitarray *pba_;  \/\/ tags for used words$/;"	m	class:lyndon_gray	access:public
pbn	demo/graph/graph-mtl-demo.cc	/^static ulong pbn;  \/\/  precision for binary print$/;"	v	file:
pc_	src/bpol/gf2n.cc	/^const char* GF2n::pc_ = 0;  \/\/ chars to print for zero and one: e.g.  "01" or ".1"$/;"	m	class:GF2n	file:
pc_	src/bpol/gf2n.h	/^    static const char* pc_;  \/\/ chars to print zero and one: e.g.  "01" or ".1"$/;"	m	class:GF2n	access:public
pc_	src/comb/partition-gen.h	/^    ulong *pc_;  \/\/ multipliers for values$/;"	m	class:partition_gen	access:public
pci_	src/comb/partition-gen.h	/^    ulong pci_;  \/\/ temporary for pc_[i_]$/;"	m	class:partition_gen	access:public
pcrc64	src/bits/pcrc64.h	/^    explicit pcrc64()$/;"	f	class:pcrc64	access:public	signature:()
pcrc64	src/bits/pcrc64.h	/^class pcrc64$/;"	c
pcrc64::m_	src/bits/pcrc64.h	/^    const uint m_;  \/\/ mask to compute mod 64$/;"	m	class:pcrc64	access:public
pcrc64::pcrc64	src/bits/pcrc64.h	/^    explicit pcrc64()$/;"	f	class:pcrc64	access:public	signature:()
pcrc64::pos_	src/bits/pcrc64.h	/^    uint pos_;      \/\/ position of constant polynomial term$/;"	m	class:pcrc64	access:public
pcrc64::reset	src/bits/pcrc64.h	/^    void reset()$/;"	f	class:pcrc64	access:public	signature:()
pcrc64::sum	src/bits/pcrc64.h	/^    Type sum()$/;"	f	class:pcrc64	access:public	signature:()
pcrc64::word_in	src/bits/pcrc64.h	/^    void word_in(Type w)$/;"	f	class:pcrc64	access:public	signature:(Type w)
pcrc64::words_in	src/bits/pcrc64.h	/^    void words_in(Type *w, ulong n)$/;"	f	class:pcrc64	access:public	signature:(Type *w, ulong n)
pcrc64::x_	src/bits/pcrc64.h	/^    Type x_[64];    \/\/ CRC data$/;"	m	class:pcrc64	access:public
pcrc64::zero_pos	src/bits/pcrc64.h	/^    void zero_pos()$/;"	f	class:pcrc64	access:public	signature:()
pcrc64::~pcrc64	src/bits/pcrc64.h	/^    ~pcrc64()  { ; }$/;"	f	class:pcrc64	access:public	signature:()
pct	demo/comb/necklace-cat-demo.cc	/^ulong pct;  \/\/ count pre-necklaces$/;"	v
pct_	src/graph/digraph-paths.h	/^    ulong pct_;  \/\/ count Paths$/;"	m	class:digraph_paths	access:public
pdata	src/comb/young-tab-rgs-subset-lex.h	/^    const ulong * pdata()  const  { return st_; }$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
pdata	src/comb/young-tab-rgs.h	/^    const ulong * pdata()  const  { return st_; }$/;"	f	class:young_tab_rgs	access:public	signature:() const
peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x)  { npeek(x, 1); }$/;"	f	class:funcemu	access:public	signature:(Type &x)
peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y) { npeek(y, 1); npeek(x, 2); }$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y)
peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y, Type &z) { npeek(z, 1); npeek(y, 2); npeek(x, 3); }$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y, Type &z)
peek	src/aux0/attic/funcemu.h	/^    void peek(Type &x, Type &y, Type &z, Type &u)$/;"	f	class:funcemu	access:public	signature:(Type &x, Type &y, Type &z, Type &u)
peek	src/ds/attic/coroutine.h	/^    Type &peek()  { chk_dp(1); return d_[dp_-1]; }$/;"	f	class:coroutine	access:public	signature:()
peek	src/ds/queue.h	/^    ulong peek(Type &z)$/;"	f	class:queue	access:public	signature:(Type &z)
peek	src/ds/stack.h	/^    ulong peek(Type &z)  const$/;"	f	class:stack	access:public	signature:(Type &z) const
peek_at	src/ds/stack.h	/^    ulong peek_at(ulong j, Type &z)  const$/;"	f	class:stack	access:public	signature:(ulong j, Type &z) const
pell_rec	demo/comb/pellgray-rec-demo.cc	/^void pell_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
pellgen_rec	demo/comb/pellgen-gray-demo.cc	/^void pellgen_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
perfect_color_mix_50	doc/bits-doc.txt	/^static inline uint perfect_color_mix_50(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
perfect_color_mix_50	src/bits/colormixp.h	/^static inline uint perfect_color_mix_50(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
perfect_color_mix_75	doc/bits-doc.txt	/^static inline uint perfect_color_mix_75(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
perfect_color_mix_75	src/bits/colormixp.h	/^static inline uint perfect_color_mix_75(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
perfect_color_sum	doc/bits-doc.txt	/^static inline uint perfect_color_sum(uint c0, uint c1, uint c2);$/;"	p	file:	signature:(uint c0, uint c1, uint c2)
perfect_color_sum	doc/bits-doc.txt	/^static inline uint perfect_color_sum(uint c1, uint c2);$/;"	p	file:	signature:(uint c1, uint c2)
perfect_color_sum	src/bits/colormixp.h	/^static inline uint perfect_color_sum(uint c0, uint c1, uint c2)$/;"	f	signature:(uint c0, uint c1, uint c2)
perfect_color_sum	src/bits/colormixp.h	/^static inline uint perfect_color_sum(uint c1, uint c2)$/;"	f	signature:(uint c1, uint c2)
perfpow_bitarray	src/mod/perfpow.cc	/^static bitarray * perfpow_bitarray = 0;$/;"	v	file:
period	src/bits/bit-necklace.h	/^    ulong period() const { return j_; }$/;"	f	class:bit_necklace	access:public	signature:() const
perm1	demo/bits/bitperm1-demo.cc	/^void perm1(uchar *a, ulong ldn, const uchar *x)$/;"	f	signature:(uchar *a, ulong ldn, const uchar *x)
perm1	demo/perm/perm-decomp-demo.cc	/^void perm1(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
perm2	demo/perm/perm-decomp-demo.cc	/^void perm2(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
perm2ccf	doc/perm-doc.txt	/^void perm2ccf(const ulong *p, ulong n, ulong *c, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const ulong *p, ulong n, ulong *c, bitarray *tb )
perm2ccf	src/perm/perm2ccf.cc	/^perm2ccf(const ulong *p, ulong n, ulong *c, bitarray *tb\/*=0*\/)$/;"	f	signature:(const ulong *p, ulong n, ulong *c, bitarray *tb )
perm2ccf	src/perm/perm2ccf.h	/^void perm2ccf(const ulong *p, ulong n, ulong *c, bitarray *tb=0);$/;"	p	signature:(const ulong *p, ulong n, ulong *c, bitarray *tb=0)
perm2ffact	doc/comb-doc.txt	/^void perm2ffact(const ulong *x, ulong n, ulong *fc, left_right_array &LR);$/;"	p	file:	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2ffact	src/comb/big-fact2perm.cc	/^perm2ffact(const ulong *x, ulong n, ulong *fc, left_right_array &LR)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2ffact	src/comb/big-fact2perm.h	/^void perm2ffact(const ulong *x, ulong n, ulong *fc, left_right_array &LR);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2ffact	src/comb/fact2perm.cc	/^perm2ffact(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact	src/comb/fact2perm.h	/^void perm2ffact(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_rev	src/comb/fact2perm-rev.cc	/^perm2ffact_rev(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_rev	src/comb/fact2perm.h	/^void perm2ffact_rev(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_rot	src/comb/fact2perm-rot.cc	/^perm2ffact_rot(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_rot	src/comb/fact2perm.h	/^void perm2ffact_rot(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_swp	src/comb/fact2perm-swp.cc	/^perm2ffact_swp(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2ffact_swp	src/comb/fact2perm.h	/^void perm2ffact_swp(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2num_ffact	src/comb/num2perm.cc	/^perm2num_ffact(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
perm2num_ffact	src/comb/num2perm.h	/^ulong perm2num_ffact(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
perm2num_rfact	src/comb/num2perm.cc	/^perm2num_rfact(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
perm2num_rfact	src/comb/num2perm.h	/^ulong perm2num_rfact(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
perm2num_swp	src/comb/num2perm.cc	/^perm2num_swp(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
perm2num_swp	src/comb/num2perm.h	/^ulong perm2num_swp(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
perm2rfact	doc/comb-doc.txt	/^void perm2rfact(const ulong *x, ulong n, ulong *fc, left_right_array &LR);$/;"	p	file:	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2rfact	src/comb/big-fact2perm.cc	/^perm2rfact(const ulong *x, ulong n, ulong *fc, left_right_array &LR)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2rfact	src/comb/big-fact2perm.h	/^void perm2rfact(const ulong *x, ulong n, ulong *fc, left_right_array &LR);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc, left_right_array &LR)
perm2rfact	src/comb/fact2perm.cc	/^perm2rfact(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact	src/comb/fact2perm.h	/^void perm2rfact(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact_rev	src/comb/fact2perm-rev.cc	/^perm2rfact_rev(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact_rev	src/comb/fact2perm.h	/^void perm2rfact_rev(const ulong *fc, ulong n, ulong *x);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x)
perm2rfact_rot	src/comb/fact2perm-rot.cc	/^perm2rfact_rot(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact_rot	src/comb/fact2perm.h	/^void perm2rfact_rot(const ulong *x, ulong n, ulong *fc);$/;"	p	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact_swp	src/comb/fact2perm-swp.cc	/^perm2rfact_swp(const ulong *x, ulong n, ulong *fc)$/;"	f	signature:(const ulong *x, ulong n, ulong *fc)
perm2rfact_swp	src/comb/fact2perm.h	/^void perm2rfact_swp(const ulong *fc, ulong n, ulong *x);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x)
perm_colex	src/comb/perm-colex.h	/^    explicit perm_colex(ulong n)$/;"	f	class:perm_colex	access:public	signature:(ulong n)
perm_colex	src/comb/perm-colex.h	/^    perm_colex(const perm_colex&);  \/\/ forbidden$/;"	p	class:perm_colex	access:private	signature:(const perm_colex&)
perm_colex	src/comb/perm-colex.h	/^class perm_colex$/;"	c
perm_colex::d_	src/comb/perm-colex.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_colex	access:public
perm_colex::data	src/comb/perm-colex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_colex	access:public	signature:() const
perm_colex::first	src/comb/perm-colex.h	/^    void first()$/;"	f	class:perm_colex	access:public	signature:()
perm_colex::n_	src/comb/perm-colex.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_colex	access:public
perm_colex::next	src/comb/perm-colex.h	/^    bool next()$/;"	f	class:perm_colex	access:public	signature:()
perm_colex::operator =	src/comb/perm-colex.h	/^    perm_colex & operator = (const perm_colex&);  \/\/ forbidden$/;"	p	class:perm_colex	access:private	signature:(const perm_colex&)
perm_colex::perm_colex	src/comb/perm-colex.h	/^    explicit perm_colex(ulong n)$/;"	f	class:perm_colex	access:public	signature:(ulong n)
perm_colex::perm_colex	src/comb/perm-colex.h	/^    perm_colex(const perm_colex&);  \/\/ forbidden$/;"	p	class:perm_colex	access:private	signature:(const perm_colex&)
perm_colex::print	src/comb/perm-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_colex	access:public	signature:(const char *bla, bool dfz=false) const
perm_colex::x_	src/comb/perm-colex.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_colex	access:public
perm_colex::~perm_colex	src/comb/perm-colex.h	/^    ~perm_colex()$/;"	f	class:perm_colex	access:public	signature:()
perm_derange	src/comb/perm-derange.h	/^    explicit perm_derange(ulong n)$/;"	f	class:perm_derange	access:public	signature:(ulong n)
perm_derange	src/comb/perm-derange.h	/^    perm_derange(const perm_derange&);  \/\/ forbidden$/;"	p	class:perm_derange	access:private	signature:(const perm_derange&)
perm_derange	src/comb/perm-derange.h	/^class perm_derange$/;"	c
perm_derange::T_	src/comb/perm-derange.h	/^    perm_trotter* T_;$/;"	m	class:perm_derange	access:public
perm_derange::ctm_	src/comb/perm-derange.h	/^    ulong ctm_;  \/\/ counter modulo n$/;"	m	class:perm_derange	access:public
perm_derange::data	src/comb/perm-derange.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_derange	access:public	signature:() const
perm_derange::first	src/comb/perm-derange.h	/^    void first()$/;"	f	class:perm_derange	access:public	signature:()
perm_derange::n_	src/comb/perm-derange.h	/^    ulong n_;   \/\/ number of elements$/;"	m	class:perm_derange	access:public
perm_derange::next	src/comb/perm-derange.h	/^    bool next()$/;"	f	class:perm_derange	access:public	signature:()
perm_derange::operator =	src/comb/perm-derange.h	/^    perm_derange & operator = (const perm_derange&);  \/\/ forbidden$/;"	p	class:perm_derange	access:private	signature:(const perm_derange&)
perm_derange::perm_derange	src/comb/perm-derange.h	/^    explicit perm_derange(ulong n)$/;"	f	class:perm_derange	access:public	signature:(ulong n)
perm_derange::perm_derange	src/comb/perm-derange.h	/^    perm_derange(const perm_derange&);  \/\/ forbidden$/;"	p	class:perm_derange	access:private	signature:(const perm_derange&)
perm_derange::print	src/comb/perm-derange.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_derange	access:public	signature:(const char *bla, bool dfz=false) const
perm_derange::x_	src/comb/perm-derange.h	/^    ulong *x_;  \/\/ current permutation$/;"	m	class:perm_derange	access:public
perm_derange::~perm_derange	src/comb/perm-derange.h	/^    ~perm_derange()$/;"	f	class:perm_derange	access:public	signature:()
perm_fix_inv_mod	src/perm/permrand-inv-mod-m.h	/^inline void perm_fix_inv_mod(ulong *x, ulong n,$/;"	f	signature:(ulong *x, ulong n, ulong r, ulong m, ulong *tfc=0)
perm_genus	src/perm/perm-genus.h	/^inline ulong perm_genus(const ulong *p, ulong n,  \/\/ permutation and length$/;"	f	signature:(const ulong *p, ulong n, ulong *cpi, bitarray *B=0)
perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    explicit perm_gray_ffact(ulong n)$/;"	f	class:perm_gray_ffact	access:public	signature:(ulong n)
perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    perm_gray_ffact(const perm_gray_ffact&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact	access:private	signature:(const perm_gray_ffact&)
perm_gray_ffact	src/comb/perm-gray-ffact.h	/^class perm_gray_ffact$/;"	c
perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    explicit perm_gray_ffact2(ulong n)$/;"	f	class:perm_gray_ffact2	access:public	signature:(ulong n)
perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    perm_gray_ffact2(const perm_gray_ffact2&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact2	access:private	signature:(const perm_gray_ffact2&)
perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^class perm_gray_ffact2$/;"	c
perm_gray_ffact2::data	src/comb/perm-gray-ffact2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:() const
perm_gray_ffact2::first	src/comb/perm-gray-ffact2.h	/^    void first()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
perm_gray_ffact2::get_swap	src/comb/perm-gray-ffact2.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_ffact2::invdata	src/comb/perm-gray-ffact2.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_ffact2	access:public	signature:() const
perm_gray_ffact2::ix_	src/comb/perm-gray-ffact2.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::mrg_	src/comb/perm-gray-ffact2.h	/^    mixedradix_gray2 *mrg_;  \/\/ loopless routine$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::n_	src/comb/perm-gray-ffact2.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::next	src/comb/perm-gray-ffact2.h	/^    bool next()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
perm_gray_ffact2::operator =	src/comb/perm-gray-ffact2.h	/^    perm_gray_ffact2 & operator = (const perm_gray_ffact2&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact2	access:private	signature:(const perm_gray_ffact2&)
perm_gray_ffact2::perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    explicit perm_gray_ffact2(ulong n)$/;"	f	class:perm_gray_ffact2	access:public	signature:(ulong n)
perm_gray_ffact2::perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    perm_gray_ffact2(const perm_gray_ffact2&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact2	access:private	signature:(const perm_gray_ffact2&)
perm_gray_ffact2::print	src/comb/perm-gray-ffact2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact2	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_ffact2::print_inv	src/comb/perm-gray-ffact2.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact2	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_ffact2::sw1_	src/comb/perm-gray-ffact2.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::sw2_	src/comb/perm-gray-ffact2.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::x_	src/comb/perm-gray-ffact2.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_ffact2	access:public
perm_gray_ffact2::~perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    ~perm_gray_ffact2()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
perm_gray_ffact::d_	src/comb/perm-gray-ffact.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, ..., 2]$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::data	src/comb/perm-gray-ffact.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_ffact	access:public	signature:() const
perm_gray_ffact::first	src/comb/perm-gray-ffact.h	/^    void first()$/;"	f	class:perm_gray_ffact	access:public	signature:()
perm_gray_ffact::get_swap	src/comb/perm-gray-ffact.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_ffact	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_ffact::i_	src/comb/perm-gray-ffact.h	/^    ulong *i_;  \/\/ direction$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::invdata	src/comb/perm-gray-ffact.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_ffact	access:public	signature:() const
perm_gray_ffact::ix_	src/comb/perm-gray-ffact.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::last	src/comb/perm-gray-ffact.h	/^    void last()$/;"	f	class:perm_gray_ffact	access:public	signature:()
perm_gray_ffact::n_	src/comb/perm-gray-ffact.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::next	src/comb/perm-gray-ffact.h	/^    bool next()$/;"	f	class:perm_gray_ffact	access:public	signature:()
perm_gray_ffact::operator =	src/comb/perm-gray-ffact.h	/^    perm_gray_ffact & operator = (const perm_gray_ffact&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact	access:private	signature:(const perm_gray_ffact&)
perm_gray_ffact::perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    explicit perm_gray_ffact(ulong n)$/;"	f	class:perm_gray_ffact	access:public	signature:(ulong n)
perm_gray_ffact::perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    perm_gray_ffact(const perm_gray_ffact&);  \/\/ forbidden$/;"	p	class:perm_gray_ffact	access:private	signature:(const perm_gray_ffact&)
perm_gray_ffact::prev	src/comb/perm-gray-ffact.h	/^    bool prev()$/;"	f	class:perm_gray_ffact	access:public	signature:()
perm_gray_ffact::print	src/comb/perm-gray-ffact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_ffact::print_inv	src/comb/perm-gray-ffact.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_ffact::sw1_	src/comb/perm-gray-ffact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::sw2_	src/comb/perm-gray-ffact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::swap	src/comb/perm-gray-ffact.h	/^    void swap(ulong j, ulong im)  \/\/ used with next() and prev()$/;"	f	class:perm_gray_ffact	access:private	signature:(ulong j, ulong im)
perm_gray_ffact::x_	src/comb/perm-gray-ffact.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_gray_ffact	access:public
perm_gray_ffact::~perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    ~perm_gray_ffact()$/;"	f	class:perm_gray_ffact	access:public	signature:()
perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    explicit perm_gray_lipski(ulong n, ulong r=1)$/;"	f	class:perm_gray_lipski	access:public	signature:(ulong n, ulong r=1)
perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    perm_gray_lipski(const perm_gray_lipski&);  \/\/ forbidden$/;"	p	class:perm_gray_lipski	access:private	signature:(const perm_gray_lipski&)
perm_gray_lipski	src/comb/perm-gray-lipski.h	/^class perm_gray_lipski$/;"	c
perm_gray_lipski::d_	src/comb/perm-gray-lipski.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_gray_lipski	access:public
perm_gray_lipski::data	src/comb/perm-gray-lipski.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_gray_lipski	access:public	signature:() const
perm_gray_lipski::first	src/comb/perm-gray-lipski.h	/^    void first()$/;"	f	class:perm_gray_lipski	access:public	signature:()
perm_gray_lipski::get_swap	src/comb/perm-gray-lipski.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_lipski	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_lipski::n_	src/comb/perm-gray-lipski.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_lipski	access:public
perm_gray_lipski::next	src/comb/perm-gray-lipski.h	/^    bool next()$/;"	f	class:perm_gray_lipski	access:public	signature:()
perm_gray_lipski::operator =	src/comb/perm-gray-lipski.h	/^    perm_gray_lipski & operator = (const perm_gray_lipski&);  \/\/ forbidden$/;"	p	class:perm_gray_lipski	access:private	signature:(const perm_gray_lipski&)
perm_gray_lipski::p_	src/comb/perm-gray-lipski.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_gray_lipski	access:public
perm_gray_lipski::perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    explicit perm_gray_lipski(ulong n, ulong r=1)$/;"	f	class:perm_gray_lipski	access:public	signature:(ulong n, ulong r=1)
perm_gray_lipski::perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    perm_gray_lipski(const perm_gray_lipski&);  \/\/ forbidden$/;"	p	class:perm_gray_lipski	access:private	signature:(const perm_gray_lipski&)
perm_gray_lipski::print	src/comb/perm-gray-lipski.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_lipski	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_lipski::r_	src/comb/perm-gray-lipski.h	/^    ulong r_;   \/\/ order (0<=r<4):$/;"	m	class:perm_gray_lipski	access:private
perm_gray_lipski::sw1_	src/comb/perm-gray-lipski.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_lipski	access:public
perm_gray_lipski::sw2_	src/comb/perm-gray-lipski.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_lipski	access:public
perm_gray_lipski::~perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    ~perm_gray_lipski()$/;"	f	class:perm_gray_lipski	access:public	signature:()
perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    explicit perm_gray_rfact(ulong n)$/;"	f	class:perm_gray_rfact	access:public	signature:(ulong n)
perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    perm_gray_rfact(const perm_gray_rfact&);  \/\/ forbidden$/;"	p	class:perm_gray_rfact	access:private	signature:(const perm_gray_rfact&)
perm_gray_rfact	src/comb/perm-gray-rfact.h	/^class perm_gray_rfact$/;"	c
perm_gray_rfact::M_	src/comb/perm-gray-rfact.h	/^    mixedradix_gray *M_;$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::data	src/comb/perm-gray-rfact.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_rfact	access:public	signature:() const
perm_gray_rfact::first	src/comb/perm-gray-rfact.h	/^    void first()$/;"	f	class:perm_gray_rfact	access:public	signature:()
perm_gray_rfact::get_swap	src/comb/perm-gray-rfact.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_rfact	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_rfact::invdata	src/comb/perm-gray-rfact.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_rfact	access:public	signature:() const
perm_gray_rfact::ix_	src/comb/perm-gray-rfact.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::n_	src/comb/perm-gray-rfact.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::next	src/comb/perm-gray-rfact.h	/^    bool next()$/;"	f	class:perm_gray_rfact	access:public	signature:()
perm_gray_rfact::operator =	src/comb/perm-gray-rfact.h	/^    perm_gray_rfact & operator = (const perm_gray_rfact&);  \/\/ forbidden$/;"	p	class:perm_gray_rfact	access:private	signature:(const perm_gray_rfact&)
perm_gray_rfact::perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    explicit perm_gray_rfact(ulong n)$/;"	f	class:perm_gray_rfact	access:public	signature:(ulong n)
perm_gray_rfact::perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    perm_gray_rfact(const perm_gray_rfact&);  \/\/ forbidden$/;"	p	class:perm_gray_rfact	access:private	signature:(const perm_gray_rfact&)
perm_gray_rfact::print	src/comb/perm-gray-rfact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rfact	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_rfact::print_inv	src/comb/perm-gray-rfact.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rfact	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_rfact::sw1_	src/comb/perm-gray-rfact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::sw2_	src/comb/perm-gray-rfact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::x_	src/comb/perm-gray-rfact.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_rfact	access:public
perm_gray_rfact::~perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    ~perm_gray_rfact()$/;"	f	class:perm_gray_rfact	access:public	signature:()
perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    explicit perm_gray_rot1(ulong n)$/;"	f	class:perm_gray_rot1	access:public	signature:(ulong n)
perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    perm_gray_rot1(const perm_gray_rot1&);  \/\/ forbidden$/;"	p	class:perm_gray_rot1	access:private	signature:(const perm_gray_rot1&)
perm_gray_rot1	src/comb/perm-gray-rot1.h	/^class perm_gray_rot1$/;"	c
perm_gray_rot1::M_	src/comb/perm-gray-rot1.h	/^    mixedradix_gray *M_;  \/\/ Gray code for factorial numbers$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::data	src/comb/perm-gray-rot1.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_gray_rot1	access:public	signature:() const
perm_gray_rot1::first	src/comb/perm-gray-rot1.h	/^    void first()$/;"	f	class:perm_gray_rot1	access:public	signature:()
perm_gray_rot1::get_swap	src/comb/perm-gray-rot1.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_rot1	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_rot1::invdata	src/comb/perm-gray-rot1.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_gray_rot1	access:public	signature:() const
perm_gray_rot1::ix_	src/comb/perm-gray-rot1.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::n_	src/comb/perm-gray-rot1.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::next	src/comb/perm-gray-rot1.h	/^    bool next()$/;"	f	class:perm_gray_rot1	access:public	signature:()
perm_gray_rot1::operator =	src/comb/perm-gray-rot1.h	/^    perm_gray_rot1 & operator = (const perm_gray_rot1&);  \/\/ forbidden$/;"	p	class:perm_gray_rot1	access:private	signature:(const perm_gray_rot1&)
perm_gray_rot1::perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    explicit perm_gray_rot1(ulong n)$/;"	f	class:perm_gray_rot1	access:public	signature:(ulong n)
perm_gray_rot1::perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    perm_gray_rot1(const perm_gray_rot1&);  \/\/ forbidden$/;"	p	class:perm_gray_rot1	access:private	signature:(const perm_gray_rot1&)
perm_gray_rot1::print	src/comb/perm-gray-rot1.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rot1	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_rot1::print_inv	src/comb/perm-gray-rot1.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rot1	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_rot1::sw1_	src/comb/perm-gray-rot1.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::sw2_	src/comb/perm-gray-rot1.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::x_	src/comb/perm-gray-rot1.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_rot1	access:public
perm_gray_rot1::~perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    ~perm_gray_rot1()$/;"	f	class:perm_gray_rot1	access:public	signature:()
perm_gray_wells	src/comb/perm-gray-wells.h	/^    explicit perm_gray_wells(ulong n, ulong r=0)$/;"	f	class:perm_gray_wells	access:public	signature:(ulong n, ulong r=0)
perm_gray_wells	src/comb/perm-gray-wells.h	/^    perm_gray_wells(const perm_gray_wells&);  \/\/ forbidden$/;"	p	class:perm_gray_wells	access:private	signature:(const perm_gray_wells&)
perm_gray_wells	src/comb/perm-gray-wells.h	/^class perm_gray_wells$/;"	c
perm_gray_wells::d_	src/comb/perm-gray-wells.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_gray_wells	access:public
perm_gray_wells::data	src/comb/perm-gray-wells.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_gray_wells	access:public	signature:() const
perm_gray_wells::first	src/comb/perm-gray-wells.h	/^    void first()$/;"	f	class:perm_gray_wells	access:public	signature:()
perm_gray_wells::get_swap	src/comb/perm-gray-wells.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_gray_wells	access:public	signature:(ulong &s1, ulong &s2) const
perm_gray_wells::n_	src/comb/perm-gray-wells.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_gray_wells	access:public
perm_gray_wells::next	src/comb/perm-gray-wells.h	/^    bool next()$/;"	f	class:perm_gray_wells	access:public	signature:()
perm_gray_wells::operator =	src/comb/perm-gray-wells.h	/^    perm_gray_wells & operator = (const perm_gray_wells&);  \/\/ forbidden$/;"	p	class:perm_gray_wells	access:private	signature:(const perm_gray_wells&)
perm_gray_wells::p_	src/comb/perm-gray-wells.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_gray_wells	access:public
perm_gray_wells::perm_gray_wells	src/comb/perm-gray-wells.h	/^    explicit perm_gray_wells(ulong n, ulong r=0)$/;"	f	class:perm_gray_wells	access:public	signature:(ulong n, ulong r=0)
perm_gray_wells::perm_gray_wells	src/comb/perm-gray-wells.h	/^    perm_gray_wells(const perm_gray_wells&);  \/\/ forbidden$/;"	p	class:perm_gray_wells	access:private	signature:(const perm_gray_wells&)
perm_gray_wells::print	src/comb/perm-gray-wells.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_wells	access:public	signature:(const char *bla, bool dfz=false) const
perm_gray_wells::r_	src/comb/perm-gray-wells.h	/^    ulong r_;   \/\/ order (0<=r<3):$/;"	m	class:perm_gray_wells	access:private
perm_gray_wells::sw1_	src/comb/perm-gray-wells.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_wells	access:public
perm_gray_wells::sw2_	src/comb/perm-gray-wells.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_wells	access:public
perm_gray_wells::~perm_gray_wells	src/comb/perm-gray-wells.h	/^    ~perm_gray_wells()$/;"	f	class:perm_gray_wells	access:public	signature:()
perm_heap	src/comb/perm-heap.h	/^    explicit perm_heap(ulong n)$/;"	f	class:perm_heap	access:public	signature:(ulong n)
perm_heap	src/comb/perm-heap.h	/^    perm_heap(const perm_heap&);  \/\/ forbidden$/;"	p	class:perm_heap	access:private	signature:(const perm_heap&)
perm_heap	src/comb/perm-heap.h	/^class perm_heap$/;"	c
perm_heap2	src/comb/perm-heap2.h	/^    explicit perm_heap2(ulong n)  \/\/ must have n>=3$/;"	f	class:perm_heap2	access:public	signature:(ulong n)
perm_heap2	src/comb/perm-heap2.h	/^    perm_heap2(const perm_heap2&);  \/\/ forbidden$/;"	p	class:perm_heap2	access:private	signature:(const perm_heap2&)
perm_heap2	src/comb/perm-heap2.h	/^class perm_heap2$/;"	c
perm_heap2::ct_	src/comb/perm-heap2.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_heap2	access:public
perm_heap2::d_	src/comb/perm-heap2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, 5, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap2	access:public
perm_heap2::data	src/comb/perm-heap2.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_heap2	access:public	signature:() const
perm_heap2::first	src/comb/perm-heap2.h	/^    void first()$/;"	f	class:perm_heap2	access:public	signature:()
perm_heap2::get_swap	src/comb/perm-heap2.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap2	access:public	signature:(ulong &s1, ulong &s2) const
perm_heap2::n_	src/comb/perm-heap2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap2	access:public
perm_heap2::next	src/comb/perm-heap2.h	/^    ulong next()$/;"	f	class:perm_heap2	access:public	signature:()
perm_heap2::operator =	src/comb/perm-heap2.h	/^    perm_heap2 & operator = (const perm_heap2&);  \/\/ forbidden$/;"	p	class:perm_heap2	access:private	signature:(const perm_heap2&)
perm_heap2::p_	src/comb/perm-heap2.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_heap2	access:public
perm_heap2::perm_heap2	src/comb/perm-heap2.h	/^    explicit perm_heap2(ulong n)  \/\/ must have n>=3$/;"	f	class:perm_heap2	access:public	signature:(ulong n)
perm_heap2::perm_heap2	src/comb/perm-heap2.h	/^    perm_heap2(const perm_heap2&);  \/\/ forbidden$/;"	p	class:perm_heap2	access:private	signature:(const perm_heap2&)
perm_heap2::print	src/comb/perm-heap2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_heap2	access:public	signature:(const char *bla, bool dfz=false) const
perm_heap2::sw1_	src/comb/perm-heap2.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2	access:public
perm_heap2::sw2_	src/comb/perm-heap2.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2	access:public
perm_heap2::~perm_heap2	src/comb/perm-heap2.h	/^    ~perm_heap2()$/;"	f	class:perm_heap2	access:public	signature:()
perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    explicit perm_heap2_swaps(ulong n)  \/\/ must have n>=3$/;"	f	class:perm_heap2_swaps	access:public	signature:(ulong n)
perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    perm_heap2_swaps(const perm_heap2_swaps&);  \/\/ forbidden$/;"	p	class:perm_heap2_swaps	access:private	signature:(const perm_heap2_swaps&)
perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^class perm_heap2_swaps$/;"	c
perm_heap2_swaps::ct_	src/comb/perm-heap2-swaps.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_heap2_swaps	access:public
perm_heap2_swaps::d_	src/comb/perm-heap2-swaps.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, 5, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap2_swaps	access:public
perm_heap2_swaps::first	src/comb/perm-heap2-swaps.h	/^    void first()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
perm_heap2_swaps::get_swap	src/comb/perm-heap2-swaps.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap2_swaps	access:public	signature:(ulong &s1, ulong &s2) const
perm_heap2_swaps::n_	src/comb/perm-heap2-swaps.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap2_swaps	access:public
perm_heap2_swaps::next	src/comb/perm-heap2-swaps.h	/^    ulong next()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
perm_heap2_swaps::operator =	src/comb/perm-heap2-swaps.h	/^    perm_heap2_swaps & operator = (const perm_heap2_swaps&);  \/\/ forbidden$/;"	p	class:perm_heap2_swaps	access:private	signature:(const perm_heap2_swaps&)
perm_heap2_swaps::perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    explicit perm_heap2_swaps(ulong n)  \/\/ must have n>=3$/;"	f	class:perm_heap2_swaps	access:public	signature:(ulong n)
perm_heap2_swaps::perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    perm_heap2_swaps(const perm_heap2_swaps&);  \/\/ forbidden$/;"	p	class:perm_heap2_swaps	access:private	signature:(const perm_heap2_swaps&)
perm_heap2_swaps::sw1_	src/comb/perm-heap2-swaps.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2_swaps	access:public
perm_heap2_swaps::sw2_	src/comb/perm-heap2-swaps.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2_swaps	access:public
perm_heap2_swaps::~perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    ~perm_heap2_swaps()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
perm_heap::d_	src/comb/perm-heap.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_heap	access:public
perm_heap::data	src/comb/perm-heap.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_heap	access:public	signature:() const
perm_heap::first	src/comb/perm-heap.h	/^    void first()$/;"	f	class:perm_heap	access:public	signature:()
perm_heap::get_swap	src/comb/perm-heap.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_heap	access:public	signature:(ulong &s1, ulong &s2) const
perm_heap::n_	src/comb/perm-heap.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_heap	access:public
perm_heap::next	src/comb/perm-heap.h	/^    bool next()$/;"	f	class:perm_heap	access:public	signature:()
perm_heap::operator =	src/comb/perm-heap.h	/^    perm_heap & operator = (const perm_heap&);  \/\/ forbidden$/;"	p	class:perm_heap	access:private	signature:(const perm_heap&)
perm_heap::p_	src/comb/perm-heap.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_heap	access:public
perm_heap::perm_heap	src/comb/perm-heap.h	/^    explicit perm_heap(ulong n)$/;"	f	class:perm_heap	access:public	signature:(ulong n)
perm_heap::perm_heap	src/comb/perm-heap.h	/^    perm_heap(const perm_heap&);  \/\/ forbidden$/;"	p	class:perm_heap	access:private	signature:(const perm_heap&)
perm_heap::print	src/comb/perm-heap.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_heap	access:public	signature:(const char *bla, bool dfz=false) const
perm_heap::sw1_	src/comb/perm-heap.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap	access:public
perm_heap::sw2_	src/comb/perm-heap.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap	access:public
perm_heap::~perm_heap	src/comb/perm-heap.h	/^    ~perm_heap()$/;"	f	class:perm_heap	access:public	signature:()
perm_involution	src/comb/perm-involution.h	/^    explicit perm_involution(ulong n)$/;"	f	class:perm_involution	access:public	signature:(ulong n)
perm_involution	src/comb/perm-involution.h	/^    perm_involution(const perm_involution&);  \/\/ forbidden$/;"	p	class:perm_involution	access:private	signature:(const perm_involution&)
perm_involution	src/comb/perm-involution.h	/^class perm_involution$/;"	c
perm_involution::data	src/comb/perm-involution.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_involution	access:public	signature:() const
perm_involution::first	src/comb/perm-involution.h	/^    void first()$/;"	f	class:perm_involution	access:public	signature:()
perm_involution::n_	src/comb/perm-involution.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_involution	access:public
perm_involution::next	src/comb/perm-involution.h	/^    bool next()$/;"	f	class:perm_involution	access:public	signature:()
perm_involution::operator =	src/comb/perm-involution.h	/^    perm_involution & operator = (const perm_involution&);  \/\/ forbidden$/;"	p	class:perm_involution	access:private	signature:(const perm_involution&)
perm_involution::p_	src/comb/perm-involution.h	/^    ulong *p_;  \/\/ self-inverse permutation in 0, 1, ..., n-1$/;"	m	class:perm_involution	access:public
perm_involution::p_	src/comb/perm-involution.h	/^    ulong p_[64];$/;"	m	class:perm_involution	access:public
perm_involution::perm_involution	src/comb/perm-involution.h	/^    explicit perm_involution(ulong n)$/;"	f	class:perm_involution	access:public	signature:(ulong n)
perm_involution::perm_involution	src/comb/perm-involution.h	/^    perm_involution(const perm_involution&);  \/\/ forbidden$/;"	p	class:perm_involution	access:private	signature:(const perm_involution&)
perm_involution::print	src/comb/perm-involution.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_involution	access:public	signature:(const char *bla, bool dfz=false) const
perm_involution::print1	src/comb/perm-involution.h	/^    void print1(const char *bla)  const$/;"	f	class:perm_involution	access:public	signature:(const char *bla) const
perm_involution::~perm_involution	src/comb/perm-involution.h	/^    ~perm_involution()$/;"	f	class:perm_involution	access:public	signature:()
perm_ives	src/comb/perm-ives.h	/^    explicit perm_ives(ulong n)$/;"	f	class:perm_ives	access:public	signature:(ulong n)
perm_ives	src/comb/perm-ives.h	/^    perm_ives(const perm_ives&);  \/\/ forbidden$/;"	p	class:perm_ives	access:private	signature:(const perm_ives&)
perm_ives	src/comb/perm-ives.h	/^class perm_ives$/;"	c
perm_ives::ctm0_	src/comb/perm-ives.h	/^    ulong ctm0_;  \/\/ aux: start value of ctm == n*(n-1)-1$/;"	m	class:perm_ives	access:public
perm_ives::ctm_	src/comb/perm-ives.h	/^    ulong ctm_;   \/\/ aux: counter for easy case$/;"	m	class:perm_ives	access:public
perm_ives::data	src/comb/perm-ives.h	/^    const ulong *data()  const { return p_; }$/;"	f	class:perm_ives	access:public	signature:() const
perm_ives::first	src/comb/perm-ives.h	/^    void first()$/;"	f	class:perm_ives	access:public	signature:()
perm_ives::invdata	src/comb/perm-ives.h	/^    const ulong *invdata()  const { return ip_; }$/;"	f	class:perm_ives	access:public	signature:() const
perm_ives::ip_	src/comb/perm-ives.h	/^    ulong *ip_;  \/\/ inverse permutation$/;"	m	class:perm_ives	access:public
perm_ives::n_	src/comb/perm-ives.h	/^    ulong n_;    \/\/ permutations of n elements$/;"	m	class:perm_ives	access:public
perm_ives::next	src/comb/perm-ives.h	/^    bool next()$/;"	f	class:perm_ives	access:public	signature:()
perm_ives::operator =	src/comb/perm-ives.h	/^    perm_ives & operator = (const perm_ives&);  \/\/ forbidden$/;"	p	class:perm_ives	access:private	signature:(const perm_ives&)
perm_ives::p_	src/comb/perm-ives.h	/^    ulong *p_;   \/\/ permutation$/;"	m	class:perm_ives	access:public
perm_ives::perm_ives	src/comb/perm-ives.h	/^    explicit perm_ives(ulong n)$/;"	f	class:perm_ives	access:public	signature:(ulong n)
perm_ives::perm_ives	src/comb/perm-ives.h	/^    perm_ives(const perm_ives&);  \/\/ forbidden$/;"	p	class:perm_ives	access:private	signature:(const perm_ives&)
perm_ives::print	src/comb/perm-ives.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:perm_ives	access:public	signature:(const char *bla, bool dfz) const
perm_ives::print_inv	src/comb/perm-ives.h	/^     void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_ives	access:public	signature:(const char *bla, bool dfz=false) const
perm_ives::~perm_ives	src/comb/perm-ives.h	/^    ~perm_ives()$/;"	f	class:perm_ives	access:public	signature:()
perm_lex	src/comb/perm-lex.h	/^    explicit perm_lex(ulong n)$/;"	f	class:perm_lex	access:public	signature:(ulong n)
perm_lex	src/comb/perm-lex.h	/^    perm_lex(const perm_lex&);  \/\/ forbidden$/;"	p	class:perm_lex	access:private	signature:(const perm_lex&)
perm_lex	src/comb/perm-lex.h	/^class perm_lex$/;"	c
perm_lex2	src/comb/perm-lex2.h	/^    explicit perm_lex2(ulong n)$/;"	f	class:perm_lex2	access:public	signature:(ulong n)
perm_lex2	src/comb/perm-lex2.h	/^    perm_lex2(const perm_lex2&);  \/\/ forbidden$/;"	p	class:perm_lex2	access:private	signature:(const perm_lex2&)
perm_lex2	src/comb/perm-lex2.h	/^class perm_lex2$/;"	c
perm_lex2::d_	src/comb/perm-lex2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_lex2	access:public
perm_lex2::data	src/comb/perm-lex2.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_lex2	access:public	signature:() const
perm_lex2::first	src/comb/perm-lex2.h	/^    void first()$/;"	f	class:perm_lex2	access:public	signature:()
perm_lex2::n_	src/comb/perm-lex2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_lex2	access:public
perm_lex2::next	src/comb/perm-lex2.h	/^    bool next()$/;"	f	class:perm_lex2	access:public	signature:()
perm_lex2::num_inversions	src/comb/perm-lex2.h	/^    ulong num_inversions()  const$/;"	f	class:perm_lex2	access:public	signature:() const
perm_lex2::operator =	src/comb/perm-lex2.h	/^    perm_lex2 & operator = (const perm_lex2&);  \/\/ forbidden$/;"	p	class:perm_lex2	access:private	signature:(const perm_lex2&)
perm_lex2::perm_lex2	src/comb/perm-lex2.h	/^    explicit perm_lex2(ulong n)$/;"	f	class:perm_lex2	access:public	signature:(ulong n)
perm_lex2::perm_lex2	src/comb/perm-lex2.h	/^    perm_lex2(const perm_lex2&);  \/\/ forbidden$/;"	p	class:perm_lex2	access:private	signature:(const perm_lex2&)
perm_lex2::print	src/comb/perm-lex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex2	access:public	signature:(const char *bla, bool dfz=false) const
perm_lex2::x_	src/comb/perm-lex2.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_lex2	access:public
perm_lex2::~perm_lex2	src/comb/perm-lex2.h	/^    ~perm_lex2()$/;"	f	class:perm_lex2	access:public	signature:()
perm_lex::data	src/comb/perm-lex.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_lex	access:public	signature:() const
perm_lex::first	src/comb/perm-lex.h	/^    void first()$/;"	f	class:perm_lex	access:public	signature:()
perm_lex::n_	src/comb/perm-lex.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_lex	access:public
perm_lex::next	src/comb/perm-lex.h	/^    bool next()$/;"	f	class:perm_lex	access:public	signature:()
perm_lex::operator =	src/comb/perm-lex.h	/^    perm_lex & operator = (const perm_lex&);  \/\/ forbidden$/;"	p	class:perm_lex	access:private	signature:(const perm_lex&)
perm_lex::p_	src/comb/perm-lex.h	/^    ulong *p_;  \/\/ permutation in 0, 1, ..., n-1, sentinel at [-1]$/;"	m	class:perm_lex	access:public
perm_lex::perm_lex	src/comb/perm-lex.h	/^    explicit perm_lex(ulong n)$/;"	f	class:perm_lex	access:public	signature:(ulong n)
perm_lex::perm_lex	src/comb/perm-lex.h	/^    perm_lex(const perm_lex&);  \/\/ forbidden$/;"	p	class:perm_lex	access:private	signature:(const perm_lex&)
perm_lex::print	src/comb/perm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex	access:public	signature:(const char *bla, bool dfz=false) const
perm_lex::~perm_lex	src/comb/perm-lex.h	/^    ~perm_lex()$/;"	f	class:perm_lex	access:public	signature:()
perm_lex_inv	src/comb/perm-lex-inv.h	/^    explicit perm_lex_inv(ulong n)$/;"	f	class:perm_lex_inv	access:public	signature:(ulong n)
perm_lex_inv	src/comb/perm-lex-inv.h	/^    perm_lex_inv(const perm_lex_inv&);  \/\/ forbidden$/;"	p	class:perm_lex_inv	access:private	signature:(const perm_lex_inv&)
perm_lex_inv	src/comb/perm-lex-inv.h	/^class perm_lex_inv$/;"	c
perm_lex_inv::d_	src/comb/perm-lex-inv.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ...]$/;"	m	class:perm_lex_inv	access:public
perm_lex_inv::data	src/comb/perm-lex-inv.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
perm_lex_inv::first	src/comb/perm-lex-inv.h	/^    void first()$/;"	f	class:perm_lex_inv	access:public	signature:()
perm_lex_inv::invdata	src/comb/perm-lex-inv.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
perm_lex_inv::n_	src/comb/perm-lex-inv.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_lex_inv	access:public
perm_lex_inv::next	src/comb/perm-lex-inv.h	/^    bool next()$/;"	f	class:perm_lex_inv	access:public	signature:()
perm_lex_inv::operator =	src/comb/perm-lex-inv.h	/^    perm_lex_inv & operator = (const perm_lex_inv&);  \/\/ forbidden$/;"	p	class:perm_lex_inv	access:private	signature:(const perm_lex_inv&)
perm_lex_inv::p_	src/comb/perm-lex-inv.h	/^    ulong p_;   \/\/ position of leftmost change with last update$/;"	m	class:perm_lex_inv	access:public
perm_lex_inv::perm_lex_inv	src/comb/perm-lex-inv.h	/^    explicit perm_lex_inv(ulong n)$/;"	f	class:perm_lex_inv	access:public	signature:(ulong n)
perm_lex_inv::perm_lex_inv	src/comb/perm-lex-inv.h	/^    perm_lex_inv(const perm_lex_inv&);  \/\/ forbidden$/;"	p	class:perm_lex_inv	access:private	signature:(const perm_lex_inv&)
perm_lex_inv::pos	src/comb/perm-lex-inv.h	/^    ulong pos()  const  { return p_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
perm_lex_inv::print	src/comb/perm-lex-inv.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex_inv	access:public	signature:(const char *bla, bool dfz=false) const
perm_lex_inv::print_inv	src/comb/perm-lex-inv.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex_inv	access:public	signature:(const char *bla, bool dfz=false) const
perm_lex_inv::swap_positions	src/comb/perm-lex-inv.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:perm_lex_inv	access:private	signature:(ulong i1, ulong i2)
perm_lex_inv::x_	src/comb/perm-lex-inv.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_lex_inv	access:public
perm_lex_inv::xi_	src/comb/perm-lex-inv.h	/^    ulong *xi_;  \/\/ inverse permutation$/;"	m	class:perm_lex_inv	access:public
perm_lex_inv::~perm_lex_inv	src/comb/perm-lex-inv.h	/^    ~perm_lex_inv()$/;"	f	class:perm_lex_inv	access:public	signature:()
perm_minchange	src/comb/attic/perm-minchange.h	/^    perm_minchange(ulong nn)$/;"	f	class:perm_minchange	access:public	signature:(ulong nn)
perm_minchange	src/comb/attic/perm-minchange.h	/^class perm_minchange$/;"	c
perm_minchange::d_	src/comb/attic/perm-minchange.h	/^    ulong *d_;  \/\/ aux$/;"	m	class:perm_minchange	access:public
perm_minchange::data	src/comb/attic/perm-minchange.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_minchange	access:public	signature:() const
perm_minchange::first	src/comb/attic/perm-minchange.h	/^    void first()$/;"	f	class:perm_minchange	access:public	signature:()
perm_minchange::get_swap	src/comb/attic/perm-minchange.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_minchange	access:public	signature:(ulong &s1, ulong &s2) const
perm_minchange::ii_	src/comb/attic/perm-minchange.h	/^    ulong *ii_; \/\/ aux$/;"	m	class:perm_minchange	access:public
perm_minchange::invdata	src/comb/attic/perm-minchange.h	/^    const ulong * invdata()  const  { return ip_; }$/;"	f	class:perm_minchange	access:public	signature:() const
perm_minchange::ip_	src/comb/attic/perm-minchange.h	/^    ulong *ip_; \/\/ ip[n] contains the inverse permutation of p[]$/;"	m	class:perm_minchange	access:public
perm_minchange::make_next	src/comb/attic/perm-minchange.h	/^    ulong make_next(ulong m)$/;"	f	class:perm_minchange	access:private	signature:(ulong m)
perm_minchange::n_	src/comb/attic/perm-minchange.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_minchange	access:public
perm_minchange::next	src/comb/attic/perm-minchange.h	/^    ulong next()  { return make_next(n_-1); }  \/\/ return 0 if on last permutation$/;"	f	class:perm_minchange	access:public	signature:()
perm_minchange::p_	src/comb/attic/perm-minchange.h	/^    ulong *p_;  \/\/ p[n] contains a permutation of {0, 1, ..., n-1}$/;"	m	class:perm_minchange	access:public
perm_minchange::perm_minchange	src/comb/attic/perm-minchange.h	/^    perm_minchange(ulong nn)$/;"	f	class:perm_minchange	access:public	signature:(ulong nn)
perm_minchange::print	src/comb/attic/perm-minchange.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_minchange	access:public	signature:(const char *bla, bool dfz=false) const
perm_minchange::print_inv	src/comb/attic/perm-minchange.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_minchange	access:public	signature:(const char *bla, bool dfz=false) const
perm_minchange::sw1_	src/comb/attic/perm-minchange.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_minchange	access:public
perm_minchange::sw2_	src/comb/attic/perm-minchange.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_minchange	access:public
perm_minchange::~perm_minchange	src/comb/attic/perm-minchange.h	/^    ~perm_minchange()$/;"	f	class:perm_minchange	access:public	signature:()
perm_mv0	src/comb/perm-mv0.h	/^    explicit perm_mv0(ulong n)$/;"	f	class:perm_mv0	access:public	signature:(ulong n)
perm_mv0	src/comb/perm-mv0.h	/^    perm_mv0(const perm_mv0&);  \/\/ forbidden$/;"	p	class:perm_mv0	access:private	signature:(const perm_mv0&)
perm_mv0	src/comb/perm-mv0.h	/^class perm_mv0$/;"	c
perm_mv0::d_	src/comb/perm-mv0.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [n-1, n-2, n-3, ..., 2]$/;"	m	class:perm_mv0	access:public
perm_mv0::data	src/comb/perm-mv0.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_mv0	access:public	signature:() const
perm_mv0::ect_	src/comb/perm-mv0.h	/^    ulong ect_;  \/\/ counter for easy case$/;"	m	class:perm_mv0	access:public
perm_mv0::first	src/comb/perm-mv0.h	/^    void first()$/;"	f	class:perm_mv0	access:public	signature:()
perm_mv0::n_	src/comb/perm-mv0.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_mv0	access:public
perm_mv0::next	src/comb/perm-mv0.h	/^    bool next()$/;"	f	class:perm_mv0	access:public	signature:()
perm_mv0::operator =	src/comb/perm-mv0.h	/^    perm_mv0 & operator = (const perm_mv0&);  \/\/ forbidden$/;"	p	class:perm_mv0	access:private	signature:(const perm_mv0&)
perm_mv0::perm_mv0	src/comb/perm-mv0.h	/^    explicit perm_mv0(ulong n)$/;"	f	class:perm_mv0	access:public	signature:(ulong n)
perm_mv0::perm_mv0	src/comb/perm-mv0.h	/^    perm_mv0(const perm_mv0&);  \/\/ forbidden$/;"	p	class:perm_mv0	access:private	signature:(const perm_mv0&)
perm_mv0::print	src/comb/perm-mv0.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_mv0	access:public	signature:(const char *bla, bool dfz=false) const
perm_mv0::x_	src/comb/perm-mv0.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_mv0	access:public
perm_mv0::~perm_mv0	src/comb/perm-mv0.h	/^    ~perm_mv0()$/;"	f	class:perm_mv0	access:public	signature:()
perm_pref	src/comb/perm-pref.h	/^    explicit perm_pref(ulong n)$/;"	f	class:perm_pref	access:public	signature:(ulong n)
perm_pref	src/comb/perm-pref.h	/^    perm_pref(const perm_pref&);  \/\/ forbidden$/;"	p	class:perm_pref	access:private	signature:(const perm_pref&)
perm_pref	src/comb/perm-pref.h	/^class perm_pref$/;"	c
perm_pref::data	src/comb/perm-pref.h	/^    const ulong * data()  const { return ms_; }$/;"	f	class:perm_pref	access:public	signature:() const
perm_pref::first	src/comb/perm-pref.h	/^    void first()$/;"	f	class:perm_pref	access:public	signature:()
perm_pref::ln_	src/comb/perm-pref.h	/^    ulong ln_;   \/\/ length of the longest non-increasing prefix$/;"	m	class:perm_pref	access:public
perm_pref::ms_	src/comb/perm-pref.h	/^    ulong *ms_;  \/\/ permutation in ms[0], ..., ms[n-1], sentinel at [n]$/;"	m	class:perm_pref	access:public
perm_pref::n_	src/comb/perm-pref.h	/^    ulong n_;    \/\/ number of objects$/;"	m	class:perm_pref	access:public
perm_pref::next	src/comb/perm-pref.h	/^    ulong next()$/;"	f	class:perm_pref	access:public	signature:()
perm_pref::operator =	src/comb/perm-pref.h	/^    perm_pref & operator = (const perm_pref&);  \/\/ forbidden$/;"	p	class:perm_pref	access:private	signature:(const perm_pref&)
perm_pref::perm_pref	src/comb/perm-pref.h	/^    explicit perm_pref(ulong n)$/;"	f	class:perm_pref	access:public	signature:(ulong n)
perm_pref::perm_pref	src/comb/perm-pref.h	/^    perm_pref(const perm_pref&);  \/\/ forbidden$/;"	p	class:perm_pref	access:private	signature:(const perm_pref&)
perm_pref::~perm_pref	src/comb/perm-pref.h	/^    ~perm_pref()$/;"	f	class:perm_pref	access:public	signature:()
perm_r1	demo/perm/perm-decomp-demo.cc	/^perm_r1(const ulong *f, ulong n,$/;"	f	file:	signature:(const ulong *f, ulong n, const char *str, PF p1)
perm_r2	demo/perm/perm-decomp-demo.cc	/^perm_r2(const ulong *f, ulong n,$/;"	f	file:	signature:(const ulong *f, ulong n, const char *str, PF p1, const char *pstr, PF pp, ulong *g)
perm_rec	src/comb/perm-rec.h	/^    explicit perm_rec(ulong n)$/;"	f	class:perm_rec	access:public	signature:(ulong n)
perm_rec	src/comb/perm-rec.h	/^    perm_rec(const perm_rec&);  \/\/ forbidden$/;"	p	class:perm_rec	access:private	signature:(const perm_rec&)
perm_rec	src/comb/perm-rec.h	/^class perm_rec$/;"	c
perm_rec::data	src/comb/perm-rec.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_rec	access:public	signature:() const
perm_rec::first	src/comb/perm-rec.h	/^    void first()$/;"	f	class:perm_rec	access:public	signature:()
perm_rec::generate	src/comb/perm-rec.h	/^    void generate(void (*visit)(const perm_rec &))$/;"	f	class:perm_rec	access:public	signature:(void (*visit)(const perm_rec &))
perm_rec::generate_cyclic	src/comb/perm-rec.h	/^    void generate_cyclic(void (*visit)(const perm_rec &))$/;"	f	class:perm_rec	access:public	signature:(void (*visit)(const perm_rec &))
perm_rec::n_	src/comb/perm-rec.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_rec	access:public
perm_rec::next_cyclic_rec	src/comb/perm-rec.h	/^    void next_cyclic_rec(ulong d)$/;"	f	class:perm_rec	access:private	signature:(ulong d)
perm_rec::next_rec	src/comb/perm-rec.h	/^    void next_rec(ulong d)$/;"	f	class:perm_rec	access:private	signature:(ulong d)
perm_rec::operator =	src/comb/perm-rec.h	/^    perm_rec & operator = (const perm_rec&);  \/\/ forbidden$/;"	p	class:perm_rec	access:private	signature:(const perm_rec&)
perm_rec::perm_rec	src/comb/perm-rec.h	/^    explicit perm_rec(ulong n)$/;"	f	class:perm_rec	access:public	signature:(ulong n)
perm_rec::perm_rec	src/comb/perm-rec.h	/^    perm_rec(const perm_rec&);  \/\/ forbidden$/;"	p	class:perm_rec	access:private	signature:(const perm_rec&)
perm_rec::visit_	src/comb/perm-rec.h	/^    void (*visit_)(const perm_rec &);  \/\/ function to call with each permutation$/;"	m	class:perm_rec	access:public
perm_rec::x_	src/comb/perm-rec.h	/^    ulong *x_;   \/\/ permutation$/;"	m	class:perm_rec	access:public
perm_rec::~perm_rec	src/comb/perm-rec.h	/^    ~perm_rec()$/;"	f	class:perm_rec	access:public	signature:()
perm_recognize	demo/perm/perm-decomp-demo.cc	/^perm_recognize(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
perm_restrpref	src/comb/perm-restrpref.h	/^    explicit perm_restrpref(ulong nn,$/;"	f	class:perm_restrpref	access:public	signature:(ulong nn, bool (*cnd)(const ulong *a, ulong k), void (*vst)(const ulong *a, ulong n, ulong ct))
perm_restrpref	src/comb/perm-restrpref.h	/^    perm_restrpref(const perm_restrpref&);  \/\/ forbidden$/;"	p	class:perm_restrpref	access:private	signature:(const perm_restrpref&)
perm_restrpref	src/comb/perm-restrpref.h	/^class perm_restrpref$/;"	c
perm_restrpref::a	src/comb/perm-restrpref.h	/^    ulong *a;  \/\/ current permutation of {1, ..., n}, one-based array!$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::all	src/comb/perm-restrpref.h	/^    ulong all()$/;"	f	class:perm_restrpref	access:public	signature:()
perm_restrpref::cond	src/comb/perm-restrpref.h	/^    bool (*cond)(const ulong*, ulong);  \/\/ condition function$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::l	src/comb/perm-restrpref.h	/^    ulong *l;  \/\/ auxiliary table: links$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::n	src/comb/perm-restrpref.h	/^    ulong n;   \/\/ number of elements to permute$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::operator =	src/comb/perm-restrpref.h	/^    perm_restrpref & operator = (const perm_restrpref&);  \/\/ forbidden$/;"	p	class:perm_restrpref	access:private	signature:(const perm_restrpref&)
perm_restrpref::perm_restrpref	src/comb/perm-restrpref.h	/^    explicit perm_restrpref(ulong nn,$/;"	f	class:perm_restrpref	access:public	signature:(ulong nn, bool (*cnd)(const ulong *a, ulong k), void (*vst)(const ulong *a, ulong n, ulong ct))
perm_restrpref::perm_restrpref	src/comb/perm-restrpref.h	/^    perm_restrpref(const perm_restrpref&);  \/\/ forbidden$/;"	p	class:perm_restrpref	access:private	signature:(const perm_restrpref&)
perm_restrpref::u	src/comb/perm-restrpref.h	/^    ulong *u;  \/\/ auxiliary table: undo operations$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::visit	src/comb/perm-restrpref.h	/^    void (*visit)(const ulong*, ulong, ulong);  \/\/ visit function$/;"	m	class:perm_restrpref	access:protected
perm_restrpref::~perm_restrpref	src/comb/perm-restrpref.h	/^    ~perm_restrpref()$/;"	f	class:perm_restrpref	access:public	signature:()
perm_rev	src/comb/perm-rev.h	/^    explicit perm_rev(ulong n)$/;"	f	class:perm_rev	access:public	signature:(ulong n)
perm_rev	src/comb/perm-rev.h	/^    perm_rev(const perm_rev&);  \/\/ forbidden$/;"	p	class:perm_rev	access:private	signature:(const perm_rev&)
perm_rev	src/comb/perm-rev.h	/^class perm_rev$/;"	c
perm_rev2	src/comb/perm-rev2.h	/^    explicit perm_rev2(ulong n)$/;"	f	class:perm_rev2	access:public	signature:(ulong n)
perm_rev2	src/comb/perm-rev2.h	/^    perm_rev2(const perm_rev2&);  \/\/ forbidden$/;"	p	class:perm_rev2	access:private	signature:(const perm_rev2&)
perm_rev2	src/comb/perm-rev2.h	/^class perm_rev2$/;"	c
perm_rev2::ct_	src/comb/perm-rev2.h	/^    ulong ct_;  \/\/ count 5,4,3,2,1,(0); nonzero ==> easy cases$/;"	m	class:perm_rev2	access:public
perm_rev2::d_	src/comb/perm-rev2.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_rev2	access:public
perm_rev2::data	src/comb/perm-rev2.h	/^    const ulong * data()  const { return p_; }$/;"	f	class:perm_rev2	access:public	signature:() const
perm_rev2::first	src/comb/perm-rev2.h	/^    void first()$/;"	f	class:perm_rev2	access:public	signature:()
perm_rev2::n_	src/comb/perm-rev2.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_rev2	access:public
perm_rev2::next	src/comb/perm-rev2.h	/^    ulong next()$/;"	f	class:perm_rev2	access:public	signature:()
perm_rev2::operator =	src/comb/perm-rev2.h	/^    perm_rev2 & operator = (const perm_rev2&);  \/\/ forbidden$/;"	p	class:perm_rev2	access:private	signature:(const perm_rev2&)
perm_rev2::p_	src/comb/perm-rev2.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_rev2	access:public
perm_rev2::perm_rev2	src/comb/perm-rev2.h	/^    explicit perm_rev2(ulong n)$/;"	f	class:perm_rev2	access:public	signature:(ulong n)
perm_rev2::perm_rev2	src/comb/perm-rev2.h	/^    perm_rev2(const perm_rev2&);  \/\/ forbidden$/;"	p	class:perm_rev2	access:private	signature:(const perm_rev2&)
perm_rev2::print	src/comb/perm-rev2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rev2	access:public	signature:(const char *bla, bool dfz=false) const
perm_rev2::~perm_rev2	src/comb/perm-rev2.h	/^    ~perm_rev2()$/;"	f	class:perm_rev2	access:public	signature:()
perm_rev::d_	src/comb/perm-rev.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_rev	access:public
perm_rev::data	src/comb/perm-rev.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_rev	access:public	signature:() const
perm_rev::first	src/comb/perm-rev.h	/^    void first()$/;"	f	class:perm_rev	access:public	signature:()
perm_rev::goto_rfact	src/comb/perm-rev.h	/^    void goto_rfact(const ulong *d)$/;"	f	class:perm_rev	access:public	signature:(const ulong *d)
perm_rev::last	src/comb/perm-rev.h	/^    void last()$/;"	f	class:perm_rev	access:public	signature:()
perm_rev::n_	src/comb/perm-rev.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_rev	access:public
perm_rev::next	src/comb/perm-rev.h	/^    bool next()$/;"	f	class:perm_rev	access:public	signature:()
perm_rev::operator =	src/comb/perm-rev.h	/^    perm_rev & operator = (const perm_rev&);  \/\/ forbidden$/;"	p	class:perm_rev	access:private	signature:(const perm_rev&)
perm_rev::p_	src/comb/perm-rev.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_rev	access:public
perm_rev::perm_rev	src/comb/perm-rev.h	/^    explicit perm_rev(ulong n)$/;"	f	class:perm_rev	access:public	signature:(ulong n)
perm_rev::perm_rev	src/comb/perm-rev.h	/^    perm_rev(const perm_rev&);  \/\/ forbidden$/;"	p	class:perm_rev	access:private	signature:(const perm_rev&)
perm_rev::prev	src/comb/perm-rev.h	/^    bool prev()$/;"	f	class:perm_rev	access:public	signature:()
perm_rev::print	src/comb/perm-rev.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rev	access:public	signature:(const char *bla, bool dfz=false) const
perm_rev::~perm_rev	src/comb/perm-rev.h	/^    ~perm_rev()$/;"	f	class:perm_rev	access:public	signature:()
perm_rev_compl	src/comb/fact2perm.cc	/^perm_rev_compl(ulong *x, ulong n, bool zb\/*=true*\/)$/;"	f	signature:(ulong *x, ulong n, bool zb )
perm_rev_compl	src/comb/fact2perm.h	/^void perm_rev_compl(ulong *x, ulong n, bool zb=true);$/;"	p	signature:(ulong *x, ulong n, bool zb=true)
perm_rot	src/comb/perm-rot.h	/^    explicit perm_rot(ulong n)$/;"	f	class:perm_rot	access:public	signature:(ulong n)
perm_rot	src/comb/perm-rot.h	/^    perm_rot(const perm_rot&);  \/\/ forbidden$/;"	p	class:perm_rot	access:private	signature:(const perm_rot&)
perm_rot	src/comb/perm-rot.h	/^class perm_rot$/;"	c
perm_rot::a_	src/comb/perm-rot.h	/^    ulong *a_;  \/\/ permutation of n elements$/;"	m	class:perm_rot	access:public
perm_rot::data	src/comb/perm-rot.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:perm_rot	access:public	signature:() const
perm_rot::first	src/comb/perm-rot.h	/^    void first()$/;"	f	class:perm_rot	access:public	signature:()
perm_rot::goto_ffact	src/comb/perm-rot.h	/^    void goto_ffact(const ulong *d)$/;"	f	class:perm_rot	access:public	signature:(const ulong *d)
perm_rot::n_	src/comb/perm-rot.h	/^    ulong n_;   \/\/ Number of elements$/;"	m	class:perm_rot	access:public
perm_rot::next	src/comb/perm-rot.h	/^    bool next()$/;"	f	class:perm_rot	access:public	signature:()
perm_rot::operator =	src/comb/perm-rot.h	/^    perm_rot & operator = (const perm_rot&);  \/\/ forbidden$/;"	p	class:perm_rot	access:private	signature:(const perm_rot&)
perm_rot::perm_rot	src/comb/perm-rot.h	/^    explicit perm_rot(ulong n)$/;"	f	class:perm_rot	access:public	signature:(ulong n)
perm_rot::perm_rot	src/comb/perm-rot.h	/^    perm_rot(const perm_rot&);  \/\/ forbidden$/;"	p	class:perm_rot	access:private	signature:(const perm_rot&)
perm_rot::print	src/comb/perm-rot.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rot	access:public	signature:(const char *bla, bool dfz=false) const
perm_rot::~perm_rot	src/comb/perm-rot.h	/^    ~perm_rot()$/;"	f	class:perm_rot	access:public	signature:()
perm_st	src/comb/perm-st.h	/^    explicit perm_st(ulong n)$/;"	f	class:perm_st	access:public	signature:(ulong n)
perm_st	src/comb/perm-st.h	/^    perm_st(const perm_st&);  \/\/ forbidden$/;"	p	class:perm_st	access:private	signature:(const perm_st&)
perm_st	src/comb/perm-st.h	/^class perm_st$/;"	c
perm_st::d_	src/comb/perm-st.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_st	access:public
perm_st::data	src/comb/perm-st.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_st	access:public	signature:() const
perm_st::first	src/comb/perm-st.h	/^    void first()$/;"	f	class:perm_st	access:public	signature:()
perm_st::first_id	src/comb/perm-st.h	/^    void first_id()  \/\/ start with identical permutation$/;"	f	class:perm_st	access:public	signature:()
perm_st::invdata	src/comb/perm-st.h	/^    const ulong * invdata()  const  { return pi_; }$/;"	f	class:perm_st	access:public	signature:() const
perm_st::n_	src/comb/perm-st.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_st	access:public
perm_st::next	src/comb/perm-st.h	/^    bool next()$/;"	f	class:perm_st	access:public	signature:()
perm_st::operator =	src/comb/perm-st.h	/^    perm_st & operator = (const perm_st&);  \/\/ forbidden$/;"	p	class:perm_st	access:private	signature:(const perm_st&)
perm_st::p_	src/comb/perm-st.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_st	access:public
perm_st::perm_st	src/comb/perm-st.h	/^    explicit perm_st(ulong n)$/;"	f	class:perm_st	access:public	signature:(ulong n)
perm_st::perm_st	src/comb/perm-st.h	/^    perm_st(const perm_st&);  \/\/ forbidden$/;"	p	class:perm_st	access:private	signature:(const perm_st&)
perm_st::pi_	src/comb/perm-st.h	/^    ulong *pi_;  \/\/ inverse permutation$/;"	m	class:perm_st	access:public
perm_st::print	src/comb/perm-st.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st	access:public	signature:(const char *bla, bool dfz=false) const
perm_st::print_inv	src/comb/perm-st.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st	access:public	signature:(const char *bla, bool dfz=false) const
perm_st::~perm_st	src/comb/perm-st.h	/^    ~perm_st()$/;"	f	class:perm_st	access:public	signature:()
perm_st_gray	src/comb/perm-st-gray.h	/^    explicit perm_st_gray(ulong n)$/;"	f	class:perm_st_gray	access:public	signature:(ulong n)
perm_st_gray	src/comb/perm-st-gray.h	/^    perm_st_gray(const perm_st_gray&);  \/\/ forbidden$/;"	p	class:perm_st_gray	access:private	signature:(const perm_st_gray&)
perm_st_gray	src/comb/perm-st-gray.h	/^class perm_st_gray$/;"	c
perm_st_gray::G	src/comb/perm-st-gray.h	/^    perm_gray_rot1 *G;  \/\/ underlying permutations$/;"	m	class:perm_st_gray	access:public
perm_st_gray::data	src/comb/perm-st-gray.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_st_gray	access:public	signature:() const
perm_st_gray::first	src/comb/perm-st-gray.h	/^    void first()$/;"	f	class:perm_st_gray	access:public	signature:()
perm_st_gray::invdata	src/comb/perm-st-gray.h	/^    const ulong * invdata()  const  { return ix_; }$/;"	f	class:perm_st_gray	access:public	signature:() const
perm_st_gray::ix_	src/comb/perm-st-gray.h	/^    ulong *ix_;  \/\/ inverse permutation$/;"	m	class:perm_st_gray	access:public
perm_st_gray::n_	src/comb/perm-st-gray.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_st_gray	access:public
perm_st_gray::next	src/comb/perm-st-gray.h	/^    bool next()$/;"	f	class:perm_st_gray	access:public	signature:()
perm_st_gray::operator =	src/comb/perm-st-gray.h	/^    perm_st_gray & operator = (const perm_st_gray&);  \/\/ forbidden$/;"	p	class:perm_st_gray	access:private	signature:(const perm_st_gray&)
perm_st_gray::perm_st_gray	src/comb/perm-st-gray.h	/^    explicit perm_st_gray(ulong n)$/;"	f	class:perm_st_gray	access:public	signature:(ulong n)
perm_st_gray::perm_st_gray	src/comb/perm-st-gray.h	/^    perm_st_gray(const perm_st_gray&);  \/\/ forbidden$/;"	p	class:perm_st_gray	access:private	signature:(const perm_st_gray&)
perm_st_gray::print	src/comb/perm-st-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_gray	access:public	signature:(const char *bla, bool dfz=false) const
perm_st_gray::sct_	src/comb/perm-st-gray.h	/^    ulong sct_;  \/\/ count cyclic shifts$/;"	m	class:perm_st_gray	access:public
perm_st_gray::swap_elements	src/comb/perm-st-gray.h	/^    void swap_elements(ulong x1, ulong x2)$/;"	f	class:perm_st_gray	access:private	signature:(ulong x1, ulong x2)
perm_st_gray::swap_positions	src/comb/perm-st-gray.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:perm_st_gray	access:private	signature:(ulong i1, ulong i2)
perm_st_gray::x_	src/comb/perm-st-gray.h	/^    ulong *x_;   \/\/ permutation$/;"	m	class:perm_st_gray	access:public
perm_st_gray::~perm_st_gray	src/comb/perm-st-gray.h	/^    ~perm_st_gray()$/;"	f	class:perm_st_gray	access:public	signature:()
perm_st_pref	src/comb/perm-st-pref.h	/^    explicit perm_st_pref(ulong n)$/;"	f	class:perm_st_pref	access:public	signature:(ulong n)
perm_st_pref	src/comb/perm-st-pref.h	/^    perm_st_pref(const perm_st_pref&);  \/\/ forbidden$/;"	p	class:perm_st_pref	access:private	signature:(const perm_st_pref&)
perm_st_pref	src/comb/perm-st-pref.h	/^class perm_st_pref$/;"	c
perm_st_pref::d_	src/comb/perm-st-pref.h	/^    ulong *d_;  \/\/ mixed radix digits with radix = [2, 3, 4, ..., n-1, (sentinel=-1)]$/;"	m	class:perm_st_pref	access:public
perm_st_pref::data	src/comb/perm-st-pref.h	/^    const ulong * data()  const  { return p_; }$/;"	f	class:perm_st_pref	access:public	signature:() const
perm_st_pref::first	src/comb/perm-st-pref.h	/^    void first()$/;"	f	class:perm_st_pref	access:public	signature:()
perm_st_pref::first_id	src/comb/perm-st-pref.h	/^    void first_id()  \/\/ start with identical permutation$/;"	f	class:perm_st_pref	access:public	signature:()
perm_st_pref::invdata	src/comb/perm-st-pref.h	/^    const ulong * invdata()  const  { return pi_; }$/;"	f	class:perm_st_pref	access:public	signature:() const
perm_st_pref::n_	src/comb/perm-st-pref.h	/^    ulong n_;   \/\/ permutations of n elements$/;"	m	class:perm_st_pref	access:public
perm_st_pref::next	src/comb/perm-st-pref.h	/^    bool next()$/;"	f	class:perm_st_pref	access:public	signature:()
perm_st_pref::operator =	src/comb/perm-st-pref.h	/^    perm_st_pref & operator = (const perm_st_pref&);  \/\/ forbidden$/;"	p	class:perm_st_pref	access:private	signature:(const perm_st_pref&)
perm_st_pref::p_	src/comb/perm-st-pref.h	/^    ulong *p_;  \/\/ permutation$/;"	m	class:perm_st_pref	access:public
perm_st_pref::perm_st_pref	src/comb/perm-st-pref.h	/^    explicit perm_st_pref(ulong n)$/;"	f	class:perm_st_pref	access:public	signature:(ulong n)
perm_st_pref::perm_st_pref	src/comb/perm-st-pref.h	/^    perm_st_pref(const perm_st_pref&);  \/\/ forbidden$/;"	p	class:perm_st_pref	access:private	signature:(const perm_st_pref&)
perm_st_pref::pi_	src/comb/perm-st-pref.h	/^    ulong *pi_;  \/\/ inverse permutation$/;"	m	class:perm_st_pref	access:public
perm_st_pref::print	src/comb/perm-st-pref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_pref	access:public	signature:(const char *bla, bool dfz=false) const
perm_st_pref::print_inv	src/comb/perm-st-pref.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_pref	access:public	signature:(const char *bla, bool dfz=false) const
perm_st_pref::~perm_st_pref	src/comb/perm-st-pref.h	/^    ~perm_st_pref()$/;"	f	class:perm_st_pref	access:public	signature:()
perm_star	src/comb/perm-star.h	/^    explicit perm_star(ulong n)$/;"	f	class:perm_star	access:public	signature:(ulong n)
perm_star	src/comb/perm-star.h	/^    perm_star(const perm_star&);  \/\/ forbidden$/;"	p	class:perm_star	access:private	signature:(const perm_star&)
perm_star	src/comb/perm-star.h	/^class perm_star$/;"	c
perm_star::a_	src/comb/perm-star.h	/^    ulong *a_;   \/\/ current permutation$/;"	m	class:perm_star	access:public
perm_star::a_	src/comb/perm-star.h	/^    ulong a_[32];   \/\/ current permutation$/;"	m	class:perm_star	access:public
perm_star::b_	src/comb/perm-star.h	/^    ulong *b_;   \/\/ auxiliary array$/;"	m	class:perm_star	access:public
perm_star::b_	src/comb/perm-star.h	/^    ulong b_[32];   \/\/ auxiliary array$/;"	m	class:perm_star	access:public
perm_star::c_	src/comb/perm-star.h	/^    ulong *c_;   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star	access:public
perm_star::c_	src/comb/perm-star.h	/^    ulong c_[32];   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star	access:public
perm_star::data	src/comb/perm-star.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:perm_star	access:public	signature:() const
perm_star::first	src/comb/perm-star.h	/^    void first()$/;"	f	class:perm_star	access:public	signature:()
perm_star::get_swap	src/comb/perm-star.h	/^    ulong get_swap()  const  { return swp_; }$/;"	f	class:perm_star	access:public	signature:() const
perm_star::get_swap	src/comb/perm-star.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=0; s2=swp_; }$/;"	f	class:perm_star	access:public	signature:(ulong &s1, ulong &s2) const
perm_star::ia_	src/comb/perm-star.h	/^    ulong *ia_;   \/\/ inverse permutation$/;"	m	class:perm_star	access:public
perm_star::ia_	src/comb/perm-star.h	/^    ulong ia_[32];   \/\/ inverse permutation$/;"	m	class:perm_star	access:public
perm_star::invdata	src/comb/perm-star.h	/^    const ulong *invdata()  const  { return ia_; }$/;"	f	class:perm_star	access:public	signature:() const
perm_star::n_	src/comb/perm-star.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_star	access:public
perm_star::next	src/comb/perm-star.h	/^    bool next()$/;"	f	class:perm_star	access:public	signature:()
perm_star::operator =	src/comb/perm-star.h	/^    perm_star & operator = (const perm_star&);  \/\/ forbidden$/;"	p	class:perm_star	access:private	signature:(const perm_star&)
perm_star::perm_star	src/comb/perm-star.h	/^    explicit perm_star(ulong n)$/;"	f	class:perm_star	access:public	signature:(ulong n)
perm_star::perm_star	src/comb/perm-star.h	/^    perm_star(const perm_star&);  \/\/ forbidden$/;"	p	class:perm_star	access:private	signature:(const perm_star&)
perm_star::print	src/comb/perm-star.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_star	access:public	signature:(const char *bla, bool dfz=false) const
perm_star::print_inv	src/comb/perm-star.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_star	access:public	signature:(const char *bla, bool dfz=false) const
perm_star::swp_	src/comb/perm-star.h	/^    ulong swp_;  \/\/ index of element that was swapped (with index 0)$/;"	m	class:perm_star	access:public
perm_star::~perm_star	src/comb/perm-star.h	/^    ~perm_star()$/;"	f	class:perm_star	access:public	signature:()
perm_star_swaps	src/comb/perm-star-swaps.h	/^    explicit perm_star_swaps(ulong n)$/;"	f	class:perm_star_swaps	access:public	signature:(ulong n)
perm_star_swaps	src/comb/perm-star-swaps.h	/^    perm_star_swaps(const perm_star_swaps&);  \/\/ forbidden$/;"	p	class:perm_star_swaps	access:private	signature:(const perm_star_swaps&)
perm_star_swaps	src/comb/perm-star-swaps.h	/^class perm_star_swaps$/;"	c
perm_star_swaps::b_	src/comb/perm-star-swaps.h	/^    ulong *b_;   \/\/ auxiliary array$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::b_	src/comb/perm-star-swaps.h	/^    ulong b_[32];$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::c_	src/comb/perm-star-swaps.h	/^    ulong *c_;   \/\/ auxiliary array: mixed radix number in rising factorial base$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::c_	src/comb/perm-star-swaps.h	/^    ulong c_[32];$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::first	src/comb/perm-star-swaps.h	/^    void first()$/;"	f	class:perm_star_swaps	access:public	signature:()
perm_star_swaps::get_swap	src/comb/perm-star-swaps.h	/^    ulong get_swap()  const  { return swp_; }$/;"	f	class:perm_star_swaps	access:public	signature:() const
perm_star_swaps::get_swap	src/comb/perm-star-swaps.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=0; s2=swp_; }$/;"	f	class:perm_star_swaps	access:public	signature:(ulong &s1, ulong &s2) const
perm_star_swaps::n_	src/comb/perm-star-swaps.h	/^    ulong n_;    \/\/ number of elements$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::next	src/comb/perm-star-swaps.h	/^    bool next()$/;"	f	class:perm_star_swaps	access:public	signature:()
perm_star_swaps::operator =	src/comb/perm-star-swaps.h	/^    perm_star_swaps & operator = (const perm_star_swaps&);  \/\/ forbidden$/;"	p	class:perm_star_swaps	access:private	signature:(const perm_star_swaps&)
perm_star_swaps::perm_star_swaps	src/comb/perm-star-swaps.h	/^    explicit perm_star_swaps(ulong n)$/;"	f	class:perm_star_swaps	access:public	signature:(ulong n)
perm_star_swaps::perm_star_swaps	src/comb/perm-star-swaps.h	/^    perm_star_swaps(const perm_star_swaps&);  \/\/ forbidden$/;"	p	class:perm_star_swaps	access:private	signature:(const perm_star_swaps&)
perm_star_swaps::swp_	src/comb/perm-star-swaps.h	/^    ulong swp_;  \/\/ index of element that was swapped (with index 0)$/;"	m	class:perm_star_swaps	access:public
perm_star_swaps::~perm_star_swaps	src/comb/perm-star-swaps.h	/^    ~perm_star_swaps()$/;"	f	class:perm_star_swaps	access:public	signature:()
perm_trotter	src/comb/attic/perm-trotter.h	/^    perm_trotter(ulong nn) \/\/ nn>=2$/;"	f	class:perm_trotter	access:public	signature:(ulong nn)
perm_trotter	src/comb/attic/perm-trotter.h	/^class perm_trotter$/;"	c
perm_trotter	src/comb/perm-trotter.h	/^    explicit perm_trotter(ulong n)$/;"	f	class:perm_trotter	access:public	signature:(ulong n)
perm_trotter	src/comb/perm-trotter.h	/^    perm_trotter(const perm_trotter&);  \/\/ forbidden$/;"	p	class:perm_trotter	access:private	signature:(const perm_trotter&)
perm_trotter	src/comb/perm-trotter.h	/^class perm_trotter$/;"	c
perm_trotter::ctm_	src/comb/perm-trotter.h	/^    ulong ctm_;  \/\/ counter to detect easy case$/;"	m	class:perm_trotter	access:public
perm_trotter::d0_	src/comb/perm-trotter.h	/^    ulong d0_;   \/\/ direction of element zero$/;"	m	class:perm_trotter	access:public
perm_trotter::d_	src/comb/attic/perm-trotter.h	/^    ulong *d_;  \/\/ auxiliary: directions$/;"	m	class:perm_trotter	access:public
perm_trotter::d_	src/comb/perm-trotter.h	/^    ulong *d_;    \/\/ auxiliary: directions$/;"	m	class:perm_trotter	access:public
perm_trotter::data	src/comb/attic/perm-trotter.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter	access:public	signature:() const
perm_trotter::data	src/comb/perm-trotter.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter	access:public	signature:() const
perm_trotter::first	src/comb/attic/perm-trotter.h	/^    void first()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::first	src/comb/perm-trotter.h	/^    void first()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::fl_swaps	src/comb/perm-trotter.h	/^    void fl_swaps()$/;"	f	class:perm_trotter	access:private	signature:()
perm_trotter::get_swap	src/comb/attic/perm-trotter.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter	access:public	signature:(ulong &s1, ulong &s2) const
perm_trotter::get_swap	src/comb/perm-trotter.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter	access:public	signature:(ulong &s1, ulong &s2) const
perm_trotter::invdata	src/comb/perm-trotter.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_trotter	access:public	signature:() const
perm_trotter::last	src/comb/perm-trotter.h	/^    void last()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::n_	src/comb/attic/perm-trotter.h	/^    ulong n_;   \/\/ number of elements to permute$/;"	m	class:perm_trotter	access:public
perm_trotter::n_	src/comb/perm-trotter.h	/^    ulong n_;     \/\/ number of elements to permute$/;"	m	class:perm_trotter	access:public
perm_trotter::next	src/comb/attic/perm-trotter.h	/^    bool next()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::next	src/comb/perm-trotter.h	/^    bool next()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::operator =	src/comb/perm-trotter.h	/^    perm_trotter & operator = (const perm_trotter&);  \/\/ forbidden$/;"	p	class:perm_trotter	access:private	signature:(const perm_trotter&)
perm_trotter::p_	src/comb/attic/perm-trotter.h	/^    ulong *p_;  \/\/ auxiliary: mixed radix counting$/;"	m	class:perm_trotter	access:public
perm_trotter::perm_trotter	src/comb/attic/perm-trotter.h	/^    perm_trotter(ulong nn) \/\/ nn>=2$/;"	f	class:perm_trotter	access:public	signature:(ulong nn)
perm_trotter::perm_trotter	src/comb/perm-trotter.h	/^    explicit perm_trotter(ulong n)$/;"	f	class:perm_trotter	access:public	signature:(ulong n)
perm_trotter::perm_trotter	src/comb/perm-trotter.h	/^    perm_trotter(const perm_trotter&);  \/\/ forbidden$/;"	p	class:perm_trotter	access:private	signature:(const perm_trotter&)
perm_trotter::prev	src/comb/perm-trotter.h	/^    bool prev()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::print	src/comb/attic/perm-trotter.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
perm_trotter::print	src/comb/perm-trotter.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
perm_trotter::print_inv	src/comb/perm-trotter.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
perm_trotter::small_n	src/comb/perm-trotter.h	/^    void small_n()$/;"	f	class:perm_trotter	access:private	signature:()
perm_trotter::sw1_	src/comb/attic/perm-trotter.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
perm_trotter::sw1_	src/comb/perm-trotter.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
perm_trotter::sw2_	src/comb/attic/perm-trotter.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
perm_trotter::sw2_	src/comb/perm-trotter.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
perm_trotter::x_	src/comb/attic/perm-trotter.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_trotter	access:public
perm_trotter::x_	src/comb/perm-trotter.h	/^    ulong *x_;    \/\/ permutation of {0, 1, ..., n-1}$/;"	m	class:perm_trotter	access:public
perm_trotter::xi0_	src/comb/perm-trotter.h	/^    ulong xi0_;  \/\/ position of element zero$/;"	m	class:perm_trotter	access:public
perm_trotter::xi_	src/comb/perm-trotter.h	/^    ulong *xi_;   \/\/ inverse permutation$/;"	m	class:perm_trotter	access:public
perm_trotter::~perm_trotter	src/comb/attic/perm-trotter.h	/^    ~perm_trotter()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter::~perm_trotter	src/comb/perm-trotter.h	/^    ~perm_trotter()$/;"	f	class:perm_trotter	access:public	signature:()
perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    explicit perm_trotter_lg(ulong n)$/;"	f	class:perm_trotter_lg	access:public	signature:(ulong n)
perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    perm_trotter_lg(const perm_trotter_lg&);  \/\/ forbidden$/;"	p	class:perm_trotter_lg	access:private	signature:(const perm_trotter_lg&)
perm_trotter_lg	src/comb/perm-trotter-lg.h	/^class perm_trotter_lg$/;"	c
perm_trotter_lg::d_	src/comb/perm-trotter-lg.h	/^    ulong *d_;    \/\/ auxiliary: directions$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::data	src/comb/perm-trotter-lg.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:perm_trotter_lg	access:public	signature:() const
perm_trotter_lg::first	src/comb/perm-trotter-lg.h	/^    void first()$/;"	f	class:perm_trotter_lg	access:public	signature:()
perm_trotter_lg::get_swap	src/comb/perm-trotter-lg.h	/^    void get_swap(ulong &s1, ulong &s2)  const  { s1=sw1_; s2=sw2_; }$/;"	f	class:perm_trotter_lg	access:public	signature:(ulong &s1, ulong &s2) const
perm_trotter_lg::invdata	src/comb/perm-trotter-lg.h	/^    const ulong * invdata()  const  { return xi_; }$/;"	f	class:perm_trotter_lg	access:public	signature:() const
perm_trotter_lg::last	src/comb/perm-trotter-lg.h	/^    void last()$/;"	f	class:perm_trotter_lg	access:public	signature:()
perm_trotter_lg::n_	src/comb/perm-trotter-lg.h	/^    ulong n_;     \/\/ number of elements to permute$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::next	src/comb/perm-trotter-lg.h	/^    bool next()$/;"	f	class:perm_trotter_lg	access:public	signature:()
perm_trotter_lg::operator =	src/comb/perm-trotter-lg.h	/^    perm_trotter_lg & operator = (const perm_trotter_lg&);  \/\/ forbidden$/;"	p	class:perm_trotter_lg	access:private	signature:(const perm_trotter_lg&)
perm_trotter_lg::perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    explicit perm_trotter_lg(ulong n)$/;"	f	class:perm_trotter_lg	access:public	signature:(ulong n)
perm_trotter_lg::perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    perm_trotter_lg(const perm_trotter_lg&);  \/\/ forbidden$/;"	p	class:perm_trotter_lg	access:private	signature:(const perm_trotter_lg&)
perm_trotter_lg::prev	src/comb/perm-trotter-lg.h	/^    bool prev()$/;"	f	class:perm_trotter_lg	access:public	signature:()
perm_trotter_lg::print	src/comb/perm-trotter-lg.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter_lg	access:public	signature:(const char *bla, bool dfz=false) const
perm_trotter_lg::print_inv	src/comb/perm-trotter-lg.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter_lg	access:public	signature:(const char *bla, bool dfz=false) const
perm_trotter_lg::small_n	src/comb/perm-trotter-lg.h	/^    void small_n()$/;"	f	class:perm_trotter_lg	access:private	signature:()
perm_trotter_lg::sw1_	src/comb/perm-trotter-lg.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::sw2_	src/comb/perm-trotter-lg.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::x_	src/comb/perm-trotter-lg.h	/^    ulong *x_;    \/\/ permutation of {0, 1, ..., n-1}$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::xi_	src/comb/perm-trotter-lg.h	/^    ulong *xi_;   \/\/ inverse permutation$/;"	m	class:perm_trotter_lg	access:public
perm_trotter_lg::~perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    ~perm_trotter_lg()$/;"	f	class:perm_trotter_lg	access:public	signature:()
perm_visit	src/comb/attic/permvisit.cc	/^perm_visit::perm_visit(ulong nn)$/;"	f	class:perm_visit	signature:(ulong nn)
perm_visit	src/comb/attic/permvisit.h	/^    perm_visit(ulong nn);$/;"	p	class:perm_visit	access:public	signature:(ulong nn)
perm_visit	src/comb/attic/permvisit.h	/^class perm_visit$/;"	c
perm_visit::current	src/comb/attic/permvisit.h	/^    ulong current()  const  { return idx; }$/;"	f	class:perm_visit	access:public	signature:() const
perm_visit::data	src/comb/attic/permvisit.h	/^    const ulong *data()  const  { return x; }$/;"	f	class:perm_visit	access:public	signature:() const
perm_visit::fe	src/comb/attic/permvisit.h	/^    funcemu<ulong> *fe;$/;"	m	class:perm_visit	access:protected
perm_visit::first	src/comb/attic/permvisit.cc	/^perm_visit::first()$/;"	f	class:perm_visit	signature:()
perm_visit::first	src/comb/attic/permvisit.h	/^    void first();$/;"	p	class:perm_visit	access:protected	signature:()
perm_visit::idata	src/comb/attic/permvisit.h	/^    const ulong *idata()  const  { return xi; }$/;"	f	class:perm_visit	access:public	signature:() const
perm_visit::idx	src/comb/attic/permvisit.h	/^    ulong idx;$/;"	m	class:perm_visit	access:protected
perm_visit::n	src/comb/attic/permvisit.h	/^    ulong n;$/;"	m	class:perm_visit	access:protected
perm_visit::next	src/comb/attic/permvisit.h	/^    ulong next()$/;"	f	class:perm_visit	access:public	signature:()
perm_visit::next_recursion	src/comb/attic/permvisit.cc	/^perm_visit::next_recursion()$/;"	f	class:perm_visit	signature:()
perm_visit::next_recursion	src/comb/attic/permvisit.h	/^    ulong next_recursion();$/;"	p	class:perm_visit	access:protected	signature:()
perm_visit::perm_visit	src/comb/attic/permvisit.cc	/^perm_visit::perm_visit(ulong nn)$/;"	f	class:perm_visit	signature:(ulong nn)
perm_visit::perm_visit	src/comb/attic/permvisit.h	/^    perm_visit(ulong nn);$/;"	p	class:perm_visit	access:public	signature:(ulong nn)
perm_visit::q	src/comb/attic/permvisit.h	/^    ulong q;$/;"	m	class:perm_visit	access:protected
perm_visit::x	src/comb/attic/permvisit.h	/^    ulong *x;  \/\/ current permutation$/;"	m	class:perm_visit	access:protected
perm_visit::xi	src/comb/attic/permvisit.h	/^    ulong *xi; \/\/ inverse of x[]$/;"	m	class:perm_visit	access:protected
perm_visit::~perm_visit	src/comb/attic/permvisit.cc	/^perm_visit::~perm_visit()$/;"	f	class:perm_visit	signature:()
perm_visit::~perm_visit	src/comb/attic/permvisit.h	/^    ~perm_visit();$/;"	p	class:perm_visit	access:public	signature:()
permlex2num	src/comb/num2perm.cc	/^permlex2num(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
permlex2num	src/comb/num2perm.h	/^ulong permlex2num(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
perms	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong *perms;$/;"	v
perms	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong *perms;$/;"	v
permutations	demo/topics.txt	/^comb@ combinatorics @ Combinatorial objects like combinations, permutations, Gray codes, partitions and necklaces.$/;"	v
permutations	fxt.lsm	/^                Combinatorial generation: combinations, compositions, permutations,$/;"	v
pfct_	src/graph/digraph-paths.h	/^    ulong pfct_;  \/\/ count Paths where pfunc() returns 1$/;"	m	class:digraph_paths	access:public
pfdone_	src/graph/digraph-paths.h	/^    bool pfdone_;  \/\/ if set (by pfunc()) then search is stopped$/;"	m	class:digraph_paths	access:public
pfunc	demo/graph/graph-acgray-demo.cc	/^pfunc(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc	demo/graph/graph-complementshift-demo.cc	/^pfunc(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc	demo/graph/graph-macgray-demo.cc	/^pfunc(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_	src/graph/digraph-paths.h	/^    ulong (*pfunc_)(const digraph_paths &);$/;"	m	class:digraph_paths	access:public
pfunc_all	demo/graph/graph-monotonicgray-demo.cc	/^pfunc_all(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_db	demo/graph/graph-debruijn-demo.cc	/^pfunc_db(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_db	demo/graph/graph-debruijn-m-demo.cc	/^pfunc_db(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_fibrepgray	demo/graph/graph-fibrepgray-demo.cc	/^pfunc_fibrepgray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_gray	demo/graph/graph-gray-demo.cc	/^pfunc_gray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_lyndon_gray	demo/graph/graph-lyndon-gray-demo.cc	/^pfunc_lyndon_gray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_lyndon_gray_cyc	demo/graph/graph-lyndon-gray-demo.cc	/^pfunc_lyndon_gray_cyc(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_monotonic	demo/graph/graph-monotonicgray-demo.cc	/^pfunc_monotonic(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_mtl	demo/graph/graph-mtl-demo.cc	/^pfunc_mtl(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_parengray	demo/graph/graph-parengray-demo.cc	/^pfunc_parengray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_perm	demo/graph/graph-perm-demo.cc	/^pfunc_perm(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_perm	demo/graph/graph-perm-pref-rev-demo.cc	/^pfunc_perm(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_perm	demo/graph/graph-perm-pref-rot-demo.cc	/^pfunc_perm(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_permgray	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^pfunc_permgray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pfunc_permgray	demo/graph/graph-perm-star-transpositions-demo.cc	/^pfunc_permgray(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
pg1_	src/comb/composition-nz-weakly-unimodal.h	/^    ulong pg1_; \/\/ position of last part > 1 (initially == n + 1)$/;"	m	class:composition_nz_weakly_unimodal	access:public
phi	src/mod/mod.cc	/^umod_t          mod::phi = 0;$/;"	m	class:mod	file:
phi	src/mod/mod.h	/^    static umod_t phi;            \/\/ euler_phi(modulus)$/;"	m	class:mod	access:public
phifact	src/mod/mod.cc	/^factorization   mod::phifact;$/;"	m	class:mod	file:
phifact	src/mod/mod.h	/^    static factorization phifact;  \/\/ factorization of phi$/;"	m	class:mod	access:public
pi_	src/comb/perm-st-pref.h	/^    ulong *pi_;  \/\/ inverse permutation$/;"	m	class:perm_st_pref	access:public
pi_	src/comb/perm-st.h	/^    ulong *pi_;  \/\/ inverse permutation$/;"	m	class:perm_st	access:public
pn	demo/bits/bit2adic-demo.cc	/^ulong pn = 32;  \/\/ Number of bits shown, pn<=BITS_PER_LONG$/;"	v
pn	demo/graph/graph-fibrepgray-demo.cc	/^ulong pn;$/;"	v
pn	demo/graph/graph-parengray-demo.cc	/^ulong pn;$/;"	v
point2d	src/ds/point2d.h	/^    explicit point2d(const Type & tx, const Type & ty)$/;"	f	class:point2d	access:public	signature:(const Type & tx, const Type & ty)
point2d	src/ds/point2d.h	/^    point2d()  { ; }  \/\/ default constructor for ...$/;"	f	class:point2d	access:private	signature:()
point2d	src/ds/point2d.h	/^class point2d$/;"	c
point2d::as_vector	src/ds/point2d.h	/^    vec2d as_vector()  const  {  return vec2d( x_, y_ ); }$/;"	f	class:point2d	access:public	signature:() const
point2d::new_array	src/ds/point2d.h	/^    static point2d * new_array(ulong n)  { return new point2d[n]; }$/;"	f	class:point2d	access:public	signature:(ulong n)
point2d::operator !=	src/ds/point2d.h	/^    bool operator != (const point2d & P) const { return ( x_ != P.x_ || y_ != P.y_); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
point2d::operator +	src/ds/point2d.h	/^    point2d operator + (const vec2d & V)  const { return point2d( x_ + V.x(),  y_ + V.y() ); }$/;"	f	class:point2d	access:public	signature:(const vec2d & V) const
point2d::operator +=	src/ds/point2d.h	/^    point2d & operator += (const vec2d & V) { x_ += V.x(),  y_ += V.y();  return *this; }$/;"	f	class:point2d	access:public	signature:(const vec2d & V)
point2d::operator -	src/ds/point2d.h	/^    point2d operator - (const vec2d & V)  const { return point2d( x_ - V.x(),  y_ - V.y() ); }$/;"	f	class:point2d	access:public	signature:(const vec2d & V) const
point2d::operator -	src/ds/point2d.h	/^    vec2d operator - (const point2d & P)  const { return vec2d( x_ - P.x_,  y_ - P.y_ ); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
point2d::operator -=	src/ds/point2d.h	/^    point2d & operator -= (const vec2d & V) { x_ -= V.x(),  y_ -= V.y();  return *this; }$/;"	f	class:point2d	access:public	signature:(const vec2d & V)
point2d::operator ==	src/ds/point2d.h	/^    bool operator == (const point2d & P) const { return ( x_ == P.x_ && y_ == P.y_); }$/;"	f	class:point2d	access:public	signature:(const point2d & P) const
point2d::point2d	src/ds/point2d.h	/^    explicit point2d(const Type & tx, const Type & ty)$/;"	f	class:point2d	access:public	signature:(const Type & tx, const Type & ty)
point2d::point2d	src/ds/point2d.h	/^    point2d()  { ; }  \/\/ default constructor for ...$/;"	f	class:point2d	access:private	signature:()
point2d::vec2d	src/ds/point2d.h	/^    typedef vector2d<Type> vec2d;$/;"	t	class:point2d	access:private
point2d::x	src/ds/point2d.h	/^    Type x()  const  { return x_; }$/;"	f	class:point2d	access:public	signature:() const
point2d::x_	src/ds/point2d.h	/^    Type x_, y_;$/;"	m	class:point2d	access:protected
point2d::y	src/ds/point2d.h	/^    Type y()  const  { return y_; }$/;"	f	class:point2d	access:public	signature:() const
point2d::y_	src/ds/point2d.h	/^    Type x_, y_;$/;"	m	class:point2d	access:protected
point2d::zoom	src/ds/point2d.h	/^    point2d zoom( double sc )  const { return point2d( sc * x_, sc * y_ ); }$/;"	f	class:point2d	access:public	signature:( double sc ) const
point3d	src/ds/point3d.h	/^    explicit point3d(const Type & tx, const Type & ty, const Type & tz)$/;"	f	class:point3d	access:public	signature:(const Type & tx, const Type & ty, const Type & tz)
point3d	src/ds/point3d.h	/^    point3d()  { ; }  \/\/ default constructor for ...$/;"	f	class:point3d	access:private	signature:()
point3d	src/ds/point3d.h	/^class point3d$/;"	c
point3d::as_vector	src/ds/point3d.h	/^    vec3d as_vector()  const  {  return vec3d( x_, y_, z_ ); }$/;"	f	class:point3d	access:public	signature:() const
point3d::new_array	src/ds/point3d.h	/^    static point3d * new_array(ulong n)  { return new point3d[n]; }$/;"	f	class:point3d	access:public	signature:(ulong n)
point3d::operator !=	src/ds/point3d.h	/^    bool operator != (const point3d & P) const { return ( x_ != P.x_ || y_ != P.y_ || z_ != P.z_); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
point3d::operator +	src/ds/point3d.h	/^    point3d operator + (const vec3d & V)  const { return point3d( x_ + V.x(),  y_ + V.y(),  z_ + V.z() ); }$/;"	f	class:point3d	access:public	signature:(const vec3d & V) const
point3d::operator +=	src/ds/point3d.h	/^    point3d & operator += (const vec3d & V) { x_ += V.x(),  y_ += V.y(),  z_ += V.z();  return *this; }$/;"	f	class:point3d	access:public	signature:(const vec3d & V)
point3d::operator -	src/ds/point3d.h	/^    point3d operator - (const vec3d & V)  const { return point3d( x_ - V.x(),  y_ - V.y(),  z_ - V.z() ); }$/;"	f	class:point3d	access:public	signature:(const vec3d & V) const
point3d::operator -	src/ds/point3d.h	/^    vec3d operator - (const point3d & P)  const { return vec3d( x_ - P.x_,  y_ - P.y_,  z_ - P.z_ ); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
point3d::operator -=	src/ds/point3d.h	/^    point3d & operator -= (const vec3d & V) { x_ -= V.x(),  y_ -= V.y();  z_ -= V.z();  return *this; }$/;"	f	class:point3d	access:public	signature:(const vec3d & V)
point3d::operator ==	src/ds/point3d.h	/^    bool operator == (const point3d & P) const { return ( x_ == P.x_ && y_ == P.y_ && z_ == P.z_); }$/;"	f	class:point3d	access:public	signature:(const point3d & P) const
point3d::point3d	src/ds/point3d.h	/^    explicit point3d(const Type & tx, const Type & ty, const Type & tz)$/;"	f	class:point3d	access:public	signature:(const Type & tx, const Type & ty, const Type & tz)
point3d::point3d	src/ds/point3d.h	/^    point3d()  { ; }  \/\/ default constructor for ...$/;"	f	class:point3d	access:private	signature:()
point3d::vec3d	src/ds/point3d.h	/^    typedef vector3d<Type> vec3d;$/;"	t	class:point3d	access:private
point3d::x	src/ds/point3d.h	/^    Type x()  const  { return x_; }$/;"	f	class:point3d	access:public	signature:() const
point3d::x_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
point3d::y	src/ds/point3d.h	/^    Type y()  const  { return y_; }$/;"	f	class:point3d	access:public	signature:() const
point3d::y_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
point3d::z	src/ds/point3d.h	/^    Type z()  const  { return z_; }$/;"	f	class:point3d	access:public	signature:() const
point3d::z_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
point3d::zoom	src/ds/point3d.h	/^    point3d zoom( double sc )  const { return point3d( sc * x_, sc * y_, sc * z_ ); }$/;"	f	class:point3d	access:public	signature:( double sc ) const
poke	src/aux0/attic/funcemu.h	/^    void poke(Type x)  { npoke(x, 1); }$/;"	f	class:funcemu	access:public	signature:(Type x)
poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y)  { npoke(y, 1); npoke(x, 2); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y)
poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y, Type z)  { npoke(z, 1); npoke(y, 2); npoke(x, 3); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z)
poke	src/aux0/attic/funcemu.h	/^    void poke(Type x, Type y, Type z, Type u)$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z, Type u)
poke	src/ds/stack.h	/^    ulong poke(Type z)$/;"	f	class:stack	access:public	signature:(Type z)
poly	src/bpol/necklace2bitpol.h	/^    ulong poly(ulong b)$/;"	f	class:necklace2bitpol	access:public	signature:(ulong b)
poly2lhca	doc/bpol-doc.txt	/^ulong poly2lhca(ulong p);$/;"	p	file:	signature:(ulong p)
poly2lhca	src/bpol/bitpol2lhca.cc	/^poly2lhca(ulong p)$/;"	f	signature:(ulong p)
poly2lhca	src/bpol/lhca.h	/^ulong poly2lhca(ulong p);$/;"	p	signature:(ulong p)
pop	src/aux0/attic/funcemu.h	/^    void pop(ulong ct=1) { dp_-=ct; }$/;"	f	class:funcemu	access:public	signature:(ulong ct=1)
pop	src/ds/attic/coroutine.h	/^    void pop(ulong ct=1) { dp_-=ct; }$/;"	f	class:coroutine	access:public	signature:(ulong ct=1)
pop	src/ds/queue.h	/^    ulong pop(Type &z)$/;"	f	class:queue	access:public	signature:(Type &z)
pop	src/ds/stack.h	/^    ulong pop()$/;"	f	class:stack	access:public	signature:()
pop	src/ds/stack.h	/^    ulong pop(Type &z)$/;"	f	class:stack	access:public	signature:(Type &z)
pos	demo/seq/A278479-demo.cc	/^    bool pos()  const  { return ps; }$/;"	f	class:triang_num	access:public	signature:() const
pos	src/bpol/mersenne-coprime.h	/^    umod_t pos()  const  { return j_; }$/;"	f	class:mersenne_coprime	access:public	signature:() const
pos	src/comb/acyclic-map.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:acyclic_map	access:public	signature:() const
pos	src/comb/binary-sl-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:binary_sl_gray	access:public	signature:() const
pos	src/comb/mixedradix-colex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_colex	access:public	signature:() const
pos	src/comb/mixedradix-endo-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
pos	src/comb/mixedradix-endo.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_endo	access:public	signature:() const
pos	src/comb/mixedradix-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_gray	access:public	signature:() const
pos	src/comb/mixedradix-gray2.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_gray2	access:public	signature:() const
pos	src/comb/mixedradix-lex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_lex	access:public	signature:() const
pos	src/comb/mixedradix-modular-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
pos	src/comb/mixedradix-modular-gray2.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
pos	src/comb/mixedradix-naf-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
pos	src/comb/mixedradix-naf.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_naf	access:public	signature:() const
pos	src/comb/mixedradix-restrpref.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
pos	src/comb/mixedradix-rfact.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_rfact	access:public	signature:() const
pos	src/comb/mixedradix-sl-gray.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_sl_gray	access:public	signature:() const
pos	src/comb/mixedradix-sod-lex.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:mixedradix_sod_lex	access:public	signature:() const
pos	src/comb/perm-lex-inv.h	/^    ulong pos()  const  { return p_; }$/;"	f	class:perm_lex_inv	access:public	signature:() const
pos	src/comb/smooth-rfact-rgs.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
pos	src/comb/subset-gray-delta.h	/^    ulong pos()  const { return j_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
pos_	src/bits/pcrc64.h	/^    uint pos_;      \/\/ position of constant polynomial term$/;"	m	class:pcrc64	access:public
pos_AAA	demo/comb/naf-pos-rec-demo.cc	/^void pos_AAA(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
pos_AAA	demo/comb/naf-pos-rec-demo.cc	/^void pos_AAA(ulong d, bool z);$/;"	p	file:	signature:(ulong d, bool z)
pos_BBB	demo/comb/naf-pos-rec-demo.cc	/^void pos_BBB(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
pos_BBB	demo/comb/naf-pos-rec-demo.cc	/^void pos_BBB(ulong d, bool z);$/;"	p	file:	signature:(ulong d, bool z)
pow	src/bpol/gf2n.h	/^    GF2n pow(ulong e)  const$/;"	f	class:GF2n	access:public	signature:(ulong e) const
pow	src/mod/mod.h	/^    mod pow(umod_t e)  const$/;"	f	class:mod	access:public	signature:(umod_t e) const
pow_mod	doc/mod-doc.txt	/^inline umod_t pow_mod(umod_t a, umod_t e, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t e, umod_t m)
pow_mod	src/mod/modarith.h	/^inline umod_t pow_mod(umod_t a, umod_t e, umod_t m)$/;"	f	signature:(umod_t a, umod_t e, umod_t m)
power	doc/perm-doc.txt	/^void power(const ulong *f, ulong * restrict g, ulong n,$/;"	p	file:	signature:(const ulong *f, ulong * restrict g, ulong n, long e, ulong * restrict t )
power	src/perm/permcompose.cc	/^power(const ulong *f, ulong * restrict g, ulong n,$/;"	f	signature:(const ulong *f, ulong * restrict g, ulong n, long e, ulong * restrict t )
power	src/perm/permcompose.h	/^void power(const ulong *f, ulong *g, ulong n, long e, ulong *t=0);$/;"	p	signature:(const ulong *f, ulong *g, ulong n, long e, ulong *t=0)
power_l2r	demo/arith/power-l2r-demo.cc	/^power_l2r(double a, ulong e)$/;"	f	signature:(double a, ulong e)
power_r2l	demo/arith/power-r2l-demo.cc	/^power_r2l(double a, ulong e)$/;"	f	signature:(double a, ulong e)
pp	demo/comb/perm-dist1-gray-demo.cc	/^ulong *pp;  \/\/ permutation corresponding to the word$/;"	v
pp	demo/comb/perm-l1r2-gray-demo.cc	/^ulong *pp;  \/\/ permutation corresponding to the word$/;"	v
pp	demo/comb/perm-right1-gray-demo.cc	/^ulong *pp;  \/\/ permutation corresponding to the word$/;"	v
pp_	src/comb/setpart.h	/^    int **pp_;  \/\/ pp[k] points to start of set partition k$/;"	m	class:setpart	access:public
ppi	demo/comb/perm-dist1-gray-demo.cc	/^ulong *ppi;  \/\/ inverse permutation$/;"	v
ppi	demo/comb/perm-l1r2-gray-demo.cc	/^ulong *ppi;  \/\/ inverse permutation$/;"	v
ppi	demo/comb/perm-right1-gray-demo.cc	/^ulong *ppi;  \/\/ inverse permutation$/;"	v
pq	demo/graph/graph-complementshift-demo.cc	/^ulong pq;  \/\/ whether and what to print with each path$/;"	v
pq	demo/graph/graph-debruijn-demo.cc	/^ulong pq = 5;  \/\/ whether and what to print with each cycle$/;"	v
pq	demo/graph/graph-debruijn-m-demo.cc	/^ulong pq = 5;  \/\/ whether and what to print with each cycle$/;"	v
pq_	src/comb/ksubset-rec.h	/^    ulong pq_;   \/\/ condition that determines the (printing) order$/;"	m	class:ksubset_rec	access:public
pq_top	src/bpol/mersenne-coprime.h	/^    umod_t pq_top()  const  { return PQ_.t1_[1]; }$/;"	f	class:mersenne_coprime	access:private	signature:() const
pr_	src/graph/lyndon-gray.h	/^    ulong pr_;  \/\/ position (rotated)$/;"	m	class:lyndon_gray	access:public
prefix_convolution	doc/haar-doc.txt	/^inline void prefix_convolution(Type * restrict f, Type * restrict g, ulong ldn);$/;"	p	file:	signature:(Type * restrict f, Type * restrict g, ulong ldn)
prefix_convolution	src/haar/prefix-transform.h	/^inline void prefix_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
prefix_transform	doc/haar-doc.txt	/^void prefix_transform(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
prefix_transform	src/haar/prefix-transform.h	/^void prefix_transform(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
prepend	src/ds/attic/rarray.h	/^    ulong prepend(const Type & z)$/;"	f	class:rarray	access:public	signature:(const Type & z)
prev	src/bits/bit-rll2.h	/^    ulong prev()  { return step( ~w_ ); }$/;"	f	class:bit_rll2	access:public	signature:()
prev	src/bits/bitsubset-gray.h	/^    ulong prev()$/;"	f	class:bit_subset_gray	access:public	signature:()
prev	src/bits/bitsubset.h	/^    ulong prev()  { U = (U - 1) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
prev	src/bpol/lfsr.h	/^    ulong prev()$/;"	f	class:lfsr	access:public	signature:()
prev	src/comb/arrangement-rgs.h	/^    ulong prev()$/;"	f	class:arrangement_rgs	access:public	signature:()
prev	src/comb/ascent-rgs-subset-lex.h	/^    ulong prev()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
prev	src/comb/ascent-rgs.h	/^    ulong prev()$/;"	f	class:ascent_rgs	access:public	signature:()
prev	src/comb/attic/combcolex.h	/^    ulong prev()  \/\/ return zero if previous comb was the last$/;"	f	class:comb_colex	access:public	signature:()
prev	src/comb/attic/combination-altminchange.h	/^    ulong prev()  \/\/ return zero if current combination is the first$/;"	f	class:combination_altminchange	access:public	signature:()
prev	src/comb/attic/combination-minchange.h	/^    ulong prev()  \/\/ return zero if current combination is the first$/;"	f	class:combination_minchange	access:public	signature:()
prev	src/comb/attic/compositionalt.h	/^    ulong prev()  \/\/ return zero if current comb is the first$/;"	f	class:composition_alt	access:public	signature:()
prev	src/comb/binary-sl-gray.h	/^    bool prev()$/;"	f	class:binary_sl_gray	access:public	signature:()
prev	src/comb/catalan-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
prev	src/comb/catalan-step-rgs-colex.h	/^    ulong prev()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
prev	src/comb/catalan-step-rgs-lex.h	/^    ulong prev()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
prev	src/comb/change-rgs.h	/^    ulong prev()$/;"	f	class:change_rgs	access:public	signature:()
prev	src/comb/combination-colex.h	/^    ulong prev()$/;"	f	class:combination_colex	access:public	signature:()
prev	src/comb/combination-lex.h	/^    ulong prev()$/;"	f	class:combination_lex	access:public	signature:()
prev	src/comb/composition-colex.h	/^    ulong prev()$/;"	f	class:composition_colex	access:public	signature:()
prev	src/comb/composition-ex-colex.h	/^    ulong prev()$/;"	f	class:composition_ex_colex	access:public	signature:()
prev	src/comb/composition-ex-lex.h	/^    ulong prev()$/;"	f	class:composition_ex_lex	access:public	signature:()
prev	src/comb/composition-nz-gray.h	/^    ulong prev()$/;"	f	class:composition_nz_gray	access:public	signature:()
prev	src/comb/composition-nz-rl.h	/^    ulong prev()$/;"	f	class:composition_nz_rl	access:public	signature:()
prev	src/comb/composition-nz-subset-lex.h	/^    ulong prev()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
prev	src/comb/composition-nz.h	/^    ulong prev()$/;"	f	class:composition_nz	access:public	signature:()
prev	src/comb/descent-rgs.h	/^    ulong prev()$/;"	f	class:descent_rgs	access:public	signature:()
prev	src/comb/dyck-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
prev	src/comb/dyck-rgs.h	/^    ulong prev()$/;"	f	class:dyck_rgs	access:public	signature:()
prev	src/comb/ksubset-gray.h	/^    ulong prev()$/;"	f	class:ksubset_gray	access:public	signature:()
prev	src/comb/ksubset-lex.h	/^    ulong prev()$/;"	f	class:ksubset_lex	access:public	signature:()
prev	src/comb/mixedradix-colex.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_colex	access:public	signature:()
prev	src/comb/mixedradix-endo-gray.h	/^    bool prev()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
prev	src/comb/mixedradix-endo.h	/^    bool prev()$/;"	f	class:mixedradix_endo	access:public	signature:()
prev	src/comb/mixedradix-gray.h	/^    bool prev()$/;"	f	class:mixedradix_gray	access:public	signature:()
prev	src/comb/mixedradix-gslex-alt.h	/^    bool prev()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
prev	src/comb/mixedradix-gslex-alt2.h	/^    bool prev()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
prev	src/comb/mixedradix-gslex.h	/^    bool prev()$/;"	f	class:mixedradix_gslex	access:public	signature:()
prev	src/comb/mixedradix-lex.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_lex	access:public	signature:()
prev	src/comb/mixedradix-modular-gray2.h	/^    bool prev()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
prev	src/comb/mixedradix-naf-gray.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
prev	src/comb/mixedradix-naf-subset-lex.h	/^    bool prev()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
prev	src/comb/mixedradix-naf.h	/^    bool prev()  \/\/ decrement$/;"	f	class:mixedradix_naf	access:public	signature:()
prev	src/comb/mixedradix-rfact.h	/^    ulong prev()$/;"	f	class:mixedradix_rfact	access:public	signature:()
prev	src/comb/mixedradix-subset-lex.h	/^    bool prev()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
prev	src/comb/mixedradix-subset-lexrev.h	/^    bool prev()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
prev	src/comb/motzkin-nonflat-rgs-lex.h	/^    ulong prev()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
prev	src/comb/paren-lex.h	/^    ulong prev()$/;"	f	class:paren_lex	access:public	signature:()
prev	src/comb/paren.h	/^    ulong prev()  \/\/ return zero if current paren is the first$/;"	f	class:paren	access:public	signature:()
prev	src/comb/partition-asc.h	/^    ulong prev()$/;"	f	class:partition_asc	access:public	signature:()
prev	src/comb/partition-desc.h	/^    ulong prev()$/;"	f	class:partition_desc	access:public	signature:()
prev	src/comb/partition.h	/^    bool prev()$/;"	f	class:partition	access:public	signature:()
prev	src/comb/perm-gray-ffact.h	/^    bool prev()$/;"	f	class:perm_gray_ffact	access:public	signature:()
prev	src/comb/perm-rev.h	/^    bool prev()$/;"	f	class:perm_rev	access:public	signature:()
prev	src/comb/perm-trotter-lg.h	/^    bool prev()$/;"	f	class:perm_trotter_lg	access:public	signature:()
prev	src/comb/perm-trotter.h	/^    bool prev()$/;"	f	class:perm_trotter	access:public	signature:()
prev	src/comb/setpart-rgs-lex.h	/^    bool prev()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
prev	src/comb/setpart-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
prev	src/comb/subset-gray-delta.h	/^    ulong prev()$/;"	f	class:subset_gray_delta	access:public	signature:()
prev	src/comb/subset-gray.h	/^    ulong prev()$/;"	f	class:subset_gray	access:public	signature:()
prev	src/comb/subset-lex.h	/^    ulong prev()$/;"	f	class:subset_lex	access:public	signature:()
prev	src/comb/wfl-hilbert.h	/^    ulong prev()$/;"	f	class:wfl_hilbert	access:public	signature:()
prev0_even	src/bits/evenodd.h	/^static inline ulong prev0_even(ulong x)  { return x&~1UL; }$/;"	f	signature:(ulong x)
prev0_odd	src/bits/evenodd.h	/^static inline ulong prev0_odd(ulong x)  { return (x-1UL)|1UL; }$/;"	f	signature:(ulong x)
prev_a	src/bpol/lfsr.h	/^    void prev_a()$/;"	f	class:lfsr	access:private	signature:()
prev_all_blocks	src/bits/bitsubset.h	/^    ulong prev_all_blocks()  { U = (U + V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
prev_colex_comb	doc/bits-doc.txt	/^static inline ulong prev_colex_comb(ulong x);$/;"	p	file:	signature:(ulong x)
prev_colex_comb	src/bits/bitcombcolex.h	/^static inline ulong prev_colex_comb(ulong x)$/;"	f	signature:(ulong x)
prev_dig	src/comb/young-tab-rgs-subset-lex.h	/^    ulong prev_dig(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:private	signature:(ulong d) const
prev_endo	src/comb/endo-enup.h	/^static inline ulong prev_endo(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
prev_enup	src/comb/endo-enup.h	/^static inline ulong prev_enup(ulong x, ulong m)$/;"	f	signature:(ulong x, ulong m)
prev_even	src/bits/evenodd.h	/^static inline ulong prev_even(ulong x)  { return (x-1UL)&~1UL; }$/;"	f	signature:(ulong x)
prev_even	src/comb/ksubset-gray.h	/^    void prev_even()$/;"	f	class:ksubset_gray	access:private	signature:()
prev_fib	src/bits/bit-rll2.h	/^    ulong prev_fib()  { prev();  return fib(); }$/;"	f	class:bit_rll2	access:public	signature:()
prev_fibrep	doc/bits-doc.txt	/^static inline ulong prev_fibrep(ulong x);$/;"	p	file:	signature:(ulong x)
prev_fibrep	src/bits/fibrep.h	/^static inline ulong prev_fibrep(ulong x)$/;"	f	signature:(ulong x)
prev_lexrev	doc/bits-doc.txt	/^static inline ulong prev_lexrev(ulong x);$/;"	p	file:	signature:(ulong x)
prev_lexrev	src/bits/bitlex.h	/^static inline ulong prev_lexrev(ulong x)$/;"	f	signature:(ulong x)
prev_negbin	doc/bits-doc.txt	/^static inline ulong prev_negbin(ulong x);$/;"	p	file:	signature:(ulong x)
prev_negbin	src/bits/negbin.h	/^static inline ulong prev_negbin(ulong x)$/;"	f	signature:(ulong x)
prev_odd	src/bits/evenodd.h	/^static inline ulong prev_odd(ulong x)  { return (x&~1UL)-1UL; }$/;"	f	signature:(ulong x)
prev_odd	src/comb/ksubset-gray.h	/^    void prev_odd()$/;"	f	class:ksubset_gray	access:private	signature:()
prev_radm4	doc/bits-doc.txt	/^static inline ulong prev_radm4(ulong x);$/;"	p	file:	signature:(ulong x)
prev_radm4	src/bits/radix-m4.h	/^static inline ulong prev_radm4(ulong x)$/;"	f	signature:(ulong x)
prev_sequency	doc/bits-doc.txt	/^static inline ulong prev_sequency(ulong x);$/;"	p	file:	signature:(ulong x)
prev_sequency	src/bits/bitsequency.h	/^static inline ulong prev_sequency(ulong x)$/;"	f	signature:(ulong x)
prev_subset_lexrev_fib	doc/bits-doc.txt	/^static inline ulong prev_subset_lexrev_fib(ulong x);$/;"	p	file:	signature:(ulong x)
prev_subset_lexrev_fib	src/bits/fibrep-subset-lexrev.h	/^static inline ulong prev_subset_lexrev_fib(ulong x)$/;"	f	signature:(ulong x)
prev_w	src/bpol/lfsr.h	/^    ulong prev_w()$/;"	f	class:lfsr	access:public	signature:()
previous_idx	src/sort/attic/usearchfunc.h	/^inline ulong previous_idx(const Type *f, ulong n, bool (* func)(Type), ulong k0)$/;"	f	signature:(const Type *f, ulong n, bool (* func)(Type), ulong k0)
prime	src/mod/factor.h	/^    umod_t prime(ulong i) const  { return prime_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
prime_	src/mod/factor.h	/^    umod_t prime_[16];$/;"	m	class:factorization	access:protected
prime_	src/mod/factor.h	/^    umod_t prime_[32];$/;"	m	class:factorization	access:protected
primepow	src/mod/factor.h	/^    umod_t primepow(ulong i) const  { return prpow_[i]; }$/;"	f	class:factorization	access:public	signature:(ulong i) const
primitive_root_mod	src/mod/attic/primroot.cc	/^primitive_root_mod(umod_t m, const factorization &pf)$/;"	f	signature:(umod_t m, const factorization &pf)
print	demo/comb/no111-gray-demo.cc	/^void print()$/;"	f	signature:()
print	demo/comb/no1111-gray-demo.cc	/^void print()$/;"	f	signature:()
print	demo/comb/no1xy1-gray-demo.cc	/^void print()$/;"	f	signature:()
print	demo/ds/priorityqueue-demo.cc	/^print(char ev, double tev, ulong k)$/;"	f	signature:(char ev, double tev, ulong k)
print	demo/graph/graph-lyndon-gray-demo.cc	/^print(const digraph_paths &dp)$/;"	f	signature:(const digraph_paths &dp)
print	demo/graph/lyndon-gray-demo.cc	/^print(lyndon_gray &lg, ulong wh)$/;"	f	signature:(lyndon_gray &lg, ulong wh)
print	demo/seq/A249872-demo.cc	/^void print(const array2d<Type> &A)$/;"	f	signature:(const array2d<Type> &A)
print	demo/sort/heapsort-demo.cc	/^print(const char *bla, const double *f, ulong n)$/;"	f	signature:(const char *bla, const double *f, ulong n)
print	demo/sort/sort-complex-demo.cc	/^print(const char *bla, const Complex *f, ulong n)$/;"	f	signature:(const char *bla, const Complex *f, ulong n)
print	demo/sort/sort-demo.cc	/^print(const char *bla, const double *f, ulong n)$/;"	f	signature:(const char *bla, const double *f, ulong n)
print	demo/sort/unique-demo.cc	/^print(const char *bla, const double *f, ulong n)$/;"	f	signature:(const char *bla, const double *f, ulong n)
print	src/aux1/attic/auxprint.cc	/^print(const char *bla, const double *f, ulong n, double eps\/*=0.0*\/)$/;"	f	signature:(const char *bla, const double *f, ulong n, double eps )
print	src/aux1/attic/auxprint.h	/^void print(const char *bla, const double *f, ulong n, double eps=0.0);$/;"	p	signature:(const char *bla, const double *f, ulong n, double eps=0.0)
print	src/comb/acyclic-map.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:acyclic_map	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/arrangement-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:arrangement_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/arrangement-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:arrangement_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/ascent-alt-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_alt_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/ascent-nonflat-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_nonflat_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/ascent-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/ascent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:ascent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::print()  const$/;"	f	class:all_compositions_minchange	signature:() const
print	src/comb/attic/all-compositions-minchange.h	/^    void print()  const;$/;"	p	class:all_compositions_minchange	access:protected	signature:() const
print	src/comb/attic/all-compositions-minchange.h	/^    void print(ulong z)  const$/;"	f	class:all_compositions_minchange	access:public	signature:(ulong z) const
print	src/comb/attic/allsetpartitions.h	/^    ulong print(ulong k)  const$/;"	f	class:all_set_partitions	access:public	signature:(ulong k) const
print	src/comb/attic/perm-minchange.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_minchange	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/attic/perm-trotter.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/binary-huffman.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:binary_huffman	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/binary-sl-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:binary_sl_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/catalan-path-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:catalan_path_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/catalan-rgs-gray.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs_gray	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/catalan-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/catalan-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:catalan_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/catalan-step-rgs-colex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_colex	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/catalan-step-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/cayley-perm.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:cayley_perm	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/change-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:change_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/composition-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_colex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-colex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_colex2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-dist-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_dist_unimodal	access:public	signature:(const char *bla) const
print	src/comb/composition-ex-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_ex_colex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-ex-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_ex_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-binary.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_binary	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-carlitz.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_carlitz	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-first-max.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_first_max	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-gray.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_gray	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-gray2.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_gray2	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-i-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_i_smooth	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-left-2smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_left_2smooth	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-left-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_left_smooth	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-max.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_max	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-min.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_min	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-minc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_minc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-numparts.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_numparts	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-odd-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-odd.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_odd	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-restrpref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_restrpref	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-rl.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_rl	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-smooth.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_smooth	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-sorts.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-sorts2-pp.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-sorts2.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(const char *bla) const
print	src/comb/composition-nz-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-superdiagonal.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_superdiagonal	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-upstep.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:composition_nz_upstep	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/composition-nz-weakly-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:(const char *bla) const
print	src/comb/composition-nz.h	/^    void print(const char *bla)  const$/;"	f	class:composition_nz	access:public	signature:(const char *bla) const
print	src/comb/composition-rank.cc	/^composition_rank::print(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
print	src/comb/composition-rank.h	/^    void print(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
print	src/comb/composition-unimodal.h	/^    void print(const char *bla)  const$/;"	f	class:composition_unimodal	access:public	signature:(const char *bla) const
print	src/comb/descent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:descent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/dyck-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/dyck-rgs.h	/^    void print(const char *bla=0, bool dfz=true)  const$/;"	f	class:dyck_rgs	access:public	signature:(const char *bla=0, bool dfz=true) const
print	src/comb/id-tree-lev-seq.h	/^    void print(const char *bla)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla) const
print	src/comb/involution-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/isoscent-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:isoscent_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/kperm-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:kperm_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/kperm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:kperm_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/map23-rgs.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:map23_rgs	access:public	signature:(const char *bla, bool dfz=false)
print	src/comb/mixedradix-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_colex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-endo-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-endo.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_endo	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gray2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gray2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gslex-alt.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gslex-alt2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gslex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-gslex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_gslex2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-modular-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-modular-gray2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-naf-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-naf-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-naf.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_naf	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-restrpref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_restrpref	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-rfact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_rfact	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-sl-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-sod-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/mixedradix-subset-lexrev.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/motzkin-nonflat-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/motzkin-path-lex.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:motzkin_path_lex	access:public	signature:(const char *bla, bool dfz=false)
print	src/comb/motzkin-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:motzkin_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/motzkin-step-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/mset-perm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:mset_perm_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/ordered-tree-branches.h	/^    void print(const char *bla)  const$/;"	f	class:ordered_tree_branches	access:public	signature:(const char *bla) const
print	src/comb/ordered-tree-branching-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:ordered_tree_branching_seq	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/ordered-tree-lev-seq.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-2fall-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-2fall-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-2fall-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_2fall_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-asc-2rep-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-asc-2rep.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_2rep	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-asc-perim.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
print	src/comb/partition-asc-sorts.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
print	src/comb/partition-asc-sorts2-pp.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
print	src/comb/partition-asc-sorts2.h	/^    void print(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
print	src/comb/partition-asc-subset-lex-csh.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-binary-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_binary_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-binary-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_binary_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-desc-bb.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_desc_bb	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-dist-asc-len.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc_len	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-dist-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-dist-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-dist-d-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_d_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-dist-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_dist_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-gen.cc	/^partition_gen::print()  const$/;"	f	class:partition_gen	signature:() const
print	src/comb/partition-gen.h	/^    void print()  const;$/;"	p	class:partition_gen	access:public	signature:() const
print	src/comb/partition-nonsquashing-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_nonsquashing_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-odd-asc-subset-lex-csh.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-odd-asc-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-odd-asc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_asc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-odd-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-odd-nonsquashing-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:partition_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/partition-s-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_s_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition-strongly-decr-desc.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:partition_strongly_decr_desc	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/partition.cc	/^partition::print()  const$/;"	f	class:partition	signature:() const
print	src/comb/partition.h	/^    void print()  const;$/;"	p	class:partition	access:public	signature:() const
print	src/comb/perm-colex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_colex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-derange.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_derange	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-ffact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-ffact2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-lipski.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_lipski	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-rfact.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rfact	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-rot1.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rot1	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-gray-wells.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_wells	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-heap.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_heap	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-heap2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_heap2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-involution.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_involution	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-ives.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:perm_ives	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/perm-lex-inv.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex_inv	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-lex2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-mv0.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_mv0	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-rev.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rev	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-rev2.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rev2	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-rot.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_rot	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-st-gray.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_gray	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-st-pref.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_pref	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-st.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-star.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_star	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-trotter-lg.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter_lg	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/perm-trotter.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/rgs-fincr.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:rgs_fincr	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/rgs-kincr.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:rgs_kincr	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/rgs-maxincr.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:rgs_maxincr	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/schroeder-path-lex.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:schroeder_path_lex	access:public	signature:(const char *bla, bool dfz=false)
print	src/comb/schroeder-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:schroeder_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/setpart-ccf-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-ck-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_ck_rgs	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-p-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-rgs-gray.cc	/^setpart_rgs_gray::print()  const$/;"	f	class:setpart_rgs_gray	signature:() const
print	src/comb/setpart-rgs-gray.h	/^    void print()  const;  \/\/ used in fxtbook$/;"	p	class:setpart_rgs_gray	access:public	signature:() const
print	src/comb/setpart-rgs-gray.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:setpart_rgs_gray	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/setpart-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-s-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/setpart.h	/^    int print()  const$/;"	f	class:setpart	access:public	signature:() const
print	src/comb/skew-binary.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:skew_binary	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/smooth-rfact-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:smooth_rfact_rgs	access:public	signature:(const char *bla, bool dfz=false) const
print	src/comb/tree-lev-seq.h	/^    void print(const char *bla)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla) const
print	src/comb/weakly-unimodal-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
print	src/comb/young-tab-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
print	src/comb/young-tab-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print	src/graph/attic/debruijngraph.cc	/^debruijn_graph::print()  const$/;"	f	class:debruijn_graph	signature:() const
print	src/graph/attic/debruijngraph.h	/^    void print()  const;$/;"	p	class:debruijn_graph	access:public	signature:() const
print	src/graph/digraph.cc	/^digraph::print(const char *bla\/*=0*\/)  const$/;"	f	class:digraph	signature:(const char *bla ) const
print	src/graph/digraph.h	/^    void print(const char *bla=0)  const;$/;"	p	class:digraph	access:public	signature:(const char *bla=0) const
print	src/mod/factor.cc	/^factorization::print(const char *bla, std::ostream &os) const$/;"	f	class:factorization	signature:(const char *bla, std::ostream &os) const
print	src/mod/factor.h	/^    void print(const char *bla, std::ostream &os) const;$/;"	p	class:factorization	access:public	signature:(const char *bla, std::ostream &os) const
print	src/perm/attic/cycles.cc	/^cycles::print(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
print	src/perm/attic/cycles.h	/^    void print(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
print01	demo/comb/conference-quadres-demo.cc	/^print01(int v)$/;"	f	signature:(int v)
print01	demo/comb/hadamard-srs-demo.cc	/^print01(int v)$/;"	f	signature:(int v)
print1	src/comb/perm-involution.h	/^    void print1(const char *bla)  const$/;"	f	class:perm_involution	access:public	signature:(const char *bla) const
print1	src/comb/young-tab-rgs-subset-lex.h	/^    void print1(const char *bla)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla) const
print1	src/comb/young-tab-rgs.h	/^    void print1(const char *bla)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla) const
print2	src/comb/partition-gen.cc	/^partition_gen::print2()  const$/;"	f	class:partition_gen	signature:() const
print2	src/comb/partition-gen.h	/^    void print2()  const;$/;"	p	class:partition_gen	access:public	signature:() const
print4	src/sort/attic/symbolify-demo.cc	/^void print4(const char *bla, const double *f, ulong n)$/;"	f	signature:(const char *bla, const double *f, ulong n)
print_aa	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla) const
print_aa	src/comb/catalan-path-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_path_lex	access:public	signature:() const
print_aa	src/comb/catalan-step-rgs-colex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_colex	access:public	signature:() const
print_aa	src/comb/catalan-step-rgs-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_lex	access:public	signature:() const
print_aa	src/comb/catalan-step-rgs-subset-lexrev.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:() const
print_aa	src/comb/composition-nz-first-max.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_first_max	access:public	signature:() const
print_aa	src/comb/composition-nz-gray.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_gray	access:public	signature:() const
print_aa	src/comb/composition-nz-gray2.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_gray2	access:public	signature:() const
print_aa	src/comb/composition-nz-i-smooth.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_i_smooth	access:public	signature:() const
print_aa	src/comb/composition-nz-minc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_minc	access:public	signature:() const
print_aa	src/comb/composition-nz-rl.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_rl	access:public	signature:() const
print_aa	src/comb/composition-nz-smooth.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_smooth	access:public	signature:() const
print_aa	src/comb/composition-nz-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
print_aa	src/comb/composition-nz-superdiagonal.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_superdiagonal	access:public	signature:() const
print_aa	src/comb/composition-nz-upstep.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_upstep	access:public	signature:() const
print_aa	src/comb/composition-nz-weakly-unimodal.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:() const
print_aa	src/comb/composition-nz.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz	access:public	signature:() const
print_aa	src/comb/id-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla) const
print_aa	src/comb/motzkin-path-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_path_lex	access:public	signature:() const
print_aa	src/comb/motzkin-step-rgs-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:() const
print_aa	src/comb/ordered-tree-branches.cc	/^ordered_tree_branches::print_aa()  const$/;"	f	class:ordered_tree_branches	signature:() const
print_aa	src/comb/ordered-tree-branches.h	/^    void print_aa()  const;  \/\/ ASCII art$/;"	p	class:ordered_tree_branches	access:public	signature:() const
print_aa	src/comb/ordered-tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla) const
print_aa	src/comb/partition-2fall-asc-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
print_aa	src/comb/partition-2fall-asc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc	access:public	signature:() const
print_aa	src/comb/partition-2fall-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_desc	access:public	signature:() const
print_aa	src/comb/partition-asc-2rep-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
print_aa	src/comb/partition-asc-2rep.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep	access:public	signature:() const
print_aa	src/comb/partition-asc-subset-lex-csh.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
print_aa	src/comb/partition-asc-subset-lex.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
print_aa	src/comb/partition-asc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc	access:public	signature:() const
print_aa	src/comb/partition-desc-bb.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc_bb	access:public	signature:() const
print_aa	src/comb/partition-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc	access:public	signature:() const
print_aa	src/comb/partition-nonsquashing-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
print_aa	src/comb/partition-s-desc.h	/^    void print_aa()  const  \/\/ ASCII art$/;"	f	class:partition_s_desc	access:public	signature:() const
print_aa	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_aa(const char *bla, const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n) const
print_aa	src/comb/tree-lev-seq-aux.h	/^    void print_aa(const char *bla, const ulong *a, ulong n)  const;$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n) const
print_aa	src/comb/tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla) const
print_aa	src/comb/young-tab-rgs-subset-lex.h	/^    void print_aa(ulong off=1)  const  \/\/ ASCII art$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong off=1) const
print_aa	src/comb/young-tab-rgs.h	/^    void print_aa(ulong off=1)  const  \/\/ ASCII art$/;"	f	class:young_tab_rgs	access:public	signature:(ulong off=1) const
print_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::print_all_maps(ulong z\/*=0*\/)  const$/;"	f	class:lindenmayer_system	signature:(ulong z ) const
print_all_maps	src/comb/lindenmayer-system.h	/^    void print_all_maps(ulong z=0)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong z=0) const
print_approx_eq	src/aux1/attic/auxprint.cc	/^print_approx_eq(const double *f, const double *g, ulong n,$/;"	f	file:	signature:(const double *f, const double *g, ulong n, ulong skip, double eps)
print_approx_eq	src/aux1/attic/auxprint.cc	/^print_approx_eq(const ulong *f, const ulong *g, ulong n, ulong skip)$/;"	f	file:	signature:(const ulong *f, const ulong *g, ulong n, ulong skip)
print_approx_eq	test/aux-test.cc	/^print_approx_eq(const double *f, const double *g, ulong n,$/;"	f	file:	signature:(const double *f, const double *g, ulong n, ulong skip, double eps)
print_approx_eq	test/aux-test.cc	/^print_approx_eq(const ulong *f, const ulong *g, ulong n, ulong skip)$/;"	f	file:	signature:(const ulong *f, const ulong *g, ulong n, ulong skip)
print_arrangement	src/comb/cayley-perm.cc	/^cayley_perm::print_arrangement(const char *bla)  const$/;"	f	class:cayley_perm	signature:(const char *bla) const
print_arrangement	src/comb/cayley-perm.h	/^    void print_arrangement(const char *bla)  const;$/;"	p	class:cayley_perm	access:public	signature:(const char *bla) const
print_arrangement_rgs_perm	src/comb/print-arrangement-rgs-perm.cc	/^print_arrangement_rgs_perm(const char *bla,$/;"	f	signature:(const char *bla, const ulong *a, ulong n, ulong *rfc, ulong *p, bool zb )
print_arrangement_rgs_perm	src/comb/print-arrangement-rgs-perm.h	/^void print_arrangement_rgs_perm(const char *bla,$/;"	p	signature:(const char *bla, const ulong *a, ulong n, ulong *rfc, ulong *p, bool zb=false)
print_as_combination	src/comb/mixedradix-sod-lex.h	/^    void print_as_combination(const char *bla)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla) const
print_balanced_composition	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_balanced_composition(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n) const
print_balanced_composition	src/comb/tree-lev-seq-aux.h	/^    void print_balanced_composition(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n) const
print_base_seq	src/comb/id-tree-lev-seq.h	/^    void print_base_seq(const char *bla, bool dfz=true)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_base_seq	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_base_seq(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, bool dfz ) const
print_base_seq	src/comb/tree-lev-seq-aux.h	/^    void print_base_seq(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, bool dfz=true) const
print_base_seq	src/comb/tree-lev-seq.h	/^    void print_base_seq(const char *bla, bool dfz=true)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_bin	doc/bits-doc.txt	/^void print_bin(const char *bla, unsigned long long x, ulong pd\/*=0*\/, const char *c01\/*=0*\/);$/;"	p	file:	signature:(const char *bla, unsigned long long x, ulong pd , const char *c01 )
print_bin	src/bits/print-bin.cc	/^print_bin(const char *bla, unsigned long long x, ulong pd\/*=0*\/, const char *c01\/*=0*\/)$/;"	f	signature:(const char *bla, unsigned long long x, ulong pd , const char *c01 )
print_bin	src/bits/print-bin.h	/^void print_bin(const char *bla, unsigned long long x, ulong pd=0, const char *c01=0);$/;"	p	signature:(const char *bla, unsigned long long x, ulong pd=0, const char *c01=0)
print_bin_diff	doc/bits-doc.txt	/^void print_bin_diff(const char*bla,$/;"	p	file:	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd , const char *c01pm )
print_bin_diff	src/bits/print-bin.h	/^void print_bin_diff(const char*bla,$/;"	p	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd=0, const char *c01pm=Ó)
print_bin_diff	src/bits/print-bindiff.cc	/^print_bin_diff(const char*bla,$/;"	f	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd , const char *c01pm )
print_bin_horiz_path	doc/graph-doc.txt	/^void print_bin_horiz_path(const ulong *rv, ulong ng, ulong ngbits, const char *c01\/*=0*\/);$/;"	p	file:	signature:(const ulong *rv, ulong ng, ulong ngbits, const char *c01 )
print_bin_horiz_path	src/graph/attic/debruijngraph.h	/^    void print_bin_horiz_path()  const$/;"	f	class:debruijn_cycles	access:public	signature:() const
print_bin_horiz_path	src/graph/digraph-paths.h	/^    void print_bin_horiz_path()  const$/;"	f	class:digraph_paths	access:public	signature:() const
print_bin_horiz_path	src/graph/print-path.cc	/^print_bin_horiz_path(const ulong *rv, ulong ng, ulong ngbits, const char *c01\/*=0*\/)$/;"	f	signature:(const ulong *rv, ulong ng, ulong ngbits, const char *c01 )
print_bin_horiz_path	src/graph/print-path.h	/^void print_bin_horiz_path(const ulong *rv, ulong ng, ulong ngbits, const char *c01=0);$/;"	p	signature:(const ulong *rv, ulong ng, ulong ngbits, const char *c01=0)
print_bin_path	doc/graph-doc.txt	/^void print_bin_path(const ulong *rv, ulong ng, ulong ngbits);$/;"	p	file:	signature:(const ulong *rv, ulong ng, ulong ngbits)
print_bin_path	src/graph/attic/debruijngraph.h	/^    void print_bin_path() const$/;"	f	class:debruijn_cycles	access:public	signature:() const
print_bin_path	src/graph/digraph-paths.h	/^    void print_bin_path() const$/;"	f	class:digraph_paths	access:public	signature:() const
print_bin_path	src/graph/print-path.cc	/^print_bin_path(const ulong *rv, ulong ng, ulong ngbits)$/;"	f	signature:(const ulong *rv, ulong ng, ulong ngbits)
print_bin_path	src/graph/print-path.h	/^void print_bin_path(const ulong *rv, ulong ng, ulong ngbits);$/;"	p	signature:(const ulong *rv, ulong ng, ulong ngbits)
print_bin_vec	doc/bits-doc.txt	/^void print_bin_vec(const char *bla, unsigned long long x, ulong pd\/*=0*\/, const char *c01\/*=0*\/);$/;"	p	file:	signature:(const char *bla, unsigned long long x, ulong pd , const char *c01 )
print_bin_vec	src/bits/print-bin.cc	/^print_bin_vec(const char *bla, unsigned long long x, ulong pd\/*=0*\/, const char *c01\/*=0*\/)$/;"	f	signature:(const char *bla, unsigned long long x, ulong pd , const char *c01 )
print_bin_vec	src/bits/print-bin.h	/^void print_bin_vec(const char *bla, unsigned long long x, ulong pd=0, const char *c01=0);$/;"	p	signature:(const char *bla, unsigned long long x, ulong pd=0, const char *c01=0)
print_bin_vec_diff	doc/bits-doc.txt	/^void print_bin_vec_diff(const char*bla,$/;"	p	file:	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd , const char *c01pm )
print_bin_vec_diff	src/bits/print-bin.h	/^void print_bin_vec_diff(const char*bla,$/;"	p	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd , const char *c01pm=Ó)
print_bin_vec_diff	src/bits/print-bindiff.cc	/^print_bin_vec_diff(const char*bla,$/;"	f	signature:(const char*bla, unsigned long long x1, unsigned long long x2, ulong pd , const char *c01pm )
print_bit_set	doc/bits-doc.txt	/^void print_bit_set(const char *bla, ulong x, ulong rq\/*=0*\/);$/;"	p	file:	signature:(const char *bla, ulong x, ulong rq )
print_bit_set	src/bits/print-bin.h	/^void print_bit_set(const char *bla, ulong x, ulong rq=0);$/;"	p	signature:(const char *bla, ulong x, ulong rq=0)
print_bit_set	src/bits/print-bitset.cc	/^print_bit_set(const char *bla, ulong x, ulong rq\/*=0*\/)$/;"	f	signature:(const char *bla, ulong x, ulong rq )
print_bitset_as_set	demo/bits/gray-demo.cc	/^print_bitset_as_set(const char *bla, ulong x, ulong n, int eq=0)$/;"	f	signature:(const char *bla, ulong x, ulong n, int eq=0)
print_branching_numbers	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_branching_numbers	src/comb/id-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_branching_numbers	src/comb/ordered-tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_branching_numbers	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_branching_numbers(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, bool dfz ) const
print_branching_numbers	src/comb/tree-lev-seq-aux.h	/^    void print_branching_numbers(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, bool dfz) const
print_branching_numbers	src/comb/tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
print_by_sorts	src/comb/composition-nz-sorts.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/composition-nz-sorts2-pp.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/composition-nz-sorts2.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/partition-asc-perim.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/partition-asc-sorts.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/partition-asc-sorts2-pp.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
print_by_sorts	src/comb/partition-asc-sorts2.h	/^    void print_by_sorts(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
print_catalan_path_aa	src/comb/print-catalan-path-aa.cc	/^print_catalan_path_aa(const ulong *a_, ulong n_, bool nfs\/*=false*\/)$/;"	f	signature:(const ulong *a_, ulong n_, bool nfs )
print_catalan_path_aa	src/comb/print-catalan-path-aa.h	/^void print_catalan_path_aa(const ulong *a_, ulong n_, bool nfs=false);$/;"	p	signature:(const ulong *a_, ulong n_, bool nfs=false)
print_ccf	doc/perm-doc.txt	/^void print_ccf(const char *bla, const ulong *c, ulong n, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const char *bla, const ulong *c, ulong n, bitarray *tb )
print_ccf	src/perm/perm2ccf.cc	/^print_ccf(const char *bla, const ulong *c, ulong n, bitarray *tb\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *c, ulong n, bitarray *tb )
print_ccf	src/perm/perm2ccf.h	/^void print_ccf(const char *bla, const ulong *c, ulong n, bitarray *tb=0);$/;"	p	signature:(const char *bla, const ulong *c, ulong n, bitarray *tb=0)
print_code	src/perm/attic/cycles.cc	/^cycles::print_code(const char *funcname, ulong n,$/;"	f	class:cycles	signature:(const char *funcname, ulong n, int use_swap , int use_stderr ) const
print_code	src/perm/attic/cycles.h	/^    void print_code(const char *funcname, ulong n,$/;"	p	class:cycles	access:public	signature:(const char *funcname, ulong n, int use_swap=0, int use_stderr=0) const
print_composition	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_composition(const char *bla)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla) const
print_composition	src/comb/ruler-func-s.h	/^    void print_composition(const char *bla)  const$/;"	f	class:ruler_func_s	access:public	signature:(const char *bla) const
print_composition	src/comb/ruler-func1.h	/^    void print_composition(const char *bla)  const$/;"	f	class:ruler_func1	access:public	signature:(const char *bla) const
print_composition_aa	src/comb/composition-nz-left-2smooth.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
print_composition_aa	src/comb/composition-nz-left-smooth.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
print_composition_aa	src/comb/composition-nz-restrpref.h	/^    void print_composition_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
print_composition_aa	src/comb/print-composition-aa.cc	/^print_composition_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_composition_aa	src/comb/print-composition-aa.h	/^void print_composition_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_composition_by_sorts	src/comb/print-composition-by-sorts.cc	/^print_composition_by_sorts(const char* bla, const ulong *va, const ulong *vs, ulong m)$/;"	f	signature:(const char* bla, const ulong *va, const ulong *vs, ulong m)
print_composition_by_sorts	src/comb/print-composition-by-sorts.h	/^void print_composition_by_sorts(const char *bla, const ulong *va, const ulong *vs, ulong m);$/;"	p	signature:(const char *bla, const ulong *va, const ulong *vs, ulong m)
print_composition_unimodal	src/comb/print-composition-unimodal.cc	/^print_composition_unimodal(const char *bla,$/;"	f	signature:(const char *bla, const ulong *va, const ulong *vs, ulong m)
print_composition_unimodal	src/comb/print-composition-unimodal.h	/^void print_composition_unimodal(const char *bla, const ulong *va, const ulong *vs, ulong m);$/;"	p	signature:(const char *bla, const ulong *va, const ulong *vs, ulong m)
print_composition_with_sorts	src/comb/print-composition-by-sorts.cc	/^print_composition_with_sorts(const char* bla, const ulong *va, const ulong *vs, ulong m)$/;"	f	signature:(const char* bla, const ulong *va, const ulong *vs, ulong m)
print_composition_with_sorts	src/comb/print-composition-by-sorts.h	/^void print_composition_with_sorts(const char* bla, const ulong *va, const ulong *vs, ulong m);$/;"	p	signature:(const char* bla, const ulong *va, const ulong *vs, ulong m)
print_conj_aa	src/comb/partition-2fall-asc-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:() const
print_conj_aa	src/comb/partition-2fall-asc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_asc	access:public	signature:() const
print_conj_aa	src/comb/partition-2fall-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_2fall_desc	access:public	signature:() const
print_conj_aa	src/comb/partition-asc-2rep-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:() const
print_conj_aa	src/comb/partition-asc-2rep.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_2rep	access:public	signature:() const
print_conj_aa	src/comb/partition-asc-subset-lex-csh.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:() const
print_conj_aa	src/comb/partition-asc-subset-lex.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc_subset_lex	access:public	signature:() const
print_conj_aa	src/comb/partition-asc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_asc	access:public	signature:() const
print_conj_aa	src/comb/partition-desc-bb.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc_bb	access:public	signature:() const
print_conj_aa	src/comb/partition-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_desc	access:public	signature:() const
print_conj_aa	src/comb/partition-nonsquashing-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_nonsquashing_desc	access:public	signature:() const
print_conj_aa	src/comb/partition-s-desc.h	/^    void print_conj_aa()  const  \/\/ ASCII art$/;"	f	class:partition_s_desc	access:public	signature:() const
print_crc	demo/graph/lyndon-gray-demo.cc	/^static inline void print_crc()$/;"	f	file:	signature:()
print_cycle	doc/perm-doc.txt	/^ulong print_cycle(const ulong *f, ulong e0\/*=0*\/);$/;"	p	file:	signature:(const ulong *f, ulong e0 )
print_cycle	src/perm/printcycles.cc	/^print_cycle(const ulong *f, ulong e0\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong e0 )
print_cycle	src/perm/printcycles.h	/^ulong print_cycle(const ulong *f, ulong e0=0);$/;"	p	signature:(const ulong *f, ulong e0=0)
print_cycle_code	src/perm/attic/cycles.cc	/^print_cycle_code(const ulong *f, ulong len, std::ostream &out)$/;"	f	file:	signature:(const ulong *f, ulong len, std::ostream &out)
print_cycles	doc/perm-doc.txt	/^void print_cycles(const char *bla, const ulong *f, ulong n, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb )
print_cycles	src/perm/attic/cycles.cc	/^cycles::print_cycles(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
print_cycles	src/perm/attic/cycles.h	/^    void print_cycles(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
print_cycles	src/perm/printcycles.cc	/^print_cycles(const char *bla, const ulong *f, ulong n, bitarray *tb\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb )
print_cycles	src/perm/printcycles.h	/^void print_cycles(const char *bla, const ulong *f, ulong n, bitarray *tb=0);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb=0)
print_cycles_len	doc/perm-doc.txt	/^void print_cycles_len(const ulong *f, ulong n, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const ulong *f, ulong n, bitarray *tb )
print_cycles_len	src/perm/printcycles.cc	/^print_cycles_len(const ulong *f, ulong n, bitarray *tb\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong n, bitarray *tb )
print_cycles_len	src/perm/printcycles.h	/^void print_cycles_len(const ulong *f, ulong n, bitarray *tb=0);$/;"	p	signature:(const ulong *f, ulong n, bitarray *tb=0)
print_cycles_short	src/perm/attic/cycles.cc	/^cycles::print_cycles_short()  const$/;"	f	class:cycles	signature:() const
print_cycles_short	src/perm/attic/cycles.h	/^    void print_cycles_short()  const;$/;"	p	class:cycles	access:public	signature:() const
print_debruijn_seq	src/graph/attic/debruijngraph.cc	/^debruijn_cycles::print_debruijn_seq()  const$/;"	f	class:debruijn_cycles	signature:() const
print_debruijn_seq	src/graph/attic/debruijngraph.h	/^    void print_debruijn_seq() const;$/;"	p	class:debruijn_cycles	access:public	signature:() const
print_degrees	demo/comb/schroeder-tree-demo.cc	/^void print_degrees()$/;"	f	signature:()
print_deltaset	src/comb/comb-print.h	/^void print_deltaset(const char *bla, const ulong *x, ulong n, const char *c01=0);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, const char *c01=0)
print_deltaset	src/comb/combination-colex.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_colex	access:public	signature:(const char *bla=0) const
print_deltaset	src/comb/combination-lex.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_lex	access:public	signature:(const char *bla=0) const
print_deltaset	src/comb/combination-rec.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:comb_rec	access:public	signature:(const char *bla=0) const
print_deltaset	src/comb/combination-revdoor.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:combination_revdoor	access:public	signature:(const char *bla=0) const
print_deltaset	src/comb/composition-rank.cc	/^composition_rank::print_deltaset(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
print_deltaset	src/comb/composition-rank.h	/^    void print_deltaset(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
print_deltaset	src/comb/ksubset-gray.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:ksubset_gray	access:public	signature:(const char *bla=0) const
print_deltaset	src/comb/print-set.cc	/^print_deltaset(const char *bla, const ulong *x, ulong n, const char *c01\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, const char *c01 )
print_deltaset	src/comb/subset-gray.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:subset_gray	access:public	signature:(const char *bla=0) const
print_deltaset_as_set	src/comb/comb-print.h	/^ulong print_deltaset_as_set(const char *bla, const ulong *x, ulong n, int eq=0);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, int eq=0)
print_deltaset_as_set	src/comb/print-set.cc	/^print_deltaset_as_set(const char *bla, const ulong *x, ulong n, int eq\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, int eq )
print_deltaset_as_set1	src/comb/comb-print.h	/^ulong print_deltaset_as_set1(const char *bla, const ulong *x, ulong n, int eq=0);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, int eq=0)
print_deltaset_as_set1	src/comb/print-set.cc	/^print_deltaset_as_set1(const char *bla, const ulong *x, ulong n, int eq\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, int eq )
print_deltaset_num	src/comb/composition-rank.cc	/^composition_rank::print_deltaset_num(const char *bla, const ulong *x, ulong k)  const$/;"	f	class:composition_rank	signature:(const char *bla, const ulong *x, ulong k) const
print_deltaset_num	src/comb/composition-rank.h	/^    void print_deltaset_num(const char *bla, const ulong *x, ulong k)  const;$/;"	p	class:composition_rank	access:public	signature:(const char *bla, const ulong *x, ulong k) const
print_deque	demo/ds/deque-demo.cc	/^print_deque(deque<ulong> &f)$/;"	f	file:	signature:(deque<ulong> &f)
print_epsilon	src/aux1/attic/auxprint.cc	/^double print_epsilon = 0.0;$/;"	v
print_epsilon	test/aux-test.cc	/^double print_epsilon = 0.0;$/;"	v
print_falling	src/comb/partition.cc	/^partition::print_falling()  const$/;"	f	class:partition	signature:() const
print_falling	src/comb/partition.h	/^    void print_falling()  const;$/;"	p	class:partition	access:public	signature:() const
print_fixed	doc/aux0-doc.txt	/^void print_fixed(const char *bla, double v, long nd, bool sq);$/;"	p	file:	signature:(const char *bla, double v, long nd, bool sq)
print_fixed	src/aux0/attic/aux0double.h	/^void print_fixed(const char *bla, double v, long nd, bool sq);$/;"	p	signature:(const char *bla, double v, long nd, bool sq)
print_fixed	src/aux0/print-fixed.cc	/^print_fixed(const char *bla, double v, long nd, bool sq)$/;"	f	signature:(const char *bla, double v, long nd, bool sq)
print_fixed	src/aux0/print-fixed.h	/^void print_fixed(const char *bla, double v, long nd, bool sq);$/;"	p	signature:(const char *bla, double v, long nd, bool sq)
print_fixed_points	src/perm/attic/cycles.cc	/^cycles::print_fixed_points(int info_only\/*=0*\/)  const$/;"	f	class:cycles	signature:(int info_only ) const
print_fixed_points	src/perm/attic/cycles.h	/^    void print_fixed_points(int info_only=0)  const;$/;"	p	class:cycles	access:public	signature:(int info_only=0) const
print_fountain_aa	src/comb/composition-nz-left-2smooth.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_2smooth	access:public	signature:() const
print_fountain_aa	src/comb/composition-nz-left-smooth.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_left_smooth	access:public	signature:() const
print_fountain_aa	src/comb/composition-nz-restrpref.h	/^    void print_fountain_aa()  const  \/\/ ASCII art$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
print_fountain_aa	src/comb/print-composition-aa.cc	/^print_fountain_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_fountain_aa	src/comb/print-composition-aa.h	/^void print_fountain_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_fp_dist_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_fp_dist_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
print_fp_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
print_fp_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
print_fp_rgs	src/comb/setpart-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=false, bool zb=true)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false, bool zb=true) const
print_fxt_version	doc/aux0-doc.txt	/^void print_fxt_version();$/;"	p	file:	signature:()
print_fxt_version	src/aux0/version.cc	/^print_fxt_version()$/;"	f	signature:()
print_fxt_version	src/aux0/version.h	/^void print_fxt_version();$/;"	p	signature:()
print_gray	src/comb/comb-print.h	/^void print_gray(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
print_gray	src/comb/print-gray.cc	/^print_gray(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
print_gray_delta	src/comb/comb-print.h	/^void print_gray_delta(const ulong *f, ulong n, ulong lb=0);$/;"	p	signature:(const ulong *f, ulong n, ulong lb=0)
print_gray_delta	src/comb/print-gray.cc	/^print_gray_delta(const ulong *f, ulong n, ulong lb\/*=0*\/)$/;"	f	signature:(const ulong *f, ulong n, ulong lb )
print_hanoi	demo/bits/hanoi-demo.cc	/^print_hanoi(const ulong *f, ulong n, ulong s, int md)$/;"	f	file:	signature:(const ulong *f, ulong n, ulong s, int md)
print_hanoi	demo/comb/hanoi-rec-demo.cc	/^print_hanoi(ulong s)$/;"	f	file:	signature:(ulong s)
print_horiz	src/graph/digraph.cc	/^digraph::print_horiz(const char *bla\/*=0*\/)  const$/;"	f	class:digraph	signature:(const char *bla ) const
print_horiz	src/graph/digraph.h	/^    void print_horiz(const char *bla=0)  const;$/;"	p	class:digraph	access:public	signature:(const char *bla=0) const
print_horiz_aa	src/comb/catalan-path-lex.h	/^    void print_horiz_aa()  const  \/\/ ASCII art$/;"	f	class:catalan_path_lex	access:public	signature:() const
print_horiz_aa	src/comb/motzkin-path-lex.h	/^    void print_horiz_aa()  const  \/\/ ASCII art$/;"	f	class:motzkin_path_lex	access:public	signature:() const
print_idx_seq	doc/bits-doc.txt	/^void print_idx_seq(const char *bla, unsigned long long x, ulong off\/*=0*\/);$/;"	p	file:	signature:(const char *bla, unsigned long long x, ulong off )
print_idx_seq	src/bits/print-bin.cc	/^print_idx_seq(const char *bla, unsigned long long x, ulong off\/*=0*\/)$/;"	f	signature:(const char *bla, unsigned long long x, ulong off )
print_idx_seq	src/bits/print-bin.h	/^void print_idx_seq(const char *bla, unsigned long long x, ulong off=0);$/;"	p	signature:(const char *bla, unsigned long long x, ulong off=0)
print_info	src/bpol/gf2n.cc	/^GF2n::print_info(int level\/*=0*\/)$/;"	f	class:GF2n	signature:(int level )
print_info	src/bpol/gf2n.h	/^    static void print_info(int level=0);$/;"	p	class:GF2n	access:public	signature:(int level=0)
print_info	src/mod/mod.cc	/^mod::print_info()$/;"	f	class:mod	signature:()
print_info	src/mod/mod.h	/^    static void print_info();$/;"	p	class:mod	access:public	signature:()
print_internal	src/comb/catalan.cc	/^catalan::print_internal()  const$/;"	f	class:catalan	signature:() const
print_internal	src/comb/catalan.h	/^    void print_internal()  const;$/;"	p	class:catalan	access:public	signature:() const
print_internal	src/comb/setpart.cc	/^setpart::print_internal()  const$/;"	f	class:setpart	signature:() const
print_internal	src/comb/setpart.h	/^    void print_internal()  const;  \/\/ print internal state$/;"	p	class:setpart	access:public	signature:() const
print_internal_state	src/comb/string-subst.cc	/^string_subst::print_internal_state()  const$/;"	f	class:string_subst	signature:() const
print_internal_state	src/comb/string-subst.h	/^    void print_internal_state()  const;$/;"	p	class:string_subst	access:public	signature:() const
print_inv	src/comb/attic/perm-minchange.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_minchange	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-gray-ffact.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-gray-ffact2.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_ffact2	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-gray-rfact.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rfact	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-gray-rot1.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_gray_rot1	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-ives.h	/^     void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_ives	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-lex-inv.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_lex_inv	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-st-pref.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st_pref	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-st.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_st	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-star.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_star	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-trotter-lg.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter_lg	access:public	signature:(const char *bla, bool dfz=false) const
print_inv	src/comb/perm-trotter.h	/^    void print_inv(const char *bla, bool dfz=false)  const$/;"	f	class:perm_trotter	access:public	signature:(const char *bla, bool dfz=false) const
print_inv_perm_code	doc/perm-doc.txt	/^void print_inv_perm_code(const char *bla, const ulong *f, ulong n, bitarray *tb\/*=0*\/);$/;"	p	file:	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb )
print_inv_perm_code	src/perm/printcycles.cc	/^print_inv_perm_code(const char *bla, const ulong *f, ulong n, bitarray *tb\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb )
print_inv_perm_code	src/perm/printcycles.h	/^void print_inv_perm_code(const char *bla, const ulong *f, ulong n, bitarray *tb=0);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, bitarray *tb=0)
print_involution	src/comb/involution-zero-map-rgs.h	/^    void print_involution(const char *bla, bool zb=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool zb=true) const
print_leaders	src/perm/attic/cycles.cc	/^cycles::print_leaders()  const$/;"	f	class:cycles	signature:() const
print_leaders	src/perm/attic/cycles.h	/^    void print_leaders()  const;$/;"	p	class:cycles	access:public	signature:() const
print_level_seq	src/comb/ordered-tree-branches.cc	/^ordered_tree_branches::print_level_seq(const char *bla)  const$/;"	f	class:ordered_tree_branches	signature:(const char *bla) const
print_level_seq	src/comb/ordered-tree-branches.h	/^    void print_level_seq(const char *bla)  const;$/;"	p	class:ordered_tree_branches	access:public	signature:(const char *bla) const
print_level_seq	src/comb/ordered-tree-branching-seq.cc	/^ordered_tree_branching_seq::print_level_seq(const char *bla, bool dfz)  const$/;"	f	class:ordered_tree_branching_seq	signature:(const char *bla, bool dfz) const
print_level_seq	src/comb/ordered-tree-branching-seq.h	/^    void print_level_seq(const char *bla, bool dfz=false)  const;$/;"	p	class:ordered_tree_branching_seq	access:public	signature:(const char *bla, bool dfz=false) const
print_long	src/comb/partition.cc	/^partition::print_long(bool szq)  const$/;"	f	class:partition	signature:(bool szq) const
print_long	src/comb/partition.h	/^    void print_long(bool szq)  const;$/;"	p	class:partition	access:public	signature:(bool szq) const
print_lr	demo/ds/left-right-array-demo.cc	/^print_lr(const left_right_array &LR, const ulong *A)$/;"	f	signature:(const left_right_array &LR, const ulong *A)
print_lyndon_gray_digraph	doc/graph-doc.txt	/^void print_lyndon_gray_digraph(const digraph &dg, lyngray_dat *ldat);$/;"	p	file:	signature:(const digraph &dg, lyngray_dat *ldat)
print_lyndon_gray_digraph	src/graph/mk-lyndon-gray-digraph.cc	/^print_lyndon_gray_digraph(const digraph &dg, lyngray_dat *ldat)$/;"	f	signature:(const digraph &dg, lyngray_dat *ldat)
print_lyndon_gray_digraph	src/graph/mk-special-digraphs.h	/^void print_lyndon_gray_digraph(digraph &dg, lyngray_dat *ldat);$/;"	p	signature:(digraph &dg, lyngray_dat *ldat)
print_lyndon_gray_path	doc/graph-doc.txt	/^void print_lyndon_gray_path(const digraph_paths &dp, lyngray_dat *ldat);$/;"	p	file:	signature:(const digraph_paths &dp, lyngray_dat *ldat)
print_lyndon_gray_path	src/graph/mk-lyndon-gray-digraph.cc	/^print_lyndon_gray_path(const digraph_paths &dp, lyngray_dat *ldat)$/;"	f	signature:(const digraph_paths &dp, lyngray_dat *ldat)
print_lyndon_gray_path	src/graph/mk-special-digraphs.h	/^void print_lyndon_gray_path(const digraph_paths &dp, lyngray_dat *ldat);$/;"	p	signature:(const digraph_paths &dp, lyngray_dat *ldat)
print_maps	src/comb/string-subst.cc	/^string_subst::print_maps()  const$/;"	f	class:string_subst	signature:() const
print_maps	src/comb/string-subst.h	/^    void print_maps()  const;$/;"	p	class:string_subst	access:public	signature:() const
print_mixedradix	src/comb/comb-print.h	/^void print_mixedradix(const char *bla, const ulong *f, ulong n, bool dfz=false);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, bool dfz=false)
print_mixedradix	src/comb/print-mixedradix.cc	/^print_mixedradix(const char *bla, const ulong *f, ulong n, bool dfz\/*=false*\/)$/;"	f	signature:(const char *bla, const ulong *f, ulong n, bool dfz )
print_multi_deltaset_as_set	src/comb/comb-print.h	/^ulong print_multi_deltaset_as_set(const char *bla, const ulong *x, ulong n, bool cq=true);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, bool cq=true)
print_multi_deltaset_as_set	src/comb/print-mset.cc	/^print_multi_deltaset_as_set(const char *bla, const ulong *x, ulong n, bool cq\/*=true*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, bool cq )
print_multi_deltaset_as_set_alph	src/comb/comb-print.h	/^ulong print_multi_deltaset_as_set_alph(const char *bla, const ulong *x, ulong n, bool cq=true);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, bool cq=true)
print_multi_deltaset_as_set_alph	src/comb/print-mset.cc	/^print_multi_deltaset_as_set_alph(const char *bla, const ulong *x, ulong n, bool cq\/*=true*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, bool cq )
print_nines	src/comb/mixedradix-colex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_colex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-endo-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-endo.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_endo	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gray	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gray2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gray2	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gslex-alt.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gslex-alt2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gslex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-gslex2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_gslex2	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_lex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-modular-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-modular-gray2.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-naf-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-naf-subset-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-naf.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_naf	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-restrpref.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_restrpref	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-sl-gray.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_sl_gray	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-sod-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_sod_lex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-subset-lex.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_subset_lex	access:public	signature:(const char *bla) const
print_nines	src/comb/mixedradix-subset-lexrev.h	/^    void print_nines(const char *bla)  const$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:(const char *bla) const
print_one	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^inline void print_one(ulong k, ulong x)$/;"	f	signature:(ulong k, ulong x)
print_one	demo/graph/graph-perm-star-transpositions-demo.cc	/^inline void print_one(ulong k, ulong x)$/;"	f	signature:(ulong k, ulong x)
print_ordered_rarray	src/ds/attic/orderedrarray-demo.cc	/^print_ordered_rarray(ordered_rarray<ulong> &f)$/;"	f	file:	signature:(ordered_rarray<ulong> &f)
print_p	src/comb/attic/allsetpartitions.cc	/^all_set_partitions::print_p(const signed char *x, ulong n)$/;"	f	class:all_set_partitions	signature:(const signed char *x, ulong n)
print_p	src/comb/attic/allsetpartitions.h	/^    static ulong print_p(const signed char *x, ulong n);$/;"	p	class:all_set_partitions	access:public	signature:(const signed char *x, ulong n)
print_p	src/comb/setpart.cc	/^setpart::print_p(int k)  const$/;"	f	class:setpart	signature:(int k) const
print_p	src/comb/setpart.h	/^    int print_p(int k)  const;$/;"	p	class:setpart	access:public	signature:(int k) const
print_paren_word	src/comb/balanced-ordered-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
print_paren_word	src/comb/id-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
print_paren_word	src/comb/ordered-tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
print_paren_word	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_paren_word(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, const char * s ) const
print_paren_word	src/comb/tree-lev-seq-aux.h	/^    void print_paren_word(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, const char * s=Ó) const
print_paren_word	src/comb/tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
print_partition	src/comb/partition-rgs-lex.cc	/^partition_rgs_lex::print_partition(const char *bla)  const$/;"	f	class:partition_rgs_lex	signature:(const char *bla) const
print_partition	src/comb/partition-rgs-lex.h	/^    void print_partition(const char *bla)  const;$/;"	p	class:partition_rgs_lex	access:public	signature:(const char *bla) const
print_partition_asc_aa	src/comb/print-partition-aa.cc	/^print_partition_asc_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_partition_asc_aa	src/comb/print-partition-aa.h	/^void print_partition_asc_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_partition_asc_conj	src/comb/print-partition-conj.cc	/^print_partition_asc_conj(const char *bla, const ulong *a, ulong m)$/;"	f	signature:(const char *bla, const ulong *a, ulong m)
print_partition_asc_conj	src/comb/print-partition-conj.h	/^void print_partition_asc_conj(const char *bla, const ulong *a, ulong m);$/;"	p	signature:(const char *bla, const ulong *a, ulong m)
print_partition_asc_conj_aa	src/comb/print-partition-aa.cc	/^print_partition_asc_conj_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_partition_asc_conj_aa	src/comb/print-partition-aa.h	/^void print_partition_asc_conj_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_partition_desc_aa	src/comb/print-partition-aa.cc	/^print_partition_desc_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_partition_desc_aa	src/comb/print-partition-aa.h	/^void print_partition_desc_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_partition_desc_conj	src/comb/print-partition-conj.cc	/^print_partition_desc_conj(const char *bla, const ulong *a, ulong m)$/;"	f	signature:(const char *bla, const ulong *a, ulong m)
print_partition_desc_conj	src/comb/print-partition-conj.h	/^void print_partition_desc_conj(const char *bla, const ulong *a, ulong m);$/;"	p	signature:(const char *bla, const ulong *a, ulong m)
print_partition_desc_conj_aa	src/comb/print-partition-aa.cc	/^print_partition_desc_conj_aa(const ulong *a, ulong m)$/;"	f	signature:(const ulong *a, ulong m)
print_partition_desc_conj_aa	src/comb/print-partition-aa.h	/^void print_partition_desc_conj_aa(const ulong *a, ulong m);$/;"	p	signature:(const ulong *a, ulong m)
print_path	doc/graph-doc.txt	/^void print_path(const ulong *rv, ulong ng);$/;"	p	file:	signature:(const ulong *rv, ulong ng)
print_path	src/graph/attic/debruijngraph.h	/^    void print_path() const$/;"	f	class:debruijn_cycles	access:public	signature:() const
print_path	src/graph/digraph-paths.h	/^    void print_path() const$/;"	f	class:digraph_paths	access:public	signature:() const
print_path	src/graph/print-path.cc	/^print_path(const ulong *rv, ulong ng)$/;"	f	signature:(const ulong *rv, ulong ng)
print_path	src/graph/print-path.h	/^void print_path(const ulong *rv, ulong ng);$/;"	p	signature:(const ulong *rv, ulong ng)
print_perm	src/comb/comb-print.h	/^void print_perm(const char *bla, const ulong *f, ulong n, bool dfz=false);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, bool dfz=false)
print_perm	src/comb/print-perm.cc	/^print_perm(const char *bla, const ulong *f, ulong n, bool dfz\/*=false*\/)$/;"	f	signature:(const char *bla, const ulong *f, ulong n, bool dfz )
print_queue	demo/ds/queue-demo.cc	/^print_queue(queue<ulong> &f)$/;"	f	file:	signature:(queue<ulong> &f)
print_r	src/comb/young-tab-rgs.h	/^    void print_r(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print_rarray	src/ds/attic/rarray-demo.cc	/^print_rarray(rarray<ulong> &f)$/;"	f	file:	signature:(rarray<ulong> &f)
print_rev	src/comb/partition-asc-perim.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_perim	access:public	signature:(const char *bla) const
print_rev	src/comb/partition-asc-sorts.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts	access:public	signature:(const char *bla) const
print_rev	src/comb/partition-asc-sorts2-pp.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:(const char *bla) const
print_rev	src/comb/partition-asc-sorts2.h	/^    void print_rev(const char *bla)  const$/;"	f	class:partition_asc_sorts2	access:public	signature:(const char *bla) const
print_rev_composition_with_sorts	src/comb/print-composition-by-sorts.cc	/^print_rev_composition_with_sorts(const char* bla, const ulong *va, const ulong *vs, ulong m)$/;"	f	signature:(const char* bla, const ulong *va, const ulong *vs, ulong m)
print_rev_composition_with_sorts	src/comb/print-composition-by-sorts.h	/^void print_rev_composition_with_sorts(const char* bla, const ulong *va, const ulong *vs, ulong m);$/;"	p	signature:(const char* bla, const ulong *va, const ulong *vs, ulong m)
print_ringbuffer	demo/ds/ringbuffer-demo.cc	/^print_ringbuffer(ringbuffer<RBt> &R)$/;"	f	file:	signature:(ringbuffer<RBt> &R)
print_rset	src/ds/attic/rset-demo.cc	/^print_rset(rset<ulong> &f)$/;"	f	file:	signature:(rset<ulong> &f)
print_rules	demo/gf2n/lhca2poly-demo.cc	/^print_rules(ulong rr, ulong cc, ulong pn)$/;"	f	signature:(ulong rr, ulong cc, ulong pn)
print_rules	demo/gf2n/lowbit-lhca-demo.cc	/^print_rules(ulong rr, ulong cc, ulong pn)$/;"	f	signature:(ulong rr, ulong cc, ulong pn)
print_rules	demo/gf2n/minweight-lowbit-lhca-demo.cc	/^print_rules(ulong rr, ulong cc, ulong pn)$/;"	f	signature:(ulong rr, ulong cc, ulong pn)
print_rules	src/comb/attic/stringsubst.cc	/^string_subst::print_rules(const char *start\/*=0*\/)$/;"	f	class:string_subst	signature:(const char *start )
print_rules	src/comb/attic/stringsubst.h	/^    void print_rules(const char *start=0);$/;"	p	class:string_subst	access:public	signature:(const char *start=0)
print_sep	demo/bits/bitdemos.h	/^void print_sep()$/;"	f	signature:()
print_set	src/comb/comb-print.h	/^void print_set(const char *bla, const ulong *x, ulong n, ulong off=0);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, ulong off=0)
print_set	src/comb/combination-colex.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_colex	access:public	signature:(const char *bla=0) const
print_set	src/comb/combination-lex.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_lex	access:public	signature:(const char *bla=0) const
print_set	src/comb/combination-rec.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:comb_rec	access:public	signature:(const char *bla=0) const
print_set	src/comb/combination-revdoor.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:combination_revdoor	access:public	signature:(const char *bla=0) const
print_set	src/comb/ksubset-gray.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:ksubset_gray	access:public	signature:(const char *bla=0) const
print_set	src/comb/print-set.cc	/^print_set(const char *bla, const ulong *x, ulong n, ulong off\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, ulong off )
print_set	src/comb/setpart-rgs-gray.h	/^    void print_set(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_gray	access:public	signature:(const char *bla, ulong off=1) const
print_set	src/comb/subset-gray.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:subset_gray	access:public	signature:(const char *bla=0) const
print_set1_as_deltaset	src/comb/comb-print.h	/^void print_set1_as_deltaset(const char *bla, const ulong *x, ulong n, ulong N, const char *c01=0);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, ulong N, const char *c01=0)
print_set1_as_deltaset	src/comb/print-set.cc	/^print_set1_as_deltaset(const char *bla, const ulong *x, ulong n, ulong N, const char *c01\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, ulong N, const char *c01 )
print_set_as_deltaset	src/comb/comb-print.h	/^void print_set_as_deltaset(const char *bla, const ulong *f, ulong n, ulong N, const char *c01=0);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, ulong N, const char *c01=0)
print_set_as_deltaset	src/comb/print-set.cc	/^print_set_as_deltaset(const char *bla, const ulong *x, ulong n, ulong N, const char *c01\/*=0*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, ulong N, const char *c01 )
print_setpart	src/comb/comb-print.h	/^void print_setpart(const char *bla, const ulong *f, ulong n, ulong ns, ulong off=1);$/;"	p	signature:(const char *bla, const ulong *f, ulong n, ulong ns, ulong off=1)
print_setpart	src/comb/print-setpart.cc	/^print_setpart(const char *bla, const ulong *r, ulong n,$/;"	f	signature:(const char *bla, const ulong *r, ulong n, ulong ns, ulong off )
print_setpart	src/comb/setpart-s-zero-map-rgs.h	/^    void print_setpart(const char *bla, bool zb=false)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool zb=false) const
print_setpart	src/comb/setpart-zero-map-rgs.h	/^    void print_setpart(const char *bla, bool zb=false)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool zb=false) const
print_sets	src/comb/setpart-p-rgs-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(const char *bla, ulong off=1) const
print_sets	src/comb/setpart-rgs-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_lex	access:public	signature:(const char *bla, ulong off=1) const
print_sets	src/comb/setpart-rgs-subset-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(const char *bla, ulong off=1) const
print_sgn_vec	demo/seq/A276691-demo.cc	/^inline void print_sgn_vec(const char *bla, const long *x, ulong n)$/;"	f	signature:(const char *bla, const long *x, ulong n)
print_sign_vec	src/comb/comb-print.h	/^void print_sign_vec(const char *bla, const ulong *x, ulong n);$/;"	p	signature:(const char *bla, const ulong *x, ulong n)
print_sign_vec	src/comb/print-vec.cc	/^print_sign_vec(const char *bla, const ulong *x, ulong n)$/;"	f	signature:(const char *bla, const ulong *x, ulong n)
print_stack	demo/ds/stack-demo.cc	/^print_stack(stack<ulong> &f)$/;"	f	file:	signature:(stack<ulong> &f)
print_stats	src/comb/young-tab-rgs-subset-lex.h	/^    void print_stats(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
print_stats	src/comb/young-tab-rgs.h	/^    void print_stats(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print_str	demo/sort/selection-sort-demo.cc	/^static void print_str(const char *f, ulong i, ulong n)$/;"	f	file:	signature:(const char *f, ulong i, ulong n)
print_sym	src/comb/partition-rgs-lex.h	/^    void print_sym(const char *bla)  const$/;"	f	class:partition_rgs_lex	access:public	signature:(const char *bla) const
print_sym_vec	src/comb/comb-print.h	/^void print_sym_vec(const char *bla, const ulong *x, ulong n);$/;"	p	signature:(const char *bla, const ulong *x, ulong n)
print_sym_vec	src/comb/print-vec.cc	/^print_sym_vec(const char *bla, const ulong *x, ulong n)$/;"	f	signature:(const char *bla, const ulong *x, ulong n)
print_tree	demo/comb/schroeder-tree-demo.cc	/^void print_tree()$/;"	f	signature:()
print_tree_lev_seq	src/comb/composition-nz-first-max.h	/^    void print_tree_lev_seq(const char *bla)  const$/;"	f	class:composition_nz_first_max	access:public	signature:(const char *bla) const
print_turns	src/graph/digraph-paths.cc	/^digraph_paths::print_turns(bool shortq\/*=true*\/) const$/;"	f	class:digraph_paths	signature:(bool shortq ) const
print_turns	src/graph/digraph-paths.h	/^    void print_turns(bool shortq=true) const;$/;"	p	class:digraph_paths	access:public	signature:(bool shortq=true) const
print_twodim	src/aux1/attic/auxprint.cc	/^print_twodim(const char *bla, const double *f, ulong r, ulong c, double eps\/*=0.0*\/)$/;"	f	signature:(const char *bla, const double *f, ulong r, ulong c, double eps )
print_twodim	test/test.h	/^void print_twodim(const char *bla, const double *f, ulong r, ulong c, double eps=0.0);$/;"	p	signature:(const char *bla, const double *f, ulong r, ulong c, double eps=0.0)
print_unit_partition	src/comb/composition-nz-minc.cc	/^composition_nz_minc::print_unit_partition(const char *bla, bool dfz\/*=false*\/)  const$/;"	f	class:composition_nz_minc	signature:(const char *bla, bool dfz ) const
print_unit_partition	src/comb/composition-nz-minc.h	/^    void print_unit_partition(const char *bla, bool dfz=false)  const;$/;"	p	class:composition_nz_minc	access:public	signature:(const char *bla, bool dfz=false) const
print_unit_sum	src/comb/binary-huffman.cc	/^binary_huffman::print_unit_sum(const char *bla)  const$/;"	f	class:binary_huffman	signature:(const char *bla) const
print_unit_sum	src/comb/binary-huffman.h	/^    void print_unit_sum(const char *bla)  const;$/;"	p	class:binary_huffman	access:public	signature:(const char *bla) const
print_utea	demo/arith/shiftadd-exp-demo.cc	/^print_utea(long n, double x, double y, double z, double a)$/;"	f	signature:(long n, double x, double y, double z, double a)
print_utea	demo/arith/shiftadd-log-demo.cc	/^print_utea(long n, double x, double y, double z, double a)$/;"	f	signature:(long n, double x, double y, double z, double a)
print_vec	demo/fft/walsh-eigenvec-demo.cc	/^print_vec(double *v, ulong n)$/;"	f	signature:(double *v, ulong n)
print_vec	src/comb/comb-print.h	/^void print_vec(const char *bla, const ulong *x, ulong n, bool dfz=false);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, bool dfz=false)
print_vec	src/comb/print-vec.cc	/^print_vec(const char *bla, const ulong *x, ulong n, bool dfz\/*=false*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, bool dfz )
print_vec1	src/comb/comb-print.h	/^void print_vec1(const char *bla, const ulong *x, ulong n);$/;"	p	signature:(const char *bla, const ulong *x, ulong n)
print_vec1	src/comb/print-vec.cc	/^print_vec1(const char *bla, const ulong *x, ulong n)$/;"	f	signature:(const char *bla, const ulong *x, ulong n)
print_vec_rev	src/comb/comb-print.h	/^void print_vec_rev(const char *bla, const ulong *x, ulong n, bool dfz=false);$/;"	p	signature:(const char *bla, const ulong *x, ulong n, bool dfz=false)
print_vec_rev	src/comb/print-vec.cc	/^print_vec_rev(const char *bla, const ulong *x, ulong n, bool dfz\/*=false*\/)$/;"	f	signature:(const char *bla, const ulong *x, ulong n, bool dfz )
print_with_sorts	src/comb/composition-dist-unimodal.h	/^    void print_with_sorts(const char *bla)  const$/;"	f	class:composition_dist_unimodal	access:public	signature:(const char *bla) const
print_with_sorts	src/comb/composition-unimodal.h	/^    void print_with_sorts(const char *bla)  const$/;"	f	class:composition_unimodal	access:public	signature:(const char *bla) const
print_xyza	demo/arith/briggs-log-demo.cc	/^print_xyza(long n, double x, double y, double z, double a)$/;"	f	signature:(long n, double x, double y, double z, double a)
print_xyza	demo/arith/cordic-circ-demo.cc	/^print_xyza(long n, double x, double y, double z, double a)$/;"	f	signature:(long n, double x, double y, double z, double a)
print_xyza	demo/arith/cordic-hyp-demo.cc	/^print_xyza(long n, double x, double y, double z, double a)$/;"	f	signature:(long n, double x, double y, double z, double a)
print_young_tab_rgs_aa	src/comb/print-young-tab-rgs-aa.cc	/^print_young_tab_rgs_aa(const ulong *A, const ulong *P, ulong n, ulong off\/*=1*\/)$/;"	f	signature:(const ulong *A, const ulong *P, ulong n, ulong off )
print_young_tab_rgs_aa	src/comb/print-young-tab-rgs-aa.h	/^void print_young_tab_rgs_aa(const ulong *A, const ulong *P, ulong n, ulong off=1);$/;"	p	signature:(const ulong *A, const ulong *P, ulong n, ulong off=1)
print_zero_dist_rgs	src/comb/involution-zero-map-rgs.h	/^    void print_zero_dist_rgs(const char *bla, bool dfz=true)  const$/;"	f	class:involution_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true) const
print_zero_map_rgs_as_fp_dist_rgs	src/comb/print-zero-map-rgs.cc	/^print_zero_map_rgs_as_fp_dist_rgs(const char *bla,$/;"	f	signature:(const char *bla, const ulong *a, ulong n, bool dfz , bool zb )
print_zero_map_rgs_as_fp_dist_rgs	src/comb/print-zero-map-rgs.h	/^void print_zero_map_rgs_as_fp_dist_rgs(const char *bla,$/;"	p	signature:(const char *bla, const ulong *a, ulong n, bool dfz=true, bool zb=true)
print_zero_map_rgs_as_fp_rgs	src/comb/print-zero-map-rgs.cc	/^print_zero_map_rgs_as_fp_rgs(const char *bla,$/;"	f	signature:(const char *bla, const ulong *a, ulong n, bool dfz , bool zb )
print_zero_map_rgs_as_fp_rgs	src/comb/print-zero-map-rgs.h	/^void print_zero_map_rgs_as_fp_rgs(const char *bla,$/;"	p	signature:(const char *bla, const ulong *a, ulong n, bool dfz=true, bool zb=true)
print_zero_map_rgs_as_zero_dist_rgs	src/comb/print-zero-map-rgs.cc	/^print_zero_map_rgs_as_zero_dist_rgs(const char *bla,$/;"	f	signature:(const char *bla, const ulong *a, ulong n, bool dfz )
print_zero_map_rgs_as_zero_dist_rgs	src/comb/print-zero-map-rgs.h	/^void print_zero_map_rgs_as_zero_dist_rgs(const char *bla,$/;"	p	signature:(const char *bla, const ulong *a, ulong n, bool dfz=true)
print_zero_map_rgs_setpart	src/comb/print-zero-map-rgs.cc	/^print_zero_map_rgs_setpart(const char *bla,$/;"	f	signature:(const char *bla, const ulong *a, ulong n, bool zb , bool iq )
print_zero_map_rgs_setpart	src/comb/print-zero-map-rgs.h	/^void print_zero_map_rgs_setpart(const char *bla,$/;"	p	signature:(const char *bla, const ulong *a, ulong n, bool zb=false, bool iq=false)
printed$	tags	/^$commentsq	scripts\/autodoc.pl	\/^$commentsq = 1;   # whether comments before function body will be printed$\/;"	v$/;"	v
printit	demo/fft/fft-arblen-demo.cc	/^printit(const char *bla, Complex *f, ulong n)$/;"	f	signature:(const char *bla, Complex *f, ulong n)
printsp	demo/gf2n/bitpolmult-demo.cc	/^static void printsp(ulong n)$/;"	f	file:	signature:(ulong n)
priority_queue	src/ds/priorityqueue.h	/^    explicit priority_queue(ulong n, ulong growq=0)$/;"	f	class:priority_queue	access:public	signature:(ulong n, ulong growq=0)
priority_queue	src/ds/priorityqueue.h	/^    priority_queue(const priority_queue&);  \/\/ forbidden$/;"	p	class:priority_queue	access:private	signature:(const priority_queue&)
priority_queue	src/ds/priorityqueue.h	/^class priority_queue$/;"	c
priority_queue1	src/ds/attic/priorityqueue1.h	/^    priority_queue1(ulong n, ulong growq=0)$/;"	f	class:priority_queue1	access:public	signature:(ulong n, ulong growq=0)
priority_queue1	src/ds/attic/priorityqueue1.h	/^class priority_queue1$/;"	c
priority_queue1::extract_next	src/ds/attic/priorityqueue1.h	/^    bool extract_next(Type1 &t)$/;"	f	class:priority_queue1	access:public	signature:(Type1 &t)
priority_queue1::get_next	src/ds/attic/priorityqueue1.h	/^    bool get_next(Type1 &t)  const$/;"	f	class:priority_queue1	access:public	signature:(Type1 &t) const
priority_queue1::gq_	src/ds/attic/priorityqueue1.h	/^    ulong gq_;   \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:priority_queue1	access:public
priority_queue1::grow	src/ds/attic/priorityqueue1.h	/^    void grow()$/;"	f	class:priority_queue1	access:private	signature:()
priority_queue1::heapify	src/ds/attic/priorityqueue1.h	/^    void heapify(ulong k)$/;"	f	class:priority_queue1	access:private	signature:(ulong k)
priority_queue1::insert	src/ds/attic/priorityqueue1.h	/^    bool insert(const Type1 &t)$/;"	f	class:priority_queue1	access:public	signature:(const Type1 &t)
priority_queue1::n_	src/ds/attic/priorityqueue1.h	/^    ulong n_;    \/\/ current number of events$/;"	m	class:priority_queue1	access:public
priority_queue1::num	src/ds/attic/priorityqueue1.h	/^    ulong num()  const  { return n_; }$/;"	f	class:priority_queue1	access:public	signature:() const
priority_queue1::priority_queue1	src/ds/attic/priorityqueue1.h	/^    priority_queue1(ulong n, ulong growq=0)$/;"	f	class:priority_queue1	access:public	signature:(ulong n, ulong growq=0)
priority_queue1::reschedule_next	src/ds/attic/priorityqueue1.h	/^    void reschedule_next(Type1 t)$/;"	f	class:priority_queue1	access:public	signature:(Type1 t)
priority_queue1::s_	src/ds/attic/priorityqueue1.h	/^    ulong s_;    \/\/ allocated size (# of elements)$/;"	m	class:priority_queue1	access:public
priority_queue1::t1_	src/ds/attic/priorityqueue1.h	/^    Type1 *t1_;  \/\/ time:   t1[1..s]  one-based array!$/;"	m	class:priority_queue1	access:public
priority_queue1::~priority_queue1	src/ds/attic/priorityqueue1.h	/^    ~priority_queue1()$/;"	f	class:priority_queue1	access:public	signature:()
priority_queue::e1_	src/ds/priorityqueue.h	/^    Type2 *e1_;  \/\/ events: e1[1..s]  one-based array!$/;"	m	class:priority_queue	access:public
priority_queue::extract_next	src/ds/priorityqueue.h	/^    bool extract_next(Type1 &t, Type2 &e)$/;"	f	class:priority_queue	access:public	signature:(Type1 &t, Type2 &e)
priority_queue::get_next	src/ds/priorityqueue.h	/^    bool get_next(Type1 &t, Type2 &e)  const$/;"	f	class:priority_queue	access:public	signature:(Type1 &t, Type2 &e) const
priority_queue::get_next_e	src/ds/priorityqueue.h	/^    bool get_next_e(Type2 &e)  const$/;"	f	class:priority_queue	access:public	signature:(Type2 &e) const
priority_queue::get_next_t	src/ds/priorityqueue.h	/^    bool get_next_t(Type1 &t)  const$/;"	f	class:priority_queue	access:public	signature:(Type1 &t) const
priority_queue::gq_	src/ds/priorityqueue.h	/^    ulong gq_;   \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:priority_queue	access:public
priority_queue::grow	src/ds/priorityqueue.h	/^    void grow()$/;"	f	class:priority_queue	access:private	signature:()
priority_queue::heapify	src/ds/priorityqueue.h	/^    void heapify(ulong k)$/;"	f	class:priority_queue	access:private	signature:(ulong k)
priority_queue::insert	src/ds/priorityqueue.h	/^    bool insert(const Type1 &t, const Type2 &e)$/;"	f	class:priority_queue	access:public	signature:(const Type1 &t, const Type2 &e)
priority_queue::n_	src/ds/priorityqueue.h	/^    ulong n_;    \/\/ current number of events$/;"	m	class:priority_queue	access:public
priority_queue::num	src/ds/priorityqueue.h	/^    ulong num()  const  { return n_; }$/;"	f	class:priority_queue	access:public	signature:() const
priority_queue::operator =	src/ds/priorityqueue.h	/^    priority_queue & operator = (const priority_queue&);  \/\/ forbidden$/;"	p	class:priority_queue	access:private	signature:(const priority_queue&)
priority_queue::priority_queue	src/ds/priorityqueue.h	/^    explicit priority_queue(ulong n, ulong growq=0)$/;"	f	class:priority_queue	access:public	signature:(ulong n, ulong growq=0)
priority_queue::priority_queue	src/ds/priorityqueue.h	/^    priority_queue(const priority_queue&);  \/\/ forbidden$/;"	p	class:priority_queue	access:private	signature:(const priority_queue&)
priority_queue::reschedule_next	src/ds/priorityqueue.h	/^    void reschedule_next(Type1 t)$/;"	f	class:priority_queue	access:public	signature:(Type1 t)
priority_queue::s_	src/ds/priorityqueue.h	/^    ulong s_;    \/\/ allocated size (# of elements)$/;"	m	class:priority_queue	access:public
priority_queue::t1_	src/ds/priorityqueue.h	/^    Type1 *t1_;  \/\/ time:   t1[1..s]  one-based array!$/;"	m	class:priority_queue	access:public
priority_queue::~priority_queue	src/ds/priorityqueue.h	/^    ~priority_queue()$/;"	f	class:priority_queue	access:public	signature:()
prod_	src/mod/factor.h	/^    umod_t  prod_;$/;"	m	class:factorization	access:protected
product	src/comb/mixedradix.h	/^ulong product(const ulong *x, ulong n);$/;"	p	signature:(const ulong *x, ulong n)
product	src/comb/mixedradix2num.cc	/^product(const ulong *x, ulong n)$/;"	f	signature:(const ulong *x, ulong n)
product	src/mod/factor.h	/^    umod_t product() const  { return prod_; }$/;"	f	class:factorization	access:public	signature:() const
product_p1	src/comb/mixedradix.h	/^ulong product_p1(const ulong *x, ulong n);$/;"	p	signature:(const ulong *x, ulong n)
product_p1	src/comb/mixedradix2num.cc	/^product_p1(const ulong *m1, ulong n)$/;"	f	signature:(const ulong *m1, ulong n)
production	doc/wfl-hilbert-doc.txt	/^  j indexes a <pace> number along a Gray path or production,  0 <= j < 2^d ;$/;"	v
program	scripts/eval-bench-log.pl	/^$E = 0; # to skip to first program, set to 1 to parse fxt-demos$/;"	v
program	tags	/^program	scripts\/eval-bench-log.pl	\/^$E = 0; # to skip to first program, set to 1 to parse fxt-demos$\/;"	v$/;"	v
prpow_	src/mod/factor.h	/^    umod_t prpow_[16];$/;"	m	class:factorization	access:protected
prpow_	src/mod/factor.h	/^    umod_t prpow_[32];$/;"	m	class:factorization	access:protected
prsgn	demo/fft/walsh-basis-demo.cc	/^void prsgn(Type *f, ulong n, ulong x, double eps=1e-7)$/;"	f	signature:(Type *f, ulong n, ulong x, double eps=1e-7)
prsgn	demo/perm/permutation-matrix-demo.cc	/^void prsgn(Type *f, ulong n, ulong x)$/;"	f	signature:(Type *f, ulong n, ulong x)
ps	demo/seq/A278479-demo.cc	/^    bool ps;$/;"	m	class:triang_num	file:	access:private
pswap	demo/perm/perm-decomp-demo.cc	/^pswap(ulong *f, ulong n)$/;"	f	file:	signature:(ulong *f, ulong n)
ptr_bsearch	doc/sort-doc.txt	/^ulong ptr_bsearch(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v);$/;"	p	file:	signature:( ulong n, Type const*const*x, const Type v)
ptr_bsearch	src/sort/bsearchptr.h	/^ulong ptr_bsearch(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v)$/;"	f	signature:( ulong n, Type const*const*x, const Type v)
ptr_bsearch	src/sort/bsearchptrfunc.h	/^ulong ptr_bsearch(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v,$/;"	f	signature:( ulong n, Type const*const*x, const Type v, int (*cmp)(const Type &, const Type &))
ptr_bsearch_geq	doc/sort-doc.txt	/^ulong ptr_bsearch_geq(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v);$/;"	p	file:	signature:( ulong n, Type const*const*x, const Type v)
ptr_bsearch_geq	src/sort/bsearchptr.h	/^ulong ptr_bsearch_geq(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v)$/;"	f	signature:( ulong n, Type const*const*x, const Type v)
ptr_bsearch_geq	src/sort/bsearchptrfunc.h	/^ulong ptr_bsearch_geq(\/*const Type *f,*\/ ulong n, Type const*const*x, const Type v,$/;"	f	signature:( ulong n, Type const*const*x, const Type v, int (*cmp)(const Type &, const Type &))
ptr_max	doc/sort-doc.txt	/^Type ptr_max(\/*const Type *f,*\/ ulong n, Type const*const*x);$/;"	p	file:	signature:( ulong n, Type const*const*x)
ptr_max	src/sort/minmaxptr.h	/^Type ptr_max(\/*const Type *f,*\/ ulong n, Type const*const*x)$/;"	f	signature:( ulong n, Type const*const*x)
ptr_max	src/sort/minmaxptrfunc.h	/^Type *ptr_max(\/*const Type *f,*\/ ulong n, Type const * const * x,$/;"	f	signature:( ulong n, Type const * const * x, int (*cmp)(const Type &, const Type &))
ptr_min	doc/sort-doc.txt	/^Type ptr_min(\/*const Type *f,*\/ ulong n, Type const*const*x);$/;"	p	file:	signature:( ulong n, Type const*const*x)
ptr_min	src/sort/minmaxptr.h	/^Type ptr_min(\/*const Type *f,*\/ ulong n, Type const*const*x)$/;"	f	signature:( ulong n, Type const*const*x)
ptr_min	src/sort/minmaxptrfunc.h	/^Type *ptr_min(\/*const Type *f,*\/ ulong n, Type const * const * x,$/;"	f	signature:( ulong n, Type const * const * x, int (*cmp)(const Type &, const Type &))
ptr_partition	doc/sort-doc.txt	/^ulong ptr_partition(\/*const Type *f,*\/ ulong n, const Type **x);$/;"	p	file:	signature:( ulong n, const Type **x)
ptr_partition	src/sort/sortptr.h	/^ulong ptr_partition(\/*const Type *f,*\/ ulong n, const Type **x)$/;"	f	signature:( ulong n, const Type **x)
ptr_partition	src/sort/sortptrfunc.h	/^ulong ptr_partition(\/*const Type *f,*\/ ulong n, const Type **x,$/;"	f	signature:( ulong n, const Type **x, int (*cmp)(const Type &, const Type &))
ptr_print	demo/sort/sortptr-demo.cc	/^ptr_print(const char *bla, const double *f, ulong n, const double **x)$/;"	f	signature:(const char *bla, const double *f, ulong n, const double **x)
ptr_quick_sort	doc/sort-doc.txt	/^void ptr_quick_sort(\/*const Type *f,*\/ ulong n, const Type **x);$/;"	p	file:	signature:( ulong n, const Type **x)
ptr_quick_sort	src/sort/sortptr.h	/^void ptr_quick_sort(\/*const Type *f,*\/ ulong n, const Type **x)$/;"	f	signature:( ulong n, const Type **x)
ptr_quick_sort	src/sort/sortptrfunc.h	/^void ptr_quick_sort(\/*const Type *f,*\/ ulong n, const Type **x,$/;"	f	signature:( ulong n, const Type **x, int (*cmp)(const Type &, const Type &))
ptr_selection_sort	doc/sort-doc.txt	/^void ptr_selection_sort(\/*const Type *f,*\/ ulong n, const Type **x);$/;"	p	file:	signature:( ulong n, const Type **x)
ptr_selection_sort	src/sort/sortptr.h	/^void ptr_selection_sort(\/*const Type *f,*\/ ulong n, const Type **x)$/;"	f	signature:( ulong n, const Type **x)
ptr_selection_sort	src/sort/sortptrfunc.h	/^void ptr_selection_sort(\/*const Type *f,*\/ ulong n, const Type **x,$/;"	f	signature:( ulong n, const Type **x, int (*cmp)(const Type &, const Type &))
ptt	src/comb/dyck-gray2.h	/^    bool ptt;    \/\/ Parity of Total number of Tories (variable 'Odd' in paper)$/;"	m	class:dyck_gray2	access:public
push	src/aux0/attic/funcemu.h	/^    void push(Type x)  {  chk_dp();  d_[dp_] = x; ++dp_; }$/;"	f	class:funcemu	access:public	signature:(Type x)
push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y)  { push(x); push(y); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y)
push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y, Type z)  { push(x); push(y); push(z); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z)
push	src/aux0/attic/funcemu.h	/^    void push(Type x, Type y, Type z, Type u)  { push(x); push(y); push(z); push(u); }$/;"	f	class:funcemu	access:public	signature:(Type x, Type y, Type z, Type u)
push	src/ds/attic/coroutine.h	/^    void push(Type x)  {  chk_dp();  d_[dp_] = x;  ++dp_; }$/;"	f	class:coroutine	access:public	signature:(Type x)
push	src/ds/queue.h	/^    ulong push(const Type &z)$/;"	f	class:queue	access:public	signature:(const Type &z)
push	src/ds/stack.h	/^    ulong push(Type z)$/;"	f	class:stack	access:public	signature:(Type z)
pv_	src/comb/partition-gen.h	/^    ulong *pv_;  \/\/ values into which to partition$/;"	m	class:partition_gen	access:public
pythag	src/aux0/attic/aux0double.cc	/^pythag(double a, double b)$/;"	f	signature:(double a, double b)
pythag	src/aux0/attic/aux0double.h	/^double pythag(double a, double b);$/;"	p	signature:(double a, double b)
q	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
q	demo/perm/perm-decomp-demo.cc	/^static int q = 1;$/;"	v	file:
q	src/comb/attic/permvisit.h	/^    ulong q;$/;"	m	class:perm_visit	access:protected
q	src/ds/attic/coroutine-paren-demo.cc	/^    int q;$/;"	m	class:paren	file:	access:protected
qq	demo/comb/perm-involution-naf-demo.cc	/^static bool qq[32];  \/\/ whether element is unused$/;"	v	file:
qq_	src/graph/attic/debruijngraph.h	/^    ulong *qq_;  \/\/ qq[k] == whether node k has been visited yet$/;"	m	class:debruijn_cycles	access:public
qq_	src/graph/digraph-paths.h	/^    ulong *qq_;  \/\/ qq[k] == whether node k has been visited yet$/;"	m	class:digraph_paths	access:public
qtest	demo/perm/perm-decomp-demo.cc	/^qtest(const ulong *f, ulong n)$/;"	f	file:	signature:(const ulong *f, ulong n)
quantize	doc/sort-doc.txt	/^void quantize(Type *f, ulong n, double q);$/;"	p	file:	signature:(Type *f, ulong n, double q)
quantize	src/sort/quantize.h	/^void quantize(Type *f, ulong n, double q)$/;"	f	signature:(Type *f, ulong n, double q)
quart	demo/perm/perm-decomp-demo.cc	/^static ulong quart[4];$/;"	v	file:
queue	src/ds/queue.h	/^    explicit queue(ulong n, ulong growq=0)$/;"	f	class:queue	access:public	signature:(ulong n, ulong growq=0)
queue	src/ds/queue.h	/^    queue(const queue&);  \/\/ forbidden$/;"	p	class:queue	access:private	signature:(const queue&)
queue	src/ds/queue.h	/^class queue$/;"	c
queue::gq_	src/ds/queue.h	/^    ulong gq_;  \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:queue	access:public
queue::grow	src/ds/queue.h	/^    void grow()$/;"	f	class:queue	access:private	signature:()
queue::n_	src/ds/queue.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:queue	access:public
queue::num	src/ds/queue.h	/^    ulong num()  const  { return n_; }$/;"	f	class:queue	access:public	signature:() const
queue::operator =	src/ds/queue.h	/^    queue & operator = (const queue&);  \/\/ forbidden$/;"	p	class:queue	access:private	signature:(const queue&)
queue::peek	src/ds/queue.h	/^    ulong peek(Type &z)$/;"	f	class:queue	access:public	signature:(Type &z)
queue::pop	src/ds/queue.h	/^    ulong pop(Type &z)$/;"	f	class:queue	access:public	signature:(Type &z)
queue::push	src/ds/queue.h	/^    ulong push(const Type &z)$/;"	f	class:queue	access:public	signature:(const Type &z)
queue::queue	src/ds/queue.h	/^    explicit queue(ulong n, ulong growq=0)$/;"	f	class:queue	access:public	signature:(ulong n, ulong growq=0)
queue::queue	src/ds/queue.h	/^    queue(const queue&);  \/\/ forbidden$/;"	p	class:queue	access:private	signature:(const queue&)
queue::rpos_	src/ds/queue.h	/^    ulong rpos_;  \/\/ next position to read in buffer$/;"	m	class:queue	access:public
queue::s_	src/ds/queue.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:queue	access:public
queue::wpos_	src/ds/queue.h	/^    ulong wpos_;  \/\/ next position to write in buffer$/;"	m	class:queue	access:public
queue::x_	src/ds/queue.h	/^    Type *x_;   \/\/ pointer to data$/;"	m	class:queue	access:public
queue::~queue	src/ds/queue.h	/^    ~queue()  { delete [] x_; }$/;"	f	class:queue	access:public	signature:()
quick_sort	doc/sort-doc.txt	/^void quick_sort(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
quick_sort	doc/sort-doc.txt	/^void quick_sort(Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
quick_sort	src/sort/attic/sort.h	/^void quick_sort(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
quick_sort	src/sort/sort.h	/^void quick_sort(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
quick_sort	src/sort/sortfunc.h	/^void quick_sort(Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
r	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong *r;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	v
r	demo/comb/ntz-gray-demo.cc	/^ulong r;     \/\/ Forbidden substrings are [r, x] where x!=0$/;"	v
r	demo/comb/pellgen-gray-demo.cc	/^ulong r;     \/\/ Forbidden substrings are [r, x] where x!=0$/;"	v
r	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
r_	src/comb/check-kpermgen.h	/^    ulong *r_;  \/\/ for reversed permutations$/;"	m	class:check_kpermgen	access:public
r_	src/comb/check-permgen.h	/^    ulong *r_;  \/\/ for reversed permutations$/;"	m	class:check_permgen	access:public
r_	src/comb/combination-chase.h	/^    ulong r_;  \/\/ aux$/;"	m	class:combination_chase	access:public
r_	src/comb/mset-perm-gray.h	/^    ulong *r_;   \/\/ number of elements '1' in r[0], '2' in r[1], ..., 'k' in r[k-1]$/;"	m	class:mset_perm_gray	access:public
r_	src/comb/mset-perm-lex-rec.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_lex_rec	access:public
r_	src/comb/mset-perm-lex.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_lex	access:public
r_	src/comb/mset-perm-pref.h	/^    ulong *r_;   \/\/ number of elements '0' in r[0], '1' in r[1], ..., 'k-1' in r[k-1]$/;"	m	class:mset_perm_pref	access:public
r_	src/comb/partition-gen.h	/^    ulong *r_;   \/\/ rest$/;"	m	class:partition_gen	access:public
r_	src/comb/perm-gray-lipski.h	/^    ulong r_;   \/\/ order (0<=r<4):$/;"	m	class:perm_gray_lipski	access:private
r_	src/comb/perm-gray-wells.h	/^    ulong r_;   \/\/ order (0<=r<3):$/;"	m	class:perm_gray_wells	access:private
r_	src/comb/young-tab-rgs.h	/^    ulong *r_;   \/\/ aux for inversions: r[i] is the row (>=1) the entry i lies in$/;"	m	class:young_tab_rgs	access:public
r_	src/graph/lyndon-gray.h	/^    ulong r_;   \/\/ rotation (pr == bit_rotate_left(p, r))$/;"	m	class:lyndon_gray	access:public
rabin_miller	doc/mod-doc.txt	/^bool rabin_miller(umod_t n, uint cm\/*=0*\/);$/;"	p	file:	signature:(umod_t n, uint cm )
rabin_miller	src/mod/primes.h	/^bool rabin_miller(umod_t n, uint cm=0);$/;"	p	signature:(umod_t n, uint cm=0)
rabin_miller	src/mod/rabinmiller.cc	/^rabin_miller(umod_t n, uint cm\/*=0*\/)$/;"	f	signature:(umod_t n, uint cm )
rabin_tab	src/bpol/bitpol-irred-rabin.cc	/^static const ulong rabin_tab[] =$/;"	v	file:
rad2i_is_imag	doc/bits-doc.txt	/^static inline bool rad2i_is_imag(ulong z);$/;"	p	file:	signature:(ulong z)
rad2i_is_imag	src/bits/radix-2i.h	/^static inline bool rad2i_is_imag(ulong z)$/;"	f	signature:(ulong z)
rad2i_is_real	doc/bits-doc.txt	/^static inline bool rad2i_is_real(ulong z);$/;"	p	file:	signature:(ulong z)
rad2i_is_real	src/bits/radix-2i.h	/^static inline bool rad2i_is_real(ulong z)$/;"	f	signature:(ulong z)
rad2i_to_bin	doc/bits-doc.txt	/^static inline void rad2i_to_bin(ulong z, ulong &re, ulong &im);$/;"	p	file:	signature:(ulong z, ulong &re, ulong &im)
rad2i_to_bin	src/bits/radix-2i.h	/^static inline void rad2i_to_bin(ulong z, ulong &re, ulong &im)$/;"	f	signature:(ulong z, ulong &re, ulong &im)
rad2i_to_bin_imag	doc/bits-doc.txt	/^static inline ulong rad2i_to_bin_imag(ulong x);$/;"	p	file:	signature:(ulong x)
rad2i_to_bin_imag	src/bits/radix-2i.h	/^static inline ulong rad2i_to_bin_imag(ulong x)$/;"	f	signature:(ulong x)
rad2i_to_bin_real	doc/bits-doc.txt	/^static inline ulong rad2i_to_bin_real(ulong x);$/;"	p	file:	signature:(ulong x)
rad2i_to_bin_real	src/bits/radix-2i.h	/^static inline ulong rad2i_to_bin_real(ulong x)$/;"	f	signature:(ulong x)
radix_permute	doc/perm-doc.txt	/^void radix_permute(Type *f, ulong n, ulong r);$/;"	p	file:	signature:(Type *f, ulong n, ulong r)
radix_permute	src/perm/radixpermute.h	/^void radix_permute(Type *f, ulong n, ulong r)$/;"	f	signature:(Type *f, ulong n, ulong r)
radix_sort	doc/sort-doc.txt	/^void radix_sort(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
radix_sort	src/sort/radixsort.cc	/^radix_sort(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
radix_sort	src/sort/radixsort.h	/^void radix_sort(ulong *f, ulong n);$/;"	p	signature:(ulong *f, ulong n)
radm1pi_is_imag	doc/bits-doc.txt	/^static inline bool radm1pi_is_imag(ulong z);$/;"	p	file:	signature:(ulong z)
radm1pi_is_imag	src/bits/radix-m1pi.h	/^static inline bool radm1pi_is_imag(ulong z)$/;"	f	signature:(ulong z)
radm1pi_is_real	doc/bits-doc.txt	/^static inline bool radm1pi_is_real(ulong z);$/;"	p	file:	signature:(ulong z)
radm1pi_is_real	src/bits/radix-m1pi.h	/^static inline bool radm1pi_is_real(ulong z)$/;"	f	signature:(ulong z)
radm1pi_to_bin	doc/bits-doc.txt	/^static inline void radm1pi_to_bin(ulong z, ulong &re, ulong &im);$/;"	p	file:	signature:(ulong z, ulong &re, ulong &im)
radm1pi_to_bin	src/bits/radix-m1pi.h	/^static inline void radm1pi_to_bin(ulong z, ulong &re, ulong &im)$/;"	f	signature:(ulong z, ulong &re, ulong &im)
radm1pi_to_bin_imag	doc/bits-doc.txt	/^static inline ulong radm1pi_to_bin_imag(ulong x);$/;"	p	file:	signature:(ulong x)
radm1pi_to_bin_imag	src/bits/radix-m1pi.h	/^static inline ulong radm1pi_to_bin_imag(ulong x)$/;"	f	signature:(ulong x)
radm1pi_to_bin_real	doc/bits-doc.txt	/^static inline ulong radm1pi_to_bin_real(ulong x);$/;"	p	file:	signature:(ulong x)
radm1pi_to_bin_real	src/bits/radix-m1pi.h	/^static inline ulong radm1pi_to_bin_real(ulong x)$/;"	f	signature:(ulong x)
radm4_add	doc/bits-doc.txt	/^static inline ulong radm4_add(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
radm4_add	src/bits/radix-m4.h	/^static inline ulong radm4_add(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
radm4_to_bin	doc/bits-doc.txt	/^static inline ulong radm4_to_bin(ulong x);$/;"	p	file:	signature:(ulong x)
radm4_to_bin	src/bits/radix-m4.h	/^static inline ulong radm4_to_bin(ulong x)$/;"	f	signature:(ulong x)
rand	src/mod/attic/modaux.cc	/^rand(mod *f, ulong n, umod_t m)$/;"	f	signature:(mod *f, ulong n, umod_t m)
rand_bit	src/comb/attic/combination-rec-demo.cc	/^inline bool rand_bit()$/;"	f	signature:()
rand_idx	doc/aux0-doc.txt	/^inline ulong rand_idx(ulong m);$/;"	p	file:	signature:(ulong m)
rand_idx	src/aux0/rand-idx.h	/^inline ulong rand_idx(ulong m)$/;"	f	signature:(ulong m)
rand_num_2cycles_involution	doc/perm-doc.txt	/^inline ulong rand_num_2cycles_involution(ulong n);$/;"	p	file:	signature:(ulong n)
rand_num_2cycles_involution	src/perm/permrand-self-inverse.h	/^inline ulong rand_num_2cycles_involution(ulong n)$/;"	f	signature:(ulong n)
rand_primpoly	src/bpol/primpoly-rand.cc	/^extern const ulong rand_primpoly[]=$/;"	v
rand_primpoly_len	src/bpol/primpoly-rand.cc	/^extern const ulong rand_primpoly_len = ARRAY_LEN(rand_primpoly);$/;"	v
random_2cycles_permutation	src/perm/permrand-2cycles.h	/^inline void random_2cycles_permutation(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, double *tb=0, bool bi=false)
random_connected_permutation	doc/perm-doc.txt	/^inline void random_connected_permutation(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
random_connected_permutation	src/perm/permrand-connected.h	/^inline void random_connected_permutation(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
random_cycle	doc/perm-doc.txt	/^inline ulong random_cycle(Type *f, ulong cl, ulong *r, ulong nr);$/;"	p	file:	signature:(Type *f, ulong cl, ulong *r, ulong nr)
random_cycle	src/perm/permrand-cycle-type.h	/^inline ulong random_cycle(Type *f, ulong cl, ulong *r, ulong nr)$/;"	f	signature:(Type *f, ulong cl, ulong *r, ulong nr)
random_cycle_type_permutation	src/perm/permrand-cycle-type.h	/^inline void random_cycle_type_permutation(ulong *p, ulong n, const ulong *c,$/;"	f	signature:(ulong *p, ulong n, const ulong *c, ulong *tr=0)
random_cycle_type_permutation	src/perm/permrand-cycle-type.h	/^inline void random_cycle_type_permutation(ulong *p, ulong n,$/;"	f	signature:(ulong *p, ulong n, const ulong *m, ulong nm, const ulong *len, ulong *tr=0)
random_cyclic_permutation	doc/perm-doc.txt	/^inline void random_cyclic_permutation(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
random_cyclic_permutation	src/perm/permrand-cyclic.h	/^inline void random_cyclic_permutation(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
random_derange	src/perm/permrand-derange.h	/^inline void random_derange(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_derange3	src/perm/permrand-derange3.h	/^inline void random_derange3(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_derangement	src/perm/permrand-derange.h	/^inline void random_derangement(ulong *f, ulong n,$/;"	f	signature:(ulong *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_derangement3	src/perm/permrand-derange3.h	/^inline void random_derangement3(ulong *f, ulong n,$/;"	f	signature:(ulong *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_inv_mod_m_permutation	src/perm/permrand-inv-mod-m.h	/^inline void random_inv_mod_m_permutation(ulong *p, ulong n,$/;"	f	signature:(ulong *p, ulong n, ulong r, ulong m, ulong *tfc=0)
random_lastk_permutation	doc/perm-doc.txt	/^inline void random_lastk_permutation(ulong *p, ulong n, ulong k);$/;"	p	file:	signature:(ulong *p, ulong n, ulong k)
random_lastk_permutation	src/perm/permrand-ord.h	/^inline void random_lastk_permutation(ulong *p, ulong n, ulong k)$/;"	f	signature:(ulong *p, ulong n, ulong k)
random_ncm2_permutation	doc/perm-doc.txt	/^inline void random_ncm2_permutation(ulong *p, ulong n, ulong r, ulong *tf=0);$/;"	p	file:	signature:(ulong *p, ulong n, ulong r, ulong *tf=0)
random_ncm2_permutation	src/perm/permrand-ncm2.h	/^inline void random_ncm2_permutation(ulong *p, ulong n, ulong r, ulong *tf=0)$/;"	f	signature:(ulong *p, ulong n, ulong r, ulong *tf=0)
random_ord01_permutation	doc/perm-doc.txt	/^inline void random_ord01_permutation(ulong *p, ulong n);$/;"	p	file:	signature:(ulong *p, ulong n)
random_ord01_permutation	src/perm/permrand-ord.h	/^inline void random_ord01_permutation(ulong *p, ulong n)$/;"	f	signature:(ulong *p, ulong n)
random_ordk_permutation	doc/perm-doc.txt	/^inline void random_ordk_permutation(ulong *p, ulong n, ulong k);$/;"	p	file:	signature:(ulong *p, ulong n, ulong k)
random_ordk_permutation	src/perm/permrand-ord.h	/^inline void random_ordk_permutation(ulong *p, ulong n, ulong k)$/;"	f	signature:(ulong *p, ulong n, ulong k)
random_parity_permutation	doc/perm-doc.txt	/^inline void random_parity_permutation(ulong *f, ulong n, bool par);$/;"	p	file:	signature:(ulong *f, ulong n, bool par)
random_parity_permutation	src/perm/permrand-parity.h	/^inline void random_parity_permutation(ulong *f, ulong n, bool par)$/;"	f	signature:(ulong *f, ulong n, bool par)
random_permutation	doc/perm-doc.txt	/^inline void random_permutation(ulong *f, ulong n);$/;"	p	file:	signature:(ulong *f, ulong n)
random_permutation	src/perm/permrand.h	/^inline void random_permutation(ulong *f, ulong n)$/;"	f	signature:(ulong *f, ulong n)
random_permute	doc/perm-doc.txt	/^void random_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
random_permute	src/perm/permrand.h	/^void random_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
random_permute_2cycles	src/perm/permrand-2cycles.h	/^inline void random_permute_2cycles(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, double *tb=0, bool bi=false)
random_permute_cycle_type	src/perm/permrand-cycle-type.h	/^inline void random_permute_cycle_type(Type *f, ulong n, const ulong *c,$/;"	f	signature:(Type *f, ulong n, const ulong *c, ulong *tr=0)
random_permute_cycle_type	src/perm/permrand-cycle-type.h	/^inline void random_permute_cycle_type(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, const ulong *m, ulong nm, const ulong *len, ulong *tr=0)
random_permute_cyclic	doc/perm-doc.txt	/^void random_permute_cyclic(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
random_permute_cyclic	src/perm/permrand-cyclic.h	/^void random_permute_cyclic(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
random_permute_ncm2	doc/perm-doc.txt	/^void random_permute_ncm2(Type *x, ulong n, ulong r, ulong *tf=0);$/;"	p	file:	signature:(Type *x, ulong n, ulong r, ulong *tf=0)
random_permute_ncm2	src/perm/permrand-ncm2.h	/^void random_permute_ncm2(Type *x, ulong n, ulong r, ulong *tf=0)$/;"	f	signature:(Type *x, ulong n, ulong r, ulong *tf=0)
random_permute_parity	doc/perm-doc.txt	/^void random_permute_parity(Type *f, ulong n, bool par);$/;"	p	file:	signature:(Type *f, ulong n, bool par)
random_permute_parity	src/perm/permrand-parity.h	/^void random_permute_parity(Type *f, ulong n, bool par)$/;"	f	signature:(Type *f, ulong n, bool par)
random_permute_positions	doc/perm-doc.txt	/^void random_permute_positions(Type *f, ulong np, const ulong *ps);$/;"	p	file:	signature:(Type *f, ulong np, const ulong *ps)
random_permute_positions	src/perm/permrand.h	/^void random_permute_positions(Type *f, ulong np, const ulong *ps)$/;"	f	signature:(Type *f, ulong np, const ulong *ps)
random_permute_positions_cyclic	doc/perm-doc.txt	/^void random_permute_positions_cyclic(Type *f, ulong np, const ulong *ps);$/;"	p	file:	signature:(Type *f, ulong np, const ulong *ps)
random_permute_positions_cyclic	src/perm/permrand-cyclic.h	/^void random_permute_positions_cyclic(Type *f, ulong np, const ulong *ps)$/;"	f	signature:(Type *f, ulong np, const ulong *ps)
random_permute_pref	doc/perm-doc.txt	/^void random_permute_pref(Type *f, ulong n, ulong m);$/;"	p	file:	signature:(Type *f, ulong n, ulong m)
random_permute_pref	src/perm/permrand-pref.h	/^void random_permute_pref(Type *f, ulong n, ulong m)$/;"	f	signature:(Type *f, ulong n, ulong m)
random_permute_self_inverse	src/perm/permrand-self-inverse.h	/^inline void random_permute_self_inverse(Type *f, ulong n,$/;"	f	signature:(Type *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_permute_self_inverse1	doc/perm-doc.txt	/^inline void random_permute_self_inverse1(Type *f, ulong n, ulong *tr=0);$/;"	p	file:	signature:(Type *f, ulong n, ulong *tr=0)
random_permute_self_inverse1	src/perm/permrand-self-inverse.h	/^inline void random_permute_self_inverse1(Type *f, ulong n, ulong *tr=0)$/;"	f	signature:(Type *f, ulong n, ulong *tr=0)
random_pref_permutation	doc/perm-doc.txt	/^inline void random_pref_permutation(ulong *f, ulong n, ulong m);$/;"	p	file:	signature:(ulong *f, ulong n, ulong m)
random_pref_permutation	src/perm/permrand-pref.h	/^inline void random_pref_permutation(ulong *f, ulong n, ulong m)$/;"	f	signature:(ulong *f, ulong n, ulong m)
random_sdc_permutation	src/perm/permrand-sdc.h	/^inline void random_sdc_permutation(ulong *p, ulong n,$/;"	f	signature:(ulong *p, ulong n, const ulong *d, ulong nd, ulong *tv=0)
random_self_inverse_permutation	src/perm/permrand-self-inverse.h	/^inline void random_self_inverse_permutation(ulong *f, ulong n,$/;"	f	signature:(ulong *f, ulong n, ulong *tr=0, double *tb=0, bool bi=false)
random_self_inverse_permutation1	doc/perm-doc.txt	/^inline void random_self_inverse_permutation1(ulong *f, ulong n, ulong *tr=0);$/;"	p	file:	signature:(ulong *f, ulong n, ulong *tr=0)
random_self_inverse_permutation1	src/perm/permrand-self-inverse.h	/^inline void random_self_inverse_permutation1(ulong *f, ulong n, ulong *tr=0)$/;"	f	signature:(ulong *f, ulong n, ulong *tr=0)
randomize_edge_order	src/graph/digraph.cc	/^digraph::randomize_edge_order(ulong p0, ulong p1\/*=0*\/)$/;"	f	class:digraph	signature:(ulong p0, ulong p1 )
randomize_edge_order	src/graph/digraph.h	/^    void randomize_edge_order()  { randomize_edge_order(0, ng_-1); }$/;"	f	class:digraph	access:public	signature:()
randomize_edge_order	src/graph/digraph.h	/^    void randomize_edge_order(ulong p0, ulong p1=0);$/;"	p	class:digraph	access:public	signature:(ulong p0, ulong p1=0)
rank	src/comb/binary-sl-gray.h	/^    ulong rank()  const$/;"	f	class:binary_sl_gray	access:public	signature:() const
rank	src/comb/composition-nz-gray.h	/^    ulong rank()  const$/;"	f	class:composition_nz_gray	access:public	signature:() const
rank	src/comb/composition-nz-gray2.h	/^    ulong rank()  const$/;"	f	class:composition_nz_gray2	access:public	signature:() const
rank	src/comb/composition-nz-rl.h	/^    ulong rank()  const$/;"	f	class:composition_nz_rl	access:public	signature:() const
rank	src/comb/composition-nz-subset-lex.h	/^    ulong rank()  const$/;"	f	class:composition_nz_subset_lex	access:public	signature:() const
rank	src/comb/composition-nz.h	/^    ulong rank()  const$/;"	f	class:composition_nz	access:public	signature:() const
rank	src/comb/partition.h	/^    long rank()  const$/;"	f	class:partition	access:public	signature:() const
rank_enup	src/comb/composition-rank.h	/^    ulong rank_enup(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
rank_enup_rev	src/comb/composition-rank.h	/^    ulong rank_enup_rev(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
rank_gray	src/comb/composition-rank.h	/^    ulong rank_gray(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
rank_lex	src/comb/composition-rank.h	/^    ulong rank_lex(const ulong *x, ulong n, ulong k)  const$/;"	f	class:composition_rank	access:public	signature:(const ulong *x, ulong n, ulong k) const
rarray	src/ds/attic/rarray.h	/^    explicit rarray(ulong n, ulong growq=0)$/;"	f	class:rarray	access:public	signature:(ulong n, ulong growq=0)
rarray	src/ds/attic/rarray.h	/^class rarray$/;"	c
rarray::append	src/ds/attic/rarray.h	/^    ulong append(const Type & z)$/;"	f	class:rarray	access:public	signature:(const Type & z)
rarray::data	src/ds/attic/rarray.h	/^    Type * data()  { return x_; }$/;"	f	class:rarray	access:public	signature:()
rarray::gq_	src/ds/attic/rarray.h	/^    ulong  gq_; \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:rarray	access:public
rarray::grow	src/ds/attic/rarray.h	/^    void grow()$/;"	f	class:rarray	access:private	signature:()
rarray::insert_at	src/ds/attic/rarray.h	/^    ulong insert_at(const Type & v, ulong j)$/;"	f	class:rarray	access:public	signature:(const Type & v, ulong j)
rarray::n_	src/ds/attic/rarray.h	/^    ulong  n_;  \/\/ position of next write, top entry @ n-1$/;"	m	class:rarray	access:public
rarray::num	src/ds/attic/rarray.h	/^    ulong num()  const$/;"	f	class:rarray	access:public	signature:() const
rarray::operator =	src/ds/attic/rarray.h	/^    rarray & operator = (const rarray &);  \/\/ forbidden$/;"	p	class:rarray	access:private	signature:(const rarray &)
rarray::prepend	src/ds/attic/rarray.h	/^    ulong prepend(const Type & z)$/;"	f	class:rarray	access:public	signature:(const Type & z)
rarray::rarray	src/ds/attic/rarray.h	/^    explicit rarray(ulong n, ulong growq=0)$/;"	f	class:rarray	access:public	signature:(ulong n, ulong growq=0)
rarray::remove_at	src/ds/attic/rarray.h	/^    ulong remove_at(ulong j)$/;"	f	class:rarray	access:public	signature:(ulong j)
rarray::remove_first	src/ds/attic/rarray.h	/^    ulong remove_first()$/;"	f	class:rarray	access:public	signature:()
rarray::remove_last	src/ds/attic/rarray.h	/^    ulong remove_last()$/;"	f	class:rarray	access:public	signature:()
rarray::s_	src/ds/attic/rarray.h	/^    ulong  s_;  \/\/ size$/;"	m	class:rarray	access:public
rarray::search	src/ds/attic/rarray.h	/^    ulong search(const Type& x, ulong k=0)  const$/;"	f	class:rarray	access:public	signature:(const Type& x, ulong k=0) const
rarray::size	src/ds/attic/rarray.h	/^    ulong size()  const$/;"	f	class:rarray	access:public	signature:() const
rarray::sort	src/ds/attic/rarray.h	/^    void sort()  { ::quick_sort(x_, n_); }$/;"	f	class:rarray	access:public	signature:()
rarray::unique	src/ds/attic/rarray.h	/^    void unique()  { sort();  ::unique(x_, n_); }$/;"	f	class:rarray	access:public	signature:()
rarray::x_	src/ds/attic/rarray.h	/^    Type  *x_;  \/\/ data$/;"	m	class:rarray	access:public
rarray::~rarray	src/ds/attic/rarray.h	/^    ~rarray()  { delete [] x_; }$/;"	f	class:rarray	access:public	signature:()
rct	demo/comb/fibgray-rec-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct	demo/comb/maxrep-gray-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong rct;  \/\/ count recursions$/;"	v
rct	demo/comb/paren-gray-rec-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct	demo/comb/pellgray-rec-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct	demo/comb/rll-rec-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct	src/comb/attic/combination-rec-demo.cc	/^ulong rct;  \/\/ count recursions (==work)$/;"	v
rct_	src/comb/combination-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:comb_rec	access:public
rct_	src/comb/ksubset-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:ksubset_rec	access:public
rct_	src/comb/mset-perm-lex-rec.h	/^    ulong rct_;  \/\/ count recursions (==work)$/;"	m	class:mset_perm_lex_rec	access:public
read	src/ds/deque.h	/^    ulong read(ulong k, Type & z)  const$/;"	f	class:deque	access:public	signature:(ulong k, Type & z) const
read	src/ds/ringbuffer.h	/^    ulong read(ulong k, Type &z)  const$/;"	f	class:ringbuffer	access:public	signature:(ulong k, Type &z) const
read_first	src/ds/deque.h	/^    ulong read_first(Type & z)  const$/;"	f	class:deque	access:public	signature:(Type & z) const
read_last	src/ds/deque.h	/^    ulong read_last(Type & z)  const$/;"	f	class:deque	access:public	signature:(Type & z) const
real	src/fht/fhtmayer.txt	/^double *real,*imag;$/;"	v
real	src/fht/fhtmayer.txt	/^double *real;$/;"	v
real_complex_fft	doc/realfft-doc.txt	/^inline void real_complex_fft(double *f, ulong ldn, int is);$/;"	p	file:	signature:(double *f, ulong ldn, int is)
real_complex_fft	src/realfft/realfft.h	/^inline void real_complex_fft(double *f, ulong ldn, int is)$/;"	f	signature:(double *f, ulong ldn, int is)
real_imag_fft	doc/fft-doc.txt	/^void real_imag_fft(double *fr\/*, double *fi*\/, ulong ldn, int is);$/;"	p	file:	signature:(double *fr , ulong ldn, int is)
real_imag_fft	src/fft/cfftwrap.cc	/^real_imag_fft(double *fr\/*, double *fi*\/, ulong ldn, int is)$/;"	f	signature:(double *fr , ulong ldn, int is)
real_imag_fft	src/fft/fft.h	/^void real_imag_fft(double *fr\/*, double *fi*\/, ulong ldn, int is);$/;"	p	signature:(double *fr , ulong ldn, int is)
real_imag_to_complex	doc/fft-doc.txt	/^void real_imag_to_complex(double *fr\/*, double *fi*\/, ulong n); \/\/ aux$/;"	p	file:	signature:(double *fr , ulong n)
real_imag_to_complex	src/fft/cfftwrap.cc	/^real_imag_to_complex(double *fr\/*, double *fi*\/, ulong n)$/;"	f	signature:(double *fr , ulong n)
real_imag_to_complex	src/fft/fft.h	/^void real_imag_to_complex(double *fr\/*, double *fi*\/, long ldn);  \/\/ aux$/;"	p	signature:(double *fr , long ldn)
realisator	doc/realfft-doc.txt	/^void realisator(double *gr, const double *gi, ulong n, int is); \/\/ aux$/;"	p	file:	signature:(double *gr, const double *gi, ulong n, int is)
realisator	src/realfft/realfft.h	/^void realisator(double *gr, const double *gi, ulong n, int is);  \/\/ aux$/;"	p	signature:(double *gr, const double *gi, ulong n, int is)
realisator	src/realfft/realfftbyfht.cc	/^realisator(double *gr, const double *gi, ulong n, int is)$/;"	f	signature:(double *gr, const double *gi, ulong n, int is)
recursive_fft_dif2	doc/fft-doc.txt	/^void recursive_fft_dif2(Complex *a, ulong ldn, int is);$/;"	p	file:	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dif2	src/fft/recfft2.cc	/^recursive_fft_dif2(Complex *a, ulong ldn, int is)$/;"	f	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dif2	src/fft/slowft.h	/^void recursive_fft_dif2(Complex *a, ulong ldn, int is);$/;"	p	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dif2_core	doc/fft-doc.txt	/^static void recursive_fft_dif2_core(const Complex *a, ulong n, Complex *x, int is);$/;"	p	file:	signature:(const Complex *a, ulong n, Complex *x, int is)
recursive_fft_dif2_core	src/fft/recfft2.cc	/^recursive_fft_dif2_core(const Complex *a, ulong n, Complex *x, int is)$/;"	f	file:	signature:(const Complex *a, ulong n, Complex *x, int is)
recursive_fft_dit2	doc/fft-doc.txt	/^void recursive_fft_dit2(Complex *a, ulong ldn, int is);$/;"	p	file:	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dit2	src/fft/recfft2.cc	/^recursive_fft_dit2(Complex *a, ulong ldn, int is)$/;"	f	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dit2	src/fft/slowft.h	/^void recursive_fft_dit2(Complex *a, ulong ldn, int is);$/;"	p	signature:(Complex *a, ulong ldn, int is)
recursive_fft_dit2_core	doc/fft-doc.txt	/^static void recursive_fft_dit2_core(const Complex *a, ulong n, Complex *x, int is);$/;"	p	file:	signature:(const Complex *a, ulong n, Complex *x, int is)
recursive_fft_dit2_core	src/fft/recfft2.cc	/^recursive_fft_dit2_core(const Complex *a, ulong n, Complex *x, int is)$/;"	f	file:	signature:(const Complex *a, ulong n, Complex *x, int is)
recursive_fht_dif2	doc/fht-doc.txt	/^void recursive_fht_dif2(double *a, ulong ldn);$/;"	p	file:	signature:(double *a, ulong ldn)
recursive_fht_dif2	src/fht/recfht2.cc	/^recursive_fht_dif2(double *a, ulong ldn)$/;"	f	signature:(double *a, ulong ldn)
recursive_fht_dif2	src/fht/slowht.h	/^void recursive_fht_dif2(double *a, ulong ldn);$/;"	p	signature:(double *a, ulong ldn)
recursive_fht_dif2_core	doc/fht-doc.txt	/^static void recursive_fht_dif2_core(const double *a, ulong n, double *x);$/;"	p	file:	signature:(const double *a, ulong n, double *x)
recursive_fht_dif2_core	src/fht/recfht2.cc	/^recursive_fht_dif2_core(const double *a, ulong n, double *x)$/;"	f	file:	signature:(const double *a, ulong n, double *x)
recursive_fht_dit2	doc/fht-doc.txt	/^void recursive_fht_dit2(double *a, ulong ldn);$/;"	p	file:	signature:(double *a, ulong ldn)
recursive_fht_dit2	src/fht/recfht2.cc	/^recursive_fht_dit2(double *a, ulong ldn)$/;"	f	signature:(double *a, ulong ldn)
recursive_fht_dit2	src/fht/slowht.h	/^void recursive_fht_dit2(double *a, ulong ldn);$/;"	p	signature:(double *a, ulong ldn)
recursive_fht_dit2_core	doc/fht-doc.txt	/^static void recursive_fht_dit2_core(const double *a, ulong n, double *x);$/;"	p	file:	signature:(const double *a, ulong n, double *x)
recursive_fht_dit2_core	src/fht/recfht2.cc	/^recursive_fht_dit2_core(const double *a, ulong n, double *x)$/;"	f	file:	signature:(const double *a, ulong n, double *x)
red_code	doc/bits-doc.txt	/^static inline ulong red_code(ulong a);$/;"	p	file:	signature:(ulong a)
red_code	src/bits/bittransforms.h	/^static inline ulong red_code(ulong a)$/;"	f	signature:(ulong a)
red_xcode	doc/bits-doc.txt	/^static inline ulong red_xcode(ulong a, ulong x);$/;"	p	file:	signature:(ulong a, ulong x)
red_xcode	src/bits/bitxtransforms.h	/^static inline ulong red_xcode(ulong a, ulong x)$/;"	f	signature:(ulong a, ulong x)
reed_muller_basis	doc/walsh-doc.txt	/^inline void reed_muller_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
reed_muller_basis	src/walsh/reedmuller.h	/^inline void reed_muller_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
refresh_m	src/comb/ascent-nonflat-rgs.h	/^    void refresh_m(ulong j)$/;"	f	class:ascent_nonflat_rgs	access:private	signature:(ulong j)
registers	fxt.lsm	/^                Bit-manipulations, shift registers (LFSR), modular arithmetics and$/;"	p	file:	signature:(LFSR)
remove	src/ds/attic/rset.h	/^    ulong remove(const Type & z)$/;"	f	class:rset	access:public	signature:(const Type & z)
remove_at	src/ds/attic/rarray.h	/^    ulong remove_at(ulong j)$/;"	f	class:rarray	access:public	signature:(ulong j)
remove_at	src/ds/attic/rset.h	/^    ulong remove_at(ulong j)$/;"	f	class:rset	access:public	signature:(ulong j)
remove_first	src/ds/attic/rarray.h	/^    ulong remove_first()$/;"	f	class:rarray	access:public	signature:()
remove_last	src/ds/attic/rarray.h	/^    ulong remove_last()$/;"	f	class:rarray	access:public	signature:()
reorth_step	src/matrix/attic/reorth.h	/^double reorth_step(MAT &a, MAT *t=0)$/;"	f	signature:(MAT &a, MAT *t=0)
report_symmetry	src/matrix/attic/testmatrix.h	/^bool report_symmetry(const MAT &A, const Type eps=1e-8)$/;"	f	signature:(const MAT &A, const Type eps=1e-8)
resample_linear	src/aux1/attic/resample.cc	/^resample_linear(const double *f, ulong nf, double v, double *g, ulong ng)$/;"	f	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
resample_linear	src/aux1/attic/resample.h	/^ulong resample_linear(const double *f, ulong nf, double v, double *g, ulong ng);$/;"	p	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
resample_sinc	src/aux1/attic/resample.cc	/^resample_sinc(const double *a, ulong an, double af, double *b, double bf, ulong bn)$/;"	f	signature:(const double *a, ulong an, double af, double *b, double bf, ulong bn)
resample_sinc	src/aux1/attic/resample.h	/^ulong resample_sinc(const double *a, ulong an, double af, double *b, double bf, ulong bn);$/;"	p	signature:(const double *a, ulong an, double af, double *b, double bf, ulong bn)
reschedule_next	src/ds/attic/priorityqueue1.h	/^    void reschedule_next(Type1 t)$/;"	f	class:priority_queue1	access:public	signature:(Type1 t)
reschedule_next	src/ds/priorityqueue.h	/^    void reschedule_next(Type1 t)$/;"	f	class:priority_queue	access:public	signature:(Type1 t)
reset	demo/comb/schroeder-tree-demo.cc	/^void reset()$/;"	f	signature:()
reset	src/bits/crc32.h	/^    void reset()  { set_a(0U); }  \/\/ all ones$/;"	f	class:crc32	access:public	signature:()
reset	src/bits/crc64.h	/^    void reset()  { set_a(~0ULL); }  \/\/ all ones$/;"	f	class:crc64	access:public	signature:()
reset	src/bits/pcrc64.h	/^    void reset()$/;"	f	class:pcrc64	access:public	signature:()
reset	src/bits/tcrc64.h	/^    void reset()  { set_a(~0ULL); }  \/\/ all ones$/;"	f	class:tcrc64	access:public	signature:()
reset	src/ds/bounding-box.h	/^    void reset( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
reset	src/mod/factor.cc	/^factorization::reset()$/;"	f	class:factorization	signature:()
reset	src/mod/factor.h	/^    void reset();$/;"	p	class:factorization	access:public	signature:()
restrict	src/restrict.h	13;"	d
rev_arith_transform_minus	doc/walsh-doc.txt	/^void rev_arith_transform_minus(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
rev_arith_transform_minus	doc/walsh-doc.txt	/^void rev_arith_transform_minus(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
rev_arith_transform_minus	src/walsh/arithtransform.h	/^void rev_arith_transform_minus(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
rev_arith_transform_minus	src/walsh/weighted-arithtransform.h	/^void rev_arith_transform_minus(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
rev_arith_transform_plus	doc/walsh-doc.txt	/^void rev_arith_transform_plus(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
rev_arith_transform_plus	doc/walsh-doc.txt	/^void rev_arith_transform_plus(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
rev_arith_transform_plus	src/walsh/arithtransform.h	/^void rev_arith_transform_plus(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
rev_arith_transform_plus	src/walsh/weighted-arithtransform.h	/^void rev_arith_transform_plus(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
rev_bit_count_weight	doc/walsh-doc.txt	/^void rev_bit_count_weight(Type *f, ulong ldn, Type w);$/;"	p	file:	signature:(Type *f, ulong ldn, Type w)
rev_bit_count_weight	src/walsh/bitcount-weight.h	/^void rev_bit_count_weight(Type *f, ulong ldn, Type w)$/;"	f	signature:(Type *f, ulong ldn, Type w)
rev_gray_code	doc/bits-doc.txt	/^static inline ulong rev_gray_code(ulong x);$/;"	p	file:	signature:(ulong x)
rev_gray_code	src/bits/bitsubset.h	/^    ulong rev_gray_code()    { U ^= ( (U << 1) + ~V );  U &= V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
rev_gray_code	src/bits/revgraycode.h	/^static inline ulong rev_gray_code(ulong x)$/;"	f	signature:(ulong x)
rev_gray_pow	doc/bits-doc.txt	/^static inline ulong rev_gray_pow(ulong x, ulong e);$/;"	p	file:	signature:(ulong x, ulong e)
rev_gray_pow	src/bits/graypower.h	/^static inline ulong rev_gray_pow(ulong x, ulong e)$/;"	f	signature:(ulong x, ulong e)
revbin	doc/bits-doc.txt	/^static inline ulong revbin(ulong x);$/;"	p	file:	signature:(ulong x)
revbin	doc/bits-doc.txt	/^static inline ulong revbin(ulong x, ulong ldn);$/;"	p	file:	signature:(ulong x, ulong ldn)
revbin	src/bits/revbin.h	/^static inline ulong revbin(ulong x)$/;"	f	signature:(ulong x)
revbin	src/bits/revbin.h	/^static inline ulong revbin(ulong x, ulong ldn)$/;"	f	signature:(ulong x, ulong ldn)
revbin_next	demo/gf2n/lfsr-revbin-demo.cc	/^inline void revbin_next(ulong &x, ulong c, ulong &xr, ulong cr)$/;"	f	signature:(ulong &x, ulong c, ulong &xr, ulong cr)
revbin_permute	doc/perm-doc.txt	/^void revbin_permute(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
revbin_permute	src/perm/attic/revbinpermute.h	/^void revbin_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_permute	src/perm/revbinpermute.h	/^void revbin_permute(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_permute0	doc/perm-doc.txt	/^void revbin_permute0(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
revbin_permute0	src/perm/attic/revbinpermute.h	/^void revbin_permute0(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_permute0	src/perm/revbinpermute0.h	/^void revbin_permute0(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_permute0_16	doc/perm-doc.txt	/^inline void revbin_permute0_16(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute0_16	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_16(Type *f)$/;"	f	signature:(Type *f)
revbin_permute0_32	doc/perm-doc.txt	/^inline void revbin_permute0_32(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute0_32	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_32(Type *f)$/;"	f	signature:(Type *f)
revbin_permute0_4	doc/perm-doc.txt	/^inline void revbin_permute0_4(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute0_4	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_4(Type *f)$/;"	f	signature:(Type *f)
revbin_permute0_64	doc/perm-doc.txt	/^inline void revbin_permute0_64(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute0_64	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_64(Type *f)$/;"	f	signature:(Type *f)
revbin_permute0_8	doc/perm-doc.txt	/^inline void revbin_permute0_8(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute0_8	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_8(Type *f)$/;"	f	signature:(Type *f)
revbin_permute0_leq_64	doc/perm-doc.txt	/^inline void revbin_permute0_leq_64(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
revbin_permute0_leq_64	src/perm/shortrevbinpermute0.h	/^inline void revbin_permute0_leq_64(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_permute_16	doc/perm-doc.txt	/^inline void revbin_permute_16(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute_16	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_16(Type *f)$/;"	f	signature:(Type *f)
revbin_permute_32	doc/perm-doc.txt	/^inline void revbin_permute_32(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute_32	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_32(Type *f)$/;"	f	signature:(Type *f)
revbin_permute_4	doc/perm-doc.txt	/^inline void revbin_permute_4(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute_4	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_4(Type *f)$/;"	f	signature:(Type *f)
revbin_permute_64	doc/perm-doc.txt	/^inline void revbin_permute_64(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute_64	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_64(Type *f)$/;"	f	signature:(Type *f)
revbin_permute_8	doc/perm-doc.txt	/^inline void revbin_permute_8(Type *f);$/;"	p	file:	signature:(Type *f)
revbin_permute_8	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_8(Type *f)$/;"	f	signature:(Type *f)
revbin_permute_leq_64	doc/perm-doc.txt	/^inline void revbin_permute_leq_64(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
revbin_permute_leq_64	src/perm/shortrevbinpermute.h	/^inline void revbin_permute_leq_64(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
revbin_rec	demo/bits/revbin-rec-demo.cc	/^void revbin_rec(ulong f, ulong n)$/;"	f	signature:(ulong f, ulong n)
revbin_t	doc/bits-doc.txt	/^static inline ulong revbin_t(ulong x);$/;"	p	file:	signature:(ulong x)
revbin_t	src/bits/revbin.h	/^static inline ulong revbin_t(ulong x)$/;"	f	signature:(ulong x)
revbin_t_le16	doc/bits-doc.txt	/^static inline ulong revbin_t_le16(ulong x);$/;"	p	file:	signature:(ulong x)
revbin_t_le16	src/bits/revbin.h	/^static inline ulong revbin_t_le16(ulong x)$/;"	f	signature:(ulong x)
revbin_t_le32	doc/bits-doc.txt	/^static inline ulong revbin_t_le32(ulong x);$/;"	p	file:	signature:(ulong x)
revbin_t_le32	src/bits/revbin.h	/^static inline ulong revbin_t_le32(ulong x)$/;"	f	signature:(ulong x)
revbin_tab	src/bits/revbin-tab.cc	/^extern const unsigned char revbin_tab[256]=$/;"	v
revbin_tupd	doc/bits-doc.txt	/^static inline ulong revbin_tupd(ulong r, ulong k);$/;"	p	file:	signature:(ulong r, ulong k)
revbin_tupd	src/bits/revbin-upd.h	/^static inline ulong revbin_tupd(ulong r, ulong k)$/;"	f	signature:(ulong r, ulong k)
revbin_upd	doc/bits-doc.txt	/^static inline ulong revbin_upd(ulong r, ulong h);$/;"	p	file:	signature:(ulong r, ulong h)
revbin_upd	src/bits/revbin-upd.h	/^static inline ulong revbin_upd(ulong r, ulong h)$/;"	f	signature:(ulong r, ulong h)
revbin_upd_tab	src/bits/revbin-upd.cc	/^ulong revbin_upd_tab[BITS_PER_LONG];  \/\/ mask for updating bit-reversed values$/;"	v
reverse	doc/perm-doc.txt	/^inline void reverse(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
reverse	src/aux1/attic/array.h	/^    void reverse()  { ::reverse(f_, n_); }$/;"	f	class:array	access:public	signature:()
reverse	src/perm/reverse.h	/^inline void reverse(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
reverse_0	doc/perm-doc.txt	/^inline void reverse_0(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
reverse_0	src/aux1/attic/array.h	/^    void reverse_0()  { ::reverse_0(f_, n_); }$/;"	f	class:array	access:public	signature:()
reverse_0	src/perm/reverse.h	/^inline void reverse_0(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
reverse_combination	src/comb/comp2comb.h	/^inline void reverse_combination(ulong *b, ulong N, ulong K)$/;"	f	signature:(ulong *b, ulong N, ulong K)
reverse_edge_order	src/graph/digraph.cc	/^digraph::reverse_edge_order(ulong p0, ulong p1\/*=0*\/)$/;"	f	class:digraph	signature:(ulong p0, ulong p1 )
reverse_edge_order	src/graph/digraph.h	/^    void reverse_edge_order()  { reverse_edge_order(0, ng_-1); }$/;"	f	class:digraph	access:public	signature:()
reverse_edge_order	src/graph/digraph.h	/^    void reverse_edge_order(ulong p0, ulong p1=0);$/;"	p	class:digraph	access:public	signature:(ulong p0, ulong p1=0)
reverse_horiz	src/aux2/attic/reverse2d.h	/^void reverse_horiz(Type **f, ulong nr, ulong nc)$/;"	f	signature:(Type **f, ulong nr, ulong nc)
reverse_paren_string	src/comb/reverse-paren-string.h	/^inline void reverse_paren_string(Type *str, ulong n2)$/;"	f	signature:(Type *str, ulong n2)
reverse_paren_string	src/comb/reverse-paren-string.h	/^inline void reverse_paren_string(const Type *str, ulong n2, Type *st2)$/;"	f	signature:(const Type *str, ulong n2, Type *st2)
reverse_vert	src/aux2/attic/reverse2d.h	/^void reverse_vert(Type **f, ulong nr, ulong nc)$/;"	f	signature:(Type **f, ulong nr, ulong nc)
rfact2cyclic	src/comb/fact2cyclic.cc	/^rfact2cyclic(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2cyclic	src/comb/fact2perm.h	/^void rfact2cyclic(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2invperm	doc/comb-doc.txt	/^void rfact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	file:	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2invperm	src/comb/big-fact2perm.cc	/^rfact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2invperm	src/comb/big-fact2perm.h	/^void rfact2invperm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2invperm	src/comb/fact2perm.cc	/^rfact2invperm(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2invperm	src/comb/fact2perm.h	/^void rfact2invperm(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2invperm_swp	src/comb/fact2perm-swp.cc	/^rfact2invperm_swp(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2invperm_swp	src/comb/fact2perm.h	/^void rfact2invperm_swp(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2invperm_swp_apply	doc/perm-doc.txt	/^void rfact2invperm_swp_apply(const ulong *fc, ulong n, Type *x);$/;"	p	file:	signature:(const ulong *fc, ulong n, Type *x)
rfact2invperm_swp_apply	src/perm/fact2perm-swp-apply.h	/^void rfact2invperm_swp_apply(const ulong *fc, ulong n, Type *x)$/;"	f	signature:(const ulong *fc, ulong n, Type *x)
rfact2num	src/comb/fact2num.cc	/^rfact2num(const ulong *fc, ulong n)$/;"	f	signature:(const ulong *fc, ulong n)
rfact2num	src/comb/fact2num.h	/^ulong rfact2num(const ulong *fc, ulong n);$/;"	p	signature:(const ulong *fc, ulong n)
rfact2perm	doc/comb-doc.txt	/^void rfact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	file:	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2perm	src/comb/big-fact2perm.cc	/^rfact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2perm	src/comb/big-fact2perm.h	/^void rfact2perm(const ulong *fc, ulong n, ulong *x, left_right_array &LR);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, left_right_array &LR)
rfact2perm	src/comb/fact2perm.cc	/^rfact2perm(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2perm	src/comb/fact2perm.h	/^void rfact2perm(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2perm_rev	src/comb/fact2perm-rev.cc	/^rfact2perm_rev(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2perm_rev	src/comb/fact2perm.h	/^void rfact2perm_rev(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2perm_rot	src/comb/fact2perm-rot.cc	/^rfact2perm_rot(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2perm_rot	src/comb/fact2perm.h	/^void rfact2perm_rot(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2perm_swp	src/comb/fact2perm-swp.cc	/^rfact2perm_swp(const ulong *fc, ulong n, ulong *x, bool iq\/*=true*\/)$/;"	f	signature:(const ulong *fc, ulong n, ulong *x, bool iq )
rfact2perm_swp	src/comb/fact2perm.h	/^void rfact2perm_swp(const ulong *fc, ulong n, ulong *x, bool iq=true);$/;"	p	signature:(const ulong *fc, ulong n, ulong *x, bool iq=true)
rfact2perm_swp_apply	doc/perm-doc.txt	/^void rfact2perm_swp_apply(const ulong *fc, ulong n, Type *x);$/;"	p	file:	signature:(const ulong *fc, ulong n, Type *x)
rfact2perm_swp_apply	src/perm/fact2perm-swp-apply.h	/^void rfact2perm_swp_apply(const ulong *fc, ulong n, Type *x)$/;"	f	signature:(const ulong *fc, ulong n, Type *x)
rfactpow	doc/aux0-doc.txt	/^inline Type rfactpow(Type x, Type n);$/;"	p	file:	signature:(Type x, Type n)
rfactpow	src/aux0/factorial.h	/^inline Type rfactpow(Type x, Type n)$/;"	f	signature:(Type x, Type n)
rgs_fincr	src/comb/rgs-fincr.h	/^    explicit rgs_fincr(ulong n, ulong i=1)$/;"	f	class:rgs_fincr	access:public	signature:(ulong n, ulong i=1)
rgs_fincr	src/comb/rgs-fincr.h	/^    rgs_fincr(const rgs_fincr&);  \/\/ forbidden$/;"	p	class:rgs_fincr	access:private	signature:(const rgs_fincr&)
rgs_fincr	src/comb/rgs-fincr.h	/^class rgs_fincr$/;"	c
rgs_fincr::data	src/comb/rgs-fincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_fincr	access:public	signature:() const
rgs_fincr::f_	src/comb/rgs-fincr.h	/^    ulong *f_;  \/\/ values F(k)$/;"	m	class:rgs_fincr	access:public
rgs_fincr::first	src/comb/rgs-fincr.h	/^    void first()$/;"	f	class:rgs_fincr	access:public	signature:()
rgs_fincr::i_	src/comb/rgs-fincr.h	/^    ulong i_;   \/\/ s[k] <= f[k] + i$/;"	m	class:rgs_fincr	access:public
rgs_fincr::n_	src/comb/rgs-fincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_fincr	access:public
rgs_fincr::next	src/comb/rgs-fincr.h	/^    ulong next()$/;"	f	class:rgs_fincr	access:public	signature:()
rgs_fincr::operator =	src/comb/rgs-fincr.h	/^    rgs_fincr & operator = (const rgs_fincr&);  \/\/ forbidden$/;"	p	class:rgs_fincr	access:private	signature:(const rgs_fincr&)
rgs_fincr::print	src/comb/rgs-fincr.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:rgs_fincr	access:public	signature:(const char *bla, bool dfz=false) const
rgs_fincr::rgs_fincr	src/comb/rgs-fincr.h	/^    explicit rgs_fincr(ulong n, ulong i=1)$/;"	f	class:rgs_fincr	access:public	signature:(ulong n, ulong i=1)
rgs_fincr::rgs_fincr	src/comb/rgs-fincr.h	/^    rgs_fincr(const rgs_fincr&);  \/\/ forbidden$/;"	p	class:rgs_fincr	access:private	signature:(const rgs_fincr&)
rgs_fincr::s_	src/comb/rgs-fincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_fincr	access:public
rgs_fincr::~rgs_fincr	src/comb/rgs-fincr.h	/^    ~rgs_fincr()$/;"	f	class:rgs_fincr	access:public	signature:()
rgs_kincr	src/comb/rgs-kincr.h	/^    explicit rgs_kincr(ulong n)$/;"	f	class:rgs_kincr	access:public	signature:(ulong n)
rgs_kincr	src/comb/rgs-kincr.h	/^    rgs_kincr(const rgs_kincr&);  \/\/ forbidden$/;"	p	class:rgs_kincr	access:private	signature:(const rgs_kincr&)
rgs_kincr	src/comb/rgs-kincr.h	/^class rgs_kincr$/;"	c
rgs_kincr::data	src/comb/rgs-kincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_kincr	access:public	signature:() const
rgs_kincr::first	src/comb/rgs-kincr.h	/^    void first()$/;"	f	class:rgs_kincr	access:public	signature:()
rgs_kincr::n_	src/comb/rgs-kincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_kincr	access:public
rgs_kincr::next	src/comb/rgs-kincr.h	/^    ulong next()$/;"	f	class:rgs_kincr	access:public	signature:()
rgs_kincr::operator =	src/comb/rgs-kincr.h	/^    rgs_kincr & operator = (const rgs_kincr&);  \/\/ forbidden$/;"	p	class:rgs_kincr	access:private	signature:(const rgs_kincr&)
rgs_kincr::print	src/comb/rgs-kincr.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:rgs_kincr	access:public	signature:(const char *bla, bool dfz=false) const
rgs_kincr::rgs_kincr	src/comb/rgs-kincr.h	/^    explicit rgs_kincr(ulong n)$/;"	f	class:rgs_kincr	access:public	signature:(ulong n)
rgs_kincr::rgs_kincr	src/comb/rgs-kincr.h	/^    rgs_kincr(const rgs_kincr&);  \/\/ forbidden$/;"	p	class:rgs_kincr	access:private	signature:(const rgs_kincr&)
rgs_kincr::s_	src/comb/rgs-kincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_kincr	access:public
rgs_kincr::~rgs_kincr	src/comb/rgs-kincr.h	/^    ~rgs_kincr()$/;"	f	class:rgs_kincr	access:public	signature:()
rgs_maxincr	src/comb/rgs-maxincr.h	/^    explicit rgs_maxincr(ulong n, ulong i=1)$/;"	f	class:rgs_maxincr	access:public	signature:(ulong n, ulong i=1)
rgs_maxincr	src/comb/rgs-maxincr.h	/^    rgs_maxincr(const rgs_maxincr&);  \/\/ forbidden$/;"	p	class:rgs_maxincr	access:private	signature:(const rgs_maxincr&)
rgs_maxincr	src/comb/rgs-maxincr.h	/^class rgs_maxincr$/;"	c
rgs_maxincr::data	src/comb/rgs-maxincr.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:rgs_maxincr	access:public	signature:() const
rgs_maxincr::first	src/comb/rgs-maxincr.h	/^    void first()$/;"	f	class:rgs_maxincr	access:public	signature:()
rgs_maxincr::i_	src/comb/rgs-maxincr.h	/^    ulong i_;   \/\/ s[k] <= max_{j<k}(s[j]+i)$/;"	m	class:rgs_maxincr	access:public
rgs_maxincr::m_	src/comb/rgs-maxincr.h	/^    ulong *m_;  \/\/ m_[k-1] == max value for s_[j], j<k$/;"	m	class:rgs_maxincr	access:public
rgs_maxincr::n_	src/comb/rgs-maxincr.h	/^    ulong n_;   \/\/ Length of strings$/;"	m	class:rgs_maxincr	access:public
rgs_maxincr::next	src/comb/rgs-maxincr.h	/^    ulong next()$/;"	f	class:rgs_maxincr	access:public	signature:()
rgs_maxincr::operator =	src/comb/rgs-maxincr.h	/^    rgs_maxincr & operator = (const rgs_maxincr&);  \/\/ forbidden$/;"	p	class:rgs_maxincr	access:private	signature:(const rgs_maxincr&)
rgs_maxincr::print	src/comb/rgs-maxincr.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:rgs_maxincr	access:public	signature:(const char *bla, bool dfz=true) const
rgs_maxincr::rgs_maxincr	src/comb/rgs-maxincr.h	/^    explicit rgs_maxincr(ulong n, ulong i=1)$/;"	f	class:rgs_maxincr	access:public	signature:(ulong n, ulong i=1)
rgs_maxincr::rgs_maxincr	src/comb/rgs-maxincr.h	/^    rgs_maxincr(const rgs_maxincr&);  \/\/ forbidden$/;"	p	class:rgs_maxincr	access:private	signature:(const rgs_maxincr&)
rgs_maxincr::s_	src/comb/rgs-maxincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_maxincr	access:public
rgs_maxincr::~rgs_maxincr	src/comb/rgs-maxincr.h	/^    ~rgs_maxincr()$/;"	f	class:rgs_maxincr	access:public	signature:()
rgs_to_paren_bit_string	src/comb/paren-string-to-rgs.cc	/^rgs_to_paren_bit_string(const ulong *rgs, ulong n, char *str, bool rq=false)$/;"	f	signature:(const ulong *rgs, ulong n, char *str, bool rq=false)
rgs_to_paren_bit_string	src/comb/paren-string-to-rgs.h	/^void rgs_to_paren_bit_string(const ulong *rgs, ulong n, char *str, bool rq=false);$/;"	p	signature:(const ulong *rgs, ulong n, char *str, bool rq=false)
rgs_to_paren_string	src/comb/paren-string-to-rgs.cc	/^rgs_to_paren_string(const ulong *rgs, ulong n, char *str, bool rq=false)$/;"	f	signature:(const ulong *rgs, ulong n, char *str, bool rq=false)
rgs_to_paren_string	src/comb/paren-string-to-rgs.h	/^void rgs_to_paren_string(const ulong *rgs, ulong n, char *str, bool rq=false);$/;"	p	signature:(const ulong *rgs, ulong n, char *str, bool rq=false)
ri_	src/comb/partition-gen.h	/^    ulong ri_;   \/\/ temporary for r_[i_]$/;"	m	class:partition_gen	access:public
ri_multiply	src/chirpzt/fftfract.cc	/^static void ri_multiply(const double *fr, const double *fi,$/;"	f	file:	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
ri_print	src/aux1/attic/auxprint.cc	/^ri_print(const char *bla, const double *fr, const double *fi,$/;"	f	signature:(const char *bla, const double *fr, const double *fi, long n, double eps )
ri_print	test/aux-test.cc	/^ri_print(const char *bla, const double *fr, const double *fi,$/;"	f	signature:(const char *bla, const double *fr, const double *fi, long n, double eps )
ri_print	test/test.h	/^void ri_print(const char *bla, const double *fr, const double *fi, long n, double eps=0.0);$/;"	p	signature:(const char *bla, const double *fr, const double *fi, long n, double eps=0.0)
right_angle_complex_auto_convolution	doc/convolution-doc.txt	/^void right_angle_complex_auto_convolution(Complex *f, ulong ldn, double v\/*=0.0*\/);$/;"	p	file:	signature:(Complex *f, ulong ldn, double v )
right_angle_complex_auto_convolution	doc/convolution-doc.txt	/^void right_angle_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, double v )
right_angle_complex_auto_convolution	src/convolution/weightedconv.cc	/^right_angle_complex_auto_convolution(Complex *f, ulong ldn, double v\/*=0.0*\/)$/;"	f	signature:(Complex *f, ulong ldn, double v )
right_angle_complex_auto_convolution	src/convolution/weightedconv.cc	/^right_angle_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	f	signature:(double *fr, double *fi, ulong ldn, double v )
right_angle_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void right_angle_complex_auto_convolution(Complex *f, ulong ldn, double v=0.0);$/;"	p	signature:(Complex *f, ulong ldn, double v=0.0)
right_angle_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void right_angle_complex_auto_convolution(double *fr, double *fi, ulong ldn, double v=0.0);$/;"	p	signature:(double *fr, double *fi, ulong ldn, double v=0.0)
ringbuffer	src/ds/ringbuffer.h	/^    explicit ringbuffer(ulong n)$/;"	f	class:ringbuffer	access:public	signature:(ulong n)
ringbuffer	src/ds/ringbuffer.h	/^    ringbuffer(const ringbuffer&);  \/\/ forbidden$/;"	p	class:ringbuffer	access:private	signature:(const ringbuffer&)
ringbuffer	src/ds/ringbuffer.h	/^class ringbuffer$/;"	c
ringbuffer::fpos_	src/ds/ringbuffer.h	/^    ulong fpos_;  \/\/ first position to read in buffer$/;"	m	class:ringbuffer	access:public
ringbuffer::insert	src/ds/ringbuffer.h	/^    void insert(const Type &z)$/;"	f	class:ringbuffer	access:public	signature:(const Type &z)
ringbuffer::n_	src/ds/ringbuffer.h	/^    ulong n_;   \/\/ current number of entries in buffer$/;"	m	class:ringbuffer	access:public
ringbuffer::num	src/ds/ringbuffer.h	/^    ulong num()  const  { return n_; }$/;"	f	class:ringbuffer	access:public	signature:() const
ringbuffer::operator =	src/ds/ringbuffer.h	/^    ringbuffer & operator = (const ringbuffer&);  \/\/ forbidden$/;"	p	class:ringbuffer	access:private	signature:(const ringbuffer&)
ringbuffer::read	src/ds/ringbuffer.h	/^    ulong read(ulong k, Type &z)  const$/;"	f	class:ringbuffer	access:public	signature:(ulong k, Type &z) const
ringbuffer::ringbuffer	src/ds/ringbuffer.h	/^    explicit ringbuffer(ulong n)$/;"	f	class:ringbuffer	access:public	signature:(ulong n)
ringbuffer::ringbuffer	src/ds/ringbuffer.h	/^    ringbuffer(const ringbuffer&);  \/\/ forbidden$/;"	p	class:ringbuffer	access:private	signature:(const ringbuffer&)
ringbuffer::s_	src/ds/ringbuffer.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:ringbuffer	access:public
ringbuffer::wpos_	src/ds/ringbuffer.h	/^    ulong wpos_;  \/\/ next position to write in buffer$/;"	m	class:ringbuffer	access:public
ringbuffer::x_	src/ds/ringbuffer.h	/^    Type *x_;   \/\/ data (ring buffer)$/;"	m	class:ringbuffer	access:public
ringbuffer::~ringbuffer	src/ds/ringbuffer.h	/^    ~ringbuffer()  { delete [] x_; }$/;"	f	class:ringbuffer	access:public	signature:()
rll_rec	demo/comb/rll-rec-demo.cc	/^void rll_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
rll_rec2	demo/comb/rll-rec-demo.cc	/^void rll_rec2(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
rms_diff	src/aux1/attic/aux1double.cc	/^rms_diff(const double *f, const double *g, ulong n)$/;"	f	signature:(const double *f, const double *g, ulong n)
rms_diff	src/aux1/attic/aux1double.h	/^double rms_diff(const double *f, const double *g, ulong n);$/;"	p	signature:(const double *f, const double *g, ulong n)
rms_diff	test/aux-test.cc	/^rms_diff(const double *f, const double *g, ulong n)$/;"	f	signature:(const double *f, const double *g, ulong n)
rms_diff	test/test.h	/^double rms_diff(const double *f, const double *g, ulong n);$/;"	p	signature:(const double *f, const double *g, ulong n)
rnd01	doc/aux0-doc.txt	/^double rnd01();$/;"	p	file:	signature:()
rnd01	doc/aux0-doc.txt	/^void rnd01(double *f, ulong n);$/;"	p	file:	signature:(double *f, ulong n)
rnd01	src/aux0/randf.cc	/^rnd01()$/;"	f	signature:()
rnd01	src/aux0/randf.cc	/^rnd01(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
rnd01	src/aux0/randf.h	/^double rnd01();$/;"	p	signature:()
rnd01	src/aux0/randf.h	/^void rnd01(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
root2pow	src/mod/mod.cc	/^mod::root2pow(int ldorder)$/;"	f	class:mod	signature:(int ldorder)
root2pow	src/mod/mod.h	/^    static mod root2pow(int ldorder);  \/\/ root of order 2^ldorder$/;"	p	class:mod	access:public	signature:(int ldorder)
root_2pow	src/mod/mod.cc	/^mod  * mod::root_2pow = 0;$/;"	m	class:mod	file:
root_2pow	src/mod/mod.h	/^    static mod *root_2pow;  \/\/ [max2pow+1];    \/\/ element[k] is of order 2^k$/;"	m	class:mod	access:public
root_m2pow	src/mod/mod.cc	/^mod  * mod::root_m2pow = 0;$/;"	m	class:mod	file:
root_m2pow	src/mod/mod.h	/^    static mod *root_m2pow;  \/\/ [max2pow+1];   \/\/ element[k] is of order 2^-k$/;"	m	class:mod	access:public
rotate	src/aux1/attic/array.h	/^    void rotate(long r)  { ::rotate_sgn(f_, n_, r); }$/;"	f	class:array	access:public	signature:(long r)
rotate_down	src/aux2/attic/rotate2d.h	/^void rotate_down(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
rotate_horiz	src/aux2/attic/rotate2d.h	/^void rotate_horiz(Type **f, ulong nr, ulong nc, long s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long s)
rotate_left	doc/perm-doc.txt	/^void rotate_left(Type *f, ulong n, ulong s);$/;"	p	file:	signature:(Type *f, ulong n, ulong s)
rotate_left	src/aux1/attic/array.h	/^    void rotate_left(ulong r)  { ::rotate_left(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
rotate_left	src/aux2/attic/rotate2d.h	/^void rotate_left(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
rotate_left	src/perm/rotate.h	/^void rotate_left(Type *f, ulong n, ulong s)$/;"	f	signature:(Type *f, ulong n, ulong s)
rotate_left1	doc/perm-doc.txt	/^void rotate_left1(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
rotate_left1	src/perm/rotate.h	/^void rotate_left1(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
rotate_right	doc/perm-doc.txt	/^void rotate_right(Type *f, ulong n, ulong s);$/;"	p	file:	signature:(Type *f, ulong n, ulong s)
rotate_right	src/aux1/attic/array.h	/^    void rotate_right(ulong r)  { ::rotate_right(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
rotate_right	src/aux2/attic/rotate2d.h	/^void rotate_right(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
rotate_right	src/perm/rotate.h	/^void rotate_right(Type *f, ulong n, ulong s)$/;"	f	signature:(Type *f, ulong n, ulong s)
rotate_right1	doc/perm-doc.txt	/^void rotate_right1(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
rotate_right1	src/perm/rotate.h	/^void rotate_right1(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
rotate_sgn	doc/perm-doc.txt	/^void rotate_sgn(Type *f, ulong n, long s);$/;"	p	file:	signature:(Type *f, ulong n, long s)
rotate_sgn	src/perm/rotate.h	/^void rotate_sgn(Type *f, ulong n, long s)$/;"	f	signature:(Type *f, ulong n, long s)
rotate_up	src/aux2/attic/rotate2d.h	/^void rotate_up(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
rotate_vert	src/aux2/attic/rotate2d.h	/^void rotate_vert(Type **f, ulong nr, ulong nc, long s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long s)
rotate_vh	src/aux2/attic/rotate2d.h	/^void rotate_vh(Type **f, ulong nr, ulong nc, long vert, long horiz)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long vert, long horiz)
row_column_fht	doc/fht-doc.txt	/^void row_column_fht(double *f, ulong nr, ulong nc); \/\/ aux$/;"	p	file:	signature:(double *f, ulong nr, ulong nc)
row_column_fht	src/fht/fht2d.h	/^void row_column_fht(double *f, ulong nr, ulong nc);  \/\/ aux$/;"	p	signature:(double *f, ulong nr, ulong nc)
row_column_fht	src/fht/twodimfht.cc	/^row_column_fht(double *f, ulong nr, ulong nc)$/;"	f	signature:(double *f, ulong nr, ulong nc)
row_ffts	doc/fft-doc.txt	/^void row_ffts(Complex *f, ulong nr, ulong nc, int is); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, int is)
row_ffts	doc/fft-doc.txt	/^void row_ffts(double *fr, double *fi, ulong nr, ulong nc, int is); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
row_ffts	src/fft/matrixfft.h	/^void row_ffts(Complex *f, ulong nr, ulong nc, int is);  \/\/ aux$/;"	p	signature:(Complex *f, ulong nr, ulong nc, int is)
row_ffts	src/fft/matrixfft.h	/^void row_ffts(double *fr, double *fi, ulong nr, ulong nc, int is);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
row_ffts	src/fft/rowffts.cc	/^row_ffts(Complex *f, ulong nr, ulong nc, int is)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, int is)
row_ffts	src/fft/rowffts.cc	/^row_ffts(double *fr, double *fi, ulong nr, ulong nc, int is)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
row_weighted_auto_convolutions	doc/fft-doc.txt	/^void row_weighted_auto_convolutions(Complex *f, ulong nr, ulong nc, double v); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, double v)
row_weighted_auto_convolutions	doc/fft-doc.txt	/^void row_weighted_auto_convolutions(double *fr, double *fi, ulong nr, ulong nc, double v); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, double v)
row_weighted_auto_convolutions	src/fft/matrixfft.h	/^void row_weighted_auto_convolutions(Complex *f, ulong nr, ulong nc, double v);  \/\/ aux$/;"	p	signature:(Complex *f, ulong nr, ulong nc, double v)
row_weighted_auto_convolutions	src/fft/matrixfft.h	/^void row_weighted_auto_convolutions(double *fr, double *fi, ulong nr, ulong nc, double v);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, double v)
row_weighted_auto_convolutions	src/fft/rowcnvls.cc	/^row_weighted_auto_convolutions(Complex *f, ulong nr, ulong nc, double v)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, double v)
row_weighted_auto_convolutions	src/fft/rowcnvls.cc	/^row_weighted_auto_convolutions(double *fr, double *fi, ulong nr, ulong nc, double v)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, double v)
row_weighted_ffts	doc/fft-doc.txt	/^void row_weighted_ffts(Complex *f, ulong nr, ulong nc, int is); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, int is)
row_weighted_ffts	doc/fft-doc.txt	/^void row_weighted_ffts(double *fr, double *fi, ulong nr, ulong nc, int is); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
row_weighted_ffts	src/fft/matrixfft.h	/^void row_weighted_ffts(Complex *f, ulong nr, ulong nc, int is);  \/\/ aux$/;"	p	signature:(Complex *f, ulong nr, ulong nc, int is)
row_weighted_ffts	src/fft/matrixfft.h	/^void row_weighted_ffts(double *fr, double *fi, ulong nr, ulong nc, int is);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
row_weighted_ffts	src/fft/rowffts.cc	/^row_weighted_ffts(Complex *f, ulong nr, ulong nc, int is)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, int is)
row_weighted_ffts	src/fft/rowffts.cc	/^row_weighted_ffts(double *fr, double *fi, ulong nr, ulong nc, int is)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
rowp_	src/ds/array2d.h	/^    Type **rowp_;    \/\/ pointers to rows$/;"	m	class:array2d	access:protected
rpos_	src/ds/queue.h	/^    ulong rpos_;  \/\/ next position to read in buffer$/;"	m	class:queue	access:public
rq	demo/comb/composition-gray-rec-demo.cc	/^ulong rq;  \/\/ determine order$/;"	v
rq	src/comb/attic/combination-rec-demo.cc	/^ulong rq;   \/\/ condition that determines the order$/;"	v
rq_	src/comb/combination-rec.h	/^    ulong rq_;   \/\/ condition that determines the order:$/;"	m	class:comb_rec	access:public
rq_	src/comb/ksubset-rec.h	/^    ulong rq_;   \/\/ condition that determines the order$/;"	m	class:ksubset_rec	access:public
rr	src/graph/mk-special-digraphs.h	/^    uchar *rr;  \/\/ rotations of Lyndon word in Gray path$/;"	m	class:lyngray_dat	access:public
rseed	doc/aux0-doc.txt	/^uint rseed(uint s\/*=0*\/);$/;"	p	file:	signature:(uint s )
rseed	src/aux0/randf.cc	/^rseed(uint s\/*=0*\/)$/;"	f	signature:(uint s )
rseed	src/aux0/randf.h	/^uint rseed(uint s=0);$/;"	p	signature:(uint s=0)
rset	src/ds/attic/rset.h	/^    explicit rset(ulong n, ulong growq=0)$/;"	f	class:rset	access:public	signature:(ulong n, ulong growq=0)
rset	src/ds/attic/rset.h	/^class rset$/;"	c
rset::data	src/ds/attic/rset.h	/^    Type * data()  { return x_; }$/;"	f	class:rset	access:public	signature:()
rset::gq_	src/ds/attic/rset.h	/^    ulong  gq_; \/\/ grow gq elements if necessary, 0 for "never grow"$/;"	m	class:rset	access:public
rset::grow	src/ds/attic/rset.h	/^    void grow()$/;"	f	class:rset	access:private	signature:()
rset::insert	src/ds/attic/rset.h	/^    ulong insert(const Type & z)$/;"	f	class:rset	access:public	signature:(const Type & z)
rset::n_	src/ds/attic/rset.h	/^    ulong  n_;  \/\/ position of next write, top entry @ n-1$/;"	m	class:rset	access:public
rset::num	src/ds/attic/rset.h	/^    ulong num()  const$/;"	f	class:rset	access:public	signature:() const
rset::operator =	src/ds/attic/rset.h	/^    rset & operator = (const rset &);  \/\/ forbidden$/;"	p	class:rset	access:private	signature:(const rset &)
rset::remove	src/ds/attic/rset.h	/^    ulong remove(const Type & z)$/;"	f	class:rset	access:public	signature:(const Type & z)
rset::remove_at	src/ds/attic/rset.h	/^    ulong remove_at(ulong j)$/;"	f	class:rset	access:public	signature:(ulong j)
rset::rset	src/ds/attic/rset.h	/^    explicit rset(ulong n, ulong growq=0)$/;"	f	class:rset	access:public	signature:(ulong n, ulong growq=0)
rset::s_	src/ds/attic/rset.h	/^    ulong  s_;  \/\/ size$/;"	m	class:rset	access:public
rset::search	src/ds/attic/rset.h	/^    ulong search(const Type & x, ulong k=0)  const$/;"	f	class:rset	access:public	signature:(const Type & x, ulong k=0) const
rset::size	src/ds/attic/rset.h	/^    ulong size()  const$/;"	f	class:rset	access:public	signature:() const
rset::sort	src/ds/attic/rset.h	/^    void sort()  { ::quick_sort(x_, n_); }$/;"	f	class:rset	access:public	signature:()
rset::unique	src/ds/attic/rset.h	/^    void unique()  { sort();  ::unique(x_, n_); }$/;"	f	class:rset	access:public	signature:()
rset::x_	src/ds/attic/rset.h	/^    Type  *x_;  \/\/ data$/;"	m	class:rset	access:public
rset::~rset	src/ds/attic/rset.h	/^    ~rset()  { delete [] x_; }$/;"	f	class:rset	access:public	signature:()
ruler_func	src/comb/ruler-func.h	/^    explicit ruler_func(ulong n)$/;"	f	class:ruler_func	access:public	signature:(ulong n)
ruler_func	src/comb/ruler-func.h	/^    ruler_func(const ruler_func&);  \/\/ forbidden$/;"	p	class:ruler_func	access:private	signature:(const ruler_func&)
ruler_func	src/comb/ruler-func.h	/^class ruler_func$/;"	c
ruler_func1	src/comb/ruler-func1.h	/^    explicit ruler_func1(ulong n)$/;"	f	class:ruler_func1	access:public	signature:(ulong n)
ruler_func1	src/comb/ruler-func1.h	/^class ruler_func1 : public composition_nz$/;"	c	inherits:composition_nz
ruler_func1::data	src/comb/ruler-func1.h	/^    ulong data()  const$/;"	f	class:ruler_func1	access:public	signature:() const
ruler_func1::first	src/comb/ruler-func1.h	/^    void first()$/;"	f	class:ruler_func1	access:public	signature:()
ruler_func1::next	src/comb/ruler-func1.h	/^    ulong next()$/;"	f	class:ruler_func1	access:public	signature:()
ruler_func1::print_composition	src/comb/ruler-func1.h	/^    void print_composition(const char *bla)  const$/;"	f	class:ruler_func1	access:public	signature:(const char *bla) const
ruler_func1::ruler_func1	src/comb/ruler-func1.h	/^    explicit ruler_func1(ulong n)$/;"	f	class:ruler_func1	access:public	signature:(ulong n)
ruler_func1::~ruler_func1	src/comb/ruler-func1.h	/^    ~ruler_func1()  { ; }$/;"	f	class:ruler_func1	access:public	signature:()
ruler_func::f_	src/comb/ruler-func.h	/^    ulong *f_;  \/\/ focus pointer$/;"	m	class:ruler_func	access:public
ruler_func::first	src/comb/ruler-func.h	/^    void first()$/;"	f	class:ruler_func	access:public	signature:()
ruler_func::n_	src/comb/ruler-func.h	/^    ulong n_;$/;"	m	class:ruler_func	access:public
ruler_func::next	src/comb/ruler-func.h	/^    ulong next()$/;"	f	class:ruler_func	access:public	signature:()
ruler_func::operator =	src/comb/ruler-func.h	/^    ruler_func & operator = (const ruler_func&);  \/\/ forbidden$/;"	p	class:ruler_func	access:private	signature:(const ruler_func&)
ruler_func::ruler_func	src/comb/ruler-func.h	/^    explicit ruler_func(ulong n)$/;"	f	class:ruler_func	access:public	signature:(ulong n)
ruler_func::ruler_func	src/comb/ruler-func.h	/^    ruler_func(const ruler_func&);  \/\/ forbidden$/;"	p	class:ruler_func	access:private	signature:(const ruler_func&)
ruler_func::~ruler_func	src/comb/ruler-func.h	/^    ~ruler_func()$/;"	f	class:ruler_func	access:public	signature:()
ruler_func_s	src/comb/ruler-func-s.h	/^    explicit ruler_func_s(ulong n, ulong s)$/;"	f	class:ruler_func_s	access:public	signature:(ulong n, ulong s)
ruler_func_s	src/comb/ruler-func-s.h	/^class ruler_func_s : public composition_nz_sorts$/;"	c	inherits:composition_nz_sorts
ruler_func_s::data	src/comb/ruler-func-s.h	/^    ulong data()  const$/;"	f	class:ruler_func_s	access:public	signature:() const
ruler_func_s::first	src/comb/ruler-func-s.h	/^    void first()$/;"	f	class:ruler_func_s	access:public	signature:()
ruler_func_s::next	src/comb/ruler-func-s.h	/^    ulong next()$/;"	f	class:ruler_func_s	access:public	signature:()
ruler_func_s::print_composition	src/comb/ruler-func-s.h	/^    void print_composition(const char *bla)  const$/;"	f	class:ruler_func_s	access:public	signature:(const char *bla) const
ruler_func_s::ruler_func_s	src/comb/ruler-func-s.h	/^    explicit ruler_func_s(ulong n, ulong s)$/;"	f	class:ruler_func_s	access:public	signature:(ulong n, ulong s)
ruler_func_s::~ruler_func_s	src/comb/ruler-func-s.h	/^    ~ruler_func_s()  { ; }$/;"	f	class:ruler_func_s	access:public	signature:()
run_substitutions	src/comb/attic/stringsubst-demo.cc	/^run_substitutions(ulong maxn, const char *start, ulong nsym, const char ** args)$/;"	f	signature:(ulong maxn, const char *start, ulong nsym, const char ** args)
rv	demo/comb/combination-emk-rec-demo.cc	/^ulong *rv;  \/\/ elements in combination at rv[1] ... rv[k]$/;"	v
rv	demo/comb/combination-enup-rec-demo.cc	/^ulong *rv;  \/\/ elements in combination at rv[1] ... rv[k]$/;"	v
rv	demo/comb/fib-alt-gray-demo.cc	/^ulong *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/fibgray-rec-demo.cc	/^ulong *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/gexz-gray-demo.cc	/^ulong *rv;  \/\/ digits of the word$/;"	v
rv	demo/comb/maxrep-gray-demo.cc	/^ulong *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong *rv;  \/\/ digits of mixed radix number$/;"	v
rv	demo/comb/naf-gray-rec-demo.cc	/^int *rv;   \/\/ the string$/;"	v
rv	demo/comb/naf-pos-rec-demo.cc	/^int *rv;  \/\/ string$/;"	v
rv	demo/comb/no111-gray-demo.cc	/^long *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/no1111-gray-demo.cc	/^long *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/no1x1-gray-demo.cc	/^ulong *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/no1xy1-gray-demo.cc	/^long *rv;  \/\/ bits of the word$/;"	v
rv	demo/comb/ntnz-gray-demo.cc	/^ulong *rv;   \/\/ digits of strings$/;"	v
rv	demo/comb/ntz-gray-demo.cc	/^ulong *rv;  \/\/ digits of the word (radix r+1)$/;"	v
rv	demo/comb/paren-gray-rec-demo.cc	/^ulong *rv;  \/\/ restricted growth strings$/;"	v
rv	demo/comb/pellgen-gray-demo.cc	/^ulong *rv;  \/\/ digits of the word (radix r+1)$/;"	v
rv	demo/comb/pellgray-rec-demo.cc	/^ulong *rv;  \/\/ digits of the word$/;"	v
rv	demo/comb/rll-rec-demo.cc	/^ulong *rv;  \/\/ bits of the word$/;"	v
rv	demo/graph/sta-graph-acgray-demo.cc	/^ulong rv[MAX_N];  \/\/ path$/;"	v
rv	demo/graph/sta-graph-macgray-demo.cc	/^ulong rv[MAX_N];  \/\/ path$/;"	v
rv	src/comb/attic/combination-rec-demo.cc	/^ulong *rv;  \/\/ record of visits in graph$/;"	v
rv_	src/comb/combination-rec.h	/^    ulong *rv_;   \/\/  combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:comb_rec	access:public
rv_	src/comb/ksubset-rec.h	/^    ulong *rv_;  \/\/ record of visits in graph (list of elements in subset)$/;"	m	class:ksubset_rec	access:public
rv_	src/comb/ksubset-twoclose.h	/^    ulong *rv_;  \/\/ record of visits in graph (delta set)$/;"	m	class:ksubset_twoclose	access:public
rv_	src/graph/attic/debruijngraph.h	/^    ulong *rv_;  \/\/ Record of Visits: rv[k] == node visited at step k$/;"	m	class:debruijn_cycles	access:public
rv_	src/graph/digraph-paths.h	/^    ulong *rv_;  \/\/ Record of Visits: rv[k] == node visited at step k$/;"	m	class:digraph_paths	access:public
rvo	demo/comb/fib-alt-gray-demo.cc	/^ulong *rvo;  \/\/ count transitions$/;"	v
rvo	demo/comb/gexz-gray-demo.cc	/^ulong *rvo;  \/\/ last string$/;"	v
rvo	demo/comb/maxrep-gray-demo.cc	/^ulong *rvo;  \/\/ bits of the last word$/;"	v
rvo	demo/comb/naf-gray-rec-demo.cc	/^int *rvo;  \/\/ last string$/;"	v
rvo	demo/comb/naf-pos-rec-demo.cc	/^int *rvo;  \/\/ last string$/;"	v
rvo	demo/comb/no111-gray-demo.cc	/^long *rvo;  \/\/ count transitions$/;"	v
rvo	demo/comb/no1111-gray-demo.cc	/^long *rvo;  \/\/ count transitions$/;"	v
rvo	demo/comb/no1x1-gray-demo.cc	/^ulong *rvo;  \/\/ bits of previous word$/;"	v
rvo	demo/comb/no1xy1-gray-demo.cc	/^long *rvo;  \/\/ count transitions$/;"	v
rvo	demo/comb/ntnz-gray-demo.cc	/^ulong *rvo;  \/\/ last string$/;"	v
rvo	demo/comb/ntz-gray-demo.cc	/^ulong *rvo;  \/\/ last string$/;"	v
s	demo/bits/debruijn-lookup-demo.cc	/^const ulong s = 32-5;$/;"	v
s	demo/bits/debruijn-lookup-demo.cc	/^const ulong s = 64-6;$/;"	v
s	demo/bits/debruijn-lookup-demo.cc	/^const ulong s = 8-3;$/;"	v
s	demo/perm/swap-blocks-demo.cc	/^const char s[]="01234abcde78wxyzNNN";$/;"	v
s	src/comb/attic/subset-monotone.h	/^    ulong s;$/;"	m	class:subset_monotone	access:protected
s	src/comb/partition-gen.o	/^ELF/;"	v
s	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
s0	src/perm/perminvert.cc	/^static const ulong s0 = ~s1;  \/\/ all bits but tag bit$/;"	v	file:
s1	src/fft/fft8difcore.cc	107;"	d	file:
s1	src/fft/fft8difcore.cc	125;"	d	file:
s1	src/fft/fft8difcore.cc	47;"	d	file:
s1	src/fft/fft8difcore.cc	65;"	d	file:
s1	src/fft/fft8ditcore.cc	111;"	d	file:
s1	src/fft/fft8ditcore.cc	129;"	d	file:
s1	src/fft/fft8ditcore.cc	49;"	d	file:
s1	src/fft/fft8ditcore.cc	67;"	d	file:
s1	src/perm/perminvert.cc	/^static const ulong s1 = 1UL << (BITS_PER_LONG - 1);  \/\/ highest bit is tag bit$/;"	v	file:
s1i	src/fft/fft8difcore.cc	206;"	d	file:
s1i	src/fft/fft8difcore.cc	230;"	d	file:
s1i	src/fft/fft8ditcore.cc	210;"	d	file:
s1i	src/fft/fft8ditcore.cc	236;"	d	file:
s1r	src/fft/fft8difcore.cc	187;"	d	file:
s1r	src/fft/fft8difcore.cc	225;"	d	file:
s1r	src/fft/fft8ditcore.cc	191;"	d	file:
s1r	src/fft/fft8ditcore.cc	231;"	d	file:
s2	src/fft/fft8difcore.cc	108;"	d	file:
s2	src/fft/fft8difcore.cc	126;"	d	file:
s2	src/fft/fft8difcore.cc	48;"	d	file:
s2	src/fft/fft8difcore.cc	66;"	d	file:
s2	src/fft/fft8ditcore.cc	112;"	d	file:
s2	src/fft/fft8ditcore.cc	130;"	d	file:
s2	src/fft/fft8ditcore.cc	50;"	d	file:
s2	src/fft/fft8ditcore.cc	68;"	d	file:
s2i	src/fft/fft8difcore.cc	207;"	d	file:
s2i	src/fft/fft8difcore.cc	231;"	d	file:
s2i	src/fft/fft8ditcore.cc	211;"	d	file:
s2i	src/fft/fft8ditcore.cc	237;"	d	file:
s2r	src/fft/fft8difcore.cc	188;"	d	file:
s2r	src/fft/fft8difcore.cc	226;"	d	file:
s2r	src/fft/fft8ditcore.cc	192;"	d	file:
s2r	src/fft/fft8ditcore.cc	232;"	d	file:
s3	src/fft/fft8difcore.cc	109;"	d	file:
s3	src/fft/fft8difcore.cc	127;"	d	file:
s3	src/fft/fft8difcore.cc	49;"	d	file:
s3	src/fft/fft8difcore.cc	67;"	d	file:
s3	src/fft/fft8ditcore.cc	113;"	d	file:
s3	src/fft/fft8ditcore.cc	131;"	d	file:
s3	src/fft/fft8ditcore.cc	51;"	d	file:
s3	src/fft/fft8ditcore.cc	69;"	d	file:
s3i	src/fft/fft8difcore.cc	208;"	d	file:
s3i	src/fft/fft8difcore.cc	232;"	d	file:
s3i	src/fft/fft8ditcore.cc	212;"	d	file:
s3i	src/fft/fft8ditcore.cc	238;"	d	file:
s3r	src/fft/fft8difcore.cc	189;"	d	file:
s3r	src/fft/fft8difcore.cc	227;"	d	file:
s3r	src/fft/fft8ditcore.cc	193;"	d	file:
s3r	src/fft/fft8ditcore.cc	233;"	d	file:
s4	src/fft/fft8difcore.cc	110;"	d	file:
s4	src/fft/fft8difcore.cc	128;"	d	file:
s4	src/fft/fft8difcore.cc	50;"	d	file:
s4	src/fft/fft8difcore.cc	68;"	d	file:
s4	src/fft/fft8ditcore.cc	114;"	d	file:
s4	src/fft/fft8ditcore.cc	132;"	d	file:
s4	src/fft/fft8ditcore.cc	52;"	d	file:
s4	src/fft/fft8ditcore.cc	70;"	d	file:
s4i	src/fft/fft8difcore.cc	209;"	d	file:
s4i	src/fft/fft8difcore.cc	233;"	d	file:
s4i	src/fft/fft8ditcore.cc	213;"	d	file:
s4i	src/fft/fft8ditcore.cc	239;"	d	file:
s4r	src/fft/fft8difcore.cc	190;"	d	file:
s4r	src/fft/fft8difcore.cc	228;"	d	file:
s4r	src/fft/fft8ditcore.cc	194;"	d	file:
s4r	src/fft/fft8ditcore.cc	234;"	d	file:
s_	src/bits/bitcombshifts.h	/^    ulong s_;  \/\/ how far shifted to the right$/;"	m	class:bit_comb_shifts	access:public
s_	src/comb/combination-chase.h	/^    ulong s_;  \/\/ == n_ - k_$/;"	m	class:combination_chase	access:public
s_	src/comb/combination-emk.h	/^    ulong *s_;  \/\/ aux: start of range for moves$/;"	m	class:combination_emk	access:public
s_	src/comb/combination-endo.h	/^    ulong *s_;  \/\/ aux: start of range for endo moves$/;"	m	class:combination_endo	access:public
s_	src/comb/combination-enup.h	/^    ulong *s_;  \/\/ aux: start of range for enup moves$/;"	m	class:combination_enup	access:public
s_	src/comb/combination-mod.h	/^    ulong *s_;  \/\/ aux: start of range for moves$/;"	m	class:combination_mod	access:public
s_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
s_	src/comb/composition-dist-unimodal.h	/^    ulong *s_;   \/\/ sorts of parts$/;"	m	class:composition_dist_unimodal	access:public
s_	src/comb/composition-nz-sorts.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts	access:public
s_	src/comb/composition-nz-sorts2-pp.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts2_pp	access:public
s_	src/comb/composition-nz-sorts2.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:composition_nz_sorts2	access:public
s_	src/comb/composition-unimodal.h	/^    ulong *s_;  \/\/ sorts of parts$/;"	m	class:composition_unimodal	access:public
s_	src/comb/dyck-gray2.h	/^    ulong *s_;     \/\/ directions: whether last\/first (==0) or$/;"	m	class:dyck_gray2	access:public
s_	src/comb/dyck-rgs.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:dyck_rgs	access:public
s_	src/comb/mixedradix-modular-gray.h	/^    ulong *s_;  \/\/ direction$/;"	m	class:mixedradix_modular_gray	access:public
s_	src/comb/mixedradix-sod-lex.h	/^    ulong s_;   \/\/ Sum of digits$/;"	m	class:mixedradix_sod_lex	access:public
s_	src/comb/motzkin-rgs-lex.h	/^    ulong * restrict s_;  \/\/ s[k]: how many consecutive increments up to position k$/;"	m	class:motzkin_rgs_lex	access:public
s_	src/comb/mpartition.h	/^    ulong *s_;  \/\/ aux: cumulative sums of x[]  (s[0]=0)$/;"	m	class:mpartition	access:public
s_	src/comb/paren-pref.h	/^    const ulong t_, s_;  \/\/ t: number of ones, s: number of zeros$/;"	m	class:paren_pref	access:public
s_	src/comb/partition-asc-perim.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_perim	access:public
s_	src/comb/partition-asc-sorts.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts	access:public
s_	src/comb/partition-asc-sorts2-pp.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts2_pp	access:public
s_	src/comb/partition-asc-sorts2.h	/^    ulong *s_;  \/\/ sorts of parts, 0 <= s_[j] <= ns1$/;"	m	class:partition_asc_sorts2	access:public
s_	src/comb/partition-binary-desc.h	/^    ulong s_;   \/\/ position of downstep where we can add:$/;"	m	class:partition_binary_desc	access:public
s_	src/comb/partition-desc-bb.h	/^    ulong s_;  \/\/ position of downstep where we can add 1:$/;"	m	class:partition_desc_bb	access:public
s_	src/comb/partition-desc.h	/^    ulong s_;  \/\/ position of downstep where we can add 1:$/;"	m	class:partition_desc	access:public
s_	src/comb/partition-odd-desc.h	/^    ulong s_;  \/\/ position of downstep where we can add 2:$/;"	m	class:partition_odd_desc	access:public
s_	src/comb/partition-s-desc.h	/^    ulong s_;    \/\/ position of downstep where we can add 1:$/;"	m	class:partition_s_desc	access:public
s_	src/comb/partition.h	/^    ulong *s_;  \/\/ cumulative sums:  s[j+1] = c[1]* 1 + c[2]* 2 + ... + c[j]* j$/;"	m	class:partition	access:public
s_	src/comb/rgs-fincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_fincr	access:public
s_	src/comb/rgs-kincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_kincr	access:public
s_	src/comb/rgs-maxincr.h	/^    ulong *s_;  \/\/ restricted growth string$/;"	m	class:rgs_maxincr	access:public
s_	src/comb/score-sequence.h	/^    ulong *s_;  \/\/ cumulative sums of a[]$/;"	m	class:score_sequence	access:public
s_	src/comb/setpart-p-rgs-lex.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_p_rgs_lex	access:public
s_	src/comb/setpart-rgs-gray.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_rgs_gray	access:public
s_	src/comb/setpart-rgs-lex.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_rgs_lex	access:public
s_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong s_;   \/\/ at most s places x with f(x)=y (y!=0) in RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
s_	src/ds/attic/priorityqueue1.h	/^    ulong s_;    \/\/ allocated size (# of elements)$/;"	m	class:priority_queue1	access:public
s_	src/ds/attic/rarray.h	/^    ulong  s_;  \/\/ size$/;"	m	class:rarray	access:public
s_	src/ds/attic/rset.h	/^    ulong  s_;  \/\/ size$/;"	m	class:rset	access:public
s_	src/ds/deque.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:deque	access:public
s_	src/ds/priorityqueue.h	/^    ulong s_;    \/\/ allocated size (# of elements)$/;"	m	class:priority_queue	access:public
s_	src/ds/queue.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:queue	access:public
s_	src/ds/ringbuffer.h	/^    ulong s_;   \/\/ allocated size (# of elements)$/;"	m	class:ringbuffer	access:public
s_	src/ds/stack.h	/^    ulong  s_;  \/\/ size$/;"	m	class:stack	access:public
same_parity	src/comb/composition-nz-gray.h	/^    bool same_parity(ulong x, ulong y)  const$/;"	f	class:composition_nz_gray	access:protected	signature:(ulong x, ulong y) const
same_q	demo/perm/ccf2perm-demo.cc	/^static inline bool same_q(const ulong *f, const ulong *g, ulong n)$/;"	f	file:	signature:(const ulong *f, const ulong *g, ulong n)
sample_down_linear	src/aux1/attic/resample.cc	/^sample_down_linear(const double *f, ulong nf, double v, double *g, ulong ng)$/;"	f	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
sample_down_linear	src/aux1/attic/resample.h	/^ulong sample_down_linear(const double *f, ulong nf, double v, double *g, ulong ng);$/;"	p	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
sample_up_linear	src/aux1/attic/resample.cc	/^sample_up_linear(const double *f, ulong nf, double v, double *g, ulong ng)$/;"	f	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
sample_up_linear	src/aux1/attic/resample.h	/^ulong sample_up_linear(const double *f, ulong nf, double v, double *g, ulong ng);$/;"	p	signature:(const double *f, ulong nf, double v, double *g, ulong ng)
sb_rec	demo/comb/naf-gray-rec-demo.cc	/^void sb_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
sb_rec	demo/comb/naf-pos-rec-demo.cc	/^void sb_rec(ulong d, bool z)$/;"	f	signature:(ulong d, bool z)
sbx_rec	demo/comb/naf-gray-rec-demo.cc	/^void sbx_rec(ulong d, bool z, int x)$/;"	f	signature:(ulong d, bool z, int x)
scalar_product	src/aux1/attic/norm.h	/^static inline Complex scalar_product(const Complex *f, const Complex *g, ulong n)$/;"	f	signature:(const Complex *f, const Complex *g, ulong n)
scalar_product	src/aux1/attic/norm.h	/^static inline double scalar_product(const double *f, const double *g, ulong n)$/;"	f	signature:(const double *f, const double *g, ulong n)
schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    explicit schroeder_path_lex(ulong n)$/;"	f	class:schroeder_path_lex	access:public	signature:(ulong n)
schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    schroeder_path_lex(const schroeder_path_lex&);  \/\/ forbidden$/;"	p	class:schroeder_path_lex	access:private	signature:(const schroeder_path_lex&)
schroeder_path_lex	src/comb/schroeder-path-lex.h	/^class schroeder_path_lex$/;"	c
schroeder_path_lex::a_	src/comb/schroeder-path-lex.h	/^    ulong *a_;$/;"	m	class:schroeder_path_lex	access:public
schroeder_path_lex::data	src/comb/schroeder-path-lex.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:schroeder_path_lex	access:public	signature:() const
schroeder_path_lex::first	src/comb/schroeder-path-lex.h	/^    void first()$/;"	f	class:schroeder_path_lex	access:public	signature:()
schroeder_path_lex::is_little_schroeder_path	src/comb/schroeder-path-lex.h	/^    bool is_little_schroeder_path()  const$/;"	f	class:schroeder_path_lex	access:public	signature:() const
schroeder_path_lex::n_	src/comb/schroeder-path-lex.h	/^    ulong n_;$/;"	m	class:schroeder_path_lex	access:public
schroeder_path_lex::next	src/comb/schroeder-path-lex.h	/^    ulong next()$/;"	f	class:schroeder_path_lex	access:public	signature:()
schroeder_path_lex::operator =	src/comb/schroeder-path-lex.h	/^    schroeder_path_lex & operator = (const schroeder_path_lex&);  \/\/ forbidden$/;"	p	class:schroeder_path_lex	access:private	signature:(const schroeder_path_lex&)
schroeder_path_lex::print	src/comb/schroeder-path-lex.h	/^    void print(const char *bla, bool dfz=false)$/;"	f	class:schroeder_path_lex	access:public	signature:(const char *bla, bool dfz=false)
schroeder_path_lex::schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    explicit schroeder_path_lex(ulong n)$/;"	f	class:schroeder_path_lex	access:public	signature:(ulong n)
schroeder_path_lex::schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    schroeder_path_lex(const schroeder_path_lex&);  \/\/ forbidden$/;"	p	class:schroeder_path_lex	access:private	signature:(const schroeder_path_lex&)
schroeder_path_lex::~schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    ~schroeder_path_lex()$/;"	f	class:schroeder_path_lex	access:public	signature:()
schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    explicit schroeder_rgs_lex(ulong n, ulong m0=1)$/;"	f	class:schroeder_rgs_lex	access:public	signature:(ulong n, ulong m0=1)
schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    schroeder_rgs_lex(const schroeder_rgs_lex&);  \/\/ forbidden$/;"	p	class:schroeder_rgs_lex	access:private	signature:(const schroeder_rgs_lex&)
schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^class schroeder_rgs_lex$/;"	c
schroeder_rgs_lex::OK	src/comb/schroeder-rgs-lex.h	/^    bool OK()  const$/;"	f	class:schroeder_rgs_lex	access:public	signature:() const
schroeder_rgs_lex::a_	src/comb/schroeder-rgs-lex.h	/^    ulong * restrict a_;  \/\/ digits of the RGS: a_[k] <= a[k-1] + 1$/;"	m	class:schroeder_rgs_lex	access:public
schroeder_rgs_lex::data	src/comb/schroeder-rgs-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:schroeder_rgs_lex	access:public	signature:() const
schroeder_rgs_lex::first	src/comb/schroeder-rgs-lex.h	/^    void first()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
schroeder_rgs_lex::m0_	src/comb/schroeder-rgs-lex.h	/^    ulong m0_;  \/\/ max of first digit:$/;"	m	class:schroeder_rgs_lex	access:public
schroeder_rgs_lex::m_	src/comb/schroeder-rgs-lex.h	/^    ulong * restrict m_;  \/\/ m[k]: maximum value in prefix a[0,...,k-1]$/;"	m	class:schroeder_rgs_lex	access:public
schroeder_rgs_lex::n_	src/comb/schroeder-rgs-lex.h	/^    ulong n_;   \/\/ number of digits$/;"	m	class:schroeder_rgs_lex	access:public
schroeder_rgs_lex::next	src/comb/schroeder-rgs-lex.h	/^    ulong next()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
schroeder_rgs_lex::operator =	src/comb/schroeder-rgs-lex.h	/^    schroeder_rgs_lex & operator = (const schroeder_rgs_lex&);  \/\/ forbidden$/;"	p	class:schroeder_rgs_lex	access:private	signature:(const schroeder_rgs_lex&)
schroeder_rgs_lex::print	src/comb/schroeder-rgs-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:schroeder_rgs_lex	access:public	signature:(const char *bla, bool dfz=true) const
schroeder_rgs_lex::schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    explicit schroeder_rgs_lex(ulong n, ulong m0=1)$/;"	f	class:schroeder_rgs_lex	access:public	signature:(ulong n, ulong m0=1)
schroeder_rgs_lex::schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    schroeder_rgs_lex(const schroeder_rgs_lex&);  \/\/ forbidden$/;"	p	class:schroeder_rgs_lex	access:private	signature:(const schroeder_rgs_lex&)
schroeder_rgs_lex::~schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    ~schroeder_rgs_lex()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
score_sequence	src/comb/score-sequence.h	/^    explicit score_sequence(ulong n)$/;"	f	class:score_sequence	access:public	signature:(ulong n)
score_sequence	src/comb/score-sequence.h	/^    score_sequence(const score_sequence&);  \/\/ forbidden$/;"	p	class:score_sequence	access:private	signature:(const score_sequence&)
score_sequence	src/comb/score-sequence.h	/^class score_sequence$/;"	c
score_sequence::OK	src/comb/score-sequence.h	/^    bool OK()  const$/;"	f	class:score_sequence	access:public	signature:() const
score_sequence::a_	src/comb/score-sequence.h	/^    ulong *a_;  \/\/ score sequence$/;"	m	class:score_sequence	access:public
score_sequence::data	src/comb/score-sequence.h	/^    const ulong *data()  const  { return a_ + 1; }$/;"	f	class:score_sequence	access:public	signature:() const
score_sequence::first	src/comb/score-sequence.h	/^    void first()$/;"	f	class:score_sequence	access:public	signature:()
score_sequence::n_	src/comb/score-sequence.h	/^    ulong n_;   \/\/ Number of digits (paren pairs)$/;"	m	class:score_sequence	access:public
score_sequence::next	src/comb/score-sequence.h	/^    ulong next()$/;"	f	class:score_sequence	access:public	signature:()
score_sequence::operator =	src/comb/score-sequence.h	/^    score_sequence & operator = (const score_sequence&);  \/\/ forbidden$/;"	p	class:score_sequence	access:private	signature:(const score_sequence&)
score_sequence::s_	src/comb/score-sequence.h	/^    ulong *s_;  \/\/ cumulative sums of a[]$/;"	m	class:score_sequence	access:public
score_sequence::score_sequence	src/comb/score-sequence.h	/^    explicit score_sequence(ulong n)$/;"	f	class:score_sequence	access:public	signature:(ulong n)
score_sequence::score_sequence	src/comb/score-sequence.h	/^    score_sequence(const score_sequence&);  \/\/ forbidden$/;"	p	class:score_sequence	access:private	signature:(const score_sequence&)
score_sequence::t_	src/comb/score-sequence.h	/^    ulong *t_;  \/\/ lower bounds on cumulative sums: t[k] = k*(k+1)\/2$/;"	m	class:score_sequence	access:public
score_sequence::try_write_tail	src/comb/score-sequence.h	/^    bool try_write_tail(ulong st, ulong j, ulong aj)$/;"	f	class:score_sequence	access:private	signature:(ulong st, ulong j, ulong aj)
score_sequence::~score_sequence	src/comb/score-sequence.h	/^    ~score_sequence()$/;"	f	class:score_sequence	access:public	signature:()
scream	src/perm/attic/cycles.cc	/^scream(const char *what)$/;"	f	file:	signature:(const char *what)
sct_	src/comb/perm-st-gray.h	/^    ulong sct_;  \/\/ count cyclic shifts$/;"	m	class:perm_st_gray	access:public
sd_	src/comb/partition-nonsquashing-desc.h	/^    ulong sd_;  \/\/ whether strongly decreasing (otherwise non-squashing)$/;"	m	class:partition_nonsquashing_desc	access:public
sdata	src/comb/composition-dist-unimodal.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_dist_unimodal	access:public	signature:() const
sdata	src/comb/composition-nz-sorts.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts	access:public	signature:() const
sdata	src/comb/composition-nz-sorts2-pp.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:() const
sdata	src/comb/composition-nz-sorts2.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_nz_sorts2	access:public	signature:() const
sdata	src/comb/composition-unimodal.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:composition_unimodal	access:public	signature:() const
sdata	src/comb/partition-asc-perim.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_perim	access:public	signature:() const
sdata	src/comb/partition-asc-sorts.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts	access:public	signature:() const
sdata	src/comb/partition-asc-sorts2-pp.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:() const
sdata	src/comb/partition-asc-sorts2.h	/^    const ulong * sdata()  const  { return  s_ + 1; }$/;"	f	class:partition_asc_sorts2	access:public	signature:() const
search	demo/comb/necklace-sigma-tau-demo.cc	/^void search(ulong y)$/;"	f	signature:(ulong y)
search	demo/graph/sta-graph-acgray-demo.cc	/^void search(ulong v, ulong b, ulong nv)$/;"	f	signature:(ulong v, ulong b, ulong nv)
search	demo/graph/sta-graph-macgray-demo.cc	/^void search(ulong v, ulong b, ulong nv)$/;"	f	signature:(ulong v, ulong b, ulong nv)
search	src/ds/attic/orderedrarray.h	/^    ulong search(const Type & v)  const$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v) const
search	src/ds/attic/rarray.h	/^    ulong search(const Type& x, ulong k=0)  const$/;"	f	class:rarray	access:public	signature:(const Type& x, ulong k=0) const
search	src/ds/attic/rset.h	/^    ulong search(const Type & x, ulong k=0)  const$/;"	f	class:rset	access:public	signature:(const Type & x, ulong k=0) const
search_down	src/sort/attic/searchdown.h	/^inline ulong search_down(const Type *f, const Type v, ulong &i)$/;"	f	signature:(const Type *f, const Type v, ulong &i)
search_down	src/sort/attic/searchdown.h	/^inline ulong search_down(const Type *f, const Type v, ulong &i,$/;"	f	signature:(const Type *f, const Type v, ulong &i, int (*cmp)(const Type &, const Type &))
search_geq	src/ds/attic/orderedrarray.h	/^    ulong search_geq(const Type & v)  const$/;"	f	class:ordered_rarray	access:public	signature:(const Type & v) const
search_unsorted	src/sort/attic/searchunsorted.h	/^ulong search_unsorted(const Type *f, ulong n, const Type v, ulong s=0)$/;"	f	signature:(const Type *f, ulong n, const Type v, ulong s=0)
search_unsorted_approx	src/sort/attic/searchunsorted.h	/^ulong search_unsorted_approx(const Type *f, ulong n, const Type v, Type da, ulong s=0)$/;"	f	signature:(const Type *f, ulong n, const Type v, Type da, ulong s=0)
search_unsorted_ge	src/sort/attic/searchunsorted.h	/^ulong search_unsorted_ge(const Type *f, ulong n, const Type v, ulong s=0)$/;"	f	signature:(const Type *f, ulong n, const Type v, ulong s=0)
selection_sort	doc/sort-doc.txt	/^void selection_sort(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
selection_sort	doc/sort-doc.txt	/^void selection_sort(Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
selection_sort	src/sort/attic/sort.h	/^void selection_sort(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
selection_sort	src/sort/sort.h	/^void selection_sort(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
selection_sort	src/sort/sortfunc.h	/^void selection_sort(Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
separator	doc/realfft-doc.txt	/^void separator(double *gr, double *gi, ulong n, int is); \/\/ aux$/;"	p	file:	signature:(double *gr, double *gi, ulong n, int is)
separator	src/realfft/realfft.h	/^void separator(double *gr, double *gi, ulong n, int is);  \/\/ aux$/;"	p	signature:(double *gr, double *gi, ulong n, int is)
separator	src/realfft/realfftbyfht.cc	/^separator(double *gr, double *gi, ulong n, int is)$/;"	f	signature:(double *gr, double *gi, ulong n, int is)
sequency	src/aux1/attic/misc.h	/^inline ulong sequency(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
set	src/aux1/attic/array.h	/^    void set(ulong k, Type v)  { f_[k]=v; }$/;"	f	class:array	access:public	signature:(ulong k, Type v)
set	src/bits/bitsubset.h	/^    void set(ulong u)  { U = u & V; }$/;"	f	class:bit_subset	access:public	signature:(ulong u)
set	src/ds/bitarray.h	/^    void set(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
set2bitset	doc/bits-doc.txt	/^static inline ulong set2bitset(const ulong *f, ulong n, ulong off=0);$/;"	p	file:	signature:(const ulong *f, ulong n, ulong off=0)
set2bitset	src/bits/bitset2set.h	/^static inline ulong set2bitset(const ulong *f, ulong n, ulong off=0)$/;"	f	signature:(const ulong *f, ulong n, ulong off=0)
set_a	src/bits/crc32.h	/^    void set_a(uint a)  { a_=a; }$/;"	f	class:crc32	access:public	signature:(uint a)
set_a	src/bits/crc64.h	/^    void set_a(uint64 a)  { a_=a; }$/;"	f	class:crc64	access:public	signature:(uint64 a)
set_a	src/bits/tcrc64.h	/^    void set_a(uint64 a)  { a_=a; }$/;"	f	class:tcrc64	access:public	signature:(uint64 a)
set_a	src/bpol/fcsr.h	/^    void set_a(ulong a)$/;"	f	class:fcsr	access:public	signature:(ulong a)
set_a	src/bpol/lfsr.h	/^    void set_a(ulong a)$/;"	f	class:lfsr	access:public	signature:(ulong a)
set_all	src/ds/bitarray.h	/^    void set_all()$/;"	f	class:bitarray	access:public	signature:()
set_all	src/ds/left-right-array.h	/^    void set_all()$/;"	f	class:left_right_array	access:public	signature:()
set_all_blocks_one	src/bits/bitsubset.h	/^    ulong set_all_blocks_one()  { U = (-V + ~V) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
set_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::set_all_maps(const std::vector<std::string> & maps)$/;"	f	class:lindenmayer_system	signature:(const std::vector<std::string> & maps)
set_all_maps	src/comb/lindenmayer-system.h	/^    bool set_all_maps(const std::vector<std::string> & maps);$/;"	p	class:lindenmayer_system	access:protected	signature:(const std::vector<std::string> & maps)
set_all_maps	src/comb/string-subst.cc	/^string_subst::set_all_maps(const char * const maps[], ulong nr)$/;"	f	class:string_subst	signature:(const char * const maps[], ulong nr)
set_all_maps	src/comb/string-subst.h	/^    bool set_all_maps(const char * const maps[], ulong nr);$/;"	p	class:string_subst	access:public	signature:(const char * const maps[], ulong nr)
set_axiom	src/comb/string-subst.cc	/^string_subst::set_axiom(const char * const ax)$/;"	f	class:string_subst	signature:(const char * const ax)
set_axiom	src/comb/string-subst.h	/^    bool set_axiom(const char * const ax);$/;"	p	class:string_subst	access:public	signature:(const char * const ax)
set_bit	doc/bits-doc.txt	/^static inline ulong set_bit(ulong a, ulong i);$/;"	p	file:	signature:(ulong a, ulong i)
set_bit	src/bits/bittest.h	/^static inline ulong set_bit(ulong a, ulong i)$/;"	f	signature:(ulong a, ulong i)
set_diag	src/matrix/matrix.h	/^    void set_diag(Type v)$/;"	f	class:matrix	access:public	signature:(Type v)
set_fail_action	src/aux0/jjassert.cc	/^set_fail_action(int a\/*=JJ_ASSERT_DEFAULT*\/)$/;"	f	signature:(int a )
set_fail_action	src/jjassert.h	/^void set_fail_action(int a=JJ_ASSERT_DEFAULT);$/;"	p	signature:(int a=JJ_ASSERT_DEFAULT)
set_highest_zero	doc/bits-doc.txt	/^static inline ulong set_highest_zero(ulong x);$/;"	p	file:	signature:(ulong x)
set_highest_zero	src/bits/bithigh.h	/^static inline ulong set_highest_zero(ulong x)$/;"	f	signature:(ulong x)
set_len	src/comb/word-stats.h	/^    void set_len(ulong m)$/;"	f	class:word_stats	access:public	signature:(ulong m)
set_lowest_zero	doc/bits-doc.txt	/^static inline ulong set_lowest_zero(ulong x);$/;"	p	file:	signature:(ulong x)
set_lowest_zero	src/bits/bitlow.h	/^static inline ulong set_lowest_zero(ulong x)$/;"	f	signature:(ulong x)
set_lt	demo/fft/butterfly-texpic-demo.cc	/^void set_lt(bool pm)$/;"	f	signature:(bool pm)
set_normal	src/bpol/gf2n.h	/^    ulong set_normal(ulong r)  { v_ = n2p(r);  return v_; }$/;"	f	class:GF2n	access:public	signature:(ulong r)
set_right_block_borders	src/bits/bitsubset.h	/^    ulong set_right_block_borders()  { U |= ( (-V + ~V) & V );  return U; }$/;"	f	class:bit_subset	access:public	signature:()
set_sentinels	src/comb/mixedradix-naf-gray.h	/^    void set_sentinels()$/;"	f	class:mixedradix_naf_gray	access:private	signature:()
set_sentinels	src/comb/mixedradix-naf.h	/^    void set_sentinels()$/;"	f	class:mixedradix_naf	access:private	signature:()
set_seq	doc/aux1-doc.txt	/^inline void set_seq(Type *dst, ulong n, Type start=0, Type step=1);$/;"	p	file:	signature:(Type *dst, ulong n, Type start=0, Type step=1)
set_seq	src/aux1/copy.h	/^inline void set_seq(Type *dst, ulong n, Type start=0, Type step=1)$/;"	f	signature:(Type *dst, ulong n, Type start=0, Type step=1)
set_w	src/bpol/lfsr.h	/^    void set_w(ulong w)$/;"	f	class:lfsr	access:public	signature:(ulong w)
set_w	src/bpol/lfsr64.h	/^    void set_w(unsigned long long  w)$/;"	f	class:lfsr64	access:public	signature:(unsigned long long w)
setpart	src/comb/setpart.h	/^    explicit setpart(int n, bool xdr=true, int dr0=+1)$/;"	f	class:setpart	access:public	signature:(int n, bool xdr=true, int dr0=+1)
setpart	src/comb/setpart.h	/^    setpart(const setpart&);  \/\/ forbidden$/;"	p	class:setpart	access:private	signature:(const setpart&)
setpart	src/comb/setpart.h	/^class setpart$/;"	c
setpart::as_	src/comb/setpart.h	/^    int *as_;   \/\/ element k attached At Set (0<=as[k]<=k) of set(k-1)$/;"	m	class:setpart	access:public
setpart::cp_append	src/comb/setpart.cc	/^setpart::cp_append(const int *src, int *dst, int k, int a)$/;"	f	class:setpart	signature:(const int *src, int *dst, int k, int a)
setpart::cp_append	src/comb/setpart.h	/^    int cp_append(const int *src, int *dst, int k, int a);$/;"	p	class:setpart	access:protected	signature:(const int *src, int *dst, int k, int a)
setpart::d_	src/comb/setpart.h	/^    int *d_;    \/\/ direction with recursion (+1 or -1)$/;"	m	class:setpart	access:public
setpart::data	src/comb/setpart.h	/^    const int* data()  const  { return x_; }$/;"	f	class:setpart	access:public	signature:() const
setpart::dr0_	src/comb/setpart.h	/^    int dr0_;   \/\/ dr0: starting direction in each recursive step:$/;"	m	class:setpart	access:public
setpart::first	src/comb/setpart.cc	/^setpart::first(bool xdr, int dr0)$/;"	f	class:setpart	signature:(bool xdr, int dr0)
setpart::first	src/comb/setpart.h	/^    void first(bool xdr, int dr0);$/;"	p	class:setpart	access:public	signature:(bool xdr, int dr0)
setpart::n_	src/comb/setpart.h	/^    int n_;     \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart	access:public
setpart::next	src/comb/setpart.h	/^    bool next()  { return next_rec(n_); }$/;"	f	class:setpart	access:public	signature:()
setpart::next_rec	src/comb/setpart.cc	/^setpart::next_rec(int k)$/;"	f	class:setpart	signature:(int k)
setpart::next_rec	src/comb/setpart.h	/^    int next_rec(int k);$/;"	p	class:setpart	access:protected	signature:(int k)
setpart::ns_	src/comb/setpart.h	/^    int *ns_;   \/\/ ns[k] Number of Sets in set partition k$/;"	m	class:setpart	access:public
setpart::operator =	src/comb/setpart.h	/^    setpart & operator = (const setpart&);  \/\/ forbidden$/;"	p	class:setpart	access:private	signature:(const setpart&)
setpart::p_	src/comb/setpart.h	/^    int *p_;    \/\/ p[] contains set partitions of length 1,2,3,...,n$/;"	m	class:setpart	access:public
setpart::pp_	src/comb/setpart.h	/^    int **pp_;  \/\/ pp[k] points to start of set partition k$/;"	m	class:setpart	access:public
setpart::print	src/comb/setpart.h	/^    int print()  const$/;"	f	class:setpart	access:public	signature:() const
setpart::print_internal	src/comb/setpart.cc	/^setpart::print_internal()  const$/;"	f	class:setpart	signature:() const
setpart::print_internal	src/comb/setpart.h	/^    void print_internal()  const;  \/\/ print internal state$/;"	p	class:setpart	access:public	signature:() const
setpart::print_p	src/comb/setpart.cc	/^setpart::print_p(int k)  const$/;"	f	class:setpart	signature:(int k) const
setpart::print_p	src/comb/setpart.h	/^    int print_p(int k)  const;$/;"	p	class:setpart	access:public	signature:(int k) const
setpart::setpart	src/comb/setpart.h	/^    explicit setpart(int n, bool xdr=true, int dr0=+1)$/;"	f	class:setpart	access:public	signature:(int n, bool xdr=true, int dr0=+1)
setpart::setpart	src/comb/setpart.h	/^    setpart(const setpart&);  \/\/ forbidden$/;"	p	class:setpart	access:private	signature:(const setpart&)
setpart::x_	src/comb/setpart.h	/^    int *x_;    \/\/ current set partition (==pp[n])$/;"	m	class:setpart	access:public
setpart::xdr_	src/comb/setpart.h	/^    bool xdr_;  \/\/ whether to change direction in recursion (==> minimal-change order)$/;"	m	class:setpart	access:public
setpart::~setpart	src/comb/setpart.h	/^    ~setpart()$/;"	f	class:setpart	access:public	signature:()
setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    explicit setpart_ccf_rgs_lex(ulong n)$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:(ulong n)
setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    setpart_ccf_rgs_lex(const setpart_ccf_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_ccf_rgs_lex	access:private	signature:(const setpart_ccf_rgs_lex&)
setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^class setpart_ccf_rgs_lex$/;"	c
setpart_ccf_rgs_lex::OK	src/comb/setpart-ccf-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:() const
setpart_ccf_rgs_lex::a_	src/comb/setpart-ccf-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_ccf_rgs_lex	access:public
setpart_ccf_rgs_lex::data	src/comb/setpart-ccf-rgs-lex.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:() const
setpart_ccf_rgs_lex::first	src/comb/setpart-ccf-rgs-lex.h	/^    void first()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
setpart_ccf_rgs_lex::n_	src/comb/setpart-ccf-rgs-lex.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_ccf_rgs_lex	access:public
setpart_ccf_rgs_lex::next	src/comb/setpart-ccf-rgs-lex.h	/^    ulong next()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
setpart_ccf_rgs_lex::operator =	src/comb/setpart-ccf-rgs-lex.h	/^    setpart_ccf_rgs_lex & operator = (const setpart_ccf_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_ccf_rgs_lex	access:private	signature:(const setpart_ccf_rgs_lex&)
setpart_ccf_rgs_lex::print	src/comb/setpart-ccf-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
setpart_ccf_rgs_lex::setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    explicit setpart_ccf_rgs_lex(ulong n)$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:(ulong n)
setpart_ccf_rgs_lex::setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    setpart_ccf_rgs_lex(const setpart_ccf_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_ccf_rgs_lex	access:private	signature:(const setpart_ccf_rgs_lex&)
setpart_ccf_rgs_lex::~setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    ~setpart_ccf_rgs_lex()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    explicit setpart_ck_rgs(ulong n)$/;"	f	class:setpart_ck_rgs	access:public	signature:(ulong n)
setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    setpart_ck_rgs(const setpart_ck_rgs&);  \/\/ forbidden$/;"	p	class:setpart_ck_rgs	access:private	signature:(const setpart_ck_rgs&)
setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^class setpart_ck_rgs$/;"	c
setpart_ck_rgs::OK	src/comb/setpart-ck-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_ck_rgs	access:public	signature:() const
setpart_ck_rgs::a_	src/comb/setpart-ck-rgs.h	/^    ulong *a_;  \/\/ Cooper-Kennedy RGS$/;"	m	class:setpart_ck_rgs	access:public
setpart_ck_rgs::data	src/comb/setpart-ck-rgs.h	/^    const ulong * data()  const  { return  a_; }$/;"	f	class:setpart_ck_rgs	access:public	signature:() const
setpart_ck_rgs::first	src/comb/setpart-ck-rgs.h	/^    void first()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
setpart_ck_rgs::m_	src/comb/setpart-ck-rgs.h	/^    ulong m_; \/\/ number of non-zero digits$/;"	m	class:setpart_ck_rgs	access:public
setpart_ck_rgs::make_setpart_rgs	src/comb/setpart-ck-rgs.h	/^    void make_setpart_rgs(ulong *y)  const$/;"	f	class:setpart_ck_rgs	access:public	signature:(ulong *y) const
setpart_ck_rgs::n_	src/comb/setpart-ck-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_ck_rgs	access:public
setpart_ck_rgs::next	src/comb/setpart-ck-rgs.h	/^    ulong next()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
setpart_ck_rgs::nz_	src/comb/setpart-ck-rgs.h	/^    ulong *nz_; \/\/ ordered list of non-zero digits in a[0,1,...,m-1]$/;"	m	class:setpart_ck_rgs	access:public
setpart_ck_rgs::operator =	src/comb/setpart-ck-rgs.h	/^    setpart_ck_rgs & operator = (const setpart_ck_rgs&);  \/\/ forbidden$/;"	p	class:setpart_ck_rgs	access:private	signature:(const setpart_ck_rgs&)
setpart_ck_rgs::print	src/comb/setpart-ck-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_ck_rgs	access:public	signature:(const char *bla, bool dfz=false) const
setpart_ck_rgs::setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    explicit setpart_ck_rgs(ulong n)$/;"	f	class:setpart_ck_rgs	access:public	signature:(ulong n)
setpart_ck_rgs::setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    setpart_ck_rgs(const setpart_ck_rgs&);  \/\/ forbidden$/;"	p	class:setpart_ck_rgs	access:private	signature:(const setpart_ck_rgs&)
setpart_ck_rgs::~setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    ~setpart_ck_rgs()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    explicit setpart_p_rgs_lex(ulong n, ulong p)$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(ulong n, ulong p)
setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    setpart_p_rgs_lex(const setpart_p_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_p_rgs_lex	access:private	signature:(const setpart_p_rgs_lex&)
setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^class setpart_p_rgs_lex$/;"	c
setpart_p_rgs_lex::OK	src/comb/setpart-p-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:() const
setpart_p_rgs_lex::data	src/comb/setpart-p-rgs-lex.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_p_rgs_lex	access:public	signature:() const
setpart_p_rgs_lex::first	src/comb/setpart-p-rgs-lex.h	/^    void first(ulong p)$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(ulong p)
setpart_p_rgs_lex::m_	src/comb/setpart-p-rgs-lex.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1],..., s[k]) + 1$/;"	m	class:setpart_p_rgs_lex	access:public
setpart_p_rgs_lex::n_	src/comb/setpart-p-rgs-lex.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_p_rgs_lex	access:public
setpart_p_rgs_lex::next	src/comb/setpart-p-rgs-lex.h	/^    bool next()$/;"	f	class:setpart_p_rgs_lex	access:public	signature:()
setpart_p_rgs_lex::operator =	src/comb/setpart-p-rgs-lex.h	/^    setpart_p_rgs_lex & operator = (const setpart_p_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_p_rgs_lex	access:private	signature:(const setpart_p_rgs_lex&)
setpart_p_rgs_lex::p_	src/comb/setpart-p-rgs-lex.h	/^    ulong p_;    \/\/ Exactly p subsets$/;"	m	class:setpart_p_rgs_lex	access:public
setpart_p_rgs_lex::print	src/comb/setpart-p-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
setpart_p_rgs_lex::print_sets	src/comb/setpart-p-rgs-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(const char *bla, ulong off=1) const
setpart_p_rgs_lex::s_	src/comb/setpart-p-rgs-lex.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_p_rgs_lex	access:public
setpart_p_rgs_lex::setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    explicit setpart_p_rgs_lex(ulong n, ulong p)$/;"	f	class:setpart_p_rgs_lex	access:public	signature:(ulong n, ulong p)
setpart_p_rgs_lex::setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    setpart_p_rgs_lex(const setpart_p_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_p_rgs_lex	access:private	signature:(const setpart_p_rgs_lex&)
setpart_p_rgs_lex::~setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    ~setpart_p_rgs_lex()$/;"	f	class:setpart_p_rgs_lex	access:public	signature:()
setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    explicit setpart_rgs_gray(ulong n, int dr0=+1)$/;"	f	class:setpart_rgs_gray	access:public	signature:(ulong n, int dr0=+1)
setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    setpart_rgs_gray(const setpart_rgs_gray&);  \/\/ forbidden$/;"	p	class:setpart_rgs_gray	access:private	signature:(const setpart_rgs_gray&)
setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^class setpart_rgs_gray$/;"	c
setpart_rgs_gray::OK	src/comb/setpart-rgs-gray.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
setpart_rgs_gray::d_	src/comb/setpart-rgs-gray.h	/^    ulong *d_;   \/\/ direction with recursion (+1 or -1)$/;"	m	class:setpart_rgs_gray	access:public
setpart_rgs_gray::data	src/comb/setpart-rgs-gray.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
setpart_rgs_gray::first	src/comb/setpart-rgs-gray.h	/^    void first(int dr0)$/;"	f	class:setpart_rgs_gray	access:public	signature:(int dr0)
setpart_rgs_gray::m_	src/comb/setpart-rgs-gray.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1],..., s[k]) + 1$/;"	m	class:setpart_rgs_gray	access:public
setpart_rgs_gray::n_	src/comb/setpart-rgs-gray.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_rgs_gray	access:public
setpart_rgs_gray::next	src/comb/setpart-rgs-gray.h	/^    bool next()$/;"	f	class:setpart_rgs_gray	access:public	signature:()
setpart_rgs_gray::num_sets	src/comb/setpart-rgs-gray.h	/^    ulong num_sets()  const  { return ( n_ ? m_[n_] : 0 ); }$/;"	f	class:setpart_rgs_gray	access:public	signature:() const
setpart_rgs_gray::operator =	src/comb/setpart-rgs-gray.h	/^    setpart_rgs_gray & operator = (const setpart_rgs_gray&);  \/\/ forbidden$/;"	p	class:setpart_rgs_gray	access:private	signature:(const setpart_rgs_gray&)
setpart_rgs_gray::print	src/comb/setpart-rgs-gray.cc	/^setpart_rgs_gray::print()  const$/;"	f	class:setpart_rgs_gray	signature:() const
setpart_rgs_gray::print	src/comb/setpart-rgs-gray.h	/^    void print()  const;  \/\/ used in fxtbook$/;"	p	class:setpart_rgs_gray	access:public	signature:() const
setpart_rgs_gray::print	src/comb/setpart-rgs-gray.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:setpart_rgs_gray	access:public	signature:(const char *bla, bool dfz=true) const
setpart_rgs_gray::print_set	src/comb/setpart-rgs-gray.h	/^    void print_set(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_gray	access:public	signature:(const char *bla, ulong off=1) const
setpart_rgs_gray::s_	src/comb/setpart-rgs-gray.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_rgs_gray	access:public
setpart_rgs_gray::setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    explicit setpart_rgs_gray(ulong n, int dr0=+1)$/;"	f	class:setpart_rgs_gray	access:public	signature:(ulong n, int dr0=+1)
setpart_rgs_gray::setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    setpart_rgs_gray(const setpart_rgs_gray&);  \/\/ forbidden$/;"	p	class:setpart_rgs_gray	access:private	signature:(const setpart_rgs_gray&)
setpart_rgs_gray::~setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    ~setpart_rgs_gray()$/;"	f	class:setpart_rgs_gray	access:public	signature:()
setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    explicit setpart_rgs_lex(ulong n)$/;"	f	class:setpart_rgs_lex	access:public	signature:(ulong n)
setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    setpart_rgs_lex(const setpart_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_lex	access:private	signature:(const setpart_rgs_lex&)
setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^class setpart_rgs_lex$/;"	c
setpart_rgs_lex::OK	src/comb/setpart-rgs-lex.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
setpart_rgs_lex::data	src/comb/setpart-rgs-lex.h	/^    const ulong* data()  const  { return s_; }$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
setpart_rgs_lex::first	src/comb/setpart-rgs-lex.h	/^    void first()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
setpart_rgs_lex::last	src/comb/setpart-rgs-lex.h	/^    void last()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
setpart_rgs_lex::m_	src/comb/setpart-rgs-lex.h	/^    ulong *m_;   \/\/ m[k+1] = max(s[0], s[1], ..., s[k]) + 1$/;"	m	class:setpart_rgs_lex	access:public
setpart_rgs_lex::n_	src/comb/setpart-rgs-lex.h	/^    ulong n_;    \/\/ Number of elements of set (set = {1,2,3,...,n})$/;"	m	class:setpart_rgs_lex	access:public
setpart_rgs_lex::next	src/comb/setpart-rgs-lex.h	/^    bool next()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
setpart_rgs_lex::num_sets	src/comb/setpart-rgs-lex.h	/^    ulong num_sets()  const  { return ( n_ ? m_[n_] : 0 ); }$/;"	f	class:setpart_rgs_lex	access:public	signature:() const
setpart_rgs_lex::operator =	src/comb/setpart-rgs-lex.h	/^    setpart_rgs_lex & operator = (const setpart_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_lex	access:private	signature:(const setpart_rgs_lex&)
setpart_rgs_lex::prev	src/comb/setpart-rgs-lex.h	/^    bool prev()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
setpart_rgs_lex::print	src/comb/setpart-rgs-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_rgs_lex	access:public	signature:(const char *bla, bool dfz=false) const
setpart_rgs_lex::print_sets	src/comb/setpart-rgs-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_lex	access:public	signature:(const char *bla, ulong off=1) const
setpart_rgs_lex::s_	src/comb/setpart-rgs-lex.h	/^    ulong *s_;   \/\/ RGS$/;"	m	class:setpart_rgs_lex	access:public
setpart_rgs_lex::setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    explicit setpart_rgs_lex(ulong n)$/;"	f	class:setpart_rgs_lex	access:public	signature:(ulong n)
setpart_rgs_lex::setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    setpart_rgs_lex(const setpart_rgs_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_lex	access:private	signature:(const setpart_rgs_lex&)
setpart_rgs_lex::~setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    ~setpart_rgs_lex()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    explicit setpart_rgs_subset_lex(ulong n)$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(ulong n)
setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    setpart_rgs_subset_lex(const setpart_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_subset_lex	access:private	signature:(const setpart_rgs_subset_lex&)
setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^class setpart_rgs_subset_lex$/;"	c
setpart_rgs_subset_lex::OK	src/comb/setpart-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
setpart_rgs_subset_lex::a_	src/comb/setpart-rgs-subset-lex.h	/^    ulong *a_;  \/\/ digits of the RGS$/;"	m	class:setpart_rgs_subset_lex	access:public
setpart_rgs_subset_lex::data	src/comb/setpart-rgs-subset-lex.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
setpart_rgs_subset_lex::first	src/comb/setpart-rgs-subset-lex.h	/^    void first()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
setpart_rgs_subset_lex::last	src/comb/setpart-rgs-subset-lex.h	/^    void last()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
setpart_rgs_subset_lex::m_	src/comb/setpart-rgs-subset-lex.h	/^    ulong *m_;  \/\/ maximum + 1 in prefix (only maitained for m[0, 1, ..., tr])$/;"	m	class:setpart_rgs_subset_lex	access:public
setpart_rgs_subset_lex::n_	src/comb/setpart-rgs-subset-lex.h	/^    ulong n_;   \/\/ Number of digits in RGS$/;"	m	class:setpart_rgs_subset_lex	access:public
setpart_rgs_subset_lex::next	src/comb/setpart-rgs-subset-lex.h	/^    bool next()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
setpart_rgs_subset_lex::num_sets	src/comb/setpart-rgs-subset-lex.h	/^    ulong num_sets()  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:() const
setpart_rgs_subset_lex::operator =	src/comb/setpart-rgs-subset-lex.h	/^    setpart_rgs_subset_lex & operator = (const setpart_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_subset_lex	access:private	signature:(const setpart_rgs_subset_lex&)
setpart_rgs_subset_lex::prev	src/comb/setpart-rgs-subset-lex.h	/^    bool prev()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
setpart_rgs_subset_lex::print	src/comb/setpart-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=false) const
setpart_rgs_subset_lex::print_sets	src/comb/setpart-rgs-subset-lex.h	/^    void print_sets(const char *bla, ulong off=1)  const$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(const char *bla, ulong off=1) const
setpart_rgs_subset_lex::setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    explicit setpart_rgs_subset_lex(ulong n)$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:(ulong n)
setpart_rgs_subset_lex::setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    setpart_rgs_subset_lex(const setpart_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:setpart_rgs_subset_lex	access:private	signature:(const setpart_rgs_subset_lex&)
setpart_rgs_subset_lex::tr_	src/comb/setpart-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:setpart_rgs_subset_lex	access:public
setpart_rgs_subset_lex::~setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    ~setpart_rgs_subset_lex()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    explicit setpart_s_zero_map_rgs(ulong n, ulong s)$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(ulong n, ulong s)
setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    setpart_s_zero_map_rgs(const setpart_s_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_s_zero_map_rgs	access:private	signature:(const setpart_s_zero_map_rgs&)
setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^class setpart_s_zero_map_rgs$/;"	c
setpart_s_zero_map_rgs::OK	src/comb/setpart-s-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:() const
setpart_s_zero_map_rgs::a_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
setpart_s_zero_map_rgs::data	src/comb/setpart-s-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:() const
setpart_s_zero_map_rgs::first	src/comb/setpart-s-zero-map-rgs.h	/^    void first()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
setpart_s_zero_map_rgs::n_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
setpart_s_zero_map_rgs::next	src/comb/setpart-s-zero-map-rgs.h	/^    ulong next()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
setpart_s_zero_map_rgs::operator =	src/comb/setpart-s-zero-map-rgs.h	/^    setpart_s_zero_map_rgs & operator = (const setpart_s_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_s_zero_map_rgs	access:private	signature:(const setpart_s_zero_map_rgs&)
setpart_s_zero_map_rgs::print	src/comb/setpart-s-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
setpart_s_zero_map_rgs::print_fp_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=true, bool zb=true)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=true, bool zb=true) const
setpart_s_zero_map_rgs::print_setpart	src/comb/setpart-s-zero-map-rgs.h	/^    void print_setpart(const char *bla, bool zb=false)  const$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(const char *bla, bool zb=false) const
setpart_s_zero_map_rgs::s_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong s_;   \/\/ at most s places x with f(x)=y (y!=0) in RGS$/;"	m	class:setpart_s_zero_map_rgs	access:public
setpart_s_zero_map_rgs::setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    explicit setpart_s_zero_map_rgs(ulong n, ulong s)$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:(ulong n, ulong s)
setpart_s_zero_map_rgs::setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    setpart_s_zero_map_rgs(const setpart_s_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_s_zero_map_rgs	access:private	signature:(const setpart_s_zero_map_rgs&)
setpart_s_zero_map_rgs::z_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong *z_;  \/\/ for non-zero values y: number of x with f(x)=y$/;"	m	class:setpart_s_zero_map_rgs	access:public
setpart_s_zero_map_rgs::~setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    ~setpart_s_zero_map_rgs()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    explicit setpart_zero_map_rgs(ulong n)$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(ulong n)
setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    setpart_zero_map_rgs(const setpart_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_zero_map_rgs	access:private	signature:(const setpart_zero_map_rgs&)
setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^class setpart_zero_map_rgs$/;"	c
setpart_zero_map_rgs::OK	src/comb/setpart-zero-map-rgs.h	/^    bool OK()  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:() const
setpart_zero_map_rgs::a_	src/comb/setpart-zero-map-rgs.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:setpart_zero_map_rgs	access:public
setpart_zero_map_rgs::data	src/comb/setpart-zero-map-rgs.h	/^    const ulong * data()  const  { return  a_ + 1; }$/;"	f	class:setpart_zero_map_rgs	access:public	signature:() const
setpart_zero_map_rgs::first	src/comb/setpart-zero-map-rgs.h	/^    void first()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
setpart_zero_map_rgs::n_	src/comb/setpart-zero-map-rgs.h	/^    ulong n_;   \/\/ length of RGS$/;"	m	class:setpart_zero_map_rgs	access:public
setpart_zero_map_rgs::next	src/comb/setpart-zero-map-rgs.h	/^    ulong next()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
setpart_zero_map_rgs::operator =	src/comb/setpart-zero-map-rgs.h	/^    setpart_zero_map_rgs & operator = (const setpart_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_zero_map_rgs	access:private	signature:(const setpart_zero_map_rgs&)
setpart_zero_map_rgs::print	src/comb/setpart-zero-map-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false) const
setpart_zero_map_rgs::print_fp_rgs	src/comb/setpart-zero-map-rgs.h	/^    void print_fp_rgs(const char *bla, bool dfz=false, bool zb=true)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool dfz=false, bool zb=true) const
setpart_zero_map_rgs::print_setpart	src/comb/setpart-zero-map-rgs.h	/^    void print_setpart(const char *bla, bool zb=false)  const$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(const char *bla, bool zb=false) const
setpart_zero_map_rgs::setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    explicit setpart_zero_map_rgs(ulong n)$/;"	f	class:setpart_zero_map_rgs	access:public	signature:(ulong n)
setpart_zero_map_rgs::setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    setpart_zero_map_rgs(const setpart_zero_map_rgs&);  \/\/ forbidden$/;"	p	class:setpart_zero_map_rgs	access:private	signature:(const setpart_zero_map_rgs&)
setpart_zero_map_rgs::~setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    ~setpart_zero_map_rgs()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
setup	src/comb/attic/stringsubst.h	/^    void setup(ulong cmax, ulong nsym, const char ** symrule)$/;"	f	class:string_subst	access:private	signature:(ulong cmax, ulong nsym, const char ** symrule)
setup	src/comb/cyclic-perm.h	/^    void setup()$/;"	f	class:cyclic_perm	access:private	signature:()
setup_bc_tab	demo/graph/graph-monotonicgray-demo.cc	/^void setup_bc_tab(ulong n)$/;"	f	signature:(ulong n)
setup_q_matrix	doc/bpol-doc.txt	/^void setup_q_matrix(ulong c, ulong d, ulong *ss);$/;"	p	file:	signature:(ulong c, ulong d, ulong *ss)
setup_q_matrix	src/bpol/berlekamp.cc	/^setup_q_matrix(ulong c, ulong d, ulong *ss)$/;"	f	signature:(ulong c, ulong d, ulong *ss)
setup_q_matrix	src/bpol/bitpol-factor.h	/^void setup_q_matrix(ulong c, ulong d, ulong *ss);$/;"	p	signature:(ulong c, ulong d, ulong *ss)
setup_rot_mat	demo/comb/string-subst-hilbert3d-demo.cc	/^setup_rot_mat()$/;"	f	signature:()
sgcd	src/aux0/attic/gcd.cc	/^sgcd(long a, long b)$/;"	f	signature:(long a, long b)
shift	src/aux1/attic/array.h	/^    void shift(long s)  { ::shift_sgn(f_, n_, s); }$/;"	f	class:array	access:public	signature:(long s)
shift	src/bits/crc32.h	/^    void shift()$/;"	f	class:crc32	access:public	signature:()
shift	src/bits/crc64.h	/^    void shift()$/;"	f	class:crc64	access:public	signature:()
shift	src/bits/tcrc64.h	/^    void shift()$/;"	f	class:tcrc64	access:public	signature:()
shift_down	src/aux2/attic/shift2d.h	/^void shift_down(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
shift_horiz	src/aux2/attic/shift2d.h	/^void shift_horiz(Type **f, ulong nr, ulong nc, long s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long s)
shift_left	src/aux1/attic/array.h	/^    void shift_left(ulong r)  { ::shift_left(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
shift_left	src/aux1/attic/shift.h	/^inline void shift_left(Type *f, ulong n, ulong s)$/;"	f	signature:(Type *f, ulong n, ulong s)
shift_left	src/aux2/attic/shift2d.h	/^void shift_left(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
shift_left	src/bits/bitsubset.h	/^    ulong shift_left()  { U = ( (U << 1) + ~V ) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
shift_left1	src/aux1/attic/shift.h	/^inline void shift_left1(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
shift_left_blocks	src/bits/bitsubset.h	/^    ulong shift_left_blocks()  { U = ( U << 1 ) & V;  return U; }$/;"	f	class:bit_subset	access:public	signature:()
shift_left_blocks_fill	src/bits/bitsubset.h	/^    ulong shift_left_blocks_fill()  { shift_left_blocks();  U |= ((-V + ~V) & V);  return U; }$/;"	f	class:bit_subset	access:public	signature:()
shift_left_fill	src/bits/bitsubset.h	/^    ulong shift_left_fill()  { shift_left();  next();  return U; }$/;"	f	class:bit_subset	access:public	signature:()
shift_right	src/aux1/attic/array.h	/^    void shift_right(ulong r)  { ::shift_right(f_, n_, r); }$/;"	f	class:array	access:public	signature:(ulong r)
shift_right	src/aux1/attic/shift.h	/^inline void shift_right(Type *f, ulong n, ulong s)$/;"	f	signature:(Type *f, ulong n, ulong s)
shift_right	src/aux2/attic/shift2d.h	/^void shift_right(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
shift_right1	src/aux1/attic/shift.h	/^inline void shift_right1(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
shift_up	src/aux2/attic/shift2d.h	/^void shift_up(Type **f, ulong nr, ulong nc, ulong s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, ulong s)
shift_vert	src/aux2/attic/shift2d.h	/^void shift_vert(Type **f, ulong nr, ulong nc, long s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long s)
shift_vh	src/aux2/attic/shift2d.h	/^void shift_vh(Type **f, ulong nr, ulong nc, long vert, long horiz)$/;"	f	signature:(Type **f, ulong nr, ulong nc, long vert, long horiz)
shiftadd_exp	demo/arith/shiftadd-exp-demo.cc	/^shiftadd_exp(double x, ulong n)$/;"	f	signature:(double x, ulong n)
shiftadd_log	demo/arith/shiftadd-log-demo.cc	/^shiftadd_log(double x, ulong n)$/;"	f	signature:(double x, ulong n)
shiftadd_ltab	demo/arith/shiftadd-exp-demo.cc	/^double *shiftadd_ltab;$/;"	v
shiftadd_ltab	demo/arith/shiftadd-log-demo.cc	/^double *shiftadd_ltab;  \/\/ element [0] unused$/;"	v
short_walsh_wak_dif_16	doc/walsh-doc.txt	/^inline void short_walsh_wak_dif_16(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dif_16	doc/walsh-doc.txt	/^inline void short_walsh_wak_dif_16(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dif_16	src/walsh/shortwalshwakdif.h	/^inline void short_walsh_wak_dif_16(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dif_16	src/walsh/shortwalshwakdif.h	/^inline void short_walsh_wak_dif_16(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dif_2	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dif_2(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dif_2	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dif_2(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dif_2	src/walsh/shortwalshwakdif.h	/^static inline void short_walsh_wak_dif_2(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dif_2	src/walsh/shortwalshwakdif.h	/^static inline void short_walsh_wak_dif_2(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dif_4	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dif_4(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dif_4	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dif_4(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dif_4	src/walsh/shortwalshwakdif.h	/^static inline void short_walsh_wak_dif_4(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dif_4	src/walsh/shortwalshwakdif.h	/^static inline void short_walsh_wak_dif_4(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dif_8	doc/walsh-doc.txt	/^inline void short_walsh_wak_dif_8(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dif_8	doc/walsh-doc.txt	/^inline void short_walsh_wak_dif_8(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dif_8	src/walsh/shortwalshwakdif.h	/^inline void short_walsh_wak_dif_8(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dif_8	src/walsh/shortwalshwakdif.h	/^inline void short_walsh_wak_dif_8(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dit_16	doc/walsh-doc.txt	/^inline void short_walsh_wak_dit_16(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dit_16	doc/walsh-doc.txt	/^inline void short_walsh_wak_dit_16(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dit_16	src/walsh/shortwalshwakdit.h	/^inline void short_walsh_wak_dit_16(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dit_16	src/walsh/shortwalshwakdit.h	/^inline void short_walsh_wak_dit_16(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dit_2	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dit_2(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dit_2	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dit_2(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dit_2	src/walsh/shortwalshwakdit.h	/^static inline void short_walsh_wak_dit_2(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dit_2	src/walsh/shortwalshwakdit.h	/^static inline void short_walsh_wak_dit_2(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dit_4	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dit_4(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dit_4	doc/walsh-doc.txt	/^static inline void short_walsh_wak_dit_4(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dit_4	src/walsh/shortwalshwakdit.h	/^static inline void short_walsh_wak_dit_4(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dit_4	src/walsh/shortwalshwakdit.h	/^static inline void short_walsh_wak_dit_4(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
short_walsh_wak_dit_8	doc/walsh-doc.txt	/^inline void short_walsh_wak_dit_8(Type *f);$/;"	p	file:	signature:(Type *f)
short_walsh_wak_dit_8	doc/walsh-doc.txt	/^inline void short_walsh_wak_dit_8(Type *f, ulong s);$/;"	p	file:	signature:(Type *f, ulong s)
short_walsh_wak_dit_8	src/walsh/shortwalshwakdit.h	/^inline void short_walsh_wak_dit_8(Type *f)$/;"	f	signature:(Type *f)
short_walsh_wak_dit_8	src/walsh/shortwalshwakdit.h	/^inline void short_walsh_wak_dit_8(Type *f, ulong s)$/;"	f	signature:(Type *f, ulong s)
show	demo/gf2n/clhca-demo.cc	/^bool show(ulong r, ulong n)$/;"	f	signature:(ulong r, ulong n)
show2adic	demo/bits/bit2adic-demo.cc	/^show2adic(ulong x)$/;"	f	signature:(ulong x)
show_subsets	demo/bits/bitsubset-demo.cc	/^show_subsets(ulong v)$/;"	f	signature:(ulong v)
show_subsets	demo/bits/bitsubset-gray-demo.cc	/^show_subsets(ulong v)$/;"	f	signature:(ulong v)
show_subsets	demo/bits/bitsubset-shift-demo.cc	/^show_subsets(ulong v)$/;"	f	signature:(ulong v)
showglobals	makefile	/^showglobals: #$(FXTLIB)$/;"	c	file:	inherits:$,FXTLIB,:,nm,n,A,C$,FXTLIB,cat,n,grep,P,grep,v,PHONY:chkdef,xheuristiccheck,includeschkdef::,SRC,FXTHDRS,bash$,SCRIPTDIR,chkdef,shTHINK,PHONY:ichk,xsomeinteractivechecks,thecode,don,ichk::,$,SCRIPTDIR,chk,demo,xref,zsh,grep,v,grep,vF,true,read,p,dummybash$,SCRIPTDIR,alloca,sh,grep,v,grep,vF,true,read,p,dummy,echo,echo,echo,$,MAKE,rts,read,p,dummy,echo,echo,echo,$,MAKE,chkundoc,read,p,dummy,echo,echo,echo,$,MAKE,mrtdoc,read,p,dummy,echo,echo,echo,$,MAKE,chkdef,read,p,dummy,echo,echo,echo,$,MAKE,showsrc,read,p,dummy,echo,echo,echo,$,MAKE,showglobals,read,p,dummy,echo,echo,echo,grep,C1,F,$,FXTHDRS,true$,MAKE,chkdblfiles,read,p,dummy,$,MAKE,chkxfiles,read,p,dummy,echo,echo,echo,DEMOSCRIPT,$,SCRIPTDIR,demo,zshDEMOBIN,binRUNDEMO,$,DEMOBIN,DEMODIR,demoDEMOSRC,$,DEMODIR,demo,cc,$,PAT,Keepgoing,Dry,run,$,TBIN2,:,Thereisaproblem,See$,AUTODOCLOG,$$f:,$,PAT,note,todo,TBD,enteringdirblah,Entered,date:$,LSMDATE,$$1,$$2,RELDIR:,$$
showmat	demo/perm/permutation-matrix-demo.cc	/^showmat(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
sigma	demo/comb/necklace-sigma-tau-demo.cc	/^inline ulong sigma(ulong x)  { return bit_rotate_left(x, 1, n); }$/;"	f	signature:(ulong x)
sign	demo/fft/walsh-basis-demo.cc	/^static inline Type sign(const Type &x)$/;"	f	file:	signature:(const Type &x)
sign	src/aux0/attic/sign.h	/^static inline Type sign(const Type &x)$/;"	f	signature:(const Type &x)
signs	doc/wfl-hilbert-doc.txt	/^alternating signs, thus for  d = 2 :$/;"	v
sinc	src/aux0/attic/aux0double.cc	/^sinc(double x)$/;"	f	signature:(double x)
sinc	src/aux0/attic/aux0double.h	/^double sinc(double x);$/;"	p	signature:(double x)
sinc	src/aux1/attic/resample.cc	/^static inline double sinc(double x)$/;"	f	file:	signature:(double x)
single_ones	doc/bits-doc.txt	/^static inline ulong single_ones(ulong x);$/;"	p	file:	signature:(ulong x)
single_ones	src/bits/bit-isolate.h	/^static inline ulong single_ones(ulong x)$/;"	f	signature:(ulong x)
single_ones_xi	doc/bits-doc.txt	/^static inline ulong single_ones_xi(ulong x);$/;"	p	file:	signature:(ulong x)
single_ones_xi	src/bits/bit-isolate.h	/^static inline ulong single_ones_xi(ulong x)$/;"	f	signature:(ulong x)
single_values	doc/bits-doc.txt	/^static inline ulong single_values(ulong x);$/;"	p	file:	signature:(ulong x)
single_values	src/bits/bit-isolate.h	/^static inline ulong single_values(ulong x)$/;"	f	signature:(ulong x)
single_values_xi	doc/bits-doc.txt	/^static inline ulong single_values_xi(ulong x);$/;"	p	file:	signature:(ulong x)
single_values_xi	src/bits/bit-isolate.h	/^static inline ulong single_values_xi(ulong x)$/;"	f	signature:(ulong x)
single_zeros	doc/bits-doc.txt	/^static inline ulong single_zeros(ulong x);$/;"	p	file:	signature:(ulong x)
single_zeros	src/bits/bit-isolate.h	/^static inline ulong single_zeros(ulong x)$/;"	f	signature:(ulong x)
single_zeros_xi	doc/bits-doc.txt	/^static inline ulong single_zeros_xi(ulong x);$/;"	p	file:	signature:(ulong x)
single_zeros_xi	src/bits/bit-isolate.h	/^static inline ulong single_zeros_xi(ulong x)$/;"	f	signature:(ulong x)
sintab	src/fht/fhtmayer.txt	/^static REAL sintab[20]=$/;"	v	file:
sinwrk	src/fht/fhtmayer.txt	/^static REAL sinwrk[20]=$/;"	v	file:
size	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:() const
size	src/comb/catalan-rgs.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:catalan_rgs	access:public	signature:() const
size	src/comb/combination-pref.h	/^    ulong size()  const  { return n_; }$/;"	f	class:combination_pref	access:public	signature:() const
size	src/comb/id-tree-lev-seq.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:id_tree_lev_seq	access:public	signature:() const
size	src/comb/ordered-tree-branching-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:ordered_tree_branching_seq	access:public	signature:() const
size	src/comb/ordered-tree-lev-seq.h	/^    ulong size()  const  { return n_+1; }$/;"	f	class:ordered_tree_lev_seq	access:public	signature:() const
size	src/comb/tree-lev-seq.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:tree_lev_seq	access:public	signature:() const
size	src/ds/attic/rarray.h	/^    ulong size()  const$/;"	f	class:rarray	access:public	signature:() const
size	src/ds/attic/rset.h	/^    ulong size()  const$/;"	f	class:rset	access:public	signature:() const
size	src/ds/bitarray.h	/^    ulong size()  const  { return n_; }$/;"	f	class:bitarray	access:public	signature:() const
skew_binary	src/comb/skew-binary.h	/^    explicit skew_binary(ulong n)$/;"	f	class:skew_binary	access:public	signature:(ulong n)
skew_binary	src/comb/skew-binary.h	/^    skew_binary(const skew_binary&);  \/\/ forbidden$/;"	p	class:skew_binary	access:private	signature:(const skew_binary&)
skew_binary	src/comb/skew-binary.h	/^class skew_binary$/;"	c
skew_binary::OK	src/comb/skew-binary.h	/^    bool OK()  const$/;"	f	class:skew_binary	access:public	signature:() const
skew_binary::a_	src/comb/skew-binary.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:skew_binary	access:public
skew_binary::a_	src/comb/skew-binary.h	/^    ulong a_[SKEW_BINARY_MAX_ARRAY_LEN];   \/\/ digits$/;"	m	class:skew_binary	access:public
skew_binary::data	src/comb/skew-binary.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:skew_binary	access:public	signature:() const
skew_binary::first	src/comb/skew-binary.h	/^    void first()$/;"	f	class:skew_binary	access:public	signature:()
skew_binary::n_	src/comb/skew-binary.h	/^    ulong n_;    \/\/ Number of digits$/;"	m	class:skew_binary	access:public
skew_binary::next	src/comb/skew-binary.h	/^    ulong next()$/;"	f	class:skew_binary	access:public	signature:()
skew_binary::operator =	src/comb/skew-binary.h	/^    skew_binary & operator = (const skew_binary&);  \/\/ forbidden$/;"	p	class:skew_binary	access:private	signature:(const skew_binary&)
skew_binary::print	src/comb/skew-binary.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:skew_binary	access:public	signature:(const char *bla, bool dfz=false) const
skew_binary::skew_binary	src/comb/skew-binary.h	/^    explicit skew_binary(ulong n)$/;"	f	class:skew_binary	access:public	signature:(ulong n)
skew_binary::skew_binary	src/comb/skew-binary.h	/^    skew_binary(const skew_binary&);  \/\/ forbidden$/;"	p	class:skew_binary	access:private	signature:(const skew_binary&)
skew_binary::tr_	src/comb/skew-binary.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:skew_binary	access:public
skew_binary::~skew_binary	src/comb/skew-binary.h	/^    ~skew_binary()$/;"	f	class:skew_binary	access:public	signature:()
skip_complex_real_fft	doc/realfft-doc.txt	/^void skip_complex_real_fft(double *f, ulong n, ulong d, double *w); \/\/ aux$/;"	p	file:	signature:(double *f, ulong n, ulong d, double *w)
skip_complex_real_fft	src/realfft/realfft.h	/^void skip_complex_real_fft(double *f, ulong n, ulong d, double *w);  \/\/ aux$/;"	p	signature:(double *f, ulong n, ulong d, double *w)
skip_complex_real_fft	src/realfft/skiprealfft.cc	/^skip_complex_real_fft(double *f, ulong n, ulong d, double *w)$/;"	f	signature:(double *f, ulong n, ulong d, double *w)
skip_copy	doc/aux1-doc.txt	/^inline void skip_copy(const Type *src, Type *dst, ulong n, ulong d);$/;"	p	file:	signature:(const Type *src, Type *dst, ulong n, ulong d)
skip_copy	src/aux1/copy.h	/^inline void skip_copy(const Type *src, Type *dst, ulong n, ulong d)$/;"	f	signature:(const Type *src, Type *dst, ulong n, ulong d)
skip_copy_back	doc/aux1-doc.txt	/^inline void skip_copy_back(const Type *src, Type *dst, ulong n, ulong d);$/;"	p	file:	signature:(const Type *src, Type *dst, ulong n, ulong d)
skip_copy_back	src/aux1/copy.h	/^inline void skip_copy_back(const Type *src, Type *dst, ulong n, ulong d)$/;"	f	signature:(const Type *src, Type *dst, ulong n, ulong d)
skip_fft	doc/fft-doc.txt	/^void skip_fft(double *fr, double *fi, ulong n, ulong d,$/;"	p	file:	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fft	src/fft/fft.h	/^void skip_fft(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fft	src/fft/skipfft.cc	/^skip_fft(double *fr, double *fi, ulong n, ulong d,$/;"	f	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fft0	doc/fft-doc.txt	/^void skip_fft0(double *fr, double *fi, ulong n, ulong d,$/;"	p	file:	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fft0	src/fft/fft.h	/^void skip_fft0(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fft0	src/fft/skipfft.cc	/^skip_fft0(double *fr, double *fi, ulong n, ulong d,$/;"	f	signature:(double *fr, double *fi, ulong n, ulong d, double *wr, double *wi, int is)
skip_fht	doc/fht-doc.txt	/^void skip_fht(double *f, ulong n, ulong d, double *w);$/;"	p	file:	signature:(double *f, ulong n, ulong d, double *w)
skip_fht	src/fht/fht2d.h	/^void skip_fht(double *f, ulong n, ulong d, double *w);$/;"	p	signature:(double *f, ulong n, ulong d, double *w)
skip_fht	src/fht/skipfht.cc	/^skip_fht(double *f, ulong n, ulong d, double *w)$/;"	f	signature:(double *f, ulong n, ulong d, double *w)
skip_fht0	doc/fht-doc.txt	/^void skip_fht0(double *f, ulong n, ulong d, double *w);$/;"	p	file:	signature:(double *f, ulong n, ulong d, double *w)
skip_fht0	src/fht/fht2d.h	/^void skip_fht0(double *f, ulong n, ulong d, double *w);$/;"	p	signature:(double *f, ulong n, ulong d, double *w)
skip_fht0	src/fht/skipfht.cc	/^skip_fht0(double *f, ulong n, ulong d, double *w)$/;"	f	signature:(double *f, ulong n, ulong d, double *w)
skip_ntt	src/ntt/attic/nttskip.cc	/^skip_ntt(mod *f, ulong n, ulong d, mod *w, int is)$/;"	f	signature:(mod *f, ulong n, ulong d, mod *w, int is)
skip_ntt0	src/ntt/attic/nttskip.cc	/^skip_ntt0(mod *f, ulong n, ulong d, mod *w, int is)$/;"	f	signature:(mod *f, ulong n, ulong d, mod *w, int is)
skip_real_complex_fft	doc/realfft-doc.txt	/^void skip_real_complex_fft(double *f, ulong n, ulong d, double *w); \/\/ aux$/;"	p	file:	signature:(double *f, ulong n, ulong d, double *w)
skip_real_complex_fft	src/realfft/realfft.h	/^void skip_real_complex_fft(double *f, ulong n, ulong d, double *w);  \/\/ aux$/;"	p	signature:(double *f, ulong n, ulong d, double *w)
skip_real_complex_fft	src/realfft/skiprealfft.cc	/^skip_real_complex_fft(double *f, ulong n, ulong d, double *w)$/;"	f	signature:(double *f, ulong n, ulong d, double *w)
skip_real_complex_fft0	doc/realfft-doc.txt	/^void skip_real_complex_fft0(double *f, ulong n, ulong d, double *w); \/\/ aux$/;"	p	file:	signature:(double *f, ulong n, ulong d, double *w)
skip_real_complex_fft0	src/realfft/realfft.h	/^void skip_real_complex_fft0(double *f, ulong n, ulong d, double *w);  \/\/ aux$/;"	p	signature:(double *f, ulong n, ulong d, double *w)
skip_real_complex_fft0	src/realfft/skiprealfft.cc	/^skip_real_complex_fft0(double *f, ulong n, ulong d, double *w)$/;"	f	signature:(double *f, ulong n, ulong d, double *w)
sl_gray_compare	src/comb/sl-gray-compare.h	/^inline int sl_gray_compare(const Type *a, ulong na,$/;"	f	signature:(const Type *a, ulong na, const Type *b, ulong nb, const ulong *m1)
sl_gray_rec	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^sl_gray_rec(ulong n, bool z=true)$/;"	f	signature:(ulong n, bool z=true)
sl_gray_to_bin	doc/bits-doc.txt	/^static inline ulong sl_gray_to_bin(ulong k, ulong ldn);$/;"	p	file:	signature:(ulong k, ulong ldn)
sl_gray_to_bin	src/bits/bin-to-sl-gray.h	/^static inline ulong sl_gray_to_bin(ulong k, ulong ldn)$/;"	f	signature:(ulong k, ulong ldn)
slant	doc/walsh-doc.txt	/^void slant(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
slant	src/walsh/slant.cc	/^slant(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
slant	src/walsh/slant.h	/^void slant(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
slant_seq	doc/walsh-doc.txt	/^void slant_seq(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
slant_seq	src/walsh/slant.cc	/^slant_seq(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
slant_seq	src/walsh/slant.h	/^void slant_seq(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
slow_and_convolution	doc/walsh-doc.txt	/^inline void slow_and_convolution(const Type *f, const Type *g, ulong ldn, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_and_convolution	src/walsh/and-convolution.h	/^inline void slow_and_convolution(const Type *f, const Type *g, ulong ldn, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_auto_convolution	doc/convolution-doc.txt	/^void slow_auto_convolution(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
slow_auto_convolution	doc/convolution-doc.txt	/^void slow_auto_convolution(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_auto_convolution	src/convolution/slowcnvl.h	/^void slow_auto_convolution(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
slow_auto_convolution	src/convolution/slowcnvl.h	/^void slow_auto_convolution(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_auto_convolution0	doc/convolution-doc.txt	/^void slow_auto_convolution0(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
slow_auto_convolution0	doc/convolution-doc.txt	/^void slow_auto_convolution0(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_auto_convolution0	src/convolution/slowcnvla.h	/^void slow_auto_convolution0(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
slow_auto_convolution0	src/convolution/slowcnvla.h	/^void slow_auto_convolution0(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_auto_correlation	doc/correlation-doc.txt	/^void slow_auto_correlation(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
slow_auto_correlation	doc/correlation-doc.txt	/^void slow_auto_correlation(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
slow_auto_correlation	src/correlation/slowcorr.h	/^void slow_auto_correlation(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
slow_auto_correlation	src/correlation/slowcorr.h	/^void slow_auto_correlation(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
slow_auto_correlation0	doc/correlation-doc.txt	/^void slow_auto_correlation0(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
slow_auto_correlation0	doc/correlation-doc.txt	/^void slow_auto_correlation0(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
slow_auto_correlation0	src/correlation/slowcorr.h	/^void slow_auto_correlation0(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
slow_auto_correlation0	src/correlation/slowcorr.h	/^void slow_auto_correlation0(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
slow_complex_auto_convolution	doc/convolution-doc.txt	/^void slow_complex_auto_convolution(double *fr, double *fi, ulong n);$/;"	p	file:	signature:(double *fr, double *fi, ulong n)
slow_complex_auto_convolution	src/convolution/slowcocnvl.cc	/^slow_complex_auto_convolution(double *fr, double *fi, ulong n)$/;"	f	signature:(double *fr, double *fi, ulong n)
slow_complex_auto_convolution	src/convolution/slowconvolution.h	/^void slow_complex_auto_convolution(double *fr, double *fi, ulong n);$/;"	p	signature:(double *fr, double *fi, ulong n)
slow_complex_auto_correlation	doc/correlation-doc.txt	/^void slow_complex_auto_correlation(double *fr, double *fi, ulong n);$/;"	p	file:	signature:(double *fr, double *fi, ulong n)
slow_complex_auto_correlation	src/correlation/correlation.h	/^void slow_complex_auto_correlation(double *fr, double *fi, ulong n);$/;"	p	signature:(double *fr, double *fi, ulong n)
slow_complex_auto_correlation	src/correlation/slowcocorr.cc	/^slow_complex_auto_correlation(double *fr, double *fi, ulong n)$/;"	f	signature:(double *fr, double *fi, ulong n)
slow_complex_convolution	doc/convolution-doc.txt	/^void slow_complex_convolution(const double *fr, const double *fi,$/;"	p	file:	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_complex_convolution	src/convolution/slowcocnvl.cc	/^slow_complex_convolution(const double *fr, const double *fi,$/;"	f	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_complex_convolution	src/convolution/slowconvolution.h	/^void slow_complex_convolution(const double *fr, const double *fi,$/;"	p	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_complex_correlation	doc/correlation-doc.txt	/^void slow_complex_correlation(const double *fr, const double *fi,$/;"	p	file:	signature:(const double *fr, const double *fi, const double *gr, const double *gi, double *hr, double *hi, ulong n)
slow_complex_correlation	doc/correlation-doc.txt	/^void slow_complex_correlation(const double *fr, const double *fi,$/;"	p	file:	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_complex_correlation	src/correlation/correlation.h	/^void slow_complex_correlation(const double *fr, const double *fi,$/;"	p	signature:(const double *fr, const double *fi, const double *gr, const double *gi, double *hr, double *hi, ulong n)
slow_complex_correlation	src/correlation/correlation.h	/^void slow_complex_correlation(const double *fr, const double *fi,$/;"	p	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_complex_correlation	src/correlation/slowcocorr.cc	/^slow_complex_correlation(const double *fr, const double *fi,$/;"	f	signature:(const double *fr, const double *fi, const double *gr, const double *gi, double *hr, double *hi, ulong n)
slow_complex_correlation	src/correlation/slowcocorr.cc	/^slow_complex_correlation(const double *fr, const double *fi,$/;"	f	signature:(const double *fr, const double *fi, double *gr, double *gi, ulong n)
slow_convolution	doc/convolution-doc.txt	/^void slow_convolution(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_convolution	doc/convolution-doc.txt	/^void slow_convolution(const Type *f, const Type *g, Type *h, ulong n);$/;"	p	file:	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_convolution	src/convolution/slowcnvl.h	/^void slow_convolution(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_convolution	src/convolution/slowcnvl.h	/^void slow_convolution(const Type *f, const Type *g, Type *h, ulong n)$/;"	f	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_convolution0	doc/convolution-doc.txt	/^void slow_convolution0(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_convolution0	doc/convolution-doc.txt	/^void slow_convolution0(const Type *f, const Type *g, Type *h, ulong n);$/;"	p	file:	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_convolution0	src/convolution/slowcnvla.h	/^void slow_convolution0(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_convolution0	src/convolution/slowcnvla.h	/^void slow_convolution0(const Type *f, const Type *g, Type *h, ulong n)$/;"	f	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_correlation	doc/correlation-doc.txt	/^void slow_correlation(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
slow_correlation	doc/correlation-doc.txt	/^void slow_correlation(const Type *f, const Type *g, Type * restrict h, ulong n);$/;"	p	file:	signature:(const Type *f, const Type *g, Type * restrict h, ulong n)
slow_correlation	src/correlation/slowcorr.h	/^void slow_correlation(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
slow_correlation	src/correlation/slowcorr.h	/^void slow_correlation(const Type *f, const Type *g, Type * restrict h, ulong n)$/;"	f	signature:(const Type *f, const Type *g, Type * restrict h, ulong n)
slow_correlation0	doc/correlation-doc.txt	/^void slow_correlation0(const Type *f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type *f, Type * restrict g, ulong n)
slow_correlation0	doc/correlation-doc.txt	/^void slow_correlation0(const Type *f, const Type *g, Type * restrict h, ulong n);$/;"	p	file:	signature:(const Type *f, const Type *g, Type * restrict h, ulong n)
slow_correlation0	src/correlation/slowcorr.h	/^void slow_correlation0(const Type *f, Type * restrict g, ulong n)$/;"	f	signature:(const Type *f, Type * restrict g, ulong n)
slow_correlation0	src/correlation/slowcorr.h	/^void slow_correlation0(const Type *f, const Type *g, Type * restrict h, ulong n)$/;"	f	signature:(const Type *f, const Type *g, Type * restrict h, ulong n)
slow_fract_ft	doc/chirpzt-doc.txt	/^void slow_fract_ft(Complex *f, ulong n, double v);$/;"	p	file:	signature:(Complex *f, ulong n, double v)
slow_fract_ft	doc/chirpzt-doc.txt	/^void slow_fract_ft(double *fr, double *fi, ulong n, double v);$/;"	p	file:	signature:(double *fr, double *fi, ulong n, double v)
slow_fract_ft	src/chirpzt/chirpzt.h	/^void slow_fract_ft(Complex *f, ulong n, double v);$/;"	p	signature:(Complex *f, ulong n, double v)
slow_fract_ft	src/chirpzt/chirpzt.h	/^void slow_fract_ft(double *fr, double *fi, ulong n, double v);$/;"	p	signature:(double *fr, double *fi, ulong n, double v)
slow_fract_ft	src/chirpzt/slowfracft.cc	/^slow_fract_ft(Complex *f, ulong n, double v)$/;"	f	signature:(Complex *f, ulong n, double v)
slow_fract_ft	src/chirpzt/slowfracft.cc	/^slow_fract_ft(double *fr, double *fi, ulong n, double v)$/;"	f	signature:(double *fr, double *fi, ulong n, double v)
slow_ft	doc/fft-doc.txt	/^void slow_ft(Complex *f, ulong n, int is);$/;"	p	file:	signature:(Complex *f, ulong n, int is)
slow_ft	doc/fft-doc.txt	/^void slow_ft(double *fr, double *fi, ulong n, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong n, int is)
slow_ft	src/fft/slowft.cc	/^slow_ft(Complex *f, ulong n, int is)$/;"	f	signature:(Complex *f, ulong n, int is)
slow_ft	src/fft/slowft.cc	/^slow_ft(double *fr, double *fi, ulong n, int is)$/;"	f	signature:(double *fr, double *fi, ulong n, int is)
slow_ft	src/fft/slowft.h	/^void slow_ft(Complex *f, ulong n, int is);$/;"	p	signature:(Complex *f, ulong n, int is)
slow_ft	src/fft/slowft.h	/^void slow_ft(double *fr, double *fi, ulong n, int is);$/;"	p	signature:(double *fr, double *fi, ulong n, int is)
slow_half_auto_convolution	doc/convolution-doc.txt	/^void slow_half_auto_convolution(Type *f, ulong n, int h01);$/;"	p	file:	signature:(Type *f, ulong n, int h01)
slow_half_auto_convolution	doc/convolution-doc.txt	/^void slow_half_auto_convolution(const Type *f, Type *g, ulong n, int h01);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n, int h01)
slow_half_auto_convolution	src/convolution/slowcnvlhalf.h	/^void slow_half_auto_convolution(Type *f, ulong n, int h01)$/;"	f	signature:(Type *f, ulong n, int h01)
slow_half_auto_convolution	src/convolution/slowcnvlhalf.h	/^void slow_half_auto_convolution(const Type *f, Type *g, ulong n, int h01)$/;"	f	signature:(const Type *f, Type *g, ulong n, int h01)
slow_half_convolution	doc/convolution-doc.txt	/^void slow_half_convolution(const Type *f, Type *g, ulong n, int h01);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n, int h01)
slow_half_convolution	doc/convolution-doc.txt	/^void slow_half_convolution(const Type *f, const Type *g, Type *h, ulong n, int h01);$/;"	p	file:	signature:(const Type *f, const Type *g, Type *h, ulong n, int h01)
slow_half_convolution	src/convolution/slowcnvlhalf.h	/^void slow_half_convolution(const Type *f, Type *g, ulong n, int h01)$/;"	f	signature:(const Type *f, Type *g, ulong n, int h01)
slow_half_convolution	src/convolution/slowcnvlhalf.h	/^void slow_half_convolution(const Type *f, const Type *g, Type *h, ulong n, int h01)$/;"	f	signature:(const Type *f, const Type *g, Type *h, ulong n, int h01)
slow_ht	doc/fht-doc.txt	/^void slow_ht(Complex *f, ulong n);$/;"	p	file:	signature:(Complex *f, ulong n)
slow_ht	doc/fht-doc.txt	/^void slow_ht(double *f, ulong n);$/;"	p	file:	signature:(double *f, ulong n)
slow_ht	src/fht/slowht.cc	/^slow_ht(Complex *f, ulong n)$/;"	f	signature:(Complex *f, ulong n)
slow_ht	src/fht/slowht.cc	/^slow_ht(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
slow_ht	src/fht/slowht.h	/^void slow_ht(Complex *f, ulong n);$/;"	p	signature:(Complex *f, ulong n)
slow_ht	src/fht/slowht.h	/^void slow_ht(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
slow_linear_convolution	doc/convolution-doc.txt	/^void slow_linear_convolution(const Type *f, const Type *g, Type *h, ulong n);$/;"	p	file:	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_linear_convolution	src/convolution/slowcnvl-lin.h	/^void slow_linear_convolution(const Type *f, const Type *g, Type *h, ulong n)$/;"	f	signature:(const Type *f, const Type *g, Type *h, ulong n)
slow_max_convolution	doc/walsh-doc.txt	/^inline void slow_max_convolution(const Type *f, const Type *g, ulong n, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong n, Type *h)
slow_max_convolution	src/walsh/max-convolution.h	/^inline void slow_max_convolution(const Type *f, const Type *g, ulong n, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong n, Type *h)
slow_mod_convolution	doc/ntt-doc.txt	/^void slow_mod_convolution(mod *f, mod *g, ulong n);$/;"	p	file:	signature:(mod *f, mod *g, ulong n)
slow_mod_convolution	src/ntt/ntt.h	/^void slow_mod_convolution(double *f, double *g, ulong n);$/;"	p	signature:(double *f, double *g, ulong n)
slow_mod_convolution	src/ntt/ntt.h	/^void slow_mod_convolution(mod *f, mod *g, ulong n);$/;"	p	signature:(mod *f, mod *g, ulong n)
slow_mod_convolution	src/ntt/slownttcnvl.cc	/^slow_mod_convolution(mod *f, mod *g, ulong n)  \/\/ version 1$/;"	f	signature:(mod *f, mod *g, ulong n)
slow_mod_convolution	src/ntt/slownttcnvl.cc	/^slow_mod_convolution(mod *f, mod *g, ulong n)  \/\/ version 2$/;"	f	signature:(mod *f, mod *g, ulong n)
slow_ntt	doc/ntt-doc.txt	/^void slow_ntt(mod *f, ulong n, int is);$/;"	p	file:	signature:(mod *f, ulong n, int is)
slow_ntt	src/ntt/ntt.h	/^void slow_ntt(mod *f, ulong n, int is);$/;"	p	signature:(mod *f, ulong n, int is)
slow_ntt	src/ntt/slowntt.cc	/^slow_ntt(mod *f, ulong n, int is)$/;"	f	signature:(mod *f, ulong n, int is)
slow_or_convolution	doc/walsh-doc.txt	/^inline void slow_or_convolution(const Type *f, Type *g, ulong ldn);$/;"	p	file:	signature:(const Type *f, Type *g, ulong ldn)
slow_or_convolution	doc/walsh-doc.txt	/^inline void slow_or_convolution(const Type *f, const Type *g, ulong ldn, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_or_convolution	src/walsh/or-convolution.h	/^inline void slow_or_convolution(const Type *f, Type *g, ulong ldn)$/;"	f	signature:(const Type *f, Type *g, ulong ldn)
slow_or_convolution	src/walsh/or-convolution.h	/^inline void slow_or_convolution(const Type *f, const Type *g, ulong ldn, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_prefix_convolution	doc/haar-doc.txt	/^inline void slow_prefix_convolution(const Type *f, Type *g, ulong ldn);$/;"	p	file:	signature:(const Type *f, Type *g, ulong ldn)
slow_prefix_convolution	doc/haar-doc.txt	/^inline void slow_prefix_convolution(const Type *f, const Type *g, ulong ldn, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_prefix_convolution	src/haar/prefix-transform.h	/^inline void slow_prefix_convolution(const Type *f, Type *g, ulong ldn)$/;"	f	signature:(const Type *f, Type *g, ulong ldn)
slow_prefix_convolution	src/haar/prefix-transform.h	/^inline void slow_prefix_convolution(const Type *f, const Type *g, ulong ldn, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_row_column_ht	doc/fht-doc.txt	/^void slow_row_column_ht(double *f, ulong nr, ulong nc);$/;"	p	file:	signature:(double *f, ulong nr, ulong nc)
slow_row_column_ht	src/fht/slowht.cc	/^slow_row_column_ht(double *f, ulong nr, ulong nc)$/;"	f	signature:(double *f, ulong nr, ulong nc)
slow_row_column_ht	src/fht/slowht.h	/^void slow_row_column_ht(double *f, ulong nr, ulong nc);$/;"	p	signature:(double *f, ulong nr, ulong nc)
slow_subset_auto_convolution	doc/walsh-doc.txt	/^inline void slow_subset_auto_convolution(const Type *f, Type *g, ulong ldn);$/;"	p	file:	signature:(const Type *f, Type *g, ulong ldn)
slow_subset_auto_convolution	doc/walsh-doc.txt	/^inline void slow_subset_auto_convolution(const Type *f, ulong ldn, Type *h);$/;"	p	file:	signature:(const Type *f, ulong ldn, Type *h)
slow_subset_auto_convolution	src/walsh/subset-convolution.h	/^inline void slow_subset_auto_convolution(const Type *f, Type *g, ulong ldn)$/;"	f	signature:(const Type *f, Type *g, ulong ldn)
slow_subset_auto_convolution	src/walsh/subset-convolution.h	/^inline void slow_subset_auto_convolution(const Type *f, ulong ldn, Type *h)$/;"	f	signature:(const Type *f, ulong ldn, Type *h)
slow_subset_convolution	doc/walsh-doc.txt	/^inline void slow_subset_convolution(const Type *f, Type *g, ulong ldn);$/;"	p	file:	signature:(const Type *f, Type *g, ulong ldn)
slow_subset_convolution	doc/walsh-doc.txt	/^inline void slow_subset_convolution(const Type *f, const Type *g, ulong ldn, Type *h);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_subset_convolution	src/walsh/subset-convolution.h	/^inline void slow_subset_convolution(const Type *f, Type *g, ulong ldn)$/;"	f	signature:(const Type *f, Type *g, ulong ldn)
slow_subset_convolution	src/walsh/subset-convolution.h	/^inline void slow_subset_convolution(const Type *f, const Type *g, ulong ldn, Type *h)$/;"	f	signature:(const Type *f, const Type *g, ulong ldn, Type *h)
slow_twodim_convolution	doc/convolution-doc.txt	/^void slow_twodim_convolution(const Type *f, Type *g, ulong nr, ulong nc);$/;"	p	file:	signature:(const Type *f, Type *g, ulong nr, ulong nc)
slow_twodim_convolution	src/convolution/slowtwodimcnvl.h	/^void slow_twodim_convolution(const Type *f, Type *g, ulong nr, ulong nc)$/;"	f	signature:(const Type *f, Type *g, ulong nr, ulong nc)
slow_twodim_convolution	src/convolution/slowtwodimcnvl.h	/^void slow_twodim_convolution(const Type *f, const Type *g,$/;"	f	signature:(const Type *f, const Type *g, Type * restrict h, ulong nr, ulong nc)
slow_twodim_ft	doc/fft-doc.txt	/^void slow_twodim_ft(Complex *f, ulong nr, ulong nc, int is);$/;"	p	file:	signature:(Complex *f, ulong nr, ulong nc, int is)
slow_twodim_ft	doc/fft-doc.txt	/^void slow_twodim_ft(double *fr, double *fi, ulong nr, ulong nc, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
slow_twodim_ft	src/fft/slowft.cc	/^slow_twodim_ft(Complex *f, ulong nr, ulong nc, int is)$/;"	f	signature:(Complex *f, ulong nr, ulong nc, int is)
slow_twodim_ft	src/fft/slowft.cc	/^slow_twodim_ft(double *fr, double *fi, ulong nr, ulong nc, int is)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
slow_twodim_ft	src/fft/slowft.h	/^void slow_twodim_ft(Complex *f, ulong nr, ulong nc, int is);$/;"	p	signature:(Complex *f, ulong nr, ulong nc, int is)
slow_twodim_ft	src/fft/slowft.h	/^void slow_twodim_ft(double *fr, double *fi, ulong r, ulong c, int is);$/;"	p	signature:(double *fr, double *fi, ulong r, ulong c, int is)
slow_twodim_ht	doc/fht-doc.txt	/^void slow_twodim_ht(double *f, ulong nr, ulong nc);$/;"	p	file:	signature:(double *f, ulong nr, ulong nc)
slow_twodim_ht	src/fht/slowht.cc	/^slow_twodim_ht(double *f, ulong nr, ulong nc)$/;"	f	signature:(double *f, ulong nr, ulong nc)
slow_twodim_ht	src/fht/slowht.h	/^void slow_twodim_ht(double *f, ulong nr, ulong nc);$/;"	p	signature:(double *f, ulong nr, ulong nc)
slow_weighted_auto_convolution	doc/convolution-doc.txt	/^void slow_weighted_auto_convolution(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
slow_weighted_auto_convolution	doc/convolution-doc.txt	/^void slow_weighted_auto_convolution(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_weighted_auto_convolution	src/convolution/slowweightedcnvl.h	/^void slow_weighted_auto_convolution(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
slow_weighted_auto_convolution	src/convolution/slowweightedcnvl.h	/^void slow_weighted_auto_convolution(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_weighted_convolution	doc/convolution-doc.txt	/^void slow_weighted_convolution(const Type *f, Type *g, ulong n);$/;"	p	file:	signature:(const Type *f, Type *g, ulong n)
slow_weighted_convolution	doc/convolution-doc.txt	/^void slow_weighted_convolution(const Type *f, const Type *g, Type *h, ulong n, Type w);$/;"	p	file:	signature:(const Type *f, const Type *g, Type *h, ulong n, Type w)
slow_weighted_convolution	src/convolution/slowweightedcnvl.h	/^void slow_weighted_convolution(const Type *f, Type *g, ulong n)$/;"	f	signature:(const Type *f, Type *g, ulong n)
slow_weighted_convolution	src/convolution/slowweightedcnvl.h	/^void slow_weighted_convolution(const Type *f, const Type *g, Type *h, ulong n, Type w)$/;"	f	signature:(const Type *f, const Type *g, Type *h, ulong n, Type w)
slow_weighted_or_convolution	doc/walsh-doc.txt	/^inline void slow_weighted_or_convolution(const Type *f, Type *g, ulong ldn, Type w);$/;"	p	file:	signature:(const Type *f, Type *g, ulong ldn, Type w)
slow_weighted_or_convolution	doc/walsh-doc.txt	/^inline void slow_weighted_or_convolution(const Type *f, const Type *g, ulong ldn, Type *h, Type w);$/;"	p	file:	signature:(const Type *f, const Type *g, ulong ldn, Type *h, Type w)
slow_weighted_or_convolution	src/walsh/weighted-or-convolution.h	/^inline void slow_weighted_or_convolution(const Type *f, Type *g, ulong ldn, Type w)$/;"	f	signature:(const Type *f, Type *g, ulong ldn, Type w)
slow_weighted_or_convolution	src/walsh/weighted-or-convolution.h	/^inline void slow_weighted_or_convolution(const Type *f, const Type *g, ulong ldn, Type *h, Type w)$/;"	f	signature:(const Type *f, const Type *g, ulong ldn, Type *h, Type w)
slow_zt	doc/chirpzt-doc.txt	/^void slow_zt(Complex *f, ulong n, Complex z);$/;"	p	file:	signature:(Complex *f, ulong n, Complex z)
slow_zt	doc/chirpzt-doc.txt	/^void slow_zt(double *f, ulong n, double z);$/;"	p	file:	signature:(double *f, ulong n, double z)
slow_zt	src/chirpzt/chirpzt.h	/^void slow_zt(Complex *f, ulong n, Complex z);$/;"	p	signature:(Complex *f, ulong n, Complex z)
slow_zt	src/chirpzt/chirpzt.h	/^void slow_zt(double *f, ulong n, double z);$/;"	p	signature:(double *f, ulong n, double z)
slow_zt	src/chirpzt/slowzt.cc	/^slow_zt(Complex *f, ulong n, Complex z)$/;"	f	signature:(Complex *f, ulong n, Complex z)
slow_zt	src/chirpzt/slowzt.cc	/^slow_zt(double *f, ulong n, double z)$/;"	f	signature:(double *f, ulong n, double z)
sm_	src/comb/mixedradix-sod-lex.h	/^    ulong sm_;  \/\/ sum of digits (arg s with first())$/;"	m	class:mixedradix_sod_lex	access:public
small_n	src/comb/perm-trotter-lg.h	/^    void small_n()$/;"	f	class:perm_trotter_lg	access:private	signature:()
small_n	src/comb/perm-trotter.h	/^    void small_n()$/;"	f	class:perm_trotter	access:private	signature:()
small_perfpow_limit	src/mod/perfpow.cc	/^static ulong small_perfpow_limit = 512;  \/\/ <=BITS_PER_LONG**2$/;"	v	file:
small_prime_limit	src/mod/primes.cc	/^ulong small_prime_limit = 64*1024;$/;"	v
smallest_part	src/comb/partition.h	/^    ulong smallest_part()  const$/;"	f	class:partition	access:public	signature:() const
smatprint	demo/comb/conference-quadres-demo.cc	/^smatprint(const char *bla, Smat &m)$/;"	f	signature:(const char *bla, Smat &m)
smatprint	demo/comb/hadamard-srs-demo.cc	/^smatprint(const char *bla, Smat &m)$/;"	f	signature:(const char *bla, Smat &m)
smod_t	src/mod/mtypes.h	/^typedef  long long  smod_t;$/;"	t
smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    explicit smooth_rfact_rgs(ulong n)$/;"	f	class:smooth_rfact_rgs	access:public	signature:(ulong n)
smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    smooth_rfact_rgs(const smooth_rfact_rgs&);  \/\/ forbidden$/;"	p	class:smooth_rfact_rgs	access:private	signature:(const smooth_rfact_rgs&)
smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^class smooth_rfact_rgs$/;"	c
smooth_rfact_rgs::OK	src/comb/smooth-rfact-rgs.h	/^    bool OK()  const$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
smooth_rfact_rgs::a_	src/comb/smooth-rfact-rgs.h	/^    ulong *a_;   \/\/ digits$/;"	m	class:smooth_rfact_rgs	access:public
smooth_rfact_rgs::data	src/comb/smooth-rfact-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
smooth_rfact_rgs::first	src/comb/smooth-rfact-rgs.h	/^    void first( )$/;"	f	class:smooth_rfact_rgs	access:public	signature:( )
smooth_rfact_rgs::j_	src/comb/smooth-rfact-rgs.h	/^    ulong j_;    \/\/ position of last change$/;"	m	class:smooth_rfact_rgs	access:public
smooth_rfact_rgs::n_	src/comb/smooth-rfact-rgs.h	/^    ulong n_;    \/\/ number of digits$/;"	m	class:smooth_rfact_rgs	access:public
smooth_rfact_rgs::next	src/comb/smooth-rfact-rgs.h	/^    bool next()$/;"	f	class:smooth_rfact_rgs	access:public	signature:()
smooth_rfact_rgs::operator =	src/comb/smooth-rfact-rgs.h	/^    smooth_rfact_rgs & operator = (const smooth_rfact_rgs&);  \/\/ forbidden$/;"	p	class:smooth_rfact_rgs	access:private	signature:(const smooth_rfact_rgs&)
smooth_rfact_rgs::pos	src/comb/smooth-rfact-rgs.h	/^    ulong pos()  const  { return j_; }  \/\/ position of last change$/;"	f	class:smooth_rfact_rgs	access:public	signature:() const
smooth_rfact_rgs::print	src/comb/smooth-rfact-rgs.h	/^    void print(const char *bla, bool dfz=false)  const$/;"	f	class:smooth_rfact_rgs	access:public	signature:(const char *bla, bool dfz=false) const
smooth_rfact_rgs::smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    explicit smooth_rfact_rgs(ulong n)$/;"	f	class:smooth_rfact_rgs	access:public	signature:(ulong n)
smooth_rfact_rgs::smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    smooth_rfact_rgs(const smooth_rfact_rgs&);  \/\/ forbidden$/;"	p	class:smooth_rfact_rgs	access:private	signature:(const smooth_rfact_rgs&)
smooth_rfact_rgs::~smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    ~smooth_rfact_rgs()$/;"	f	class:smooth_rfact_rgs	access:public	signature:()
sort	demo/topics.txt	/^sort@ sorting and searching @ Sorting and searching: quick sort, radix sort and binary search.$/;"	v
sort	src/ds/attic/rarray.h	/^    void sort()  { ::quick_sort(x_, n_); }$/;"	f	class:rarray	access:public	signature:()
sort	src/ds/attic/rset.h	/^    void sort()  { ::quick_sort(x_, n_); }$/;"	f	class:rset	access:public	signature:()
sort2	doc/sort-doc.txt	/^static inline void sort2(Type &x1, Type &x2);$/;"	p	file:	signature:(Type &x1, Type &x2)
sort2	src/sort/sort23.h	/^static inline void sort2(Type &x1, Type &x2)$/;"	f	signature:(Type &x1, Type &x2)
sort2	src/sort/sort23func.h	/^inline void sort2(Type &x1, Type &x2,$/;"	f	signature:(Type &x1, Type &x2, int (*cmp)(const Type &, const Type &))
sort3	doc/sort-doc.txt	/^static inline void sort3(Type &x0, Type &x1, Type &x2);$/;"	p	file:	signature:(Type &x0, Type &x1, Type &x2)
sort3	src/sort/sort23.h	/^static inline void sort3(Type &x0, Type &x1, Type &x2)$/;"	f	signature:(Type &x0, Type &x1, Type &x2)
sort3	src/sort/sort23func.h	/^inline void sort3(Type &x0, Type &x1, Type &x2,$/;"	f	signature:(Type &x0, Type &x1, Type &x2, int (*cmp)(const Type &, const Type &))
sort_by_key	doc/sort-doc.txt	/^void sort_by_key(Type1 *f, ulong n, Type2 *key, ulong *tmp=0, bool skq=true);$/;"	p	file:	signature:(Type1 *f, ulong n, Type2 *key, ulong *tmp=0, bool skq=true)
sort_by_key	src/sort/sortbykey.h	/^void sort_by_key(Type1 *f, ulong n, Type2 *key, ulong *tmp=0, bool skq=true)$/;"	f	signature:(Type1 *f, ulong n, Type2 *key, ulong *tmp=0, bool skq=true)
sort_by_primes	src/mod/factor.cc	/^factorization::sort_by_primes()$/;"	f	class:factorization	signature:()
sort_by_primes	src/mod/factor.h	/^    void sort_by_primes();$/;"	p	class:factorization	access:protected	signature:()
sort_edges	src/graph/digraph.cc	/^digraph::sort_edges(int (*cmp)(const ulong &, const ulong &))$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &))
sort_edges	src/graph/digraph.cc	/^digraph::sort_edges(int rq\/*=1*\/)$/;"	f	class:digraph	signature:(int rq )
sort_edges	src/graph/digraph.h	/^    void  sort_edges(int (*cmp)(const ulong &, const ulong &));$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &))
sort_edges	src/graph/digraph.h	/^    void  sort_edges(int rq=1);$/;"	p	class:digraph	access:public	signature:(int rq=1)
sorts_in_runs_sorted	src/comb/composition-nz-sorts.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts	access:public	signature:(bool aq=true) const
sorts_in_runs_sorted	src/comb/composition-nz-sorts2-pp.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:(bool aq=true) const
sorts_in_runs_sorted	src/comb/composition-nz-sorts2.h	/^    bool sorts_in_runs_sorted(bool aq=true)  const$/;"	f	class:composition_nz_sorts2	access:public	signature:(bool aq=true) const
spectrum	fxt.lsm	/^                correlation, spectrum, mass storage FFT,$/;"	v
split_radix_complex_real_fft	doc/realfft-doc.txt	/^void split_radix_complex_real_fft(double *x, ulong ldn, int is\/*=-1*\/);$/;"	p	file:	signature:(double *x, ulong ldn, int is )
split_radix_complex_real_fft	src/realfft/realfft.h	/^void split_radix_complex_real_fft(double *x, ulong ldn, int is=-1);$/;"	p	signature:(double *x, ulong ldn, int is=-1)
split_radix_complex_real_fft	src/realfft/realfftsplitradix.cc	/^split_radix_complex_real_fft(double *x, ulong ldn, int is\/*=-1*\/)$/;"	f	signature:(double *x, ulong ldn, int is )
split_radix_complex_real_fft_dif_core	doc/realfft-doc.txt	/^void split_radix_complex_real_fft_dif_core(double *x, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *x, ulong ldn)
split_radix_complex_real_fft_dif_core	src/realfft/realfft.h	/^void split_radix_complex_real_fft_dif_core(double *x, ulong ldn);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn)
split_radix_complex_real_fft_dif_core	src/realfft/realfftsplitradix.cc	/^split_radix_complex_real_fft_dif_core(double *x, ulong ldn)$/;"	f	signature:(double *x, ulong ldn)
split_radix_dif_fft_core	doc/fft-doc.txt	/^void split_radix_dif_fft_core(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
split_radix_dif_fft_core	src/fft/cfftsplitradix.cc	/^split_radix_dif_fft_core(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
split_radix_dif_fft_core	src/fft/fft.h	/^void split_radix_dif_fft_core(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
split_radix_dit_fft_core	doc/fft-doc.txt	/^void split_radix_dit_fft_core(Complex *f, ulong ldn); \/\/ aux$/;"	p	file:	signature:(Complex *f, ulong ldn)
split_radix_dit_fft_core	src/fft/cfftsplitradix.cc	/^split_radix_dit_fft_core(Complex *f, ulong ldn)$/;"	f	signature:(Complex *f, ulong ldn)
split_radix_dit_fft_core	src/fft/fft.h	/^void split_radix_dit_fft_core(Complex *f, ulong ldn);  \/\/ aux$/;"	p	signature:(Complex *f, ulong ldn)
split_radix_fft	doc/fft-doc.txt	/^void split_radix_fft(Complex *f, ulong ldn, int is);$/;"	p	file:	signature:(Complex *f, ulong ldn, int is)
split_radix_fft	doc/fft-doc.txt	/^void split_radix_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is)
split_radix_fft	src/fft/cfftsplitradix.cc	/^split_radix_fft(Complex *f, ulong ldn, int is)$/;"	f	signature:(Complex *f, ulong ldn, int is)
split_radix_fft	src/fft/fft.h	/^void split_radix_fft(Complex *f, ulong ldn, int is);$/;"	p	signature:(Complex *f, ulong ldn, int is)
split_radix_fft	src/fft/fft.h	/^void split_radix_fft(double *fr, double *fi, ulong ldn, int is);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is)
split_radix_fft	src/fft/fftsplitradix.cc	/^split_radix_fft(double *fr, double *fi, ulong ldn, int is)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is)
split_radix_fft_auto_convolution	doc/convolution-doc.txt	/^void split_radix_fft_auto_convolution(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
split_radix_fft_auto_convolution	src/convolution/fftcnvla.cc	/^split_radix_fft_auto_convolution(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
split_radix_fft_auto_convolution	src/convolution/realconvolution.h	/^void split_radix_fft_auto_convolution(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
split_radix_fft_auto_convolution0	doc/convolution-doc.txt	/^void split_radix_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	file:	signature:(double *f, ulong ldn)
split_radix_fft_auto_convolution0	src/convolution/fftcnvla.cc	/^split_radix_fft_auto_convolution0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
split_radix_fft_auto_convolution0	src/convolution/realconvolution.h	/^void split_radix_fft_auto_convolution0(double *f, ulong ldn);$/;"	p	signature:(double *f, ulong ldn)
split_radix_fft_convolution	doc/convolution-doc.txt	/^void split_radix_fft_convolution(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
split_radix_fft_convolution	src/convolution/fftcnvl.cc	/^split_radix_fft_convolution(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
split_radix_fft_convolution	src/convolution/realconvolution.h	/^void split_radix_fft_convolution(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
split_radix_fft_convolution0	doc/convolution-doc.txt	/^void split_radix_fft_convolution0(double * restrict f, double * restrict g, ulong ldn);$/;"	p	file:	signature:(double * restrict f, double * restrict g, ulong ldn)
split_radix_fft_convolution0	src/convolution/fftcnvl.cc	/^split_radix_fft_convolution0(double * restrict f, double * restrict g, ulong ldn)$/;"	f	signature:(double * restrict f, double * restrict g, ulong ldn)
split_radix_fft_convolution0	src/convolution/realconvolution.h	/^void split_radix_fft_convolution0(double *f, double *g, ulong ldn);$/;"	p	signature:(double *f, double *g, ulong ldn)
split_radix_fft_dif_core	doc/fft-doc.txt	/^void split_radix_fft_dif_core(double *fr, double *fi, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn)
split_radix_fft_dif_core	src/fft/fft.h	/^void split_radix_fft_dif_core(double *fr, double *fi, ulong ldn);  \/\/ aux$/;"	p	signature:(double *fr, double *fi, ulong ldn)
split_radix_fft_dif_core	src/fft/fftsplitradix.cc	/^split_radix_fft_dif_core(double *fr, double *fi, ulong ldn)$/;"	f	signature:(double *fr, double *fi, ulong ldn)
split_radix_real_complex_fft	doc/realfft-doc.txt	/^void split_radix_real_complex_fft(double *x, ulong ldn, int is\/*=-1*\/);$/;"	p	file:	signature:(double *x, ulong ldn, int is )
split_radix_real_complex_fft	src/realfft/realfft.h	/^void split_radix_real_complex_fft(double *x, ulong ldn, int is=-1);$/;"	p	signature:(double *x, ulong ldn, int is=-1)
split_radix_real_complex_fft	src/realfft/realfftsplitradix.cc	/^split_radix_real_complex_fft(double *x, ulong ldn, int is\/*=-1*\/)$/;"	f	signature:(double *x, ulong ldn, int is )
split_radix_real_complex_fft0	doc/realfft-doc.txt	/^void split_radix_real_complex_fft0(double *x, ulong ldn, int is\/*=-1*\/);$/;"	p	file:	signature:(double *x, ulong ldn, int is )
split_radix_real_complex_fft0	src/realfft/realfft.h	/^void split_radix_real_complex_fft0(double *x, ulong ldn, int is=-1);$/;"	p	signature:(double *x, ulong ldn, int is=-1)
split_radix_real_complex_fft0	src/realfft/realfftsplitradix.cc	/^split_radix_real_complex_fft0(double *x, ulong ldn, int is\/*=-1*\/)$/;"	f	signature:(double *x, ulong ldn, int is )
split_radix_real_complex_fft_dit_core	doc/realfft-doc.txt	/^void split_radix_real_complex_fft_dit_core(double *x, ulong ldn); \/\/ aux$/;"	p	file:	signature:(double *x, ulong ldn)
split_radix_real_complex_fft_dit_core	src/realfft/realfft.h	/^void split_radix_real_complex_fft_dit_core(double *x, ulong ldn);  \/\/ aux$/;"	p	signature:(double *x, ulong ldn)
split_radix_real_complex_fft_dit_core	src/realfft/realfftsplitradix.cc	/^split_radix_real_complex_fft_dit_core(double *x, ulong ldn)$/;"	f	signature:(double *x, ulong ldn)
sq_	src/comb/dyck-gray.h	/^    ulong *sq_;  \/\/ sequence of bit positions (seq[])  elements \\in {1,2,...,n}$/;"	m	class:dyck_gray	access:public
sqr	src/bpol/gf2n.h	/^    GF2n sqr()  const$/;"	f	class:GF2n	access:public	signature:() const
sqr	src/mod/mod.h	/^    mod sqr() const$/;"	f	class:mod	access:public	signature:() const
sqr_diff	demo/fft/fft-arblen-demo.cc	/^inline Type sqr_diff(const Type *f, const Type *g, ulong n)$/;"	f	signature:(const Type *f, const Type *g, ulong n)
sqr_mod	doc/mod-doc.txt	/^inline umod_t sqr_mod(umod_t a, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t m)
sqr_mod	src/mod/modarith.h	/^inline umod_t sqr_mod(umod_t a, umod_t m)$/;"	f	signature:(umod_t a, umod_t m)
sqr_tab	src/bpol/gf2n.cc	/^ulong GF2n::sqr_tab[BITS_PER_LONG];  \/\/ table for fast squaring$/;"	m	class:GF2n	file:
sqr_tab	src/bpol/gf2n.h	/^    static ulong sqr_tab[BITS_PER_LONG];  \/\/ table for fast squaring$/;"	m	class:GF2n	access:public
sqrt	src/bpol/gf2n.h	/^    GF2n sqrt()  const$/;"	f	class:GF2n	access:public	signature:() const
sqrt2adic	doc/bits-doc.txt	/^static inline ulong sqrt2adic(ulong d);$/;"	p	file:	signature:(ulong d)
sqrt2adic	src/bits/bit2adic.h	/^static inline ulong sqrt2adic(ulong d)$/;"	f	signature:(ulong d)
sqrt_modf	doc/mod-doc.txt	/^umod_t sqrt_modf(umod_t a, const factorization &mf);$/;"	p	file:	signature:(umod_t a, const factorization &mf)
sqrt_modf	src/mod/numtheory.h	/^umod_t sqrt_modf(umod_t a, const factorization &mf);$/;"	p	signature:(umod_t a, const factorization &mf)
sqrt_modf	src/mod/sqrtmod.cc	/^sqrt_modf(umod_t a, const factorization &mf)$/;"	f	signature:(umod_t a, const factorization &mf)
sqrt_modp	doc/mod-doc.txt	/^umod_t sqrt_modp(umod_t a, umod_t p);$/;"	p	file:	signature:(umod_t a, umod_t p)
sqrt_modp	src/mod/numtheory.h	/^umod_t sqrt_modp(umod_t a, umod_t p);$/;"	p	signature:(umod_t a, umod_t p)
sqrt_modp	src/mod/sqrtmod.cc	/^sqrt_modp(umod_t a, umod_t p)$/;"	f	signature:(umod_t a, umod_t p)
sqrt_modpp	doc/mod-doc.txt	/^umod_t sqrt_modpp(umod_t a, umod_t p, ulong ex);$/;"	p	file:	signature:(umod_t a, umod_t p, ulong ex)
sqrt_modpp	src/mod/numtheory.h	/^umod_t sqrt_modpp(umod_t a, umod_t p, long ex);$/;"	p	signature:(umod_t a, umod_t p, long ex)
sqrt_modpp	src/mod/sqrtmod.cc	/^sqrt_modpp(umod_t a, umod_t p, ulong ex)$/;"	f	signature:(umod_t a, umod_t p, ulong ex)
square_wave_basis	doc/walsh-doc.txt	/^void square_wave_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
square_wave_basis	src/walsh/square-wave-transform.h	/^void square_wave_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
square_wave_transform	doc/walsh-doc.txt	/^void square_wave_transform(Type *f, ulong ldn, bool nq=true);$/;"	p	file:	signature:(Type *f, ulong ldn, bool nq=true)
square_wave_transform	src/walsh/square-wave-transform.h	/^void square_wave_transform(Type *f, ulong ldn, bool nq=true)$/;"	f	signature:(Type *f, ulong ldn, bool nq=true)
sse_byte_zip	doc/bits-doc.txt	/^static inline ulong sse_byte_zip(ulong x);$/;"	p	file:	signature:(ulong x)
st	src/fht/attic/trigtable.cc	/^static double *st = 0;$/;"	v	file:
st_	src/comb/partition-rgs-lex.h	/^    ulong *st_; \/\/ stats (a partition of n)$/;"	m	class:partition_rgs_lex	access:public
st_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong *st_;  \/\/ stats: st[j] is the number of occurrences of j in a[]$/;"	m	class:young_tab_rgs_subset_lex	access:public
st_	src/comb/young-tab-rgs.h	/^    ulong *st_;  \/\/ stats: st[j] is the number of occurrences of j in a[]$/;"	m	class:young_tab_rgs	access:public
stack	src/ds/stack.h	/^    explicit stack(ulong n, ulong growq=0)$/;"	f	class:stack	access:public	signature:(ulong n, ulong growq=0)
stack	src/ds/stack.h	/^    stack(const stack&);  \/\/ forbidden$/;"	p	class:stack	access:private	signature:(const stack&)
stack	src/ds/stack.h	/^class stack$/;"	c
stack::gq_	src/ds/stack.h	/^    ulong  gq_;  \/\/ grow by gq elements if necessary, 0 for "never grow"$/;"	m	class:stack	access:public
stack::grow	src/ds/stack.h	/^    void grow()$/;"	f	class:stack	access:private	signature:()
stack::num	src/ds/stack.h	/^    ulong num()  const  { return p_; }  \/\/ Return number of entries.$/;"	f	class:stack	access:public	signature:() const
stack::operator =	src/ds/stack.h	/^    stack& operator = (const stack&);  \/\/ forbidden$/;"	p	class:stack	access:private	signature:(const stack&)
stack::p_	src/ds/stack.h	/^    ulong  p_;  \/\/ stack pointer (position of next write), top entry @ p-1$/;"	m	class:stack	access:public
stack::peek	src/ds/stack.h	/^    ulong peek(Type &z)  const$/;"	f	class:stack	access:public	signature:(Type &z) const
stack::peek_at	src/ds/stack.h	/^    ulong peek_at(ulong j, Type &z)  const$/;"	f	class:stack	access:public	signature:(ulong j, Type &z) const
stack::poke	src/ds/stack.h	/^    ulong poke(Type z)$/;"	f	class:stack	access:public	signature:(Type z)
stack::pop	src/ds/stack.h	/^    ulong pop()$/;"	f	class:stack	access:public	signature:()
stack::pop	src/ds/stack.h	/^    ulong pop(Type &z)$/;"	f	class:stack	access:public	signature:(Type &z)
stack::push	src/ds/stack.h	/^    ulong push(Type z)$/;"	f	class:stack	access:public	signature:(Type z)
stack::s_	src/ds/stack.h	/^    ulong  s_;  \/\/ size$/;"	m	class:stack	access:public
stack::stack	src/ds/stack.h	/^    explicit stack(ulong n, ulong growq=0)$/;"	f	class:stack	access:public	signature:(ulong n, ulong growq=0)
stack::stack	src/ds/stack.h	/^    stack(const stack&);  \/\/ forbidden$/;"	p	class:stack	access:private	signature:(const stack&)
stack::x_	src/ds/stack.h	/^    Type  *x_;  \/\/ data$/;"	m	class:stack	access:public
stack::~stack	src/ds/stack.h	/^    ~stack()  { delete [] x_; }$/;"	f	class:stack	access:public	signature:()
star_swap	src/graph/mk-perm-gray-digraph.cc	/^static inline void star_swap(ulong *x, ulong c)$/;"	f	file:	signature:(ulong *x, ulong c)
start_monotonic_gray_path	doc/graph-doc.txt	/^ulong start_monotonic_gray_path(digraph_paths &dp, ulong n);$/;"	p	file:	signature:(digraph_paths &dp, ulong n)
start_monotonic_gray_path	src/graph/mk-gray-digraph.cc	/^start_monotonic_gray_path(digraph_paths &dp, ulong n)$/;"	f	signature:(digraph_paths &dp, ulong n)
start_monotonic_gray_path	src/graph/mk-special-digraphs.h	/^ulong start_monotonic_gray_path(digraph_paths &dp, ulong n);$/;"	p	signature:(digraph_paths &dp, ulong n)
stats	demo/seq/A178514-demo.cc	/^ulong stats[32];$/;"	v
step	doc/wfl-hilbert-doc.txt	/^[2, 2, 0] , on step  34 ; its entry adds  1(101)  giving  [3, 2, 1] ; its exit$/;"	v
step	doc/wfl-hilbert-doc.txt	/^from coordinate to step, are implementable in time and space logarithmic in$/;"	v
step	src/bits/bit-rll2.h	/^    ulong step(ulong x)$/;"	f	class:bit_rll2	access:private	signature:(ulong x)
stnext	src/aux0/attic/funcemu.h	/^    void stnext()  { chk_tp(1);  ++t_[tp_-1]; }$/;"	f	class:funcemu	access:public	signature:()
stnext	src/aux0/attic/funcemu.h	/^    void stnext(ulong x)  { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
stnext	src/ds/attic/coroutine.h	/^    void stnext()  { chk_tp(1);  ++t_[tp_-1]; }$/;"	f	class:coroutine	access:public	signature:()
stnext	src/ds/attic/coroutine.h	/^    void stnext(ulong x)  { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
stpeek	src/aux0/attic/funcemu.h	/^    ulong stpeek()  const  { chk_tp(1);  return  t_[tp_-1]; }$/;"	f	class:funcemu	access:public	signature:() const
stpeek	src/ds/attic/coroutine.h	/^    ulong stpeek()  const  { chk_tp(1);  return  t_[tp_-1]; }$/;"	f	class:coroutine	access:public	signature:() const
stpoke	src/aux0/attic/funcemu.h	/^    void stpoke(ulong x)   { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
stpoke	src/ds/attic/coroutine.h	/^    void stpoke(ulong x)   { chk_tp(1);  t_[tp_-1] = x; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
stpop	src/aux0/attic/funcemu.h	/^    void stpop(ulong ct=1)  { tp_-=ct; }$/;"	f	class:funcemu	access:public	signature:(ulong ct=1)
stpop	src/ds/attic/coroutine.h	/^    void stpop(ulong ct=1)  { tp_-=ct; }$/;"	f	class:coroutine	access:public	signature:(ulong ct=1)
stpush	src/aux0/attic/funcemu.h	/^    void stpush(ulong x)   { chk_tp();  t_[tp_] = x;  ++tp_; }$/;"	f	class:funcemu	access:public	signature:(ulong x)
stpush	src/ds/attic/coroutine.h	/^    void stpush(ulong x)   { chk_tp();  t_[tp_] = x;  ++tp_; }$/;"	f	class:coroutine	access:public	signature:(ulong x)
str	demo/comb/paren-gray-rec-demo.cc	/^char str[64];$/;"	v
str	src/ds/attic/coroutine-paren-demo.cc	/^    char *str;$/;"	m	class:paren	file:	access:protected
str2bpol	demo/gf2n/bitpolmult-demo.cc	/^static ulong str2bpol(const char *str, ulong &deg)$/;"	f	file:	signature:(const char *str, ulong &deg)
str2ulong	src/aux1/attic/misc.h	/^ulong str2ulong(const char *p);$/;"	p	signature:(const char *p)
str2ulong	src/aux1/attic/str2ulong.cc	/^str2ulong(const char *p)$/;"	f	signature:(const char *p)
str_	src/comb/catalan-rgs-gray.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_gray	access:public
str_	src/comb/catalan-rgs-gslex.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_gslex	access:public
str_	src/comb/catalan-rgs-subset-lex.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs_subset_lex	access:public
str_	src/comb/catalan-rgs.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan_rgs	access:public
str_	src/comb/catalan.h	/^    char *str_;  \/\/ paren string$/;"	m	class:catalan	access:public
str_	src/comb/dyck-rgs-subset-lex.h	/^    char *str_; \/\/ Dyck word$/;"	m	class:dyck_rgs_subset_lex	access:public
str_	src/comb/motzkin-rgs-lex.h	/^    char * restrict str_;  \/\/ for bit string and paren string$/;"	m	class:motzkin_rgs_lex	access:public
str_	src/comb/motzkin-rgs-lex.h	/^    char str_[90];$/;"	m	class:motzkin_rgs_lex	access:public
str_	src/comb/paren-lex.h	/^    char *str_;  \/\/ String representation,  e.g. "((())())()"$/;"	m	class:paren_lex	access:public
str_	src/comb/paren.h	/^    char *str_;  \/\/ String representation,  e.g. "((())())()"$/;"	m	class:paren	access:public
str_all_maps	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_all_maps(ulong z\/*=0*\/)  const$/;"	f	class:lindenmayer_system	signature:(ulong z ) const
str_all_maps	src/comb/lindenmayer-system.h	/^    std::vector<std::string> str_all_maps(ulong z=0)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong z=0) const
str_axiom	src/comb/lindenmayer-system.h	/^    std::string str_axiom()  const  { return std::string( (const char*)axiom_ ); }$/;"	f	class:lindenmayer_system	access:public	signature:() const
str_letter_at	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_letter_at(ulong j)  const$/;"	f	class:lindenmayer_system	signature:(ulong j) const
str_letter_at	src/comb/lindenmayer-system.h	/^    const std::string & str_letter_at(ulong j)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong j) const
str_map_at	src/comb/lindenmayer-system.cc	/^lindenmayer_system::str_map_at(ulong j)  const$/;"	f	class:lindenmayer_system	signature:(ulong j) const
str_map_at	src/comb/lindenmayer-system.h	/^    const std::string & str_map_at(ulong j)  const;$/;"	p	class:lindenmayer_system	access:public	signature:(ulong j) const
string	src/comb/attic/stringsubst.h	/^    const char* string()  const  { return cc_; }$/;"	f	class:string_subst	access:public	signature:() const
string	src/comb/paren-lex.h	/^    const char * string()  \/\/ generate on demand$/;"	f	class:paren_lex	access:public	signature:()
string	src/comb/paren.h	/^    const char * string()  \/\/ generate on demand$/;"	f	class:paren	access:public	signature:()
string	src/ds/attic/coroutine-paren-demo.cc	/^    const char *string()  const  { return str; }$/;"	f	class:paren	access:public	signature:() const
string_subst	src/comb/attic/stringsubst.h	/^    explicit string_subst(ulong cmax, ulong nsym, const char ** symrule)$/;"	f	class:string_subst	access:public	signature:(ulong cmax, ulong nsym, const char ** symrule)
string_subst	src/comb/attic/stringsubst.h	/^    string_subst(const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:private	signature:(const string_subst&)
string_subst	src/comb/attic/stringsubst.h	/^class string_subst$/;"	c
string_subst	src/comb/string-subst.h	/^    explicit string_subst(ulong nlev, ulong maxrlen=2048)$/;"	f	class:string_subst	access:public	signature:(ulong nlev, ulong maxrlen=2048)
string_subst	src/comb/string-subst.h	/^    string_subst(const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:protected	signature:(const string_subst&)
string_subst	src/comb/string-subst.h	/^class string_subst$/;"	c
string_subst::NCHAR	src/comb/string-subst.h	/^    static const ulong NCHAR = 128;$/;"	m	class:string_subst	access:public
string_subst::OK	src/comb/string-subst.cc	/^string_subst::OK()  const$/;"	f	class:string_subst	signature:() const
string_subst::OK	src/comb/string-subst.h	/^    bool OK()  const;$/;"	p	class:string_subst	access:public	signature:() const
string_subst::add_map	src/comb/string-subst.cc	/^string_subst::add_map(const uchar * const c, const uchar * const str)$/;"	f	class:string_subst	signature:(const uchar * const c, const uchar * const str)
string_subst::add_map	src/comb/string-subst.cc	/^string_subst::add_map(uchar c, const uchar * const str)$/;"	f	class:string_subst	signature:(uchar c, const uchar * const str)
string_subst::add_map	src/comb/string-subst.h	/^    bool add_map(const uchar *c, const uchar *str);$/;"	p	class:string_subst	access:protected	signature:(const uchar *c, const uchar *str)
string_subst::add_map	src/comb/string-subst.h	/^    bool add_map(uchar c, const uchar * const str);$/;"	p	class:string_subst	access:protected	signature:(uchar c, const uchar * const str)
string_subst::axiom_	src/comb/string-subst.h	/^    uchar *axiom_;  \/\/ the axiom$/;"	m	class:string_subst	access:public
string_subst::cc_	src/comb/attic/stringsubst.h	/^    char  *cc_;  \/\/ string to hold result$/;"	m	class:string_subst	access:public
string_subst::cmax_	src/comb/attic/stringsubst.h	/^    ulong cmax_;  \/\/ max string length$/;"	m	class:string_subst	access:public
string_subst::ctc_	src/comb/attic/stringsubst.h	/^    ulong ctc_;  \/\/ count chars of result actually produced$/;"	m	class:string_subst	access:public
string_subst::ctor_core	src/comb/string-subst.h	/^    void ctor_core(ulong nlev, ulong maxrlen)$/;"	f	class:string_subst	access:protected	signature:(ulong nlev, ulong maxrlen)
string_subst::current	src/comb/string-subst.h	/^    char current()  const$/;"	f	class:string_subst	access:public	signature:() const
string_subst::current	src/comb/string-subst.h	/^    char current(ulong lev)  const$/;"	f	class:string_subst	access:protected	signature:(ulong lev) const
string_subst::do_subst	src/comb/attic/stringsubst.h	/^    void do_subst(ulong n, const char *rule)$/;"	f	class:string_subst	access:private	signature:(ulong n, const char *rule)
string_subst::dtor_core	src/comb/string-subst.h	/^    void dtor_core()$/;"	f	class:string_subst	access:protected	signature:()
string_subst::end_map_ptr_	src/comb/string-subst.h	/^    uchar *end_map_ptr_;  \/\/ position in maps_[] after last map$/;"	m	class:string_subst	access:public
string_subst::first	src/comb/string-subst.h	/^    bool first()$/;"	f	class:string_subst	access:public	signature:()
string_subst::get_repstr	src/comb/attic/stringsubst.h	/^    const char *get_repstr(char c)  const$/;"	f	class:string_subst	access:private	signature:(char c) const
string_subst::lev_ptr_	src/comb/string-subst.h	/^    uchar **lev_ptr_;  \/\/ position in levels: [nlev+1]$/;"	m	class:string_subst	access:public
string_subst::map_start_	src/comb/string-subst.h	/^    uchar *map_start_[NCHAR];  \/\/ ASCII only, pointers into maps_[]$/;"	m	class:string_subst	access:public
string_subst::maps_	src/comb/string-subst.h	/^    uchar *maps_;  \/\/ all maps (images of maps, each null terminated)$/;"	m	class:string_subst	access:public
string_subst::maxrlen_	src/comb/string-subst.h	/^    ulong maxrlen_;  \/\/ max that many symbols in all maps combined$/;"	m	class:string_subst	access:public
string_subst::next	src/comb/string-subst.h	/^    bool next()  { return  next(nlev_); }$/;"	f	class:string_subst	access:public	signature:()
string_subst::next	src/comb/string-subst.h	/^    bool next(ulong lev)$/;"	f	class:string_subst	access:protected	signature:(ulong lev)
string_subst::nlev_	src/comb/string-subst.h	/^    ulong nlev_;  \/\/ that many levels (iterate of the L-system)$/;"	m	class:string_subst	access:public
string_subst::nsym_	src/comb/attic/stringsubst.h	/^    ulong nsym_;    \/\/ number of symbols$/;"	m	class:string_subst	access:public
string_subst::num_maps	src/comb/string-subst.cc	/^string_subst::num_maps()  const$/;"	f	class:string_subst	signature:() const
string_subst::num_maps	src/comb/string-subst.h	/^    ulong num_maps()  const;$/;"	p	class:string_subst	access:public	signature:() const
string_subst::operator =	src/comb/attic/stringsubst.h	/^    string_subst & operator = (const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:private	signature:(const string_subst&)
string_subst::operator =	src/comb/string-subst.h	/^    string_subst & operator = (const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:protected	signature:(const string_subst&)
string_subst::print_internal_state	src/comb/string-subst.cc	/^string_subst::print_internal_state()  const$/;"	f	class:string_subst	signature:() const
string_subst::print_internal_state	src/comb/string-subst.h	/^    void print_internal_state()  const;$/;"	p	class:string_subst	access:public	signature:() const
string_subst::print_maps	src/comb/string-subst.cc	/^string_subst::print_maps()  const$/;"	f	class:string_subst	signature:() const
string_subst::print_maps	src/comb/string-subst.h	/^    void print_maps()  const;$/;"	p	class:string_subst	access:public	signature:() const
string_subst::print_rules	src/comb/attic/stringsubst.cc	/^string_subst::print_rules(const char *start\/*=0*\/)$/;"	f	class:string_subst	signature:(const char *start )
string_subst::print_rules	src/comb/attic/stringsubst.h	/^    void print_rules(const char *start=0);$/;"	p	class:string_subst	access:public	signature:(const char *start=0)
string_subst::set_all_maps	src/comb/string-subst.cc	/^string_subst::set_all_maps(const char * const maps[], ulong nr)$/;"	f	class:string_subst	signature:(const char * const maps[], ulong nr)
string_subst::set_all_maps	src/comb/string-subst.h	/^    bool set_all_maps(const char * const maps[], ulong nr);$/;"	p	class:string_subst	access:public	signature:(const char * const maps[], ulong nr)
string_subst::set_axiom	src/comb/string-subst.cc	/^string_subst::set_axiom(const char * const ax)$/;"	f	class:string_subst	signature:(const char * const ax)
string_subst::set_axiom	src/comb/string-subst.h	/^    bool set_axiom(const char * const ax);$/;"	p	class:string_subst	access:public	signature:(const char * const ax)
string_subst::setup	src/comb/attic/stringsubst.h	/^    void setup(ulong cmax, ulong nsym, const char ** symrule)$/;"	f	class:string_subst	access:private	signature:(ulong cmax, ulong nsym, const char ** symrule)
string_subst::string	src/comb/attic/stringsubst.h	/^    const char* string()  const  { return cc_; }$/;"	f	class:string_subst	access:public	signature:() const
string_subst::string_subst	src/comb/attic/stringsubst.h	/^    explicit string_subst(ulong cmax, ulong nsym, const char ** symrule)$/;"	f	class:string_subst	access:public	signature:(ulong cmax, ulong nsym, const char ** symrule)
string_subst::string_subst	src/comb/attic/stringsubst.h	/^    string_subst(const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:private	signature:(const string_subst&)
string_subst::string_subst	src/comb/string-subst.h	/^    explicit string_subst(ulong nlev, ulong maxrlen=2048)$/;"	f	class:string_subst	access:public	signature:(ulong nlev, ulong maxrlen=2048)
string_subst::string_subst	src/comb/string-subst.h	/^    string_subst(const string_subst&);  \/\/ forbidden$/;"	p	class:string_subst	access:protected	signature:(const string_subst&)
string_subst::subst	src/comb/attic/stringsubst.h	/^    ulong subst(ulong maxn, const char *start)$/;"	f	class:string_subst	access:public	signature:(ulong maxn, const char *start)
string_subst::symbol_	src/comb/attic/stringsubst.h	/^    char *symbol_;   \/\/ alphabet$/;"	m	class:string_subst	access:public
string_subst::symrule_	src/comb/attic/stringsubst.h	/^    const char ** symrule_;  \/\/ symrule_[i] points to string to replace i-th symbol with$/;"	m	class:string_subst	access:public
string_subst::verify	src/comb/attic/stringsubst.cc	/^string_subst::verify(const char *start\/*=""*\/, bool vq\/*=true*\/)$/;"	f	class:string_subst	signature:(const char *start , bool vq )
string_subst::verify	src/comb/attic/stringsubst.h	/^    int verify(const char *start="", bool vq=true);$/;"	p	class:string_subst	access:public	signature:(const char *start=Ó, bool vq=true)
string_subst::xlate_	src/comb/attic/stringsubst.h	/^    ulong xlate_[128];  \/\/ translate char |-> rule$/;"	m	class:string_subst	access:public
string_subst::~string_subst	src/comb/attic/stringsubst.h	/^    ~string_subst()$/;"	f	class:string_subst	access:public	signature:()
string_subst::~string_subst	src/comb/string-subst.h	/^    ~string_subst()$/;"	f	class:string_subst	access:public	signature:()
strings	demo/sort/sort-string-demo.cc	/^Cstr strings[] = {$/;"	v
stro	demo/comb/paren-gray-rec-demo.cc	/^char stro[64];$/;"	v
structures	fxt.lsm	/^                sorting, searching, data structures, bit-wizardry$/;"	v
sub_mod	doc/mod-doc.txt	/^inline umod_t sub_mod(umod_t a, umod_t b, umod_t m);$/;"	p	file:	signature:(umod_t a, umod_t b, umod_t m)
sub_mod	src/mod/modarith.h	/^inline umod_t sub_mod(umod_t a, umod_t b, umod_t m)$/;"	f	signature:(umod_t a, umod_t b, umod_t m)
sub_sat16	doc/bits-doc.txt	/^static inline ushort sub_sat16(ushort a, ushort b);$/;"	p	file:	signature:(ushort a, ushort b)
sub_sat16	src/bits/branchless.h	/^static inline ushort sub_sat16(ushort a, ushort b)$/;"	f	signature:(ushort a, ushort b)
sub_tree_cmp	src/comb/tree-lev-seq-aux.h	/^    bool sub_tree_cmp(const ulong *a, ulong f, ulong k)  const$/;"	f	class:tree_lev_seq_aux	access:private	signature:(const ulong *a, ulong f, ulong k) const
subset_auto_convolution	doc/walsh-doc.txt	/^inline void subset_auto_convolution(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
subset_auto_convolution	src/walsh/subset-convolution.h	/^inline void subset_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
subset_convolution	doc/walsh-doc.txt	/^inline void subset_convolution(Type *f, Type *g, ulong ldn);$/;"	p	file:	signature:(Type *f, Type *g, ulong ldn)
subset_convolution	src/walsh/subset-convolution.h	/^inline void subset_convolution(Type *f, Type *g, ulong ldn)$/;"	f	signature:(Type *f, Type *g, ulong ldn)
subset_debruijn	src/comb/attic/subsetdebruijn.h	/^    subset_debruijn(ulong nn)$/;"	f	class:subset_debruijn	access:public	signature:(ulong nn)
subset_debruijn	src/comb/attic/subsetdebruijn.h	/^class subset_debruijn : public binary_debruijn$/;"	c	inherits:binary_debruijn
subset_debruijn	src/comb/subset-debruijn.h	/^    explicit subset_debruijn(ulong n)$/;"	f	class:subset_debruijn	access:public	signature:(ulong n)
subset_debruijn	src/comb/subset-debruijn.h	/^    subset_debruijn(const subset_debruijn&);  \/\/ forbidden$/;"	p	class:subset_debruijn	access:private	signature:(const subset_debruijn&)
subset_debruijn	src/comb/subset-debruijn.h	/^class subset_debruijn : public binary_debruijn$/;"	c	inherits:binary_debruijn
subset_debruijn::data	src/comb/attic/subsetdebruijn.h	/^    const ulong * data()  { return x; }$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::data	src/comb/subset-debruijn.h	/^    const ulong * data()  const  { return x; }$/;"	f	class:subset_debruijn	access:public	signature:() const
subset_debruijn::done	src/comb/subset-debruijn.h	/^    int done()  const;  \/\/ forbidden (exists in base class)$/;"	p	class:subset_debruijn	access:private	signature:() const
subset_debruijn::el_	src/comb/subset-debruijn.h	/^    ulong el_;  \/\/ new element to be shifted in$/;"	m	class:subset_debruijn	access:protected
subset_debruijn::first	src/comb/subset-debruijn.h	/^    void first()$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::init	src/comb/attic/subsetdebruijn.h	/^    void init()$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::next	src/comb/attic/subsetdebruijn.h	/^    ulong next()  \/\/ return number of elements in subset$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::next	src/comb/subset-debruijn.h	/^    ulong next()  \/\/ return number of elements$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::num_	src/comb/subset-debruijn.h	/^    ulong num_;  \/\/ number of elements in subset$/;"	m	class:subset_debruijn	access:protected
subset_debruijn::operator =	src/comb/subset-debruijn.h	/^    subset_debruijn & operator = (const subset_debruijn&);  \/\/ forbidden$/;"	p	class:subset_debruijn	access:private	signature:(const subset_debruijn&)
subset_debruijn::subset_debruijn	src/comb/attic/subsetdebruijn.h	/^    subset_debruijn(ulong nn)$/;"	f	class:subset_debruijn	access:public	signature:(ulong nn)
subset_debruijn::subset_debruijn	src/comb/subset-debruijn.h	/^    explicit subset_debruijn(ulong n)$/;"	f	class:subset_debruijn	access:public	signature:(ulong n)
subset_debruijn::subset_debruijn	src/comb/subset-debruijn.h	/^    subset_debruijn(const subset_debruijn&);  \/\/ forbidden$/;"	p	class:subset_debruijn	access:private	signature:(const subset_debruijn&)
subset_debruijn::sync_x	src/comb/attic/subsetdebruijn.h	/^    void sync_x()$/;"	f	class:subset_debruijn	access:protected	signature:()
subset_debruijn::sync_x	src/comb/subset-debruijn.h	/^    void sync_x()$/;"	f	class:subset_debruijn	access:protected	signature:()
subset_debruijn::x	src/comb/attic/subsetdebruijn.h	/^    ulong *x;$/;"	m	class:subset_debruijn	access:protected
subset_debruijn::x	src/comb/subset-debruijn.h	/^    ulong *x;   \/\/ subset as delta set$/;"	m	class:subset_debruijn	access:protected
subset_debruijn::~subset_debruijn	src/comb/attic/subsetdebruijn.h	/^    ~subset_debruijn()  { delete [] x;}$/;"	f	class:subset_debruijn	access:public	signature:()
subset_debruijn::~subset_debruijn	src/comb/subset-debruijn.h	/^    ~subset_debruijn()  { delete [] x; }$/;"	f	class:subset_debruijn	access:public	signature:()
subset_deltalex	src/comb/subset-deltalex.h	/^    explicit subset_deltalex(ulong n)$/;"	f	class:subset_deltalex	access:public	signature:(ulong n)
subset_deltalex	src/comb/subset-deltalex.h	/^    subset_deltalex(const subset_deltalex&);  \/\/ forbidden$/;"	p	class:subset_deltalex	access:private	signature:(const subset_deltalex&)
subset_deltalex	src/comb/subset-deltalex.h	/^class subset_deltalex$/;"	c
subset_deltalex::d_	src/comb/subset-deltalex.h	/^    ulong *d_;  \/\/ subset as delta set$/;"	m	class:subset_deltalex	access:public
subset_deltalex::data	src/comb/subset-deltalex.h	/^    const ulong * data()  const  { return d_; }$/;"	f	class:subset_deltalex	access:public	signature:() const
subset_deltalex::first	src/comb/subset-deltalex.h	/^    void first()$/;"	f	class:subset_deltalex	access:public	signature:()
subset_deltalex::n_	src/comb/subset-deltalex.h	/^    ulong n_;   \/\/ subsets of the  n-set {0,1,2,...,n-1}$/;"	m	class:subset_deltalex	access:public
subset_deltalex::next	src/comb/subset-deltalex.h	/^    bool next()$/;"	f	class:subset_deltalex	access:public	signature:()
subset_deltalex::operator =	src/comb/subset-deltalex.h	/^    subset_deltalex & operator = (const subset_deltalex&);  \/\/ forbidden$/;"	p	class:subset_deltalex	access:private	signature:(const subset_deltalex&)
subset_deltalex::subset_deltalex	src/comb/subset-deltalex.h	/^    explicit subset_deltalex(ulong n)$/;"	f	class:subset_deltalex	access:public	signature:(ulong n)
subset_deltalex::subset_deltalex	src/comb/subset-deltalex.h	/^    subset_deltalex(const subset_deltalex&);  \/\/ forbidden$/;"	p	class:subset_deltalex	access:private	signature:(const subset_deltalex&)
subset_deltalex::~subset_deltalex	src/comb/subset-deltalex.h	/^    ~subset_deltalex()$/;"	f	class:subset_deltalex	access:public	signature:()
subset_gray	src/comb/subset-gray.h	/^    explicit subset_gray(ulong n)$/;"	f	class:subset_gray	access:public	signature:(ulong n)
subset_gray	src/comb/subset-gray.h	/^    subset_gray(const subset_gray&);  \/\/ forbidden$/;"	p	class:subset_gray	access:private	signature:(const subset_gray&)
subset_gray	src/comb/subset-gray.h	/^class subset_gray$/;"	c
subset_gray::data	src/comb/subset-gray.h	/^    const ulong * data() const { return x_+1; }$/;"	f	class:subset_gray	access:public	signature:() const
subset_gray::first	src/comb/subset-gray.h	/^    ulong first()  { k_ = 0;  return k_; }$/;"	f	class:subset_gray	access:public	signature:()
subset_gray::k_	src/comb/subset-gray.h	/^    ulong k_;   \/\/ number of elements in subset$/;"	m	class:subset_gray	access:public
subset_gray::last	src/comb/subset-gray.h	/^    ulong last()  { x_[1] = 1;  k_ = 1;  return k_; }$/;"	f	class:subset_gray	access:public	signature:()
subset_gray::n_	src/comb/subset-gray.h	/^    ulong n_;   \/\/ subsets of the n-set;  must have n>=1$/;"	m	class:subset_gray	access:public
subset_gray::next	src/comb/subset-gray.h	/^    ulong next()$/;"	f	class:subset_gray	access:public	signature:()
subset_gray::next_even	src/comb/subset-gray.h	/^    ulong next_even()$/;"	f	class:subset_gray	access:private	signature:()
subset_gray::next_odd	src/comb/subset-gray.h	/^    ulong next_odd()$/;"	f	class:subset_gray	access:private	signature:()
subset_gray::num	src/comb/subset-gray.h	/^    ulong num() const { return k_; }$/;"	f	class:subset_gray	access:public	signature:() const
subset_gray::operator =	src/comb/subset-gray.h	/^    subset_gray & operator = (const subset_gray&);  \/\/ forbidden$/;"	p	class:subset_gray	access:private	signature:(const subset_gray&)
subset_gray::prev	src/comb/subset-gray.h	/^    ulong prev()$/;"	f	class:subset_gray	access:public	signature:()
subset_gray::print_deltaset	src/comb/subset-gray.h	/^    void print_deltaset(const char *bla=0)  const$/;"	f	class:subset_gray	access:public	signature:(const char *bla=0) const
subset_gray::print_set	src/comb/subset-gray.h	/^    void print_set(const char *bla=0)  const$/;"	f	class:subset_gray	access:public	signature:(const char *bla=0) const
subset_gray::subset_gray	src/comb/subset-gray.h	/^    explicit subset_gray(ulong n)$/;"	f	class:subset_gray	access:public	signature:(ulong n)
subset_gray::subset_gray	src/comb/subset-gray.h	/^    subset_gray(const subset_gray&);  \/\/ forbidden$/;"	p	class:subset_gray	access:private	signature:(const subset_gray&)
subset_gray::x_	src/comb/subset-gray.h	/^    ulong *x_;  \/\/ data k-subset of {1,2,...,n} in x[1,...,k]$/;"	m	class:subset_gray	access:public
subset_gray::~subset_gray	src/comb/subset-gray.h	/^    ~subset_gray()$/;"	f	class:subset_gray	access:public	signature:()
subset_gray_delta	src/comb/subset-gray-delta.h	/^    explicit subset_gray_delta(ulong n)$/;"	f	class:subset_gray_delta	access:public	signature:(ulong n)
subset_gray_delta	src/comb/subset-gray-delta.h	/^    subset_gray_delta(const subset_gray_delta&);  \/\/ forbidden$/;"	p	class:subset_gray_delta	access:private	signature:(const subset_gray_delta&)
subset_gray_delta	src/comb/subset-gray-delta.h	/^class subset_gray_delta$/;"	c
subset_gray_delta::ct_	src/comb/subset-gray-delta.h	/^    ulong ct_;  \/\/ gray_code(ct_) corresponds to the current subset$/;"	m	class:subset_gray_delta	access:public
subset_gray_delta::current	src/comb/subset-gray-delta.h	/^    ulong current()  const  { return ct_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
subset_gray_delta::data	src/comb/subset-gray-delta.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
subset_gray_delta::first	src/comb/subset-gray-delta.h	/^    void first(ulong v=0)$/;"	f	class:subset_gray_delta	access:public	signature:(ulong v=0)
subset_gray_delta::j_	src/comb/subset-gray-delta.h	/^    ulong j_;   \/\/ position of last change$/;"	m	class:subset_gray_delta	access:public
subset_gray_delta::mct_	src/comb/subset-gray-delta.h	/^    ulong mct_;  \/\/ max value of ct.$/;"	m	class:subset_gray_delta	access:public
subset_gray_delta::n_	src/comb/subset-gray-delta.h	/^    ulong n_;   \/\/ number of elements in set <= BITS_PER_LONG$/;"	m	class:subset_gray_delta	access:public
subset_gray_delta::next	src/comb/subset-gray-delta.h	/^    ulong next()$/;"	f	class:subset_gray_delta	access:public	signature:()
subset_gray_delta::operator =	src/comb/subset-gray-delta.h	/^    subset_gray_delta & operator = (const subset_gray_delta&);  \/\/ forbidden$/;"	p	class:subset_gray_delta	access:private	signature:(const subset_gray_delta&)
subset_gray_delta::pos	src/comb/subset-gray-delta.h	/^    ulong pos()  const { return j_; }$/;"	f	class:subset_gray_delta	access:public	signature:() const
subset_gray_delta::prev	src/comb/subset-gray-delta.h	/^    ulong prev()$/;"	f	class:subset_gray_delta	access:public	signature:()
subset_gray_delta::subset_gray_delta	src/comb/subset-gray-delta.h	/^    explicit subset_gray_delta(ulong n)$/;"	f	class:subset_gray_delta	access:public	signature:(ulong n)
subset_gray_delta::subset_gray_delta	src/comb/subset-gray-delta.h	/^    subset_gray_delta(const subset_gray_delta&);  \/\/ forbidden$/;"	p	class:subset_gray_delta	access:private	signature:(const subset_gray_delta&)
subset_gray_delta::x_	src/comb/subset-gray-delta.h	/^    ulong *x_;  \/\/ current subset as delta set$/;"	m	class:subset_gray_delta	access:public
subset_gray_delta::~subset_gray_delta	src/comb/subset-gray-delta.h	/^    ~subset_gray_delta()$/;"	f	class:subset_gray_delta	access:public	signature:()
subset_lex	src/comb/subset-lex.h	/^    explicit subset_lex(ulong n)$/;"	f	class:subset_lex	access:public	signature:(ulong n)
subset_lex	src/comb/subset-lex.h	/^    subset_lex(const subset_lex&);  \/\/ forbidden$/;"	p	class:subset_lex	access:private	signature:(const subset_lex&)
subset_lex	src/comb/subset-lex.h	/^class subset_lex$/;"	c
subset_lex::data	src/comb/subset-lex.h	/^    const ulong * data()  const  { return x_; }$/;"	f	class:subset_lex	access:public	signature:() const
subset_lex::first	src/comb/subset-lex.h	/^    ulong first()$/;"	f	class:subset_lex	access:public	signature:()
subset_lex::k_	src/comb/subset-lex.h	/^    ulong k_;   \/\/ index of last element in subset$/;"	m	class:subset_lex	access:public
subset_lex::last	src/comb/subset-lex.h	/^    ulong last()$/;"	f	class:subset_lex	access:public	signature:()
subset_lex::n1_	src/comb/subset-lex.h	/^    ulong n1_;  \/\/ == n - 1 for n >=1, and == 0 for n==0$/;"	m	class:subset_lex	access:public
subset_lex::n_	src/comb/subset-lex.h	/^    ulong n_;   \/\/ number of elements in set, should have n>=1$/;"	m	class:subset_lex	access:public
subset_lex::next	src/comb/subset-lex.h	/^    ulong next()$/;"	f	class:subset_lex	access:public	signature:()
subset_lex::num_parts	src/comb/subset-lex.h	/^    ulong num_parts()  const  {  return  k_ + 1; }$/;"	f	class:subset_lex	access:public	signature:() const
subset_lex::operator =	src/comb/subset-lex.h	/^    subset_lex & operator = (const subset_lex&);  \/\/ forbidden$/;"	p	class:subset_lex	access:private	signature:(const subset_lex&)
subset_lex::prev	src/comb/subset-lex.h	/^    ulong prev()$/;"	f	class:subset_lex	access:public	signature:()
subset_lex::subset_lex	src/comb/subset-lex.h	/^    explicit subset_lex(ulong n)$/;"	f	class:subset_lex	access:public	signature:(ulong n)
subset_lex::subset_lex	src/comb/subset-lex.h	/^    subset_lex(const subset_lex&);  \/\/ forbidden$/;"	p	class:subset_lex	access:private	signature:(const subset_lex&)
subset_lex::x_	src/comb/subset-lex.h	/^    ulong *x_;  \/\/ x[0...k-1]:  subset of {0,1,2,...,n-1}$/;"	m	class:subset_lex	access:public
subset_lex::x_	src/comb/subset-lex.h	/^    ulong x_[SUBSET_LEX_MAX_ARRAY_LEN];$/;"	m	class:subset_lex	access:public
subset_lex::~subset_lex	src/comb/subset-lex.h	/^    ~subset_lex()$/;"	f	class:subset_lex	access:public	signature:()
subset_lex_compare	src/comb/subset-lex-compare.h	/^inline int subset_lex_compare(const Type *a, ulong na,$/;"	f	signature:(const Type *a, ulong na, const Type *b, ulong nb, bool rlq=false)
subset_monotone	src/comb/attic/subset-monotone.h	/^    explicit subset_monotone(ulong nn)$/;"	f	class:subset_monotone	access:public	signature:(ulong nn)
subset_monotone	src/comb/attic/subset-monotone.h	/^    subset_monotone(const subset_monotone&);  \/\/ forbidden$/;"	p	class:subset_monotone	access:private	signature:(const subset_monotone&)
subset_monotone	src/comb/attic/subset-monotone.h	/^class subset_monotone$/;"	c
subset_monotone::data	src/comb/attic/subset-monotone.h	/^    const ulong * data()  const { return x; }$/;"	f	class:subset_monotone	access:public	signature:() const
subset_monotone::first	src/comb/attic/subset-monotone.h	/^    ulong first()$/;"	f	class:subset_monotone	access:public	signature:()
subset_monotone::make_next	src/comb/attic/subset-monotone.h	/^    void make_next()$/;"	f	class:subset_monotone	access:protected	signature:()
subset_monotone::mask	src/comb/attic/subset-monotone.h	/^    ulong mask;$/;"	m	class:subset_monotone	access:protected
subset_monotone::n	src/comb/attic/subset-monotone.h	/^    ulong n;$/;"	m	class:subset_monotone	access:protected
subset_monotone::next	src/comb/attic/subset-monotone.h	/^    ulong next()  \/\/ return number of elements in subset$/;"	f	class:subset_monotone	access:public	signature:()
subset_monotone::num	src/comb/attic/subset-monotone.h	/^    ulong num;$/;"	m	class:subset_monotone	access:protected
subset_monotone::operator =	src/comb/attic/subset-monotone.h	/^    subset_monotone & operator = (const subset_monotone&);  \/\/ forbidden$/;"	p	class:subset_monotone	access:private	signature:(const subset_monotone&)
subset_monotone::s	src/comb/attic/subset-monotone.h	/^    ulong s;$/;"	m	class:subset_monotone	access:protected
subset_monotone::subset_monotone	src/comb/attic/subset-monotone.h	/^    explicit subset_monotone(ulong nn)$/;"	f	class:subset_monotone	access:public	signature:(ulong nn)
subset_monotone::subset_monotone	src/comb/attic/subset-monotone.h	/^    subset_monotone(const subset_monotone&);  \/\/ forbidden$/;"	p	class:subset_monotone	access:private	signature:(const subset_monotone&)
subset_monotone::x	src/comb/attic/subset-monotone.h	/^    ulong *x;$/;"	m	class:subset_monotone	access:protected
subset_monotone::~subset_monotone	src/comb/attic/subset-monotone.h	/^    virtual ~subset_monotone()  { delete [] x; }$/;"	f	class:subset_monotone	access:public	signature:()
subsets	fxt.lsm	/^                subsets, multisets, Gray codes, Catalan objects, necklaces, Lyndon words.$/;"	v
subst	src/comb/attic/stringsubst.h	/^    ulong subst(ulong maxn, const char *start)$/;"	f	class:string_subst	access:public	signature:(ulong maxn, const char *start)
subtract	doc/aux1-doc.txt	/^inline void subtract(Type *f, ulong n, const Type *g);$/;"	p	file:	signature:(Type *f, ulong n, const Type *g)
subtract	src/aux1/arith1.h	/^inline void subtract(Type *f, ulong n, const Type *g)$/;"	f	signature:(Type *f, ulong n, const Type *g)
subtract	src/aux2/attic/arith2d.h	/^inline void subtract(Type **f, ulong nr, ulong nc, const Type *const*g)$/;"	f	signature:(Type **f, ulong nr, ulong nc, const Type *const*g)
subtract_val	src/aux2/attic/arith2d.h	/^inline void subtract_val(Type **f, ulong nr, ulong nc, Type s)$/;"	f	signature:(Type **f, ulong nr, ulong nc, Type s)
sum	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
sum	src/aux2/attic/arith2d.h	/^inline Type sum(const Type *const*f, ulong nr, ulong nc)$/;"	f	signature:(const Type *const*f, ulong nr, ulong nc)
sum	src/bits/pcrc64.h	/^    Type sum()$/;"	f	class:pcrc64	access:public	signature:()
sum_of_squares	src/aux2/attic/arith2d.h	/^inline Type sum_of_squares(const Type *const*f, ulong nr, ulong nc)$/;"	f	signature:(const Type *const*f, ulong nr, ulong nc)
sumdiff	doc/aux0-doc.txt	/^static inline void sumdiff(Type &a, Type &b);$/;"	p	file:	signature:(Type &a, Type &b)
sumdiff	doc/aux0-doc.txt	/^static inline void sumdiff(Type a, Type b, Type &s, Type &d);$/;"	p	file:	signature:(Type a, Type b, Type &s, Type &d)
sumdiff	src/aux0/sumdiff.h	/^static inline void sumdiff(Type &a, Type &b)$/;"	f	signature:(Type &a, Type &b)
sumdiff	src/aux0/sumdiff.h	/^static inline void sumdiff(Type a, Type b, Type &s, Type &d)$/;"	f	signature:(Type a, Type b, Type &s, Type &d)
sumdiff05	doc/aux0-doc.txt	/^static inline void sumdiff05(Type &a, Type &b);$/;"	p	file:	signature:(Type &a, Type &b)
sumdiff05	doc/aux0-doc.txt	/^static inline void sumdiff05(Type a, Type b, Type &s, Type &d);$/;"	p	file:	signature:(Type a, Type b, Type &s, Type &d)
sumdiff05	src/aux0/sumdiff.h	/^static inline void sumdiff05(Type &a, Type &b)$/;"	f	signature:(Type &a, Type &b)
sumdiff05	src/aux0/sumdiff.h	/^static inline void sumdiff05(Type a, Type b, Type &s, Type &d)$/;"	f	signature:(Type a, Type b, Type &s, Type &d)
sumdiff05_r	doc/aux0-doc.txt	/^static inline void sumdiff05_r(Type &a, Type &b);$/;"	p	file:	signature:(Type &a, Type &b)
sumdiff05_r	src/aux0/sumdiff.h	/^static inline void sumdiff05_r(Type &a, Type &b)$/;"	f	signature:(Type &a, Type &b)
sumdiff3	doc/aux0-doc.txt	/^static inline void sumdiff3(Type &a, Type b, Type &d);$/;"	p	file:	signature:(Type &a, Type b, Type &d)
sumdiff3	src/aux0/sumdiff.h	/^static inline void sumdiff3(Type &a, Type b, Type &d)$/;"	f	signature:(Type &a, Type b, Type &d)
sumdiff3_r	doc/aux0-doc.txt	/^static inline void sumdiff3_r(Type &a, Type b, Type &d);$/;"	p	file:	signature:(Type &a, Type b, Type &d)
sumdiff3_r	src/aux0/sumdiff.h	/^static inline void sumdiff3_r(Type &a, Type b, Type &d)$/;"	f	signature:(Type &a, Type b, Type &d)
sumdiff_r	doc/aux0-doc.txt	/^static inline void sumdiff_r(Type &a, Type &b);$/;"	p	file:	signature:(Type &a, Type &b)
sumdiff_r	src/aux0/sumdiff.h	/^static inline void sumdiff_r(Type &a, Type &b)$/;"	f	signature:(Type &a, Type &b)
supercell	doc/wfl-hilbert-doc.txt	/^entry and exit nodes, and <vertex> locating it within its supercell;$/;"	v
sw1_	src/comb/attic/combination-altminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_altminchange	access:public
sw1_	src/comb/attic/combination-minchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_minchange	access:public
sw1_	src/comb/attic/combminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:comb_minchange	access:public
sw1_	src/comb/attic/perm-minchange.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_minchange	access:public
sw1_	src/comb/attic/perm-trotter.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
sw1_	src/comb/kperm-gray.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:kperm_gray	access:public
sw1_	src/comb/mset-perm-gray.h	/^    ulong sw1_, sw2_;  \/\/ positions swapped with last update$/;"	m	class:mset_perm_gray	access:public
sw1_	src/comb/perm-gray-ffact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact	access:public
sw1_	src/comb/perm-gray-ffact2.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact2	access:public
sw1_	src/comb/perm-gray-lipski.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_lipski	access:public
sw1_	src/comb/perm-gray-rfact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rfact	access:public
sw1_	src/comb/perm-gray-rot1.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rot1	access:public
sw1_	src/comb/perm-gray-wells.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_wells	access:public
sw1_	src/comb/perm-heap.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap	access:public
sw1_	src/comb/perm-heap2-swaps.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2_swaps	access:public
sw1_	src/comb/perm-heap2.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2	access:public
sw1_	src/comb/perm-trotter-lg.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter_lg	access:public
sw1_	src/comb/perm-trotter.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
sw2_	src/comb/attic/combination-altminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_altminchange	access:public
sw2_	src/comb/attic/combination-minchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:combination_minchange	access:public
sw2_	src/comb/attic/combminchange.h	/^    ulong sw1_, sw2_;$/;"	m	class:comb_minchange	access:public
sw2_	src/comb/attic/perm-minchange.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_minchange	access:public
sw2_	src/comb/attic/perm-trotter.h	/^    ulong sw1_, sw2_; \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
sw2_	src/comb/kperm-gray.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:kperm_gray	access:public
sw2_	src/comb/mset-perm-gray.h	/^    ulong sw1_, sw2_;  \/\/ positions swapped with last update$/;"	m	class:mset_perm_gray	access:public
sw2_	src/comb/perm-gray-ffact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact	access:public
sw2_	src/comb/perm-gray-ffact2.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_ffact2	access:public
sw2_	src/comb/perm-gray-lipski.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_lipski	access:public
sw2_	src/comb/perm-gray-rfact.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rfact	access:public
sw2_	src/comb/perm-gray-rot1.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_gray_rot1	access:public
sw2_	src/comb/perm-gray-wells.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_gray_wells	access:public
sw2_	src/comb/perm-heap.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap	access:public
sw2_	src/comb/perm-heap2-swaps.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2_swaps	access:public
sw2_	src/comb/perm-heap2.h	/^    ulong sw1_, sw2_;   \/\/ indices of swapped elements$/;"	m	class:perm_heap2	access:public
sw2_	src/comb/perm-trotter-lg.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter_lg	access:public
sw2_	src/comb/perm-trotter.h	/^    ulong sw1_, sw2_;  \/\/ indices of elements swapped most recently$/;"	m	class:perm_trotter	access:public
swap	doc/aux1-doc.txt	/^inline void swap(Type *f, Type *g, ulong n);$/;"	p	file:	signature:(Type *f, Type *g, ulong n)
swap	src/aux1/copy.h	/^inline void swap(Type *f, Type *g, ulong n)$/;"	f	signature:(Type *f, Type *g, ulong n)
swap	src/comb/attic/all-compositions-minchange.cc	/^all_compositions_minchange::swap(ulong i1, ulong i2, ulong k)$/;"	f	class:all_compositions_minchange	signature:(ulong i1, ulong i2, ulong k)
swap	src/comb/attic/all-compositions-minchange.h	/^    void swap(ulong i1, ulong i2, ulong k);$/;"	p	class:all_compositions_minchange	access:protected	signature:(ulong i1, ulong i2, ulong k)
swap	src/comb/kperm-gray.h	/^    void swap(ulong j, ulong im)$/;"	f	class:kperm_gray	access:private	signature:(ulong j, ulong im)
swap	src/comb/perm-gray-ffact.h	/^    void swap(ulong j, ulong im)  \/\/ used with next() and prev()$/;"	f	class:perm_gray_ffact	access:private	signature:(ulong j, ulong im)
swap0	doc/aux0-doc.txt	/^static inline void  swap0(Type &x, Type &y);$/;"	p	file:	signature:(Type &x, Type &y)
swap0	src/aux0/swap.h	/^static inline void  swap0(Type &x, Type &y)$/;"	f	signature:(Type &x, Type &y)
swap2	doc/aux0-doc.txt	/^static inline void  swap2(Type &x, Type &y);$/;"	p	file:	signature:(Type &x, Type &y)
swap2	src/aux0/swap.h	/^static inline void  swap2(Type &x, Type &y)$/;"	f	signature:(Type &x, Type &y)
swap_blocks	doc/perm-doc.txt	/^void swap_blocks(Type *f, ulong x1, ulong n1, ulong x2, ulong n2);$/;"	p	file:	signature:(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)
swap_blocks	src/perm/swapblocks.h	/^void swap_blocks(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)$/;"	f	signature:(Type *f, ulong x1, ulong n1, ulong x2, ulong n2)
swap_elements	src/comb/perm-st-gray.h	/^    void swap_elements(ulong x1, ulong x2)$/;"	f	class:perm_st_gray	access:private	signature:(ulong x1, ulong x2)
swap_positions	src/comb/kperm-lex.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:kperm_lex	access:private	signature:(ulong i1, ulong i2)
swap_positions	src/comb/perm-lex-inv.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:perm_lex_inv	access:private	signature:(ulong i1, ulong i2)
swap_positions	src/comb/perm-st-gray.h	/^    void swap_positions(ulong i1, ulong i2)$/;"	f	class:perm_st_gray	access:private	signature:(ulong i1, ulong i2)
swp_	src/comb/perm-star-swaps.h	/^    ulong swp_;  \/\/ index of element that was swapped (with index 0)$/;"	m	class:perm_star_swaps	access:public
swp_	src/comb/perm-star.h	/^    ulong swp_;  \/\/ index of element that was swapped (with index 0)$/;"	m	class:perm_star	access:public
swt_normalize	doc/walsh-doc.txt	/^void swt_normalize(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
swt_normalize	src/walsh/square-wave-transform.h	/^void swt_normalize(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
sxct	demo/comb/necklace-gray-demo.cc	/^ulong sxct;  \/\/ count extra transitions$/;"	v
sxct	demo/comb/necklace-gray3-demo.cc	/^ulong sxct;  \/\/ count extra transitions$/;"	v
sym	demo/arith/zero-divisors-demo.cc	/^int *sym;$/;"	v
sym	demo/arith/zero-divisors-pairs-demo.cc	/^int *sym;$/;"	v
sym	src/comb/print-vec.cc	/^static const char sym[]="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!";$/;"	v	file:
symbol_	src/comb/attic/stringsubst.h	/^    char *symbol_;   \/\/ alphabet$/;"	m	class:string_subst	access:public
symbolify_by_order	src/sort/attic/symbolify.h	/^ulong symbolify_by_order(const Type *f, Type * restrict g, ulong n,$/;"	f	signature:(const Type *f, Type * restrict g, ulong n, Type eps=1e-6, ulong *ix=0)
symbolify_by_size	src/sort/attic/symbolify.h	/^ulong symbolify_by_size(const Type *f, Type * restrict g, ulong n,$/;"	f	signature:(const Type *f, Type * restrict g, ulong n, Type eps=1e-6, ulong *ix=0)
symm	src/aux1/attic/symmetry.cc	/^symm(double *f, ulong n, int s=+1)$/;"	f	signature:(double *f, ulong n, int s=+1)
symm	src/aux1/attic/symmetry.h	/^void symm(double *f, ulong n, int s=+1);$/;"	p	signature:(double *f, ulong n, int s=+1)
symm_0	src/aux1/attic/symmetry.cc	/^symm_0(double *f, ulong n, int s=+1)$/;"	f	signature:(double *f, ulong n, int s=+1)
symm_0	src/aux1/attic/symmetry.h	/^void symm_0(double *f, ulong n, int s=+1);$/;"	p	signature:(double *f, ulong n, int s=+1)
symm_0_q	src/aux1/attic/symmetry.cc	/^symm_0_q(const double *f, ulong n, double eps\/*=1e-5*\/)$/;"	f	signature:(const double *f, ulong n, double eps )
symm_0_q	src/aux1/attic/symmetry.h	/^int symm_0_q(const double *f, ulong n, double eps=1e-5);$/;"	p	signature:(const double *f, ulong n, double eps=1e-5)
symm_q	src/aux1/attic/symmetry.cc	/^symm_q(const double *f, ulong n, double eps\/*=1e-5*\/)$/;"	f	signature:(const double *f, ulong n, double eps )
symm_q	src/aux1/attic/symmetry.h	/^int symm_q(const double *f, ulong n, double eps=1e-5);$/;"	p	signature:(const double *f, ulong n, double eps=1e-5)
symmetric_part	src/matrix/attic/symmetricpart.h	/^int symmetric_part(const MAT &A, MAT &B)$/;"	f	signature:(const MAT &A, MAT &B)
symrule_	src/comb/attic/stringsubst.h	/^    const char ** symrule_;  \/\/ symrule_[i] points to string to replace i-th symbol with$/;"	m	class:string_subst	access:public
sync_x	src/comb/attic/combcolex.h	/^    ulong sync_x()$/;"	f	class:comb_colex	access:public	signature:()
sync_x	src/comb/attic/combination-altminchange.h	/^    void sync_x()  \/\/ aux$/;"	f	class:combination_altminchange	access:public	signature:()
sync_x	src/comb/attic/combination-minchange.h	/^    void sync_x()  \/\/ aux$/;"	f	class:combination_minchange	access:public	signature:()
sync_x	src/comb/attic/comblex.h	/^    void sync_x()$/;"	f	class:comb_lex	access:public	signature:()
sync_x	src/comb/attic/combminchange.h	/^    void sync_x()$/;"	f	class:comb_minchange	access:public	signature:()
sync_x	src/comb/attic/compositionalt.h	/^    void sync_x()  \/\/ aux$/;"	f	class:composition_alt	access:public	signature:()
sync_x	src/comb/attic/subsetdebruijn.h	/^    void sync_x()$/;"	f	class:subset_debruijn	access:protected	signature:()
sync_x	src/comb/subset-debruijn.h	/^    void sync_x()$/;"	f	class:subset_debruijn	access:protected	signature:()
t	bin	/^@/;"	v
t	demo/comb/schroeder-tree-demo.cc	/^int Comp[MAX], S[MAX], c[TMAX], q[TMAX], M[TMAX], t[MAX];$/;"	v
t	demo/seq/A278479-demo.cc	/^    ulong t;$/;"	m	class:triang_num	file:	access:private
t	src/bpol/bitpol2lhca.o	/^/;"	v
t	src/comb/partition-conj.o	/^óÃ/;"	v
t	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	m	struct:paren::__anon2	file:	access:public
t	src/mod/maxorder.o	/^/;"	v
t1_	src/ds/attic/priorityqueue1.h	/^    Type1 *t1_;  \/\/ time:   t1[1..s]  one-based array!$/;"	m	class:priority_queue1	access:public
t1_	src/ds/priorityqueue.h	/^    Type1 *t1_;  \/\/ time:   t1[1..s]  one-based array!$/;"	m	class:priority_queue	access:public
t_	src/aux0/attic/funcemu.h	/^    ulong *t_;  \/\/ sTate stack$/;"	m	class:funcemu	access:public
t_	src/bits/tcrc64.h	/^    uint64 t_[TSIZE];  \/\/ lookup table$/;"	m	class:tcrc64	access:public
t_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
t_	src/comb/combination-chase.h	/^    ulong t_;  \/\/ == n_ - s_$/;"	m	class:combination_chase	access:public
t_	src/comb/combination-pref.h	/^    ulong s_, t_, n_;  \/\/ combination (n choose k) where n=s+t, k=t.$/;"	m	class:combination_pref	access:public
t_	src/comb/paren-pref.h	/^    const ulong t_, s_;  \/\/ t: number of ones, s: number of zeros$/;"	m	class:paren_pref	access:public
t_	src/comb/score-sequence.h	/^    ulong *t_;  \/\/ lower bounds on cumulative sums: t[k] = k*(k+1)\/2$/;"	m	class:score_sequence	access:public
t_	src/ds/attic/coroutine.h	/^    ulong *t_;  \/\/ sTate stack$/;"	m	class:coroutine	access:public
t_	src/mod/divisors.h	/^    umod_t *t_;   \/\/ aux (products)$/;"	m	class:divisors	access:public
ta_	src/perm/attic/cycles.h	/^    bitarray *ta_;  \/\/ tag array to mark cycle ends$/;"	m	class:cycles	access:public
table	demo/seq/A182372-demo.cc	/^static TABLE_TYPE table[256 * BYTES_PER_LONG];$/;"	v	file:
table_fht	src/fht/attic/fhttable.cc	/^table_fht(double *fr, ulong ldn, double *cosval, double *sinval)$/;"	f	signature:(double *fr, ulong ldn, double *cosval, double *sinval)
tau	demo/comb/necklace-sigma-tau-demo.cc	/^inline ulong tau(ulong x)  { return  x ^ 1; }$/;"	f	signature:(ulong x)
tcrc64	src/bits/tcrc64.h	/^    explicit tcrc64(uint64 c=0)$/;"	f	class:tcrc64	access:public	signature:(uint64 c=0)
tcrc64	src/bits/tcrc64.h	/^class tcrc64$/;"	c
tcrc64::a_	src/bits/tcrc64.h	/^    uint64 a_;  \/\/ internal state (polynomial modulo c)$/;"	m	class:tcrc64	access:public
tcrc64::bit_in	src/bits/tcrc64.h	/^    void bit_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
tcrc64::byte_in	src/bits/tcrc64.h	/^    uint64 byte_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
tcrc64::c_	src/bits/tcrc64.h	/^    uint64 c_;  \/\/ a binary primitive polynomial$/;"	m	class:tcrc64	access:public
tcrc64::get_a	src/bits/tcrc64.h	/^    uint64 get_a()  const  { return a_; }$/;"	f	class:tcrc64	access:public	signature:() const
tcrc64::init	src/bits/tcrc64.h	/^    void init(uint64 c)$/;"	f	class:tcrc64	access:public	signature:(uint64 c)
tcrc64::nibble_in	src/bits/tcrc64.h	/^    void nibble_in(uchar b)$/;"	f	class:tcrc64	access:public	signature:(uchar b)
tcrc64::reset	src/bits/tcrc64.h	/^    void reset()  { set_a(~0ULL); }  \/\/ all ones$/;"	f	class:tcrc64	access:public	signature:()
tcrc64::set_a	src/bits/tcrc64.h	/^    void set_a(uint64 a)  { a_=a; }$/;"	f	class:tcrc64	access:public	signature:(uint64 a)
tcrc64::shift	src/bits/tcrc64.h	/^    void shift()$/;"	f	class:tcrc64	access:public	signature:()
tcrc64::t_	src/bits/tcrc64.h	/^    uint64 t_[TSIZE];  \/\/ lookup table$/;"	m	class:tcrc64	access:public
tcrc64::tcrc64	src/bits/tcrc64.h	/^    explicit tcrc64(uint64 c=0)$/;"	f	class:tcrc64	access:public	signature:(uint64 c=0)
tcrc64::word_in	src/bits/tcrc64.h	/^    uint64 word_in(uint64 w)$/;"	f	class:tcrc64	access:public	signature:(uint64 w)
tcrc64::~tcrc64	src/bits/tcrc64.h	/^    ~tcrc64()  {;}$/;"	f	class:tcrc64	access:public	signature:()
test	src/ds/bitarray.h	/^    ulong test(ulong n)  const$/;"	f	class:bitarray	access:public	signature:(ulong n) const
test	src/graph/digraph.cc	/^digraph::test()  const$/;"	f	class:digraph	signature:() const
test	src/graph/digraph.h	/^    ulong test()  const;$/;"	p	class:digraph	access:public	signature:() const
test	src/graph/lyndon-gray.h	/^    inline ulong test(ulong v)$/;"	f	class:lyndon_gray	access:public	signature:(ulong v)
test	src/wavelet/attic/waveletfilter.cc	/^static const double test[] =$/;"	v	file:
test_ac_gray	doc/comb-doc.txt	/^ulong test_ac_gray(ulong *g, ulong n);$/;"	p	file:	signature:(ulong *g, ulong n)
test_ac_gray	src/comb/acgray.cc	/^test_ac_gray(ulong *g, ulong n)$/;"	f	signature:(ulong *g, ulong n)
test_ac_gray	src/comb/acgray.h	/^ulong test_ac_gray(ulong *g, ulong n);$/;"	p	signature:(ulong *g, ulong n)
test_all	demo/arith/zero-divisors-demo.cc	/^test_all()$/;"	f	signature:()
test_all	demo/arith/zero-divisors-pairs-demo.cc	/^test_all()$/;"	f	signature:()
test_arith_3_progression	doc/comb-doc.txt	/^inline ulong test_arith_3_progression(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
test_arith_3_progression	src/comb/arith-3-progression.h	/^inline ulong test_arith_3_progression(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
test_arith_3_progression_consec	doc/comb-doc.txt	/^inline ulong test_arith_3_progression_consec(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
test_arith_3_progression_consec	src/comb/arith-3-progression.h	/^inline ulong test_arith_3_progression_consec(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
test_arith_3_progression_eqd	doc/comb-doc.txt	/^inline ulong test_arith_3_progression_eqd(const ulong *a, ulong n);$/;"	p	file:	signature:(const ulong *a, ulong n)
test_arith_3_progression_eqd	src/comb/arith-3-progression.h	/^inline ulong test_arith_3_progression_eqd(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
test_bit	doc/bits-doc.txt	/^static inline ulong test_bit(ulong a, ulong i);$/;"	p	file:	signature:(ulong a, ulong i)
test_bit	src/bits/bittest.h	/^static inline ulong test_bit(ulong a, ulong i)$/;"	f	signature:(ulong a, ulong i)
test_bit01	doc/bits-doc.txt	/^static inline bool test_bit01(ulong a, ulong i);$/;"	p	file:	signature:(ulong a, ulong i)
test_bit01	src/bits/bittest.h	/^static inline bool test_bit01(ulong a, ulong i)$/;"	f	signature:(ulong a, ulong i)
test_bitpol_primitive	doc/bpol-doc.txt	/^inline ulong test_bitpol_primitive(ulong c, ulong h, const factorization &mfact);$/;"	p	file:	signature:(ulong c, ulong h, const factorization &mfact)
test_bitpol_primitive	src/bpol/bitpol-primitive.h	/^inline ulong test_bitpol_primitive(ulong c, ulong h, const factorization &mfact)$/;"	f	signature:(ulong c, ulong h, const factorization &mfact)
test_canonical_gray	src/comb/test-gray.cc	/^test_canonical_gray(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
test_canonical_gray	src/comb/test-gray.h	/^ulong test_canonical_gray(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
test_change	src/ds/bitarray.h	/^    ulong test_change(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
test_clear	src/ds/bitarray.h	/^    ulong test_clear(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
test_debruijn	demo/bits/all-dbs-demo.cc	/^test_debruijn(ulong w, ulong n)$/;"	f	signature:(ulong w, ulong n)
test_delta	demo/perm/permutation-matrix-demo.cc	/^inline ulong test_delta(const Type *f, ulong n, Type *vp=0)$/;"	f	signature:(const Type *f, ulong n, Type *vp=0)
test_edge_sorted	src/graph/digraph.cc	/^digraph::test_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const$/;"	f	class:digraph	signature:(int (*cmp)(const ulong &, const ulong &)) const
test_edge_sorted	src/graph/digraph.h	/^    ulong test_edge_sorted(int (*cmp)(const ulong &, const ulong &))  const;$/;"	p	class:digraph	access:public	signature:(int (*cmp)(const ulong &, const ulong &)) const
test_eq	test/test-fact.cc	/^bool test_eq(const ulong *a, const ulong *b, ulong n)$/;"	f	signature:(const ulong *a, const ulong *b, ulong n)
test_equivalent	src/perm/attic/cycles.cc	/^cycles::test_equivalent(const ulong *f, ulong n)  const$/;"	f	class:cycles	signature:(const ulong *f, ulong n) const
test_equivalent	src/perm/attic/cycles.h	/^    int test_equivalent(const ulong *f, ulong n)  const;$/;"	p	class:cycles	access:public	signature:(const ulong *f, ulong n) const
test_gray_path	src/comb/test-gray.cc	/^test_gray_path(const ulong *f, ulong n)$/;"	f	signature:(const ulong *f, ulong n)
test_gray_path	src/comb/test-gray.h	/^ulong test_gray_path(const ulong *f, ulong n);$/;"	p	signature:(const ulong *f, ulong n)
test_heap	doc/ds-doc.txt	/^ulong test_heap(const Type *x, ulong n);$/;"	p	file:	signature:(const Type *x, ulong n)
test_heap	src/ds/heap.h	/^ulong test_heap(const Type *x, ulong n)$/;"	f	signature:(const Type *x, ulong n)
test_inverse_mrotate_eq	src/perm/attic/mrotate.h	/^ulong test_inverse_mrotate_eq(const Type *f, ulong n, ulong r, const Type *g)$/;"	f	signature:(const Type *f, ulong n, ulong r, const Type *g)
test_lr	demo/ds/left-right-array-demo.cc	/^test_lr(left_right_array &LR)$/;"	f	signature:(left_right_array &LR)
test_lucky_path	src/graph/digraph-paths.cc	/^digraph_paths::test_lucky_path()  const$/;"	f	class:digraph_paths	signature:() const
test_lucky_path	src/graph/digraph-paths.h	/^    ulong test_lucky_path()  const;$/;"	p	class:digraph_paths	access:public	signature:() const
test_mrotate_eq	src/perm/attic/mrotate.h	/^ulong test_mrotate_eq(const Type *f, ulong n, ulong r, const Type *g)$/;"	f	signature:(const Type *f, ulong n, ulong r, const Type *g)
test_noncrossing_setpart_rgs	src/comb/is-noncrossing-setpart-rgs.h	/^inline ulong test_noncrossing_setpart_rgs(const ulong *R, ulong n)$/;"	f	signature:(const ulong *R, ulong n)
test_print2d	test/test-transpose.cc	/^test_print2d(const Type *f, ulong nr, ulong nc)$/;"	f	signature:(const Type *f, ulong nr, ulong nc)
test_prod	demo/arith/zero-divisors-demo.cc	/^test_prod(ulong i0, ulong i1, ulong j0, ulong j1)$/;"	f	signature:(ulong i0, ulong i1, ulong j0, ulong j1)
test_prod	demo/arith/zero-divisors-pairs-demo.cc	/^test_prod(ulong i0, ulong i1, ulong j0, ulong j1)$/;"	f	signature:(ulong i0, ulong i1, ulong j0, ulong j1)
test_revbin_perm	test/test-permute.cc	/^test_revbin_perm(ulong *gr, ulong ldn)$/;"	f	file:	signature:(ulong *gr, ulong ldn)
test_set	src/ds/bitarray.h	/^    ulong test_set(ulong n)$/;"	f	class:bitarray	access:public	signature:(ulong n)
test_strictly_concave	doc/sort-doc.txt	/^ulong test_strictly_concave(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
test_strictly_concave	src/sort/convex.h	/^ulong test_strictly_concave(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
test_strictly_convex	doc/sort-doc.txt	/^ulong test_strictly_convex(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
test_strictly_convex	src/sort/convex.h	/^ulong test_strictly_convex(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
test_unique	doc/sort-doc.txt	/^ulong test_unique(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
test_unique	doc/sort-doc.txt	/^ulong test_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
test_unique	src/sort/unique.h	/^ulong test_unique(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
test_unique	src/sort/uniquefunc.h	/^ulong test_unique(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(const Type *f, ulong n, int (*cmp)(const Type &, const Type &))
test_unique_approx	src/sort/attic/uniqueapprox.h	/^ulong test_unique_approx(const Type *f, ulong n, Type da)$/;"	f	signature:(const Type *f, ulong n, Type da)
tex_draw_turn	doc/aux0-doc.txt	/^void tex_draw_turn(double x, double y,$/;"	p	file:	signature:(double x, double y, double dx, double dy, double ndx, double ndy, ulong style, bool vq , double m )
tex_draw_turn	src/aux0/tex-line.cc	/^tex_draw_turn(double x, double y,$/;"	f	signature:(double x, double y, double dx, double dy, double ndx, double ndy, ulong style, bool vq , double m )
tex_draw_turn	src/aux0/tex-line.h	/^void tex_draw_turn(double x, double y, double dx, double dy, double ndx, double ndy,$/;"	p	signature:(double x, double y, double dx, double dy, double ndx, double ndy, ulong style, bool vq=true, double m=0.25)
tex_line	doc/aux0-doc.txt	/^inline void tex_line(ulong x0, ulong y0, ulong x1, ulong y1, bool vq=true);$/;"	p	file:	signature:(ulong x0, ulong y0, ulong x1, ulong y1, bool vq=true)
tex_line	doc/aux0-doc.txt	/^void tex_line(long x0, long y0, long x1, long y1, bool vq\/*=true*\/);$/;"	p	file:	signature:(long x0, long y0, long x1, long y1, bool vq )
tex_line	src/aux0/tex-line.cc	/^tex_line(long x0, long y0, long x1, long y1, bool vq\/*=true*\/)$/;"	f	signature:(long x0, long y0, long x1, long y1, bool vq )
tex_line	src/aux0/tex-line.h	/^inline void tex_line(ulong x0, ulong y0, ulong x1, ulong y1, bool vq=true)$/;"	f	signature:(ulong x0, ulong y0, ulong x1, ulong y1, bool vq=true)
tex_line	src/aux0/tex-line.h	/^void tex_line(long x0, long y0, long x1, long y1, bool vq=true);$/;"	p	signature:(long x0, long y0, long x1, long y1, bool vq=true)
tex_line_fl	doc/aux0-doc.txt	/^void tex_line_fl(double x0, double y0, double x1, double y1, bool vq\/*=true*\/);$/;"	p	file:	signature:(double x0, double y0, double x1, double y1, bool vq )
tex_line_fl	src/aux0/tex-line.cc	/^tex_line_fl(double x0, double y0, double x1, double y1, bool vq\/*=true*\/)$/;"	f	signature:(double x0, double y0, double x1, double y1, bool vq )
tex_line_fl	src/aux0/tex-line.h	/^void tex_line_fl(double x0, double y0, double x1, double y1, bool vq=true);$/;"	p	signature:(double x0, double y0, double x1, double y1, bool vq=true)
tfb_	src/bits/bit-necklace.h	/^    ulong tfb_;  \/\/ for fast factor lookup$/;"	m	class:bit_necklace	access:public
tg_	src/ds/left-right-array.h	/^    bool *tg_;   \/\/ tags: tg[i]==true if and only if index i is free$/;"	m	class:left_right_array	access:public
than	doc/wfl-hilbert-doc.txt	/^2  rather than  4 , so long as they were unequal --- again only at  l = 0 .$/;"	v
thue_morse	src/bits/thue-morse.h	/^    explicit thue_morse(ulong k=0)  { init(k); }$/;"	f	class:thue_morse	access:public	signature:(ulong k=0)
thue_morse	src/bits/thue-morse.h	/^class thue_morse$/;"	c
thue_morse::data	src/bits/thue-morse.h	/^    ulong data()  { return tm_; }$/;"	f	class:thue_morse	access:public	signature:()
thue_morse::init	src/bits/thue-morse.h	/^    ulong init(ulong k=0)$/;"	f	class:thue_morse	access:public	signature:(ulong k=0)
thue_morse::k_	src/bits/thue-morse.h	/^    ulong k_;$/;"	m	class:thue_morse	access:public
thue_morse::next	src/bits/thue-morse.h	/^    ulong next()$/;"	f	class:thue_morse	access:public	signature:()
thue_morse::thue_morse	src/bits/thue-morse.h	/^    explicit thue_morse(ulong k=0)  { init(k); }$/;"	f	class:thue_morse	access:public	signature:(ulong k=0)
thue_morse::tm_	src/bits/thue-morse.h	/^    ulong tm_;$/;"	m	class:thue_morse	access:public
thue_morse::~thue_morse	src/bits/thue-morse.h	/^    ~thue_morse()  { ; }$/;"	f	class:thue_morse	access:public	signature:()
timediff	src/aux0/attic/timer.h	/^inline double timediff(timeval &x, timeval &y)$/;"	f	signature:(timeval &x, timeval &y)
tiny_factors_tab	src/bits/tinyfactors.cc	/^extern const ulong tiny_factors_tab[BITS_PER_LONG] =$/;"	v
tm_	src/bits/thue-morse.h	/^    ulong tm_;$/;"	m	class:thue_morse	access:public
tmp	scripts/mkcompl.sh	/^    cp $CNAME \/tmp;$/;"	v
to	doc/wfl-hilbert-doc.txt	/^node  2  decoding to  [0,1] ; set the vector to this.  At pace  1  of the$/;"	v
to_num	src/comb/mixedradix-colex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_colex	access:public	signature:() const
to_num	src/comb/mixedradix-endo-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_endo_gray	access:public	signature:() const
to_num	src/comb/mixedradix-endo.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_endo	access:public	signature:() const
to_num	src/comb/mixedradix-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gray	access:public	signature:() const
to_num	src/comb/mixedradix-gray2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gray2	access:public	signature:() const
to_num	src/comb/mixedradix-gslex-alt.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex_alt	access:public	signature:() const
to_num	src/comb/mixedradix-gslex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex	access:public	signature:() const
to_num	src/comb/mixedradix-gslex2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_gslex2	access:public	signature:() const
to_num	src/comb/mixedradix-lex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_lex	access:public	signature:() const
to_num	src/comb/mixedradix-modular-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_modular_gray	access:public	signature:() const
to_num	src/comb/mixedradix-modular-gray2.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_modular_gray2	access:public	signature:() const
to_num	src/comb/mixedradix-naf-gray.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf_gray	access:public	signature:() const
to_num	src/comb/mixedradix-naf-subset-lex.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:() const
to_num	src/comb/mixedradix-naf.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_naf	access:public	signature:() const
to_num	src/comb/mixedradix-restrpref.h	/^    ulong to_num()  const$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
top	demo/comb/schroeder-tree-demo.cc	/^int m, k, n, p, top, last, r, numtrees, j, sum;$/;"	v
tp_	src/aux0/attic/funcemu.h	/^    ulong tp_;  \/\/ sTate stack Pointer$/;"	m	class:funcemu	access:public
tp_	src/ds/attic/coroutine.h	/^    ulong tp_;  \/\/ sTate stack Pointer$/;"	m	class:coroutine	access:public
tr1e	src/bpol/gf2n.cc	/^GF2n GF2n::tr1e;  \/\/ an element with trace == 1$/;"	m	class:GF2n	file:
tr1e	src/bpol/gf2n.h	/^    static GF2n tr1e;  \/\/ an element with trace == 1$/;"	m	class:GF2n	access:public
tr_	src/bits/bit-sl-gray.h	/^    ulong tr_;  \/\/ current track (a one-bit word)$/;"	m	class:bit_sl_gray	access:public
tr_	src/comb/ascent-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track (position of rightmost nonzero digit)$/;"	m	class:ascent_rgs_subset_lex	access:public
tr_	src/comb/binary-sl-gray.h	/^    ulong tr_;  \/\/ aux: current track (0 <= tr <= n)$/;"	m	class:binary_sl_gray	access:public
tr_	src/comb/catalan-rgs-gslex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:catalan_rgs_gslex	access:public
tr_	src/comb/catalan-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:catalan_rgs_subset_lex	access:public
tr_	src/comb/catalan-step-rgs-colex.h	/^    ulong tr_;  \/\/ current track (position of first non-zero element)$/;"	m	class:catalan_step_rgs_colex	access:public
tr_	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ulong tr_;  \/\/ aux: track we are looking at$/;"	m	class:catalan_step_rgs_subset_lexrev	access:public
tr_	src/comb/dyck-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:dyck_rgs_subset_lex	access:public
tr_	src/comb/mixedradix-gslex-alt2.h	/^    ulong tr_;  \/\/ aux: current track$/;"	m	class:mixedradix_gslex_alt2	access:public
tr_	src/comb/mixedradix-gslex2.h	/^    ulong tr_;   \/\/ current track$/;"	m	class:mixedradix_gslex2	access:public
tr_	src/comb/mixedradix-sl-gray.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:mixedradix_sl_gray	access:public
tr_	src/comb/mixedradix-subset-lex.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:mixedradix_subset_lex	access:public
tr_	src/comb/mixedradix-subset-lexrev.h	/^    ulong tr_;  \/\/ aux: current track$/;"	m	class:mixedradix_subset_lexrev	access:public
tr_	src/comb/setpart-rgs-subset-lex.h	/^    ulong tr_;  \/\/ current track$/;"	m	class:setpart_rgs_subset_lex	access:public
tr_	src/comb/skew-binary.h	/^    ulong tr_;   \/\/ aux: current track$/;"	m	class:skew_binary	access:public
tr_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong tr_;  \/\/ track$/;"	m	class:weakly_unimodal_rgs_lex	access:public
tr_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong tr_;  \/\/ track: position of last non-zero digit$/;"	m	class:young_tab_rgs_subset_lex	access:public
trace	src/bpol/gf2n.h	/^    ulong trace()  const$/;"	f	class:GF2n	access:public	signature:() const
transform	fxt.lsm	/^                Walsh transform, Haar transform, wavelet transform$/;"	v
transform	fxt.lsm	/^                number theoretic transform,$/;"	v
transform	fxt.lsm	/^Keywords:       Fourier transform, Hartley transform,$/;"	v
transpose	doc/aux2-doc.txt	/^void transpose(Type *f, ulong nr, ulong nc, bitarray *B=0);$/;"	p	file:	signature:(Type *f, ulong nr, ulong nc, bitarray *B=0)
transpose	doc/aux2-doc.txt	/^void transpose(const Type * restrict f, Type * restrict g, ulong nr, ulong nc);$/;"	p	file:	signature:(const Type * restrict f, Type * restrict g, ulong nr, ulong nc)
transpose	src/aux2/transpose.h	/^void transpose(Type *f, ulong nr, ulong nc, bitarray *B=0)$/;"	f	signature:(Type *f, ulong nr, ulong nc, bitarray *B=0)
transpose	src/aux2/transpose.h	/^void transpose(const Type * restrict f, Type * restrict g, ulong nr, ulong nc)$/;"	f	signature:(const Type * restrict f, Type * restrict g, ulong nr, ulong nc)
transpose	src/matrix/matrix.h	/^    void transpose()$/;"	f	class:matrix	access:public	signature:()
transpose2	doc/aux2-doc.txt	/^void transpose2(Type *f, ulong nr, ulong nc, bitarray *B=0);$/;"	p	file:	signature:(Type *f, ulong nr, ulong nc, bitarray *B=0)
transpose2	src/aux2/transpose2.h	/^void transpose2(Type *f, ulong nr, ulong nc, bitarray *B=0)$/;"	f	signature:(Type *f, ulong nr, ulong nc, bitarray *B=0)
transpose_bit_board	test/test-bits.cc	/^ulong transpose_bit_board(ulong x)$/;"	f	signature:(ulong x)
transpose_square	doc/aux2-doc.txt	/^void transpose_square(Type **f, ulong nrc);$/;"	p	file:	signature:(Type **f, ulong nrc)
transpose_square	doc/aux2-doc.txt	/^void transpose_square(Type *f, ulong nrc);$/;"	p	file:	signature:(Type *f, ulong nrc)
transpose_square	src/aux2/transpose.h	/^void transpose_square(Type **f, ulong nrc)$/;"	f	signature:(Type **f, ulong nrc)
transpose_square	src/aux2/transpose.h	/^void transpose_square(Type *f, ulong nrc)$/;"	f	signature:(Type *f, ulong nrc)
transposed_haar_inplace_nn	doc/haar-doc.txt	/^void transposed_haar_inplace_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
transposed_haar_inplace_nn	src/haar/transposedhaarnn.h	/^void transposed_haar_inplace_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
transposed_haar_nn	doc/haar-doc.txt	/^void transposed_haar_nn(Type *f, ulong ldn, Type *ws=0);$/;"	p	file:	signature:(Type *f, ulong ldn, Type *ws=0)
transposed_haar_nn	src/haar/transposedhaarnn.h	/^void transposed_haar_nn(Type *f, ulong ldn, Type *ws=0)$/;"	f	signature:(Type *f, ulong ldn, Type *ws=0)
transposed_haar_rev_nn	doc/haar-doc.txt	/^void transposed_haar_rev_nn(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
transposed_haar_rev_nn	src/haar/transposedhaarrevnn.h	/^void transposed_haar_rev_nn(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
tree_lev_seq	src/comb/tree-lev-seq.h	/^    tree_lev_seq(ulong n)$/;"	f	class:tree_lev_seq	access:public	signature:(ulong n)
tree_lev_seq	src/comb/tree-lev-seq.h	/^class tree_lev_seq$/;"	c
tree_lev_seq::OK	src/comb/tree-lev-seq.h	/^    bool OK()  const  \/\/ test is incomplete$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::a_	src/comb/tree-lev-seq.h	/^    ulong *a_;  \/\/ level sequence: height of nodes in pre-order traversal$/;"	m	class:tree_lev_seq	access:private
tree_lev_seq::aux	src/comb/tree-lev-seq.h	/^    tree_lev_seq_aux aux;$/;"	m	class:tree_lev_seq	access:private
tree_lev_seq::branching_number	src/comb/tree-lev-seq.h	/^    ulong branching_number(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
tree_lev_seq::data	src/comb/tree-lev-seq.h	/^    const ulong *data()  const  { return a_; }$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::first	src/comb/tree-lev-seq.h	/^    void first()$/;"	f	class:tree_lev_seq	access:public	signature:()
tree_lev_seq::height	src/comb/tree-lev-seq.h	/^    ulong height()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::is_balanced	src/comb/tree-lev-seq.h	/^    bool is_balanced()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::is_branch	src/comb/tree-lev-seq.h	/^    bool is_branch(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
tree_lev_seq::is_identity_tree	src/comb/tree-lev-seq.h	/^    bool is_identity_tree()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::is_leaf	src/comb/tree-lev-seq.h	/^    bool is_leaf(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
tree_lev_seq::lev	src/comb/tree-lev-seq.h	/^    ulong lev(ulong k)  const { return ( k < size() ? a_[k] : 0 ); }$/;"	f	class:tree_lev_seq	access:public	signature:(ulong k) const
tree_lev_seq::limb_length	src/comb/tree-lev-seq.h	/^    ulong limb_length(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
tree_lev_seq::max_branching_number	src/comb/tree-lev-seq.h	/^    ulong max_branching_number()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::max_limb_length	src/comb/tree-lev-seq.h	/^    ulong max_limb_length()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::min_branching_number	src/comb/tree-lev-seq.h	/^    ulong min_branching_number()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::min_limb_length	src/comb/tree-lev-seq.h	/^    ulong min_limb_length()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::n_	src/comb/tree-lev-seq.h	/^    ulong n_;   \/\/ number of non-root nodes$/;"	m	class:tree_lev_seq	access:private
tree_lev_seq::next	src/comb/tree-lev-seq.h	/^    ulong next()$/;"	f	class:tree_lev_seq	access:public	signature:()
tree_lev_seq::num_leaves	src/comb/tree-lev-seq.h	/^    ulong num_leaves()  const$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::print	src/comb/tree-lev-seq.h	/^    void print(const char *bla)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla) const
tree_lev_seq::print_aa	src/comb/tree-lev-seq.h	/^    void print_aa(const char *bla)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla) const
tree_lev_seq::print_base_seq	src/comb/tree-lev-seq.h	/^    void print_base_seq(const char *bla, bool dfz=true)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
tree_lev_seq::print_branching_numbers	src/comb/tree-lev-seq.h	/^    void print_branching_numbers(const char *bla, bool dfz=true)  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, bool dfz=true) const
tree_lev_seq::print_paren_word	src/comb/tree-lev-seq.h	/^    void print_paren_word(const char *bla, const char * s="()")  const$/;"	f	class:tree_lev_seq	access:public	signature:(const char *bla, const char * s=Ó) const
tree_lev_seq::size	src/comb/tree-lev-seq.h	/^    ulong size()  const  { return n_ + 1; }$/;"	f	class:tree_lev_seq	access:public	signature:() const
tree_lev_seq::tree_lev_seq	src/comb/tree-lev-seq.h	/^    tree_lev_seq(ulong n)$/;"	f	class:tree_lev_seq	access:public	signature:(ulong n)
tree_lev_seq::valency	src/comb/tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
tree_lev_seq::~tree_lev_seq	src/comb/tree-lev-seq.h	/^    ~tree_lev_seq()$/;"	f	class:tree_lev_seq	access:public	signature:()
tree_lev_seq_aux	src/comb/tree-lev-seq-aux.h	/^class tree_lev_seq_aux$/;"	c
tree_lev_seq_aux::all_branching_numbers	src/comb/tree-lev-seq-aux.h	/^    void all_branching_numbers(const ulong *a, ulong n, ulong *b, ulong *s)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong *b, ulong *s) const
tree_lev_seq_aux::base_idx	src/comb/tree-lev-seq-aux.h	/^    ulong base_idx(const ulong *a, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:private	signature:(const ulong *a, ulong j) const
tree_lev_seq_aux::branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong branching_number(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
tree_lev_seq_aux::height	src/comb/tree-lev-seq-aux.h	/^    ulong height(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::is_balanced	src/comb/tree-lev-seq-aux.h	/^    bool is_balanced(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::is_branch	src/comb/tree-lev-seq-aux.h	/^    ulong is_branch(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
tree_lev_seq_aux::is_identity_tree	src/comb/tree-lev-seq-aux.h	/^    bool is_identity_tree(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::is_leaf	src/comb/tree-lev-seq-aux.h	/^    ulong is_leaf(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
tree_lev_seq_aux::limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong limb_length(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
tree_lev_seq_aux::max_branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong max_branching_number(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::max_limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong max_limb_length(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::min_branching_number	src/comb/tree-lev-seq-aux.h	/^    ulong min_branching_number(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::min_limb_length	src/comb/tree-lev-seq-aux.h	/^    ulong min_limb_length(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::num_leaves	src/comb/tree-lev-seq-aux.h	/^    ulong num_leaves(const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n) const
tree_lev_seq_aux::print_aa	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_aa(const char *bla, const ulong *a, ulong n)  const$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n) const
tree_lev_seq_aux::print_aa	src/comb/tree-lev-seq-aux.h	/^    void print_aa(const char *bla, const ulong *a, ulong n)  const;$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n) const
tree_lev_seq_aux::print_balanced_composition	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_balanced_composition(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n) const
tree_lev_seq_aux::print_balanced_composition	src/comb/tree-lev-seq-aux.h	/^    void print_balanced_composition(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n) const
tree_lev_seq_aux::print_base_seq	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_base_seq(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, bool dfz ) const
tree_lev_seq_aux::print_base_seq	src/comb/tree-lev-seq-aux.h	/^    void print_base_seq(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, bool dfz=true) const
tree_lev_seq_aux::print_branching_numbers	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_branching_numbers(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, bool dfz ) const
tree_lev_seq_aux::print_branching_numbers	src/comb/tree-lev-seq-aux.h	/^    void print_branching_numbers(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, bool dfz) const
tree_lev_seq_aux::print_paren_word	src/comb/tree-lev-seq-aux.cc	/^tree_lev_seq_aux::print_paren_word(const char *bla,$/;"	f	class:tree_lev_seq_aux	signature:(const char *bla, const ulong *a, ulong n, const char * s ) const
tree_lev_seq_aux::print_paren_word	src/comb/tree-lev-seq-aux.h	/^    void print_paren_word(const char *bla,$/;"	p	class:tree_lev_seq_aux	access:public	signature:(const char *bla, const ulong *a, ulong n, const char * s=Ó) const
tree_lev_seq_aux::sub_tree_cmp	src/comb/tree-lev-seq-aux.h	/^    bool sub_tree_cmp(const ulong *a, ulong f, ulong k)  const$/;"	f	class:tree_lev_seq_aux	access:private	signature:(const ulong *a, ulong f, ulong k) const
tree_lev_seq_aux::valency	src/comb/tree-lev-seq-aux.h	/^    ulong valency(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
tree_lev_seq_branching_number	src/comb/attic/tree-lev-seq-branching-num.h	/^inline ulong tree_lev_seq_branching_number(const ulong *a, ulong n, ulong j)$/;"	f	signature:(const ulong *a, ulong n, ulong j)
tree_lev_seq_branching_numbers	src/comb/attic/tree-lev-seq-branching-num.h	/^inline void tree_lev_seq_branching_numbers(const ulong *a, ulong n, ulong *b, ulong *s)$/;"	f	signature:(const ulong *a, ulong n, ulong *b, ulong *s)
tree_lev_seq_max_branching_number	src/comb/attic/tree-lev-seq-branching-num.h	/^inline ulong tree_lev_seq_max_branching_number(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
tree_lev_seq_min_branching_number	src/comb/attic/tree-lev-seq-branching-num.h	/^inline ulong tree_lev_seq_min_branching_number(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
triang_num	demo/seq/A278479-demo.cc	/^    triang_num()$/;"	f	class:triang_num	access:public	signature:()
triang_num	demo/seq/A278479-demo.cc	/^class triang_num$/;"	c	file:
triang_num::eo	demo/seq/A278479-demo.cc	/^    ulong eo(ulong y)  const$/;"	f	class:triang_num	file:	access:private	signature:(ulong y) const
triang_num::n	demo/seq/A278479-demo.cc	/^    ulong n;$/;"	m	class:triang_num	file:	access:private
triang_num::next	demo/seq/A278479-demo.cc	/^    ulong next()$/;"	f	class:triang_num	access:public	signature:()
triang_num::pos	demo/seq/A278479-demo.cc	/^    bool pos()  const  { return ps; }$/;"	f	class:triang_num	access:public	signature:() const
triang_num::ps	demo/seq/A278479-demo.cc	/^    bool ps;$/;"	m	class:triang_num	file:	access:private
triang_num::t	demo/seq/A278479-demo.cc	/^    ulong t;$/;"	m	class:triang_num	file:	access:private
triang_num::triang_num	demo/seq/A278479-demo.cc	/^    triang_num()$/;"	f	class:triang_num	access:public	signature:()
trigrec	src/aux0/attic/trigrec.h	/^    explicit trigrec(Type step)$/;"	f	class:trigrec	access:public	signature:(Type step)
trigrec	src/aux0/attic/trigrec.h	/^class trigrec$/;"	c
trigrec::al	src/aux0/attic/trigrec.h	/^    Type al, be;$/;"	m	class:trigrec	access:private
trigrec::be	src/aux0/attic/trigrec.h	/^    Type al, be;$/;"	m	class:trigrec	access:private
trigrec::next	src/aux0/attic/trigrec.h	/^    void next(Type &s, Type &c)$/;"	f	class:trigrec	access:public	signature:(Type &s, Type &c)
trigrec::trigrec	src/aux0/attic/trigrec.h	/^    explicit trigrec(Type step)$/;"	f	class:trigrec	access:public	signature:(Type step)
trigrec::~trigrec	src/aux0/attic/trigrec.h	/^    ~trigrec()  {;}$/;"	f	class:trigrec	access:public	signature:()
true	scripts/attic/iii.sh	/^            true;$/;"	v
true	scripts/replace	/^            true; # ok$/;"	v
try_incr	src/comb/young-tab-rgs.h	/^    bool try_incr(ulong j)$/;"	f	class:young_tab_rgs	access:private	signature:(ulong j)
try_lucky_path	src/graph/digraph-paths.h	/^    ulong try_lucky_path(ulong ns=0, ulong p=0);$/;"	p	class:digraph_paths	access:public	signature:(ulong ns=0, ulong p=0)
try_lucky_path	src/graph/search-digraph-trylucky.cc	/^digraph_paths::try_lucky_path(ulong ns\/*=0*\/, ulong p\/*=0*\/)$/;"	f	class:digraph_paths	signature:(ulong ns , ulong p )
try_write_tail	src/comb/composition-nz-i-smooth.h	/^    ulong try_write_tail(ulong j, ulong s, ulong p)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong j, ulong s, ulong p)
try_write_tail	src/comb/score-sequence.h	/^    bool try_write_tail(ulong st, ulong j, ulong aj)$/;"	f	class:score_sequence	access:private	signature:(ulong st, ulong j, ulong aj)
tt	demo/comb/composition-gray-rec-demo.cc	/^ulong *tt;  \/\/ aux$/;"	v
tt	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
tt_	src/perm/attic/cycles.h	/^    bitarray *tt_;  \/\/ aux: tag array for creating cycles$/;"	m	class:cycles	access:public
tv_	src/bpol/gf2n.cc	/^ulong GF2n::tv_ = 0;  \/\/ trace vector$/;"	m	class:GF2n	file:
tv_	src/bpol/gf2n.h	/^    static ulong tv_;  \/\/ trace vector$/;"	m	class:GF2n	access:public
two_parts	src/comb/composition-nz-i-smooth.h	/^    ulong two_parts(ulong y, ulong z)$/;"	f	class:composition_nz_i_smooth	access:private	signature:(ulong y, ulong z)
twodim_fft	doc/fft-doc.txt	/^void twodim_fft(double *fr, double *fi, ulong nr, ulong nc, int is);$/;"	p	file:	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
twodim_fft	src/fft/fft.h	/^void twodim_fft(double *fr, double *fi, ulong nr, ulong nc, int is);$/;"	p	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
twodim_fft	src/fft/twodimfft.cc	/^twodim_fft(double *fr, double *fi, ulong nr, ulong nc, int is)$/;"	f	signature:(double *fr, double *fi, ulong nr, ulong nc, int is)
twodim_fht	doc/fht-doc.txt	/^void twodim_fht(double *f, ulong nr, ulong nc);$/;"	p	file:	signature:(double *f, ulong nr, ulong nc)
twodim_fht	src/fht/fht2d.h	/^void twodim_fht(double *f, ulong nr, ulong nc);$/;"	p	signature:(double *f, ulong nr, ulong nc)
twodim_fht	src/fht/twodimfht.cc	/^twodim_fht(double *f, ulong nr, ulong nc)$/;"	f	signature:(double *f, ulong nr, ulong nc)
twodim_fht_convolution_core	doc/convolution-doc.txt	/^void twodim_fht_convolution_core(const double *f, double *g, ulong nr, ulong nc); \/\/ aux$/;"	p	file:	signature:(const double *f, double *g, ulong nr, ulong nc)
twodim_fht_convolution_core	src/convolution/realconvolution.h	/^void twodim_fht_convolution_core(const double *f, double *g, ulong nr, ulong nc);  \/\/ aux$/;"	p	signature:(const double *f, double *g, ulong nr, ulong nc)
twodim_fht_convolution_core	src/convolution/twodimfhtcnvl.cc	/^twodim_fht_convolution_core(const double *f, double *g, ulong nr, ulong nc)$/;"	f	signature:(const double *f, double *g, ulong nr, ulong nc)
twrk_	src/comb/composition-nz-i-smooth.h	/^    ulong twrk_;  \/\/ total work$/;"	m	class:composition_nz_i_smooth	access:public
u	src/comb/lindenmayer-system.o	/^ELF/;"	v
u	src/comb/perm-restrpref.h	/^    ulong *u;  \/\/ auxiliary table: undo operations$/;"	m	class:perm_restrpref	access:protected
u	src/comb/test-gray.o	/^/;"	v
u_	src/comb/composition-nz-upstep.h	/^    ulong u_;   \/\/ maximal allowed up-step$/;"	m	class:composition_nz_upstep	access:public
u_	src/comb/kperm-lex.h	/^    ulong u_;   \/\/ sort up to position u+1$/;"	m	class:kperm_lex	access:public
u_unique	doc/sort-doc.txt	/^bool u_unique(const Type *f, ulong n);$/;"	p	file:	signature:(const Type *f, ulong n)
u_unique	src/sort/usearch.h	/^bool u_unique(const Type *f, ulong n)$/;"	f	signature:(const Type *f, ulong n)
uchar	src/fxttypes.h	/^typedef  unsigned char         uchar;$/;"	t
ugcd	src/aux0/attic/gcd.cc	/^ugcd(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
ugcd	src/mod/attic/gcd.cc	/^ugcd(umod_t a, umod_t b)$/;"	f	signature:(umod_t a, umod_t b)
uint	src/fxttypes.h	/^typedef  unsigned int           uint;$/;"	t
uint64	demo/comb/num-partitions-demo.cc	/^typedef  unsigned long long  uint64;$/;"	t	file:
uint64	demo/graph/graph-fibrepgray-demo.cc	/^typedef  unsigned long long  uint64;$/;"	t	file:
uint64	src/bits/crc64.h	/^typedef  unsigned long long   uint64;$/;"	t
uint64	src/bits/tcrc64.h	/^typedef  unsigned long long   uint64;$/;"	t
ulcm	src/aux0/attic/gcd.cc	/^ulcm(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
ulcm	src/mod/attic/gcd.cc	/^ulcm(umod_t a, umod_t b)$/;"	f	signature:(umod_t a, umod_t b)
ulong	src/fxttypes.h	/^typedef  unsigned long         ulong;$/;"	t
umod_t	src/mod/mtypes.h	/^typedef  unsigned long long  umod_t;$/;"	t
unique	doc/sort-doc.txt	/^ulong unique(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
unique	doc/sort-doc.txt	/^ulong unique(Type *f, ulong n, int (*cmp)(const Type &, const Type &));$/;"	p	file:	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
unique	src/ds/attic/rarray.h	/^    void unique()  { sort();  ::unique(x_, n_); }$/;"	f	class:rarray	access:public	signature:()
unique	src/ds/attic/rset.h	/^    void unique()  { sort();  ::unique(x_, n_); }$/;"	f	class:rset	access:public	signature:()
unique	src/sort/unique.h	/^ulong unique(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
unique	src/sort/uniquefunc.h	/^ulong unique(Type *f, ulong n, int (*cmp)(const Type &, const Type &))$/;"	f	signature:(Type *f, ulong n, int (*cmp)(const Type &, const Type &))
unique_approx	src/sort/attic/uniqueapprox.h	/^ulong unique_approx(Type *f, ulong n, Type da)$/;"	f	signature:(Type *f, ulong n, Type da)
unit	src/matrix/matrix.h	/^    void unit(Type v=1)  { null();  set_diag( v ); }$/;"	f	class:matrix	access:public	signature:(Type v=1)
unrank	src/comb/binary-sl-gray.h	/^    void unrank(ulong r)$/;"	f	class:binary_sl_gray	access:public	signature:(ulong r)
unrank	src/comb/composition-nz-gray.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_gray	access:public	signature:(ulong r)
unrank	src/comb/composition-nz-gray2.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_gray2	access:public	signature:(ulong r)
unrank	src/comb/composition-nz-rl.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_rl	access:public	signature:(ulong r)
unrank	src/comb/composition-nz-subset-lex.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz_subset_lex	access:public	signature:(ulong r)
unrank	src/comb/composition-nz.h	/^    ulong unrank(ulong r)$/;"	f	class:composition_nz	access:public	signature:(ulong r)
unrank_enup	src/comb/composition-rank.h	/^    void unrank_enup(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
unrank_get_el	src/comb/composition-rank.h	/^    ulong unrank_get_el(ulong n, ulong k, ulong &r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong n, ulong k, ulong &r) const
unrank_gray	src/comb/composition-rank.h	/^    void unrank_gray(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
unrank_lex	src/comb/composition-rank.h	/^    void unrank_lex(ulong *x, ulong n, ulong k, ulong r)  const$/;"	f	class:composition_rank	access:public	signature:(ulong *x, ulong n, ulong k, ulong r) const
unstable	doc/wfl-hilbert-doc.txt	/^vector and step counter is unstable, with period d. Although superficially$/;"	v
unzip	doc/perm-doc.txt	/^void unzip(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
unzip	doc/perm-doc.txt	/^void unzip(const Type * restrict f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type * restrict f, Type * restrict g, ulong n)
unzip	doc/perm-doc.txt	/^void unzip(double *f, ulong n);$/;"	p	file:	signature:(double *f, ulong n)
unzip	src/perm/zip.cc	/^unzip(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
unzip	src/perm/zip.h	/^void unzip(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
unzip	src/perm/zip.h	/^void unzip(const Type * restrict f, Type * restrict g, ulong n)$/;"	f	signature:(const Type * restrict f, Type * restrict g, ulong n)
unzip	src/perm/zip.h	/^void unzip(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
unzip_rev	doc/perm-doc.txt	/^void unzip_rev(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
unzip_rev	doc/perm-doc.txt	/^void unzip_rev(const Type * restrict x, Type * restrict y, ulong n);$/;"	p	file:	signature:(const Type * restrict x, Type * restrict y, ulong n)
unzip_rev	src/perm/ziprev.h	/^void unzip_rev(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
unzip_rev	src/perm/ziprev.h	/^void unzip_rev(const Type * restrict x, Type * restrict y, ulong n)$/;"	f	signature:(const Type * restrict x, Type * restrict y, ulong n)
update	src/ds/bounding-box.h	/^    void update( const Pnt & P )$/;"	f	class:bounding_box	access:public	signature:( const Pnt & P )
upos_abs_diff	doc/bits-doc.txt	/^static inline ulong upos_abs_diff(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
upos_abs_diff	src/bits/branchless.h	/^static inline ulong upos_abs_diff(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
upos_add_sat	doc/bits-doc.txt	/^static inline ulong upos_add_sat(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
upos_add_sat	src/bits/branchless.h	/^static inline ulong upos_add_sat(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
upos_max	doc/bits-doc.txt	/^static inline ulong upos_max(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
upos_max	src/bits/branchless.h	/^static inline ulong upos_max(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
upos_min	doc/bits-doc.txt	/^static inline ulong upos_min(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
upos_min	src/bits/branchless.h	/^static inline ulong upos_min(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
upos_sort2	doc/bits-doc.txt	/^static inline void upos_sort2(ulong &a, ulong &b);$/;"	p	file:	signature:(ulong &a, ulong &b)
upos_sort2	src/bits/branchless.h	/^static inline void upos_sort2(ulong &a, ulong &b)$/;"	f	signature:(ulong &a, ulong &b)
upos_sub_sat	doc/bits-doc.txt	/^static inline ulong upos_sub_sat(ulong a, ulong b);$/;"	p	file:	signature:(ulong a, ulong b)
upos_sub_sat	src/bits/branchless.h	/^static inline ulong upos_sub_sat(ulong a, ulong b)$/;"	f	signature:(ulong a, ulong b)
upwards	doc/wfl-hilbert-doc.txt	/^Circularly shift (each node of) the canonical path by q+1 places upwards,$/;"	v
usage	scripts/replace	/^            usage;  exit -1;$/;"	v
usage	scripts/replace	/^        usage;  exit -1;$/;"	v
usage	scripts/replace	/^if [ "$1" = "--help" ]; then  usage; exit 0;   fi$/;"	v
usage	scripts/replace	/^if [ "$1" = "-help" ];  then  usage; exit 0;   fi$/;"	v
usage_err	demo/comb/string-subst-demo.cc	/^usage_err(const char *argv0)  \/\/ clang++: "could be declared with attribute 'noreturn'"$/;"	f	file:	signature:(const char *argv0)
usage_err	src/comb/attic/stringsubst-demo.cc	/^usage_err(const char *argv0)$/;"	f	file:	signature:(const char *argv0)
use_asm_q	src/ds/bitarray.h	/^    static bool use_asm_q()$/;"	f	class:bitarray	access:public	signature:()
ushort	src/fxttypes.h	/^typedef  unsigned short       ushort;$/;"	t
utab	src/bits/revbin-upd.h	27;"	d
utab	src/bits/revbin-upd.h	53;"	d
uu_	src/graph/lyndon-gray.h	/^    ulong uu_[BITS_PER_LONG];  \/\/ scratch space for sorting neighbors$/;"	m	class:lyndon_gray	access:public
v	src/bpol/bitpol-normal.o	/^/;"	v
v	src/comb/fact2perm.o	/^/;"	v
vGET	src/bmat/bitmat-inverse.cc	35;"	d	file:
vSET	src/bmat/bitmat-inverse.cc	37;"	d	file:
v_	src/bpol/gf2n.h	/^    ulong v_;$/;"	m	class:GF2n	access:public
val2idxvec_func	src/aux1/attic/applyfunc.h	/^inline void val2idxvec_func(const Type *f, ulong n, ulong (* func)(Type), ulong *x)$/;"	f	signature:(const Type *f, ulong n, ulong (* func)(Type), ulong *x)
valency	src/comb/balanced-ordered-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:(ulong j) const
valency	src/comb/id-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:id_tree_lev_seq	access:public	signature:(ulong j) const
valency	src/comb/ordered-tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:ordered_tree_lev_seq	access:public	signature:(ulong j) const
valency	src/comb/tree-lev-seq-aux.h	/^    ulong valency(const ulong *a, ulong n, ulong j)  const$/;"	f	class:tree_lev_seq_aux	access:public	signature:(const ulong *a, ulong n, ulong j) const
valency	src/comb/tree-lev-seq.h	/^    ulong valency(ulong j)  const$/;"	f	class:tree_lev_seq	access:public	signature:(ulong j) const
valid	src/comb/composition-nz-restrpref.h	/^    bool valid()  const { return  m_; }$/;"	f	class:composition_nz_restrpref	access:public	signature:() const
valid	src/comb/mixedradix-restrpref.h	/^    bool valid()  const { return  vld_; }$/;"	f	class:mixedradix_restrpref	access:public	signature:() const
vars	src/ds/attic/coroutine-paren-demo.cc	/^    typedef struct { int i,s,k,t; } vars;$/;"	t	class:paren	typeref:struct:paren::__anon2	file:	access:protected
vec2d	src/ds/point2d.h	/^    typedef vector2d<Type> vec2d;$/;"	t	class:point2d	access:private
vec3d	src/ds/point3d.h	/^    typedef vector3d<Type> vec3d;$/;"	t	class:point3d	access:private
vec_print_bin	demo/sort/radixsort-demo.cc	/^vec_print_bin(const char *bla, const ulong *f, ulong n, ulong pn)$/;"	f	file:	signature:(const char *bla, const ulong *f, ulong n, ulong pn)
vector	doc/wfl-hilbert-doc.txt	/^its origin vector <coord>, partial <step>, <edge>-pair encoding$/;"	v
vector	doc/wfl-hilbert-doc.txt	/^step from coordinate vector [illustrated in the example above]; in return,$/;"	v
vector	doc/wfl-hilbert-doc.txt	/^vector  [n] ; when  d = 2  the walk is a scaled-up convergent to the classical$/;"	v
vector	src/matrix/vector.h	/^    explicit vector(const vector<Type> &m)$/;"	f	class:vector	access:public	signature:(const vector<Type> &m)
vector	src/matrix/vector.h	/^    explicit vector(ulong n)$/;"	f	class:vector	access:public	signature:(ulong n)
vector	src/matrix/vector.h	/^class vector$/;"	c
vector2d	src/ds/vector2d.h	/^    explicit vector2d(const Type & tx, const Type & ty)$/;"	f	class:vector2d	access:public	signature:(const Type & tx, const Type & ty)
vector2d	src/ds/vector2d.h	/^    vector2d()  { ; }  \/\/ default constructor for ...$/;"	f	class:vector2d	access:private	signature:()
vector2d	src/ds/vector2d.h	/^class vector2d$/;"	c
vector2d::new_array	src/ds/vector2d.h	/^    static vector2d * new_array(ulong n)  { return new vector2d[n]; }$/;"	f	class:vector2d	access:public	signature:(ulong n)
vector2d::norm_L1	src/ds/vector2d.h	/^    Type norm_L1()  const$/;"	f	class:vector2d	access:public	signature:() const
vector2d::norm_sqr	src/ds/vector2d.h	/^    Type norm_sqr()  const  { return x_ * x_ + y_ * y_; }$/;"	f	class:vector2d	access:public	signature:() const
vector2d::operator !=	src/ds/vector2d.h	/^    bool operator != (const vector2d & V) const { return ( x_ != V.x_ || y_ != V.y_); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
vector2d::operator *=	src/ds/vector2d.h	/^    vector2d & operator *= (const Type & s) { x_ *= s,  y_ *= s;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const Type & s)
vector2d::operator +	src/ds/vector2d.h	/^    vector2d operator + ()  const { return vector2d( +x_,  +y_ ); }$/;"	f	class:vector2d	access:public	signature:() const
vector2d::operator +	src/ds/vector2d.h	/^    vector2d operator + (const vector2d & V)  const { return vector2d( x_ + V.x_,  y_ + V.y_ ); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
vector2d::operator +=	src/ds/vector2d.h	/^    vector2d & operator += (const vector2d & V) { x_ += V.x_,  y_ += V.y_;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V)
vector2d::operator -	src/ds/vector2d.h	/^    vector2d operator - ()  const { return vector2d( -x_,  -y_ ); }$/;"	f	class:vector2d	access:public	signature:() const
vector2d::operator -	src/ds/vector2d.h	/^    vector2d operator - (const vector2d & V)  const { return vector2d( x_ - V.x_,  y_ - V.y_ ); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
vector2d::operator -=	src/ds/vector2d.h	/^    vector2d & operator -= (const vector2d & V) { x_ -= V.x_,  y_ -= V.y_;  return *this; }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V)
vector2d::operator ==	src/ds/vector2d.h	/^    bool operator == (const vector2d & V) const { return ( x_ == V.x_ && y_ == V.y_); }$/;"	f	class:vector2d	access:public	signature:(const vector2d & V) const
vector2d::vector2d	src/ds/vector2d.h	/^    explicit vector2d(const Type & tx, const Type & ty)$/;"	f	class:vector2d	access:public	signature:(const Type & tx, const Type & ty)
vector2d::vector2d	src/ds/vector2d.h	/^    vector2d()  { ; }  \/\/ default constructor for ...$/;"	f	class:vector2d	access:private	signature:()
vector2d::x	src/ds/vector2d.h	/^    Type x()  const  { return x_; }$/;"	f	class:vector2d	access:public	signature:() const
vector2d::x_	src/ds/vector2d.h	/^    Type x_, y_;$/;"	m	class:vector2d	access:protected
vector2d::y	src/ds/vector2d.h	/^    Type y()  const  { return y_; }$/;"	f	class:vector2d	access:public	signature:() const
vector2d::y_	src/ds/vector2d.h	/^    Type x_, y_;$/;"	m	class:vector2d	access:protected
vector3d	src/ds/vector3d.h	/^    explicit vector3d(const Type & tx, const Type & ty, const Type & tz)$/;"	f	class:vector3d	access:public	signature:(const Type & tx, const Type & ty, const Type & tz)
vector3d	src/ds/vector3d.h	/^    vector3d()  { ; }  \/\/ default constructor for ...$/;"	f	class:vector3d	access:private	signature:()
vector3d	src/ds/vector3d.h	/^class vector3d$/;"	c
vector3d::new_array	src/ds/vector3d.h	/^    static vector3d * new_array(ulong n)  { return new vector3d[n]; }$/;"	f	class:vector3d	access:public	signature:(ulong n)
vector3d::norm_L1	src/ds/vector3d.h	/^    Type norm_L1()  const$/;"	f	class:vector3d	access:public	signature:() const
vector3d::norm_sqr	src/ds/vector3d.h	/^    Type norm_sqr()  const  { return x_ * x_ + y_ * y_ + z_ * z_; }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::operator !=	src/ds/vector3d.h	/^    bool operator != (const vector3d & V) const { return ( x_ != V.x_ || y_ != V.y_ || z_ != V.z_); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
vector3d::operator *=	src/ds/vector3d.h	/^    vector3d & operator *= (const Type & s) { x_ *= s,  y_ *= s;  z_ *= s;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const Type & s)
vector3d::operator +	src/ds/vector3d.h	/^    vector3d operator + ()  const { return vector3d( +x_,  +y_, +z_ ); }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::operator +	src/ds/vector3d.h	/^    vector3d operator + (const vector3d & V)  const { return vector3d( x_ + V.x_,  y_ + V.y_,  z_ + V.z_ ); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
vector3d::operator +=	src/ds/vector3d.h	/^    vector3d & operator += (const vector3d & V) { x_ += V.x_,  y_ += V.y_;  z_ += V.z_;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V)
vector3d::operator -	src/ds/vector3d.h	/^    vector3d operator - ()  const { return vector3d( -x_,  -y_, -z_ ); }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::operator -	src/ds/vector3d.h	/^    vector3d operator - (const vector3d & V)  const { return vector3d( x_ - V.x_,  y_ - V.y_,  z_ - V.z_  ); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
vector3d::operator -=	src/ds/vector3d.h	/^    vector3d & operator -= (const vector3d & V) { x_ -= V.x_,  y_ -= V.y_;  z_ -= V.z_;  return *this; }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V)
vector3d::operator ==	src/ds/vector3d.h	/^    bool operator == (const vector3d & V) const { return ( x_ == V.x_ && y_ == V.y_ && z_ == V.z_); }$/;"	f	class:vector3d	access:public	signature:(const vector3d & V) const
vector3d::vector3d	src/ds/vector3d.h	/^    explicit vector3d(const Type & tx, const Type & ty, const Type & tz)$/;"	f	class:vector3d	access:public	signature:(const Type & tx, const Type & ty, const Type & tz)
vector3d::vector3d	src/ds/vector3d.h	/^    vector3d()  { ; }  \/\/ default constructor for ...$/;"	f	class:vector3d	access:private	signature:()
vector3d::x	src/ds/vector3d.h	/^    Type x()  const  { return x_; }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::x_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
vector3d::y	src/ds/vector3d.h	/^    Type y()  const  { return y_; }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::y_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
vector3d::z	src/ds/vector3d.h	/^    Type z()  const  { return z_; }$/;"	f	class:vector3d	access:public	signature:() const
vector3d::z_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
vector::f_	src/matrix/vector.h	/^    Type *f_;  \/\/ pointer to data$/;"	m	class:vector	access:public
vector::n_	src/matrix/vector.h	/^    ulong n_;  \/\/ #elems$/;"	m	class:vector	access:public
vector::operator *=	src/matrix/vector.h	/^    vector<Type> & operator *= (const Type & i)$/;"	f	class:vector	access:public	signature:(const Type & i)
vector::operator +=	src/matrix/vector.h	/^    vector<Type> & operator += (const vector<Type> &h)$/;"	f	class:vector	access:public	signature:(const vector<Type> &h)
vector::operator -=	src/matrix/vector.h	/^    vector<Type> & operator -= (const vector<Type> &h)$/;"	f	class:vector	access:public	signature:(const vector<Type> &h)
vector::operator =	src/matrix/vector.h	/^    vector<Type> & operator =(const vector<Type> &m)$/;"	f	class:vector	access:public	signature:(const vector<Type> &m)
vector::vector	src/matrix/vector.h	/^    explicit vector(const vector<Type> &m)$/;"	f	class:vector	access:public	signature:(const vector<Type> &m)
vector::vector	src/matrix/vector.h	/^    explicit vector(ulong n)$/;"	f	class:vector	access:public	signature:(ulong n)
vector::~vector	src/matrix/vector.h	/^    ~vector()$/;"	f	class:vector	access:public	signature:()
vectors	doc/wfl-hilbert-doc.txt	/^generate the first  n+1  symbols and map to vectors; trim off the first and last$/;"	v
vectors	doc/wfl-hilbert-doc.txt	/^vectors, and sum the remainder. For instance let  n = 6 : applying the generator$/;"	v
verify	src/comb/attic/stringsubst.cc	/^string_subst::verify(const char *start\/*=""*\/, bool vq\/*=true*\/)$/;"	f	class:string_subst	signature:(const char *start , bool vq )
verify	src/comb/attic/stringsubst.h	/^    int verify(const char *start="", bool vq=true);$/;"	p	class:string_subst	access:public	signature:(const char *start=Ó, bool vq=true)
version_string	src/aux0/version.cc	/^static const char *version_string = "08-January-2018";$/;"	v	file:
vextract	demo/ds/deque-demo.cc	/^vextract(deque<ulong> &f)$/;"	f	signature:(deque<ulong> &f)
vinsert	demo/ds/deque-demo.cc	/^vinsert(deque<ulong> &f, ulong k)$/;"	f	signature:(deque<ulong> &f, ulong k)
vinsert	demo/ds/ringbuffer-demo.cc	/^vinsert(ringbuffer<RBt> &R, RBt k)$/;"	f	file:	signature:(ringbuffer<RBt> &R, RBt k)
vinsert	src/ds/attic/orderedrarray-demo.cc	/^vinsert(ordered_rarray<ulong> &f, ulong k)$/;"	f	file:	signature:(ordered_rarray<ulong> &f, ulong k)
vinsert	src/ds/attic/rarray-demo.cc	/^vinsert(rarray<ulong> &f, ulong k)$/;"	f	file:	signature:(rarray<ulong> &f, ulong k)
vinsert	src/ds/attic/rset-demo.cc	/^vinsert(rset<ulong> &f, ulong k)$/;"	f	file:	signature:(rset<ulong> &f, ulong k)
visit	demo/bits/bitlex-rec-demo.cc	/^void visit(ulong w)$/;"	f	signature:(ulong w)
visit	demo/comb/combination-chase-demo.cc	/^visit(const combination_chase &C, ulong ct)$/;"	f	signature:(const combination_chase &C, ulong ct)
visit	demo/comb/combination-emk-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/combination-enup-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/combination-gray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/combination-pref-demo.cc	/^visit(const combination_pref &C)$/;"	f	signature:(const combination_pref &C)
visit	demo/comb/combination-rec-demo.cc	/^void visit(const comb_rec &) { ; }$/;"	f	signature:(const comb_rec &)
visit	demo/comb/combination-rec-demo.cc	/^void visit(const comb_rec &C)$/;"	f	signature:(const comb_rec &C)
visit	demo/comb/composition-gray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/composition-nz-gray-rec-demo.cc	/^void visit(ulong m)$/;"	f	signature:(ulong m)
visit	demo/comb/composition-nz-subset-lex-rec-demo.cc	/^void visit(ulong m)$/;"	f	signature:(ulong m)
visit	demo/comb/fib-alt-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/fibgray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/gexz-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/ksubset-rec-demo.cc	/^void visit(const ksubset_rec &, ulong ) {;}$/;"	f	signature:(const ksubset_rec &, ulong )
visit	demo/comb/ksubset-rec-demo.cc	/^void visit(const ksubset_rec &C, ulong k)$/;"	f	signature:(const ksubset_rec &C, ulong k)
visit	demo/comb/ksubset-twoclose-demo.cc	/^void visit(const ksubset_twoclose &)  { ++ct; }$/;"	f	signature:(const ksubset_twoclose &)
visit	demo/comb/ksubset-twoclose-demo.cc	/^void visit(const ksubset_twoclose &C)$/;"	f	signature:(const ksubset_twoclose &C)
visit	demo/comb/maxrep-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^void visit(ulong n)$/;"	f	signature:(ulong n)
visit	demo/comb/mset-perm-lex-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/mset-perm-lex-rec2-demo.cc	/^void visit(const mset_perm_lex_rec & \/*unused*\/) {;}$/;"	f	signature:(const mset_perm_lex_rec & )
visit	demo/comb/mset-perm-lex-rec2-demo.cc	/^void visit(const mset_perm_lex_rec &P)$/;"	f	signature:(const mset_perm_lex_rec &P)
visit	demo/comb/naf-gray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/naf-pos-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/necklace-cat-demo.cc	/^visit(ulong j)$/;"	f	signature:(ulong j)
visit	demo/comb/necklace-cat-demo.cc	/^visit(ulong)$/;"	f	signature:(ulong)
visit	demo/comb/necklace-gray-demo.cc	/^visit(ulong j)$/;"	f	signature:(ulong j)
visit	demo/comb/necklace-gray3-demo.cc	/^void visit(long j)$/;"	f	signature:(long j)
visit	demo/comb/necklace-sigma-tau-demo.cc	/^void visit(ulong x)$/;"	f	signature:(ulong x)
visit	demo/comb/necklace-sigma-tau-demo.cc	/^void visit(ulong)  { ; }$/;"	f	signature:(ulong)
visit	demo/comb/no111-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/no1111-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/no1x1-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/no1xy1-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/ntnz-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/ntz-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/paren-gray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/pellgen-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/pellgray-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/perm-dist1-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/perm-l1r2-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/perm-rec-demo.cc	/^void visit(const perm_rec &)  { ++ct; }$/;"	f	signature:(const perm_rec &)
visit	demo/comb/perm-rec-demo.cc	/^void visit(const perm_rec &P)  \/\/ function to call with each permutation$/;"	f	signature:(const perm_rec &P)
visit	demo/comb/perm-restrpref-demo.cc	/^void visit(const ulong *, ulong, ulong)  { ; }$/;"	f	signature:(const ulong *, ulong, ulong)
visit	demo/comb/perm-restrpref-demo.cc	/^void visit(const ulong *a, ulong n, ulong ct)$/;"	f	signature:(const ulong *a, ulong n, ulong ct)
visit	demo/comb/perm-right1-gray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/rll-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/comb/schroeder-tree-demo.cc	/^inline void visit()$/;"	f	signature:()
visit	demo/comb/shift-subsets-demo.cc	/^void visit(ulong x)$/;"	f	signature:(ulong x)
visit	demo/graph/sta-graph-acgray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/graph/sta-graph-macgray-demo.cc	/^void visit()$/;"	f	signature:()
visit	demo/perm/permrand-cyclic-demo.cc	/^void visit(const ulong *f, ulong n, ulong ct)$/;"	f	signature:(const ulong *f, ulong n, ulong ct)
visit	demo/perm/permrand-cyclic-demo.cc	/^void visit(const ulong *f, ulong n, ulong)$/;"	f	signature:(const ulong *f, ulong n, ulong)
visit	demo/perm/permrand-self-inverse-demo.cc	/^void visit(const ulong *f, ulong n, ulong ct)$/;"	f	signature:(const ulong *f, ulong n, ulong ct)
visit	demo/seq/A003043-demo.cc	/^void visit(const ulong *, ulong, ulong)  { ; }$/;"	f	signature:(const ulong *, ulong, ulong)
visit	demo/seq/A003043-demo.cc	/^void visit(const ulong *a, ulong n, ulong ct)$/;"	f	signature:(const ulong *a, ulong n, ulong ct)
visit	demo/seq/A006951-demo.cc	/^visit(const ulong *x, ulong m, ulong q)$/;"	f	signature:(const ulong *x, ulong m, ulong q)
visit	demo/seq/A178514-demo.cc	/^void visit(const ulong *a, ulong n, ulong ct)$/;"	f	signature:(const ulong *a, ulong n, ulong ct)
visit	demo/seq/A178514-demo.cc	/^void visit(const ulong *a, ulong n, ulong)$/;"	f	signature:(const ulong *a, ulong n, ulong)
visit	src/comb/attic/combination-rec-demo.cc	/^void visit()$/;"	f	signature:()
visit	src/comb/attic/partition-dist-lex-rec-demo.cc	/^void visit(ulong off)$/;"	f	signature:(ulong off)
visit	src/comb/attic/partition-lex-rec-demo.cc	/^void visit(ulong off)$/;"	f	signature:(ulong off)
visit	src/comb/perm-restrpref.h	/^    void (*visit)(const ulong*, ulong, ulong);  \/\/ visit function$/;"	m	class:perm_restrpref	access:protected
visit_	src/comb/combination-rec.h	/^    void (*visit_)(const comb_rec &);  \/\/ function to call with each combination$/;"	m	class:comb_rec	access:public
visit_	src/comb/ksubset-rec.h	/^    void (*visit_)(const ksubset_rec &, ulong);$/;"	m	class:ksubset_rec	access:public
visit_	src/comb/ksubset-twoclose.h	/^    void (*visit_)(const ksubset_twoclose &);$/;"	m	class:ksubset_twoclose	access:public
visit_	src/comb/mset-perm-lex-rec.h	/^    void (*visit_)(const mset_perm_lex_rec &);  \/\/ function to call with each permutation$/;"	m	class:mset_perm_lex_rec	access:public
visit_	src/comb/perm-rec.h	/^    void (*visit_)(const perm_rec &);  \/\/ function to call with each permutation$/;"	m	class:perm_rec	access:public
vjL	src/comb/fact2perm-rev.o	/^ELF/;"	v
vld_	src/comb/mixedradix-restrpref.h	/^    bool vld_;   \/\/ whether current word is valid$/;"	m	class:mixedradix_restrpref	access:public
vn_	src/graph/digraph.h	/^    ulong *vn_;  \/\/ optional: sorted values for nodes$/;"	m	class:digraph	access:public
vpop	demo/ds/queue-demo.cc	/^vpop(queue<ulong> &f)$/;"	f	file:	signature:(queue<ulong> &f)
vpop	demo/ds/stack-demo.cc	/^vpop(stack<ulong> &f)$/;"	f	file:	signature:(stack<ulong> &f)
vpush	demo/ds/queue-demo.cc	/^vpush(queue<ulong> &f, ulong k)$/;"	f	file:	signature:(queue<ulong> &f, ulong k)
vpush	demo/ds/stack-demo.cc	/^vpush(stack<ulong> &f, ulong k)$/;"	f	file:	signature:(stack<ulong> &f, ulong k)
vremove	src/ds/attic/orderedrarray-demo.cc	/^vremove(ordered_rarray<ulong> &f)$/;"	f	file:	signature:(ordered_rarray<ulong> &f)
vremove	src/ds/attic/rset-demo.cc	/^vremove(rset<ulong> &f)$/;"	f	file:	signature:(rset<ulong> &f)
vremove2	src/ds/attic/rarray-demo.cc	/^vremove2(rarray<ulong> &f)$/;"	f	file:	signature:(rarray<ulong> &f)
vv	demo/bits/bitdemos.h	/^const char *vv[] =$/;"	v
vv	demo/bits/bitsubset-demo.cc	/^const char *vv[] =$/;"	v
vv	demo/bits/bitsubset-gray-demo.cc	/^const char *vv[] =$/;"	v
vv	demo/bits/bitsubset-shift-demo.cc	/^const char *vv[] =$/;"	v
w	src/ntt/attic/nttndim.cc	/^static mod *w;  \/\/ workspace$/;"	v	file:
w_	src/bits/bit-rll2.h	/^    ulong w_;  \/\/ RLL-word$/;"	m	class:bit_rll2	access:public
w_	src/bpol/fcsr.h	/^    ulong w_;     \/\/ word of the SRS,  1 <= w <= mask$/;"	m	class:fcsr	access:public
w_	src/bpol/lfsr.h	/^    ulong w_;  \/\/ word of the shift_register_sequence (SRS)$/;"	m	class:lfsr	access:public
w_	src/bpol/lfsr64.h	/^    unsigned long long w_;  \/\/ word of the shift_register_sequence (SRS)$/;"	m	class:lfsr64	access:public
w_	src/comb/combination-chase.h	/^    ulong *w_;  \/\/ aux$/;"	m	class:combination_chase	access:public
w_dyadic_auto_convolution	test/test-convolution.cc	/^void w_dyadic_auto_convolution(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
w_dyadic_convolution	test/test-convolution.cc	/^void w_dyadic_convolution(Type * restrict f, Type * restrict g, ulong ldn)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn)
walk	doc/wfl-hilbert-doc.txt	/^To compute the coordinate vector of the node at step  n  along the walk,$/;"	v
walsh_gray	demo/fft/butterfly-texpic-demo.cc	/^void walsh_gray(ulong ldn, ulong pm)$/;"	f	signature:(ulong ldn, ulong pm)
walsh_gray	doc/walsh-doc.txt	/^void walsh_gray(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_gray	src/walsh/walshgray.h	/^void walsh_gray(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_pal	doc/walsh-doc.txt	/^inline void walsh_pal(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_pal	src/walsh/walshpal.h	/^inline void walsh_pal(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_pal0	src/walsh/attic/walsh0.cc	/^walsh_pal0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
walsh_pal_basis	doc/walsh-doc.txt	/^void walsh_pal_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_pal_basis	src/walsh/walsh-basis.h	/^void walsh_pal_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
walsh_pal_eigen	doc/walsh-doc.txt	/^void walsh_pal_eigen(double *v, ulong ldn, ulong k);$/;"	p	file:	signature:(double *v, ulong ldn, ulong k)
walsh_pal_eigen	src/walsh/walsheigen.cc	/^walsh_pal_eigen(double *v, ulong ldn, ulong k)$/;"	f	signature:(double *v, ulong ldn, ulong k)
walsh_pal_eigen	src/walsh/walsheigen.h	/^void walsh_pal_eigen(double *v, ulong ldn, ulong k);$/;"	p	signature:(double *v, ulong ldn, ulong k)
walsh_q1	doc/walsh-doc.txt	/^void walsh_q1(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_q1	src/walsh/walshq.h	/^void walsh_q1(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_q1_basis	doc/walsh-doc.txt	/^void walsh_q1_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_q1_basis	src/walsh/walsh-basis.h	/^void walsh_q1_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
walsh_q2	doc/walsh-doc.txt	/^void walsh_q2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_q2	src/walsh/walshq.h	/^void walsh_q2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_q2_basis	doc/walsh-doc.txt	/^void walsh_q2_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_q2_basis	src/walsh/walsh-basis.h	/^void walsh_q2_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
walsh_seq1	doc/walsh-doc.txt	/^void walsh_seq1(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_seq1	src/walsh/walshseq.h	/^void walsh_seq1(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_seq2	doc/walsh-doc.txt	/^void walsh_seq2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_seq2	src/walsh/walshseq.h	/^void walsh_seq2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak	doc/walsh-doc.txt	/^inline void walsh_wak(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak	src/walsh/walshwak.h	/^inline void walsh_wak(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak0	src/walsh/attic/walsh0.cc	/^walsh_wak0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
walsh_wak_basis	doc/walsh-doc.txt	/^void walsh_wak_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_wak_basis	src/walsh/walsh-basis.h	/^void walsh_wak_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
walsh_wak_dif2	doc/walsh-doc.txt	/^void walsh_wak_dif2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dif2	src/walsh/walshwak2.h	/^void walsh_wak_dif2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_dif4	doc/walsh-doc.txt	/^void walsh_wak_dif4(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dif4	src/walsh/walshwak4.h	/^void walsh_wak_dif4(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_dif8	doc/walsh-doc.txt	/^void walsh_wak_dif8(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dif8	src/walsh/walshwak8.h	/^void walsh_wak_dif8(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_dit2	doc/walsh-doc.txt	/^void walsh_wak_dit2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dit2	src/walsh/walshwak2.h	/^void walsh_wak_dit2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_dit4	doc/walsh-doc.txt	/^void walsh_wak_dit4(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dit4	src/walsh/walshwak4.h	/^void walsh_wak_dit4(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_dit8	doc/walsh-doc.txt	/^void walsh_wak_dit8(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_dit8	src/walsh/walshwak8.h	/^void walsh_wak_dit8(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_eigen	doc/walsh-doc.txt	/^void walsh_wak_eigen(double *v, ulong ldn, ulong k);$/;"	p	file:	signature:(double *v, ulong ldn, ulong k)
walsh_wak_eigen	src/walsh/walsheigen.cc	/^walsh_wak_eigen(double *v, ulong ldn, ulong k)$/;"	f	signature:(double *v, ulong ldn, ulong k)
walsh_wak_eigen	src/walsh/walsheigen.h	/^void walsh_wak_eigen(double *v, ulong ldn, ulong k);$/;"	p	signature:(double *v, ulong ldn, ulong k)
walsh_wak_loc_dif2	doc/walsh-doc.txt	/^void walsh_wak_loc_dif2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_loc_dif2	src/walsh/walshwakloc2.h	/^void walsh_wak_loc_dif2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_loc_dit2	doc/walsh-doc.txt	/^void walsh_wak_loc_dit2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wak_loc_dit2	src/walsh/walshwakloc2.h	/^void walsh_wak_loc_dit2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_matrix	src/walsh/attic/walshwakmatrix.h	/^void walsh_wak_matrix(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wak_matrix_1	src/walsh/attic/walshwakmatrix.h	/^void walsh_wak_matrix_1(Type *f, ulong ldn, int is)$/;"	f	signature:(Type *f, ulong ldn, int is)
walsh_wal	doc/walsh-doc.txt	/^inline void walsh_wal(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wal	src/walsh/walshwal.h	/^inline void walsh_wal(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal0	src/walsh/attic/walsh0.cc	/^walsh_wal0(double *f, ulong ldn)$/;"	f	signature:(double *f, ulong ldn)
walsh_wal_basis	doc/walsh-doc.txt	/^void walsh_wal_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_wal_basis	src/walsh/walsh-basis.h	/^void walsh_wal_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
walsh_wal_dif2	test/test-transforms.cc	/^inline void walsh_wal_dif2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal_dif2_core	doc/walsh-doc.txt	/^void walsh_wal_dif2_core(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wal_dif2_core	src/walsh/walshwal.h	/^void walsh_wal_dif2_core(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal_dit2	test/test-transforms.cc	/^inline void walsh_wal_dit2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal_dit2_core	doc/walsh-doc.txt	/^void walsh_wal_dit2_core(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wal_dit2_core	src/walsh/walshwal.h	/^void walsh_wal_dit2_core(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal_eigen	doc/walsh-doc.txt	/^void walsh_wal_eigen(double *v, ulong ldn, ulong k);$/;"	p	file:	signature:(double *v, ulong ldn, ulong k)
walsh_wal_eigen	src/walsh/walsheigen.cc	/^walsh_wal_eigen(double *v, ulong ldn, ulong k)$/;"	f	signature:(double *v, ulong ldn, ulong k)
walsh_wal_eigen	src/walsh/walsheigen.h	/^void walsh_wal_eigen(double *v, ulong ldn, ulong k);$/;"	p	signature:(double *v, ulong ldn, ulong k)
walsh_wal_rev	doc/walsh-doc.txt	/^inline void walsh_wal_rev(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
walsh_wal_rev	src/walsh/walshwalrev.h	/^inline void walsh_wal_rev(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
walsh_wal_rev_basis	doc/walsh-doc.txt	/^void walsh_wal_rev_basis(Type *f, ulong n, ulong k);$/;"	p	file:	signature:(Type *f, ulong n, ulong k)
walsh_wal_rev_basis	src/walsh/walsh-basis.h	/^void walsh_wal_rev_basis(Type *f, ulong n, ulong k)$/;"	f	signature:(Type *f, ulong n, ulong k)
wavelet	doc/wavelet-doc.txt	/^void wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm\/*=2*\/);$/;"	p	file:	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm )
wavelet	src/wavelet/wavelet.cc	/^wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm\/*=2*\/)$/;"	f	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm )
wavelet	src/wavelet/wavelet.h	/^void wavelet(double *f, ulong ldn, const wavelet_filter &wf, ulong minm=2);$/;"	p	signature:(double *f, ulong ldn, const wavelet_filter &wf, ulong minm=2)
wavelet_filter	src/wavelet/waveletfilter.h	/^    explicit wavelet_filter(const double *h, const double *g, ulong n)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, const double *g, ulong n)
wavelet_filter	src/wavelet/waveletfilter.h	/^    explicit wavelet_filter(const double *w, ulong n=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *w, ulong n=0)
wavelet_filter	src/wavelet/waveletfilter.h	/^    wavelet_filter(const wavelet_filter &);$/;"	p	class:wavelet_filter	access:private	signature:(const wavelet_filter &)
wavelet_filter	src/wavelet/waveletfilter.h	/^class wavelet_filter$/;"	c
wavelet_filter::check	src/wavelet/waveletfilter.h	/^    bool check(double eps=1e-6) const$/;"	f	class:wavelet_filter	access:public	signature:(double eps=1e-6) const
wavelet_filter::ctor_core	src/wavelet/waveletfilter.h	/^    void ctor_core()$/;"	f	class:wavelet_filter	access:public	signature:()
wavelet_filter::g_	src/wavelet/waveletfilter.h	/^    double *g_;  \/\/ high-pass filter$/;"	m	class:wavelet_filter	access:public
wavelet_filter::h_	src/wavelet/waveletfilter.h	/^    double *h_;  \/\/ low-pass filter$/;"	m	class:wavelet_filter	access:public
wavelet_filter::moment	src/wavelet/waveletfilter.h	/^    double moment(ulong x=0)  const  { return moment(h_, n_, x); }$/;"	f	class:wavelet_filter	access:public	signature:(ulong x=0) const
wavelet_filter::moment	src/wavelet/waveletfilter.h	/^    static double moment(const double *h, ulong n, ulong x=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, ulong n, ulong x=0)
wavelet_filter::n_	src/wavelet/waveletfilter.h	/^    ulong n_;    \/\/ number of taps$/;"	m	class:wavelet_filter	access:public
wavelet_filter::norm_sqr	src/wavelet/waveletfilter.h	/^    double norm_sqr(ulong s=0)  const  { return norm_sqr(h_, n_, s); }$/;"	f	class:wavelet_filter	access:public	signature:(ulong s=0) const
wavelet_filter::norm_sqr	src/wavelet/waveletfilter.h	/^    static double norm_sqr(const double *h, ulong n, ulong s=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, ulong n, ulong s=0)
wavelet_filter::operator =	src/wavelet/waveletfilter.h	/^    const wavelet_filter & operator =(const wavelet_filter &);$/;"	p	class:wavelet_filter	access:private	signature:(const wavelet_filter &)
wavelet_filter::wavelet_filter	src/wavelet/waveletfilter.h	/^    explicit wavelet_filter(const double *h, const double *g, ulong n)$/;"	f	class:wavelet_filter	access:public	signature:(const double *h, const double *g, ulong n)
wavelet_filter::wavelet_filter	src/wavelet/waveletfilter.h	/^    explicit wavelet_filter(const double *w, ulong n=0)$/;"	f	class:wavelet_filter	access:public	signature:(const double *w, ulong n=0)
wavelet_filter::wavelet_filter	src/wavelet/waveletfilter.h	/^    wavelet_filter(const wavelet_filter &);$/;"	p	class:wavelet_filter	access:private	signature:(const wavelet_filter &)
wavelet_filter::~wavelet_filter	src/wavelet/waveletfilter.h	/^    ~wavelet_filter()$/;"	f	class:wavelet_filter	access:public	signature:()
wavelet_step	doc/wavelet-doc.txt	/^void wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);$/;"	p	file:	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
wavelet_step	src/wavelet/wavelet.cc	/^wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t)$/;"	f	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
wavelet_step	src/wavelet/wavelet.h	/^void wavelet_step(double *f, ulong n, const wavelet_filter &wf, double *t);$/;"	p	signature:(double *f, ulong n, const wavelet_filter &wf, double *t)
wct	demo/comb/mset-perm-lex-rec-demo.cc	/^ulong wct;  \/\/ count work$/;"	v
weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    explicit weakly_unimodal_rgs_lex(ulong n, ulong m)$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:(ulong n, ulong m)
weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    weakly_unimodal_rgs_lex(const weakly_unimodal_rgs_lex&);  \/\/ forbidden$/;"	p	class:weakly_unimodal_rgs_lex	access:private	signature:(const weakly_unimodal_rgs_lex&)
weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^class weakly_unimodal_rgs_lex$/;"	c
weakly_unimodal_rgs_lex::OK	src/comb/weakly-unimodal-rgs-lex.h	/^    bool OK()  const$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:() const
weakly_unimodal_rgs_lex::a_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong *a_;  \/\/ RGS$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::data	src/comb/weakly-unimodal-rgs-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:() const
weakly_unimodal_rgs_lex::first	src/comb/weakly-unimodal-rgs-lex.h	/^    void first()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
weakly_unimodal_rgs_lex::m1_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong m1_;  \/\/ maximal digit value allowed$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::mp_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong mp_;  \/\/ rightmost position of a maximal digit$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::mv_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong mv_;  \/\/ value of maximal digit(s)$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::n_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong n_;   \/\/ length of the RGS.$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::next	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong next()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
weakly_unimodal_rgs_lex::operator =	src/comb/weakly-unimodal-rgs-lex.h	/^    weakly_unimodal_rgs_lex & operator = (const weakly_unimodal_rgs_lex&);  \/\/ forbidden$/;"	p	class:weakly_unimodal_rgs_lex	access:private	signature:(const weakly_unimodal_rgs_lex&)
weakly_unimodal_rgs_lex::print	src/comb/weakly-unimodal-rgs-lex.h	/^    void print(const char *bla, bool dfz)  const$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:(const char *bla, bool dfz) const
weakly_unimodal_rgs_lex::tr_	src/comb/weakly-unimodal-rgs-lex.h	/^    ulong tr_;  \/\/ track$/;"	m	class:weakly_unimodal_rgs_lex	access:public
weakly_unimodal_rgs_lex::weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    explicit weakly_unimodal_rgs_lex(ulong n, ulong m)$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:(ulong n, ulong m)
weakly_unimodal_rgs_lex::weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    weakly_unimodal_rgs_lex(const weakly_unimodal_rgs_lex&);  \/\/ forbidden$/;"	p	class:weakly_unimodal_rgs_lex	access:private	signature:(const weakly_unimodal_rgs_lex&)
weakly_unimodal_rgs_lex::~weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    ~weakly_unimodal_rgs_lex()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
weighted_complex_auto_convolution	doc/convolution-doc.txt	/^void weighted_complex_auto_convolution(Complex *f, ulong ldn, double w, double v\/*=0.0*\/);$/;"	p	file:	signature:(Complex *f, ulong ldn, double w, double v )
weighted_complex_auto_convolution	doc/convolution-doc.txt	/^void weighted_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, double w, double v )
weighted_complex_auto_convolution	src/convolution/weightedconv.cc	/^weighted_complex_auto_convolution(Complex *f, ulong ldn, double w, double v\/*=0.0*\/)$/;"	f	signature:(Complex *f, ulong ldn, double w, double v )
weighted_complex_auto_convolution	src/convolution/weightedconv.cc	/^weighted_complex_auto_convolution(double *fr, double *fi, ulong ldn,$/;"	f	signature:(double *fr, double *fi, ulong ldn, double w, double v )
weighted_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void weighted_complex_auto_convolution(Complex *f, ulong ldn, double w, double v=0.0);$/;"	p	signature:(Complex *f, ulong ldn, double w, double v=0.0)
weighted_complex_auto_convolution	src/convolution/weightedconvolution.h	/^void weighted_complex_auto_convolution(double *fr, double *fi, ulong ldn, double w, double v=0.0);$/;"	p	signature:(double *fr, double *fi, ulong ldn, double w, double v=0.0)
weighted_fft	doc/fft-doc.txt	/^void weighted_fft(double *fr, double *fi, ulong ldn, int is, double w);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_fft	src/fft/fft.h	/^void weighted_fft(double *fr, double *fi, ulong ldn, int is, double w);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_fft	src/fft/weightedfft.cc	/^weighted_fft(double *fr, double *fi, ulong ldn, int is, double w)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_inverse_fft	doc/fft-doc.txt	/^void weighted_inverse_fft(double *fr, double *fi, ulong ldn, int is, double w);$/;"	p	file:	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_inverse_fft	src/fft/fft.h	/^void weighted_inverse_fft(double *fr, double *fi, ulong ldn, int is, double w);$/;"	p	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_inverse_fft	src/fft/weightedfft.cc	/^weighted_inverse_fft(double *fr, double *fi, ulong ldn, int is, double w)$/;"	f	signature:(double *fr, double *fi, ulong ldn, int is, double w)
weighted_or_auto_convolution	doc/walsh-doc.txt	/^inline void weighted_or_auto_convolution(Type * restrict f, ulong ldn, Type w);$/;"	p	file:	signature:(Type * restrict f, ulong ldn, Type w)
weighted_or_auto_convolution	src/walsh/weighted-or-convolution.h	/^inline void weighted_or_auto_convolution(Type * restrict f, ulong ldn, Type w)$/;"	f	signature:(Type * restrict f, ulong ldn, Type w)
weighted_or_convolution	doc/walsh-doc.txt	/^inline void weighted_or_convolution(Type * restrict f, Type * restrict g, ulong ldn, Type w);$/;"	p	file:	signature:(Type * restrict f, Type * restrict g, ulong ldn, Type w)
weighted_or_convolution	src/walsh/weighted-or-convolution.h	/^inline void weighted_or_convolution(Type * restrict f, Type * restrict g, ulong ldn, Type w)$/;"	f	signature:(Type * restrict f, Type * restrict g, ulong ldn, Type w)
wf_daub10	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub10(daub10);$/;"	p	file:	signature:(daub10)
wf_daub12	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub12(daub12);$/;"	p	file:	signature:(daub12)
wf_daub20	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub20(daub20);$/;"	p	file:	signature:(daub20)
wf_daub4	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub4(daub4);$/;"	p	file:	signature:(daub4)
wf_daub6	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub6(daub6);$/;"	p	file:	signature:(daub6)
wf_daub8	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_daub8(daub8);$/;"	p	file:	signature:(daub8)
wf_haar2	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_haar2(haar2);$/;"	p	file:	signature:(haar2)
wf_test	src/wavelet/attic/waveletfilter.cc	/^const wavelet_filter wf_test(test);$/;"	p	file:	signature:(test)
wfl_cell	src/comb/wfl-hilbert.h	/^    wfl_cell()  { ; }$/;"	f	class:wfl_cell	access:public	signature:()
wfl_cell	src/comb/wfl-hilbert.h	/^class wfl_cell$/;"	c
wfl_cell::ccoord	src/comb/wfl-hilbert.h	/^    ulong ccoord[WFL_MAXDIM];  \/\/ jj: static layout for speed$/;"	m	class:wfl_cell	access:public
wfl_cell::cedge	src/comb/wfl-hilbert.h	/^    ulong cedge; \/\/ transforming edge-pair or corresponding symbol indexing tables$/;"	m	class:wfl_cell	access:public
wfl_cell::cstep	src/comb/wfl-hilbert.h	/^    ulong cstep; \/\/ "step" counter n along walk, deflated by lv levels;$/;"	m	class:wfl_cell	access:public
wfl_cell::init	src/comb/wfl-hilbert.h	/^    void init(ulong d, ulong \/*lv*\/, ulong \/*v*\/, ulong e)$/;"	f	class:wfl_cell	access:public	signature:(ulong d, ulong , ulong , ulong e)
wfl_cell::wfl_cell	src/comb/wfl-hilbert.h	/^    wfl_cell()  { ; }$/;"	f	class:wfl_cell	access:public	signature:()
wfl_cell::~wfl_cell	src/comb/wfl-hilbert.h	/^    ~wfl_cell()  { ; }$/;"	f	class:wfl_cell	access:public	signature:()
wfl_hilbert	src/comb/wfl-hilbert.h	/^    wfl_hilbert(ulong dm\/*, ulong lev*\/)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong dm )
wfl_hilbert	src/comb/wfl-hilbert.h	/^class wfl_hilbert$/;"	c
wfl_hilbert::branch	src/comb/wfl-hilbert.h	/^    wfl_cell branch[WFL_NUMLEV]; \/\/ chain along branch of tree of cells \/ D0L symbols$/;"	m	class:wfl_hilbert	access:public
wfl_hilbert::compo	src/comb/wfl-hilbert.h	/^    ulong compo(ulong e, ulong f)  const  \/\/ jj: want a better name for this method$/;"	f	class:wfl_hilbert	access:public	signature:(ulong e, ulong f) const
wfl_hilbert::decor	src/comb/wfl-hilbert.h	/^    ulong decor(ulong j)  const  \/\/ jj: want a better name for this method$/;"	f	class:wfl_hilbert	access:public	signature:(ulong j) const
wfl_hilbert::dim	src/comb/wfl-hilbert.h	/^    ulong dim; \/\/ dimension d of walk: d >= 2, constant along branch$/;"	m	class:wfl_hilbert	access:public
wfl_hilbert::get_coord	src/comb/wfl-hilbert.h	/^    const ulong * get_coord()  const$/;"	f	class:wfl_hilbert	access:public	signature:() const
wfl_hilbert::get_step	src/comb/wfl-hilbert.h	/^    ulong get_step()  const$/;"	f	class:wfl_hilbert	access:public	signature:() const
wfl_hilbert::gray	src/comb/wfl-hilbert.h	/^    ulong gray(ulong j)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong j) const
wfl_hilbert::hilbert2lin	src/comb/wfl-hilbert.h	/^    ulong hilbert2lin(const ulong * ncoord)$/;"	f	class:wfl_hilbert	access:public	signature:(const ulong * ncoord)
wfl_hilbert::inverse_ept	src/comb/wfl-hilbert.h	/^    ulong inverse_ept(ulong e)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong e) const
wfl_hilbert::inverse_gray	src/comb/wfl-hilbert.h	/^    ulong inverse_gray(ulong x)  const$/;"	f	class:wfl_hilbert	access:public	signature:(ulong x) const
wfl_hilbert::jump_to_coord	src/comb/wfl-hilbert.h	/^    ulong jump_to_coord(const ulong * ncoord)$/;"	f	class:wfl_hilbert	access:public	signature:(const ulong * ncoord)
wfl_hilbert::jump_to_step	src/comb/wfl-hilbert.h	/^    ulong jump_to_step(ulong new_step)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong new_step)
wfl_hilbert::lin2hilbert	src/comb/wfl-hilbert.h	/^    const ulong * lin2hilbert(ulong nstep)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong nstep)
wfl_hilbert::next	src/comb/wfl-hilbert.h	/^    ulong next()$/;"	f	class:wfl_hilbert	access:public	signature:()
wfl_hilbert::p2d1	src/comb/wfl-hilbert.h	/^    ulong p2d1; \/\/ 2^d - 1$/;"	m	class:wfl_hilbert	access:public
wfl_hilbert::prev	src/comb/wfl-hilbert.h	/^    ulong prev()$/;"	f	class:wfl_hilbert	access:public	signature:()
wfl_hilbert::wfl_hilbert	src/comb/wfl-hilbert.h	/^    wfl_hilbert(ulong dm\/*, ulong lev*\/)$/;"	f	class:wfl_hilbert	access:public	signature:(ulong dm )
wfl_hilbert::~wfl_hilbert	src/comb/wfl-hilbert.h	/^    ~wfl_hilbert()  { ; }$/;"	f	class:wfl_hilbert	access:public	signature:()
white_noise	doc/aux0-doc.txt	/^double white_noise();$/;"	p	file:	signature:()
white_noise	doc/aux0-doc.txt	/^void white_noise(double *f, ulong n);$/;"	p	file:	signature:(double *f, ulong n)
white_noise	src/aux0/randf.cc	/^white_noise()$/;"	f	signature:()
white_noise	src/aux0/randf.cc	/^white_noise(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
white_noise	src/aux0/randf.h	/^double white_noise();$/;"	p	signature:()
white_noise	src/aux0/randf.h	/^double white_noise(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
wi	src/fft/attic/ndimfft.cc	/^static double *wr, *wi;  \/\/ workspace$/;"	v	file:
within	doc/wfl-hilbert-doc.txt	/^Edge-pairs are mapped bijectively to consecutive indices (symbols) k within$/;"	v
word_	src/comb/attic/binarydebruijn.h	/^    ulong word_;$/;"	m	class:binary_debruijn	access:public
word_gray	doc/aux1-doc.txt	/^void word_gray(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
word_gray	src/aux1/wordgray.h	/^void word_gray(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
word_gray_pow	doc/aux1-doc.txt	/^void word_gray_pow(Type *f, ulong n, ulong x);$/;"	p	file:	signature:(Type *f, ulong n, ulong x)
word_gray_pow	src/aux1/wordgray.h	/^void word_gray_pow(Type *f, ulong n, ulong x)$/;"	f	signature:(Type *f, ulong n, ulong x)
word_in	src/bits/crc32.h	/^    uint word_in(uint w)$/;"	f	class:crc32	access:public	signature:(uint w)
word_in	src/bits/crc64.h	/^    uint64 word_in(uint64 w)$/;"	f	class:crc64	access:public	signature:(uint64 w)
word_in	src/bits/pcrc64.h	/^    void word_in(Type w)$/;"	f	class:pcrc64	access:public	signature:(Type w)
word_in	src/bits/tcrc64.h	/^    uint64 word_in(uint64 w)$/;"	f	class:tcrc64	access:public	signature:(uint64 w)
word_reed_muller	doc/walsh-doc.txt	/^inline void word_reed_muller(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
word_reed_muller	src/walsh/reedmuller.h	/^inline void word_reed_muller(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
word_reed_muller_dif2	doc/walsh-doc.txt	/^void word_reed_muller_dif2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
word_reed_muller_dif2	src/walsh/reedmuller.h	/^void word_reed_muller_dif2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
word_reed_muller_dit2	doc/walsh-doc.txt	/^void word_reed_muller_dit2(Type *f, ulong ldn);$/;"	p	file:	signature:(Type *f, ulong ldn)
word_reed_muller_dit2	src/walsh/reedmuller.h	/^void word_reed_muller_dit2(Type *f, ulong ldn)$/;"	f	signature:(Type *f, ulong ldn)
word_rev_gray	doc/aux1-doc.txt	/^void word_rev_gray(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
word_rev_gray	src/aux1/wordgray.h	/^void word_rev_gray(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
word_rev_gray_pow	doc/aux1-doc.txt	/^void word_rev_gray_pow(Type *f, ulong n, ulong x);$/;"	p	file:	signature:(Type *f, ulong n, ulong x)
word_rev_gray_pow	src/aux1/wordgray.h	/^void word_rev_gray_pow(Type *f, ulong n, ulong x)$/;"	f	signature:(Type *f, ulong n, ulong x)
word_stats	src/comb/word-stats.h	/^    explicit word_stats(const ulong *ta, ulong tn, ulong thn=0)$/;"	f	class:word_stats	access:public	signature:(const ulong *ta, ulong tn, ulong thn=0)
word_stats	src/comb/word-stats.h	/^    word_stats(const word_stats&);  \/\/ forbidden$/;"	p	class:word_stats	access:private	signature:(const word_stats&)
word_stats	src/comb/word-stats.h	/^class word_stats$/;"	c
word_stats::a	src/comb/word-stats.h	/^    const ulong *a;  \/\/ digits of the string$/;"	m	class:word_stats	access:private
word_stats::first_ascent_idx	src/comb/word-stats.h	/^    ulong first_ascent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_descent_idx	src/comb/word-stats.h	/^    ulong first_descent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_flat_step_idx	src/comb/word-stats.h	/^    ulong first_flat_step_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_max_idx	src/comb/word-stats.h	/^    ulong first_max_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_min_idx	src/comb/word-stats.h	/^    ulong first_min_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_val	src/comb/word-stats.h	/^    ulong first_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::first_val_idx	src/comb/word-stats.h	/^    ulong first_val_idx(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
word_stats::first_zero_idx	src/comb/word-stats.h	/^    ulong first_zero_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::h	src/comb/word-stats.h	/^    ulong *h;  \/\/ aux for histogram$/;"	m	class:word_stats	access:private
word_stats::histogram	src/comb/word-stats.h	/^    void histogram()  const$/;"	f	class:word_stats	access:protected	signature:() const
word_stats::hn	src/comb/word-stats.h	/^    ulong hn;  \/\/ hn+1 values in histogram: h[0..hn]$/;"	m	class:word_stats	access:private
word_stats::last_ascent_idx	src/comb/word-stats.h	/^    ulong last_ascent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_descent_idx	src/comb/word-stats.h	/^    ulong last_descent_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_flat_step_idx	src/comb/word-stats.h	/^    ulong last_flat_step_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_max_idx	src/comb/word-stats.h	/^    ulong last_max_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_min_idx	src/comb/word-stats.h	/^    ulong last_min_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_val	src/comb/word-stats.h	/^    ulong last_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::last_val_idx	src/comb/word-stats.h	/^    ulong last_val_idx(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
word_stats::last_zero_idx	src/comb/word-stats.h	/^    ulong last_zero_idx()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_ascent	src/comb/word-stats.h	/^    ulong max_ascent()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_decr_length	src/comb/word-stats.h	/^    ulong max_decr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_descent	src/comb/word-stats.h	/^    ulong max_descent()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_displacement	src/comb/word-stats.h	/^    ulong max_displacement()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_flat_length	src/comb/word-stats.h	/^    ulong max_flat_length()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_incr_length	src/comb/word-stats.h	/^    ulong max_incr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_num_vals	src/comb/word-stats.h	/^    ulong max_num_vals()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_val	src/comb/word-stats.h	/^    ulong max_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_weakly_decr_length	src/comb/word-stats.h	/^    ulong max_weakly_decr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::max_weakly_incr_length	src/comb/word-stats.h	/^    ulong max_weakly_incr_length()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_ascent	src/comb/word-stats.h	/^    ulong min_ascent()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_descent	src/comb/word-stats.h	/^    ulong min_descent()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_displacement	src/comb/word-stats.h	/^    ulong min_displacement()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_displacement_nfp	src/comb/word-stats.h	/^    ulong min_displacement_nfp()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_max_diff	src/comb/word-stats.h	/^    ulong min_max_diff()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_max_num_diff	src/comb/word-stats.h	/^    ulong min_max_num_diff()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_num_vals	src/comb/word-stats.h	/^    ulong min_num_vals()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_num_vals_nz	src/comb/word-stats.h	/^    ulong min_num_vals_nz()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::min_val	src/comb/word-stats.h	/^    ulong min_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::n	src/comb/word-stats.h	/^    ulong n;    \/\/ Number of digits$/;"	m	class:word_stats	access:private
word_stats::num_ascents	src/comb/word-stats.h	/^    ulong num_ascents()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_descents	src/comb/word-stats.h	/^    ulong num_descents()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_even_val	src/comb/word-stats.h	/^    ulong num_even_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_fixed_points	src/comb/word-stats.h	/^    ulong num_fixed_points()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_fixed_points_1	src/comb/word-stats.h	/^    ulong num_fixed_points_1()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_flat_steps	src/comb/word-stats.h	/^    ulong num_flat_steps()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_leading_equal_val	src/comb/word-stats.h	/^    ulong num_leading_equal_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_max_val	src/comb/word-stats.h	/^    ulong num_max_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_min_val	src/comb/word-stats.h	/^    ulong num_min_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_nonflat_steps	src/comb/word-stats.h	/^    ulong num_nonflat_steps()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_odd_val	src/comb/word-stats.h	/^    ulong num_odd_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_peaks	src/comb/word-stats.h	/^    ulong num_peaks()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_sorts	src/comb/word-stats.h	/^    ulong num_sorts()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_trailing_equal_val	src/comb/word-stats.h	/^    ulong num_trailing_equal_val()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_val	src/comb/word-stats.h	/^    ulong num_val(ulong v)  const$/;"	f	class:word_stats	access:public	signature:(ulong v) const
word_stats::num_valleys	src/comb/word-stats.h	/^    ulong num_valleys()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::num_zeros	src/comb/word-stats.h	/^    ulong num_zeros()  const$/;"	f	class:word_stats	access:public	signature:() const
word_stats::operator =	src/comb/word-stats.h	/^    word_stats & operator = (const word_stats&);  \/\/ forbidden$/;"	p	class:word_stats	access:private	signature:(const word_stats&)
word_stats::set_len	src/comb/word-stats.h	/^    void set_len(ulong m)$/;"	f	class:word_stats	access:public	signature:(ulong m)
word_stats::word_stats	src/comb/word-stats.h	/^    explicit word_stats(const ulong *ta, ulong tn, ulong thn=0)$/;"	f	class:word_stats	access:public	signature:(const ulong *ta, ulong tn, ulong thn=0)
word_stats::word_stats	src/comb/word-stats.h	/^    word_stats(const word_stats&);  \/\/ forbidden$/;"	p	class:word_stats	access:private	signature:(const word_stats&)
word_stats::~word_stats	src/comb/word-stats.h	/^    ~word_stats()  { delete [] h; }$/;"	f	class:word_stats	access:public	signature:()
words_in	src/bits/pcrc64.h	/^    void words_in(Type *w, ulong n)$/;"	f	class:pcrc64	access:public	signature:(Type *w, ulong n)
wpos_	src/ds/queue.h	/^    ulong wpos_;  \/\/ next position to write in buffer$/;"	m	class:queue	access:public
wpos_	src/ds/ringbuffer.h	/^    ulong wpos_;  \/\/ next position to write in buffer$/;"	m	class:ringbuffer	access:public
wr	src/fft/attic/ndimfft.cc	/^static double *wr, *wi;  \/\/ workspace$/;"	v	file:
wrap_complex_real_fft	doc/realfft-doc.txt	/^void wrap_complex_real_fft(double *f, ulong ldn\/*, int is=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn )
wrap_complex_real_fft	src/realfft/realfft.h	/^void wrap_complex_real_fft(double *f, ulong ldn\/*, int is=+1*\/);$/;"	p	signature:(double *f, ulong ldn )
wrap_complex_real_fft	src/realfft/realfftwrap.cc	/^wrap_complex_real_fft(double *f, ulong ldn\/*, int is=+1*\/)$/;"	f	signature:(double *f, ulong ldn )
wrap_range	src/aux0/attic/range.h	/^static inline void wrap_range(Type xmin, Type xmax, Type &x)$/;"	f	signature:(Type xmin, Type xmax, Type &x)
wrap_real_complex_fft	doc/realfft-doc.txt	/^void wrap_real_complex_fft(double *f, ulong ldn\/*, int is=+1*\/);$/;"	p	file:	signature:(double *f, ulong ldn )
wrap_real_complex_fft	src/realfft/realfft.h	/^void wrap_real_complex_fft(double *f, ulong ldn\/*, int is=+1*\/);$/;"	p	signature:(double *f, ulong ldn )
wrap_real_complex_fft	src/realfft/realfftwrap.cc	/^wrap_real_complex_fft(double *f, ulong ldn\/*, int is=+1*\/)$/;"	f	signature:(double *f, ulong ldn )
write_s0_tail	src/comb/partition-asc-sorts.h	/^    ulong write_s0_tail(ulong j, ulong w, ulong y)$/;"	f	class:partition_asc_sorts	access:private	signature:(ulong j, ulong w, ulong y)
write_tail	src/comb/balanced-ordered-tree-lev-seq.h	/^    void write_tail(ulong j)$/;"	f	class:balanced_ordered_tree_lev_seq	access:private	signature:(ulong j)
write_tail	src/comb/binary-huffman.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:binary_huffman	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/composition-nz-carlitz.h	/^    ulong write_tail(ulong z, ulong k)$/;"	f	class:composition_nz_carlitz	access:private	signature:(ulong z, ulong k)
write_tail	src/comb/composition-nz-min.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:composition_nz_min	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/composition-nz-superdiagonal.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:composition_nz_superdiagonal	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/partition-2fall-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_2fall_desc	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/partition-asc-perim.h	/^    ulong write_tail(ulong j, ulong s)$/;"	f	class:partition_asc_perim	access:private	signature:(ulong j, ulong s)
write_tail	src/comb/partition-desc-bb.h	/^    ulong write_tail(ulong j, ulong s)$/;"	f	class:partition_desc_bb	access:private	signature:(ulong j, ulong s)
write_tail	src/comb/partition-nonsquashing-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_nonsquashing_desc	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/partition-odd-nonsquashing-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_odd_nonsquashing_desc	access:private	signature:(ulong s, ulong j)
write_tail	src/comb/partition-strongly-decr-desc.h	/^    ulong write_tail(ulong s, ulong j)$/;"	f	class:partition_strongly_decr_desc	access:private	signature:(ulong s, ulong j)
wrk_	src/comb/composition-nz-i-smooth.h	/^    ulong wrk_;   \/\/ work with last call of next()$/;"	m	class:composition_nz_i_smooth	access:public
ww	src/graph/mk-special-digraphs.h	/^    ulong *ww;  \/\/ Lyndon words (==sv[] in digraph)$/;"	m	class:lyngray_dat	access:public
x	demo/comb/combination-gray-rec-demo.cc	/^ulong *x;  \/\/ elements in combination at x[1] ... x[k]$/;"	v
x	doc/wfl-hilbert-doc.txt	/^    e' (x) e  =  (el, er)' (x) (el, er)  =  (0, 1(^)(d-1)).$/;"	p	file:	signature:(el, er)
x	src/bits/kolakoski-seq.h	/^    ulong x, y;$/;"	m	class:kolakoski_seq	access:private
x	src/bits/print-bitset.o	/^ELF/;"	v
x	src/bmat/bitmat-mult-mm.o	/^/;"	v
x	src/bpol/gf2n.o	/^/;"	v
x	src/comb/attic/permvisit.h	/^    ulong *x;  \/\/ current permutation$/;"	m	class:perm_visit	access:protected
x	src/comb/attic/subset-monotone.h	/^    ulong *x;$/;"	m	class:subset_monotone	access:protected
x	src/comb/attic/subsetdebruijn.h	/^    ulong *x;$/;"	m	class:subset_debruijn	access:protected
x	src/comb/combination-pref.h	/^    ulong x, y;  \/\/ aux$/;"	m	class:combination_pref	access:private
x	src/comb/mixedradix2num.o	/^ELF/;"	v
x	src/comb/subset-debruijn.h	/^    ulong *x;   \/\/ subset as delta set$/;"	m	class:subset_debruijn	access:protected
x	src/ds/attic/coroutine-paren-demo.cc	/^    int *x;$/;"	m	class:paren	file:	access:protected
x	src/ds/point2d.h	/^    Type x()  const  { return x_; }$/;"	f	class:point2d	access:public	signature:() const
x	src/ds/point3d.h	/^    Type x()  const  { return x_; }$/;"	f	class:point3d	access:public	signature:() const
x	src/ds/vector2d.h	/^    Type x()  const  { return x_; }$/;"	f	class:vector2d	access:public	signature:() const
x	src/ds/vector3d.h	/^    Type x()  const  { return x_; }$/;"	f	class:vector3d	access:public	signature:() const
x	src/mod/chebyshev1.cc	126;"	d	file:
x	src/mod/chebyshev1.cc	93;"	d	file:
x	src/perm/attic/partition.h	/^    int *x;$/;"	m	class:partition	access:private
x_	src/bits/bit-sl-gray.h	/^    ulong x_;   \/\/ Gray code word$/;"	m	class:bit_sl_gray	access:public
x_	src/bits/bitcombshifts.h	/^    ulong x_;  \/\/ the combination$/;"	m	class:bit_comb_shifts	access:public
x_	src/bits/bitfibgray.h	/^    ulong x_;  \/\/ current Fibonacci word$/;"	m	class:bit_fibgray	access:public
x_	src/bits/pcrc64.h	/^    Type x_[64];    \/\/ CRC data$/;"	m	class:pcrc64	access:public
x_	src/comb/attic/all-compositions-minchange.h	/^    mutable uchar *x_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
x_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
x_	src/comb/attic/combcolex.h	/^    ulong *x_;$/;"	m	class:comb_colex	access:public
x_	src/comb/attic/combination-altminchange.h	/^    ulong *x_;$/;"	m	class:combination_altminchange	access:public
x_	src/comb/attic/combination-minchange.h	/^    ulong *x_;$/;"	m	class:combination_minchange	access:public
x_	src/comb/attic/comblex.h	/^    ulong *x_;$/;"	m	class:comb_lex	access:public
x_	src/comb/attic/combminchange.h	/^    ulong *x_;$/;"	m	class:comb_minchange	access:public
x_	src/comb/attic/compositionalt.h	/^    ulong *x_;$/;"	m	class:composition_alt	access:public
x_	src/comb/attic/perm-trotter.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_trotter	access:public
x_	src/comb/check-kpermgen.h	/^    const ulong *x_;$/;"	m	class:check_kpermgen	access:public
x_	src/comb/check-mixedradix.h	/^    const ulong *x_;$/;"	m	class:check_mixedradix	access:public
x_	src/comb/check-permgen.h	/^    const ulong *x_;$/;"	m	class:check_permgen	access:public
x_	src/comb/combination-colex.h	/^    ulong *x_;    \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_colex	access:public
x_	src/comb/combination-emk.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_emk	access:public
x_	src/comb/combination-endo.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_endo	access:public
x_	src/comb/combination-enup.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_enup	access:public
x_	src/comb/combination-lex.h	/^    ulong *x_;    \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_lex	access:public
x_	src/comb/combination-mod.h	/^    ulong *x_;  \/\/ combination: k elements 0<=x[j]<k in increasing order$/;"	m	class:combination_mod	access:public
x_	src/comb/composition-colex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_colex	access:public
x_	src/comb/composition-colex2.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_colex2	access:public
x_	src/comb/composition-colex2.h	/^    ulong x_[COMP_COLEX2_MAX_ARRAY_LEN];$/;"	m	class:composition_colex2	access:public
x_	src/comb/composition-ex-colex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_ex_colex	access:public
x_	src/comb/composition-ex-colex.h	/^    ulong x_[64];$/;"	m	class:composition_ex_colex	access:public
x_	src/comb/composition-ex-lex.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_ex_lex	access:public
x_	src/comb/composition-ex-lex.h	/^    ulong x_[64];$/;"	m	class:composition_ex_lex	access:public
x_	src/comb/composition-nz-numparts.h	/^    ulong *x_;     \/\/ data (k elements)$/;"	m	class:composition_nz_numparts	access:public
x_	src/comb/cyclic-perm.h	/^    ulong *x_;  \/\/ inverse permutation$/;"	m	class:cyclic_perm	access:public
x_	src/comb/dyck-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref	access:public
x_	src/comb/dyck-pref2.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref2	access:public
x_	src/comb/kperm-gray.h	/^    ulong *x_;  \/\/ inverse permutation (perms in Trotter's order)$/;"	m	class:kperm_gray	access:public
x_	src/comb/ksubset-lex.h	/^    ulong *x_;  \/\/ x[0...j-1]:  subset of {0,1,2,...,n-1}$/;"	m	class:ksubset_lex	access:public
x_	src/comb/mixedradix-modular-gray2.h	/^    ulong *x_;  \/\/ count changes of digit$/;"	m	class:mixedradix_modular_gray2	access:public
x_	src/comb/mpartition.h	/^    ulong *x_;  \/\/ partition: x[1] + x[2] + ... + x[m] = n$/;"	m	class:mpartition	access:public
x_	src/comb/mpartition2.h	/^    ulong *x_;  \/\/ partition: x[1] + x[2] + ... + x[m] = n$/;"	m	class:mpartition2	access:public
x_	src/comb/paren-lex.h	/^    ulong *x_;   \/\/ Positions of opening parenthesis (RGS)$/;"	m	class:paren_lex	access:public
x_	src/comb/paren-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:paren_pref	access:public
x_	src/comb/paren.h	/^    ulong *x_;   \/\/ Positions of opening parenthesis$/;"	m	class:paren	access:public
x_	src/comb/partition-gen.h	/^    ulong x_;    \/\/ value to partition$/;"	m	class:partition_gen	access:public
x_	src/comb/perm-colex.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_colex	access:public
x_	src/comb/perm-derange.h	/^    ulong *x_;  \/\/ current permutation$/;"	m	class:perm_derange	access:public
x_	src/comb/perm-gray-ffact.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_gray_ffact	access:public
x_	src/comb/perm-gray-ffact2.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_ffact2	access:public
x_	src/comb/perm-gray-rfact.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_rfact	access:public
x_	src/comb/perm-gray-rot1.h	/^    ulong *x_;  \/\/ current permutation (of {0, 1, ..., n-1})$/;"	m	class:perm_gray_rot1	access:public
x_	src/comb/perm-lex-inv.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_lex_inv	access:public
x_	src/comb/perm-lex2.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_lex2	access:public
x_	src/comb/perm-mv0.h	/^    ulong *x_;  \/\/ permutation$/;"	m	class:perm_mv0	access:public
x_	src/comb/perm-rec.h	/^    ulong *x_;   \/\/ permutation$/;"	m	class:perm_rec	access:public
x_	src/comb/perm-st-gray.h	/^    ulong *x_;   \/\/ permutation$/;"	m	class:perm_st_gray	access:public
x_	src/comb/perm-trotter-lg.h	/^    ulong *x_;    \/\/ permutation of {0, 1, ..., n-1}$/;"	m	class:perm_trotter_lg	access:public
x_	src/comb/perm-trotter.h	/^    ulong *x_;    \/\/ permutation of {0, 1, ..., n-1}$/;"	m	class:perm_trotter	access:public
x_	src/comb/setpart.h	/^    int *x_;    \/\/ current set partition (==pp[n])$/;"	m	class:setpart	access:public
x_	src/comb/subset-gray-delta.h	/^    ulong *x_;  \/\/ current subset as delta set$/;"	m	class:subset_gray_delta	access:public
x_	src/comb/subset-gray.h	/^    ulong *x_;  \/\/ data k-subset of {1,2,...,n} in x[1,...,k]$/;"	m	class:subset_gray	access:public
x_	src/comb/subset-lex.h	/^    ulong *x_;  \/\/ x[0...k-1]:  subset of {0,1,2,...,n-1}$/;"	m	class:subset_lex	access:public
x_	src/comb/subset-lex.h	/^    ulong x_[SUBSET_LEX_MAX_ARRAY_LEN];$/;"	m	class:subset_lex	access:public
x_	src/ds/attic/rarray.h	/^    Type  *x_;  \/\/ data$/;"	m	class:rarray	access:public
x_	src/ds/attic/rset.h	/^    Type  *x_;  \/\/ data$/;"	m	class:rset	access:public
x_	src/ds/deque.h	/^    Type *x_;   \/\/ data (ring buffer)$/;"	m	class:deque	access:public
x_	src/ds/point2d.h	/^    Type x_, y_;$/;"	m	class:point2d	access:protected
x_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
x_	src/ds/queue.h	/^    Type *x_;   \/\/ pointer to data$/;"	m	class:queue	access:public
x_	src/ds/ringbuffer.h	/^    Type *x_;   \/\/ data (ring buffer)$/;"	m	class:ringbuffer	access:public
x_	src/ds/stack.h	/^    Type  *x_;  \/\/ data$/;"	m	class:stack	access:public
x_	src/ds/vector2d.h	/^    Type x_, y_;$/;"	m	class:vector2d	access:protected
x_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
x_	src/mod/mod.h	/^    umod_t x_;$/;"	m	class:mod	access:public
xbits_	src/comb/attic/comblex.h	/^    ulong xbits_;$/;"	m	class:comb_lex	access:public
xct	demo/comb/fib-alt-gray-demo.cc	/^ulong xct = 0;$/;"	v
xct	demo/comb/naf-pos-rec-demo.cc	/^ulong xct;   \/\/ count additional (wrt. Gray) transitions$/;"	v
xct	demo/comb/no111-gray-demo.cc	/^long xct = 0;$/;"	v
xct	demo/comb/no1111-gray-demo.cc	/^long xct = 0;$/;"	v
xct	demo/comb/no1x1-gray-demo.cc	/^ulong xct;   \/\/ count transitions$/;"	v
xct	demo/comb/no1xy1-gray-demo.cc	/^long xct = 0;$/;"	v
xct	demo/seq/A003043-demo.cc	/^ulong xct = 0;$/;"	v
xdr_	src/comb/catalan.h	/^    bool xdr_;  \/\/ whether to change direction in recursion (==> minimal-change order)$/;"	m	class:catalan	access:public
xdr_	src/comb/setpart.h	/^    bool xdr_;  \/\/ whether to change direction in recursion (==> minimal-change order)$/;"	m	class:setpart	access:public
xgen	demo/comb/necklace-gray-demo.cc	/^void xgen(ulong n, ulong j, int x=+1)$/;"	f	signature:(ulong n, ulong j, int x=+1)
xi	src/comb/attic/permvisit.h	/^    ulong *xi; \/\/ inverse of x[]$/;"	m	class:perm_visit	access:protected
xi0_	src/comb/perm-trotter.h	/^    ulong xi0_;  \/\/ position of element zero$/;"	m	class:perm_trotter	access:public
xi_	src/comb/perm-lex-inv.h	/^    ulong *xi_;  \/\/ inverse permutation$/;"	m	class:perm_lex_inv	access:public
xi_	src/comb/perm-trotter-lg.h	/^    ulong *xi_;   \/\/ inverse permutation$/;"	m	class:perm_trotter_lg	access:public
xi_	src/comb/perm-trotter.h	/^    ulong *xi_;   \/\/ inverse permutation$/;"	m	class:perm_trotter	access:public
xlate_	src/comb/attic/stringsubst.h	/^    ulong xlate_[128];  \/\/ translate char |-> rule$/;"	m	class:string_subst	access:public
xm	src/perm/attic/graypermute.h	19;"	d
xm	src/perm/attic/graypermute.h	235;"	d
xor_permute	doc/perm-doc.txt	/^inline void xor_permute(Type *f, ulong n, ulong x);$/;"	p	file:	signature:(Type *f, ulong n, ulong x)
xor_permute	src/perm/xorpermute.h	/^inline void xor_permute(Type *f, ulong n, ulong x)$/;"	f	signature:(Type *f, ulong n, ulong x)
xor_tab	src/perm/attic/graypermute.cc	/^xor_tab(ulong ldx)$/;"	f	signature:(ulong ldx)
xor_tab	src/perm/attic/graypermute.h	/^ulong * xor_tab(ulong ldx);$/;"	p	signature:(ulong ldx)
xp	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong xp = 0;  \/\/ position of last change$/;"	v
xrevbin	doc/bits-doc.txt	/^static inline ulong xrevbin(ulong a, ulong x);$/;"	p	file:	signature:(ulong a, ulong x)
xrevbin	src/bits/revbin.h	/^static inline ulong xrevbin(ulong a, ulong x)$/;"	f	signature:(ulong a, ulong x)
xv	demo/comb/mixedradix-sl-gray-rec-demo.cc	/^ulong xv[32];  \/\/ save old digits (for delta-sequence)$/;"	v
xx	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong xx[32];  \/\/ aux (permutation)$/;"	v
xx	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong xx[32];  \/\/ aux (permutation)$/;"	v
xx	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
xx_	src/comb/attic/all-compositions-minchange.h	/^    uchar *xx_;   \/\/$/;"	m	class:all_compositions_minchange	access:public
xxo	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong xxo[32];  \/\/ aux (last permutation)$/;"	v
xxo	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong xxo[32];  \/\/ aux (last permutation)$/;"	v
xy	doc/wfl-hilbert-doc.txt	/^abbreviating  [x,y]  to  xy , yields the 2-space Hilbert walk$/;"	v
y	src/bits/kolakoski-seq.h	/^    ulong x, y;$/;"	m	class:kolakoski_seq	access:private
y	src/comb/combination-pref.h	/^    ulong x, y;  \/\/ aux$/;"	m	class:combination_pref	access:private
y	src/ds/point2d.h	/^    Type y()  const  { return y_; }$/;"	f	class:point2d	access:public	signature:() const
y	src/ds/point3d.h	/^    Type y()  const  { return y_; }$/;"	f	class:point3d	access:public	signature:() const
y	src/ds/vector2d.h	/^    Type y()  const  { return y_; }$/;"	f	class:vector2d	access:public	signature:() const
y	src/ds/vector3d.h	/^    Type y()  const  { return y_; }$/;"	f	class:vector3d	access:public	signature:() const
y_	src/comb/attic/binarydebruijn.h	/^    ulong *x_, *y_, *t_;$/;"	m	class:binary_debruijn	access:public
y_	src/comb/dyck-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref	access:public
y_	src/comb/dyck-pref2.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:dyck_pref2	access:public
y_	src/comb/paren-pref.h	/^    ulong x_, y_;  \/\/ aux$/;"	m	class:paren_pref	access:public
y_	src/ds/point2d.h	/^    Type x_, y_;$/;"	m	class:point2d	access:protected
y_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
y_	src/ds/vector2d.h	/^    Type x_, y_;$/;"	m	class:vector2d	access:protected
y_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
y_i	doc/wfl-hilbert-doc.txt	/^    2^l y_i  <=  x_i  <  2^l(y_i + 1) ,$/;"	v
y_transform	doc/fht-doc.txt	/^void y_transform(double *f, ulong nr, ulong nc); \/\/ aux$/;"	p	file:	signature:(double *f, ulong nr, ulong nc)
y_transform	src/fht/fht2d.h	/^void y_transform(double *f, ulong nr, ulong nc);  \/\/ aux$/;"	p	signature:(double *f, ulong nr, ulong nc)
y_transform	src/fht/twodimfht.cc	/^y_transform(double *f, ulong nr, ulong nc)$/;"	f	signature:(double *f, ulong nr, ulong nc)
yellow_code	doc/bits-doc.txt	/^static inline ulong yellow_code(ulong a);$/;"	p	file:	signature:(ulong a)
yellow_code	src/bits/bittransforms.h	/^static inline ulong yellow_code(ulong a)$/;"	f	signature:(ulong a)
yellow_xcode	doc/bits-doc.txt	/^static inline ulong yellow_xcode(ulong a, ulong x);$/;"	p	file:	signature:(ulong a, ulong x)
yellow_xcode	src/bits/bitxtransforms.h	/^static inline ulong yellow_xcode(ulong a, ulong x)$/;"	f	signature:(ulong a, ulong x)
yielding	doc/wfl-hilbert-doc.txt	/^decoding to  [1,1] ; double the vector and add the node, yielding$/;"	v
ynl	scripts/chk-bessel.zsh	/^for B in j0 j0f j0l j1 j1f j1l jn jnf jnl y0 y0f y0l y1 y1f y1l yn ynf ynl; do$/;"	v
young_tab_rgs	src/comb/young-tab-rgs.h	/^    explicit young_tab_rgs(ulong n, ulong m=0)$/;"	f	class:young_tab_rgs	access:public	signature:(ulong n, ulong m=0)
young_tab_rgs	src/comb/young-tab-rgs.h	/^    young_tab_rgs(const young_tab_rgs&);  \/\/ forbidden$/;"	p	class:young_tab_rgs	access:private	signature:(const young_tab_rgs&)
young_tab_rgs	src/comb/young-tab-rgs.h	/^class young_tab_rgs$/;"	c
young_tab_rgs::OK	src/comb/young-tab-rgs.h	/^    bool OK()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::a_	src/comb/young-tab-rgs.h	/^    ulong *a_;   \/\/ RGS$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::data	src/comb/young-tab-rgs.h	/^    const ulong * data()  const  { return a_; }$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::descent_number	src/comb/young-tab-rgs.h	/^    ulong descent_number()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::descent_set	src/comb/young-tab-rgs.h	/^    ulong descent_set(ulong *d)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong *d) const
young_tab_rgs::first	src/comb/young-tab-rgs.h	/^    void first()$/;"	f	class:young_tab_rgs	access:public	signature:()
young_tab_rgs::first_idx	src/comb/young-tab-rgs.h	/^    ulong first_idx(ulong d)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong d) const
young_tab_rgs::h_	src/comb/young-tab-rgs.h	/^    ulong h_;   \/\/ height: number of different digits used in a[] (==1 + max digit)$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::has_shape	src/comb/young-tab-rgs.h	/^    bool has_shape(const ulong *st, ulong h)$/;"	f	class:young_tab_rgs	access:public	signature:(const ulong *st, ulong h)
young_tab_rgs::height	src/comb/young-tab-rgs.h	/^    ulong height()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::is_chess_tableau	src/comb/young-tab-rgs.h	/^    bool is_chess_tableau()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::is_delayed	src/comb/young-tab-rgs.h	/^    bool is_delayed(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
young_tab_rgs::is_falling	src/comb/young-tab-rgs.h	/^    bool is_falling(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
young_tab_rgs::is_shifted	src/comb/young-tab-rgs.h	/^    bool is_shifted(ulong s=1)  const$/;"	f	class:young_tab_rgs	access:public	signature:(ulong s=1) const
young_tab_rgs::is_strict	src/comb/young-tab-rgs.h	/^    bool is_strict()  const  \/\/ same as: is_shifted( 1 )$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::m_	src/comb/young-tab-rgs.h	/^    ulong m_;   \/\/ number of allowed values for digits (== max height of tableaux)$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::major_index	src/comb/young-tab-rgs.h	/^    ulong major_index()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::make_r	src/comb/young-tab-rgs.h	/^    void make_r()  const$/;"	f	class:young_tab_rgs	access:private	signature:() const
young_tab_rgs::n_	src/comb/young-tab-rgs.h	/^    ulong n_;   \/\/ length of string$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::next	src/comb/young-tab-rgs.h	/^    ulong next()$/;"	f	class:young_tab_rgs	access:public	signature:()
young_tab_rgs::number_strict_inversions	src/comb/young-tab-rgs.h	/^    ulong number_strict_inversions()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::number_weak_inversions	src/comb/young-tab-rgs.h	/^    ulong number_weak_inversions()  const$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::operator =	src/comb/young-tab-rgs.h	/^    young_tab_rgs & operator = (const young_tab_rgs&);  \/\/ forbidden$/;"	p	class:young_tab_rgs	access:private	signature:(const young_tab_rgs&)
young_tab_rgs::pdata	src/comb/young-tab-rgs.h	/^    const ulong * pdata()  const  { return st_; }$/;"	f	class:young_tab_rgs	access:public	signature:() const
young_tab_rgs::print	src/comb/young-tab-rgs.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
young_tab_rgs::print1	src/comb/young-tab-rgs.h	/^    void print1(const char *bla)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla) const
young_tab_rgs::print_aa	src/comb/young-tab-rgs.h	/^    void print_aa(ulong off=1)  const  \/\/ ASCII art$/;"	f	class:young_tab_rgs	access:public	signature:(ulong off=1) const
young_tab_rgs::print_r	src/comb/young-tab-rgs.h	/^    void print_r(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
young_tab_rgs::print_stats	src/comb/young-tab-rgs.h	/^    void print_stats(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs	access:public	signature:(const char *bla, bool dfz=true) const
young_tab_rgs::r_	src/comb/young-tab-rgs.h	/^    ulong *r_;   \/\/ aux for inversions: r[i] is the row (>=1) the entry i lies in$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::st_	src/comb/young-tab-rgs.h	/^    ulong *st_;  \/\/ stats: st[j] is the number of occurrences of j in a[]$/;"	m	class:young_tab_rgs	access:public
young_tab_rgs::try_incr	src/comb/young-tab-rgs.h	/^    bool try_incr(ulong j)$/;"	f	class:young_tab_rgs	access:private	signature:(ulong j)
young_tab_rgs::young_tab_rgs	src/comb/young-tab-rgs.h	/^    explicit young_tab_rgs(ulong n, ulong m=0)$/;"	f	class:young_tab_rgs	access:public	signature:(ulong n, ulong m=0)
young_tab_rgs::young_tab_rgs	src/comb/young-tab-rgs.h	/^    young_tab_rgs(const young_tab_rgs&);  \/\/ forbidden$/;"	p	class:young_tab_rgs	access:private	signature:(const young_tab_rgs&)
young_tab_rgs::~young_tab_rgs	src/comb/young-tab-rgs.h	/^    ~young_tab_rgs()$/;"	f	class:young_tab_rgs	access:public	signature:()
young_tab_rgs_descent_number	src/comb/young-tab-rgs-descents.h	/^inline ulong young_tab_rgs_descent_number(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
young_tab_rgs_descent_set	src/comb/young-tab-rgs-descents.h	/^inline ulong young_tab_rgs_descent_set(const ulong *a, ulong n, ulong *d)$/;"	f	signature:(const ulong *a, ulong n, ulong *d)
young_tab_rgs_major_index	src/comb/young-tab-rgs-descents.h	/^inline ulong young_tab_rgs_major_index(const ulong *a, ulong n)$/;"	f	signature:(const ulong *a, ulong n)
young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    explicit young_tab_rgs_subset_lex(ulong n)$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong n)
young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    young_tab_rgs_subset_lex(const young_tab_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:young_tab_rgs_subset_lex	access:private	signature:(const young_tab_rgs_subset_lex&)
young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^class young_tab_rgs_subset_lex$/;"	c
young_tab_rgs_subset_lex::OK	src/comb/young-tab-rgs-subset-lex.h	/^    bool OK()  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
young_tab_rgs_subset_lex::a_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong *a_;   \/\/ RGS$/;"	m	class:young_tab_rgs_subset_lex	access:public
young_tab_rgs_subset_lex::data	src/comb/young-tab-rgs-subset-lex.h	/^    const ulong * data()  const  { return a_ + 1; }$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
young_tab_rgs_subset_lex::first	src/comb/young-tab-rgs-subset-lex.h	/^    void first()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
young_tab_rgs_subset_lex::first_idx	src/comb/young-tab-rgs-subset-lex.h	/^    ulong first_idx(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong d) const
young_tab_rgs_subset_lex::h_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong h_;   \/\/ height: number of different digits used in a[] (==1 + max digit)$/;"	m	class:young_tab_rgs_subset_lex	access:public
young_tab_rgs_subset_lex::has_shape	src/comb/young-tab-rgs-subset-lex.h	/^    bool has_shape(const ulong *st, ulong h)$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const ulong *st, ulong h)
young_tab_rgs_subset_lex::height	src/comb/young-tab-rgs-subset-lex.h	/^    ulong height()  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
young_tab_rgs_subset_lex::is_delayed	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_delayed(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
young_tab_rgs_subset_lex::is_falling	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_falling(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
young_tab_rgs_subset_lex::is_shifted	src/comb/young-tab-rgs-subset-lex.h	/^    bool is_shifted(ulong s=1)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong s=1) const
young_tab_rgs_subset_lex::n_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong n_;   \/\/ length of string$/;"	m	class:young_tab_rgs_subset_lex	access:public
young_tab_rgs_subset_lex::next	src/comb/young-tab-rgs-subset-lex.h	/^    ulong next()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
young_tab_rgs_subset_lex::next_dig	src/comb/young-tab-rgs-subset-lex.h	/^    ulong next_dig(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:private	signature:(ulong d) const
young_tab_rgs_subset_lex::operator =	src/comb/young-tab-rgs-subset-lex.h	/^    young_tab_rgs_subset_lex & operator = (const young_tab_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:young_tab_rgs_subset_lex	access:private	signature:(const young_tab_rgs_subset_lex&)
young_tab_rgs_subset_lex::pdata	src/comb/young-tab-rgs-subset-lex.h	/^    const ulong * pdata()  const  { return st_; }$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:() const
young_tab_rgs_subset_lex::prev_dig	src/comb/young-tab-rgs-subset-lex.h	/^    ulong prev_dig(ulong d)  const$/;"	f	class:young_tab_rgs_subset_lex	access:private	signature:(ulong d) const
young_tab_rgs_subset_lex::print	src/comb/young-tab-rgs-subset-lex.h	/^    void print(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
young_tab_rgs_subset_lex::print1	src/comb/young-tab-rgs-subset-lex.h	/^    void print1(const char *bla)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla) const
young_tab_rgs_subset_lex::print_aa	src/comb/young-tab-rgs-subset-lex.h	/^    void print_aa(ulong off=1)  const  \/\/ ASCII art$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong off=1) const
young_tab_rgs_subset_lex::print_stats	src/comb/young-tab-rgs-subset-lex.h	/^    void print_stats(const char *bla, bool dfz=true)  const$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(const char *bla, bool dfz=true) const
young_tab_rgs_subset_lex::st_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong *st_;  \/\/ stats: st[j] is the number of occurrences of j in a[]$/;"	m	class:young_tab_rgs_subset_lex	access:public
young_tab_rgs_subset_lex::tr_	src/comb/young-tab-rgs-subset-lex.h	/^    ulong tr_;  \/\/ track: position of last non-zero digit$/;"	m	class:young_tab_rgs_subset_lex	access:public
young_tab_rgs_subset_lex::young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    explicit young_tab_rgs_subset_lex(ulong n)$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:(ulong n)
young_tab_rgs_subset_lex::young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    young_tab_rgs_subset_lex(const young_tab_rgs_subset_lex&);  \/\/ forbidden$/;"	p	class:young_tab_rgs_subset_lex	access:private	signature:(const young_tab_rgs_subset_lex&)
young_tab_rgs_subset_lex::~young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    ~young_tab_rgs_subset_lex()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
yy	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong yy[32];  \/\/ aux (inverse permutation)$/;"	v
yy	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong yy[32];  \/\/ aux (inverse permutation)$/;"	v
yy	src/comb/attic/binarydebruijn.h	/^    ulong xx, tt, yy;$/;"	m	class:binary_debruijn	access:private
yyo	demo/graph/graph-perm-doubly-adjacent-gray-demo.cc	/^ulong yyo[32];  \/\/ aux (last inverse permutation)$/;"	v
yyo	demo/graph/graph-perm-star-transpositions-demo.cc	/^ulong yyo[32];  \/\/ aux (last inverse permutation)$/;"	v
z	demo/comb/perm-restrpref-demo.cc	/^ulong *z;  \/\/ for zero-based permutations$/;"	v
z	demo/seq/A003043-demo.cc	/^ulong *z;$/;"	v
z	demo/seq/A178514-demo.cc	/^ulong z[32];$/;"	v
z	src/bpol/gf2n.o	/^/;"	v
z	src/comb/lyndon-words.h	/^    ulong z;  \/\/ last (largest) letter$/;"	m	class:lyndon_words	access:protected
z	src/comb/num-necklaces.o	/^/;"	v
z	src/ds/point3d.h	/^    Type z()  const  { return z_; }$/;"	f	class:point3d	access:public	signature:() const
z	src/ds/vector3d.h	/^    Type z()  const  { return z_; }$/;"	f	class:vector3d	access:public	signature:() const
z_	src/comb/arrangement-rgs.h	/^    ulong *z_;  \/\/ 1 + number of nonzero digits in prefix$/;"	m	class:arrangement_rgs	access:public
z_	src/comb/involution-zero-map-rgs.h	/^    ulong *z_;  \/\/ for non-zero values y: number of x with f(x)=y$/;"	m	class:involution_zero_map_rgs	access:public
z_	src/comb/setpart-s-zero-map-rgs.h	/^    ulong *z_;  \/\/ for non-zero values y: number of x with f(x)=y$/;"	m	class:setpart_s_zero_map_rgs	access:public
z_	src/ds/point3d.h	/^    Type x_, y_, z_;$/;"	m	class:point3d	access:protected
z_	src/ds/vector3d.h	/^    Type x_, y_, z_;$/;"	m	class:vector3d	access:protected
za_	src/comb/gray-cycle-leaders.h	/^    ulong za_;  \/\/ mask for cycle maxima$/;"	m	class:gray_cycle_leaders	access:public
zcmp_func	test/test-bits.cc	/^static inline ulong zcmp_func(ulong x)$/;"	f	file:	signature:(ulong x)
zcrc	demo/graph/lyndon-gray-demo.cc	/^crc64 zcrc;  \/\/ CRC$/;"	v
zero	src/bpol/gf2n.cc	/^GF2n GF2n::zero;  \/\/ zero (neutral element wrt. addition) in GF(2**n)$/;"	m	class:GF2n	file:
zero	src/bpol/gf2n.h	/^    static GF2n zero;  \/\/ zero (neutral element wrt. addition) in GF(2**n)$/;"	m	class:GF2n	access:public
zero	src/mod/mod.cc	/^mod    mod::zero;$/;"	m	class:mod	file:
zero	src/mod/mod.h	/^    static mod zero;             \/\/ = 0$/;"	m	class:mod	access:public
zero2center	src/aux2/attic/rotate2d.h	/^void zero2center(Type **f, ulong nr, ulong nc)$/;"	f	signature:(Type **f, ulong nr, ulong nc)
zero_pos	src/bits/pcrc64.h	/^    void zero_pos()$/;"	f	class:pcrc64	access:public	signature:()
zi_	src/comb/gray-cycle-leaders.h	/^    ulong zi_;  \/\/ mask for cycle minima$/;"	m	class:gray_cycle_leaders	access:public
zip	doc/perm-doc.txt	/^void zip(Type *f, ulong n);$/;"	p	file:	signature:(Type *f, ulong n)
zip	doc/perm-doc.txt	/^void zip(const Type * restrict f, Type * restrict g, ulong n);$/;"	p	file:	signature:(const Type * restrict f, Type * restrict g, ulong n)
zip	doc/perm-doc.txt	/^void zip(double *f, ulong n);$/;"	p	file:	signature:(double *f, ulong n)
zip	src/perm/zip.cc	/^zip(double *f, ulong n)$/;"	f	signature:(double *f, ulong n)
zip	src/perm/zip.h	/^void zip(Type *f, ulong n)$/;"	f	signature:(Type *f, ulong n)
zip	src/perm/zip.h	/^void zip(const Type * restrict f, Type * restrict g, ulong n)$/;"	f	signature:(const Type * restrict f, Type * restrict g, ulong n)
zip	src/perm/zip.h	/^void zip(double *f, ulong n);$/;"	p	signature:(double *f, ulong n)
zip_rev	doc/perm-doc.txt	/^void zip_rev(Type *x, ulong n);$/;"	p	file:	signature:(Type *x, ulong n)
zip_rev	doc/perm-doc.txt	/^void zip_rev(const Type * restrict x, Type * restrict y, ulong n);$/;"	p	file:	signature:(const Type * restrict x, Type * restrict y, ulong n)
zip_rev	src/perm/ziprev.h	/^void zip_rev(Type *x, ulong n)$/;"	f	signature:(Type *x, ulong n)
zip_rev	src/perm/ziprev.h	/^void zip_rev(const Type * restrict x, Type * restrict y, ulong n)$/;"	f	signature:(const Type * restrict x, Type * restrict y, ulong n)
zoom	src/ds/point2d.h	/^    point2d zoom( double sc )  const { return point2d( sc * x_, sc * y_ ); }$/;"	f	class:point2d	access:public	signature:( double sc ) const
zoom	src/ds/point3d.h	/^    point3d zoom( double sc )  const { return point3d( sc * x_, sc * y_, sc * z_ ); }$/;"	f	class:point3d	access:public	signature:( double sc ) const
zorder2lin	src/bits/zorder.h	/^static inline ulong zorder2lin(ulong x, ulong y)  { return bit_zip2(x, y); }$/;"	f	signature:(ulong x, ulong y)
zorder3d_next	doc/bits-doc.txt	/^static inline void zorder3d_next(ulong &x, ulong &y, ulong &z);$/;"	p	file:	signature:(ulong &x, ulong &y, ulong &z)
zorder3d_next	src/bits/zorder.h	/^static inline void zorder3d_next(ulong &x, ulong &y, ulong &z)$/;"	f	signature:(ulong &x, ulong &y, ulong &z)
zorder3d_prev	doc/bits-doc.txt	/^static inline void zorder3d_prev(ulong &x, ulong &y, ulong &z);$/;"	p	file:	signature:(ulong &x, ulong &y, ulong &z)
zorder3d_prev	src/bits/zorder.h	/^static inline void zorder3d_prev(ulong &x, ulong &y, ulong &z)$/;"	f	signature:(ulong &x, ulong &y, ulong &z)
zorder_next	doc/bits-doc.txt	/^static inline void zorder_next(ulong &x, ulong &y);$/;"	p	file:	signature:(ulong &x, ulong &y)
zorder_next	src/bits/zorder.h	/^static inline void zorder_next(ulong &x, ulong &y)$/;"	f	signature:(ulong &x, ulong &y)
zorder_prev	doc/bits-doc.txt	/^static inline void zorder_prev(ulong &x, ulong &y);$/;"	p	file:	signature:(ulong &x, ulong &y)
zorder_prev	src/bits/zorder.h	/^static inline void zorder_prev(ulong &x, ulong &y)$/;"	f	signature:(ulong &x, ulong &y)
zq	demo/comb/fibgray-rec-demo.cc	/^bool zq;    \/\/ order: 0==>Lex  1==>Gray$/;"	v
zq	demo/comb/maxrep-gray-demo.cc	/^bool zq;    \/\/ order: 0==>Lex  1==>Gray$/;"	v
zq	demo/comb/pellgray-rec-demo.cc	/^bool zq;    \/\/ order: 0==>Lex,  1==>Gray$/;"	v
~GF2n	src/bpol/gf2n.h	/^    ~GF2n()  { ; }$/;"	f	class:GF2n	access:public	signature:()
~acyclic_map	src/comb/acyclic-map.h	/^    ~acyclic_map()$/;"	f	class:acyclic_map	access:public	signature:()
~all_compositions_minchange	src/comb/attic/all-compositions-minchange.h	/^    ~all_compositions_minchange()  { delete [] xx_; }$/;"	f	class:all_compositions_minchange	access:public	signature:()
~all_irredpoly	src/bpol/all-irredpoly.h	/^    ~all_irredpoly() {;}$/;"	f	class:all_irredpoly	access:public	signature:()
~all_set_partitions	src/comb/attic/allsetpartitions.h	/^    ~all_set_partitions()  { delete [] p_; }$/;"	f	class:all_set_partitions	access:public	signature:()
~arrangement_rgs	src/comb/arrangement-rgs.h	/^    ~arrangement_rgs()$/;"	f	class:arrangement_rgs	access:public	signature:()
~array	src/aux1/attic/array.h	/^    ~array()  { if ( myfq_ )  delete [] f_; }$/;"	f	class:array	access:public	signature:()
~array2d	src/ds/array2d.h	/^    ~array2d()$/;"	f	class:array2d	access:public	signature:()
~array3d	src/ds/array3d.h	/^    ~array3d()$/;"	f	class:array3d	access:public	signature:()
~ascent_alt_rgs	src/comb/ascent-alt-rgs.h	/^    ~ascent_alt_rgs()$/;"	f	class:ascent_alt_rgs	access:public	signature:()
~ascent_nonflat_rgs	src/comb/ascent-nonflat-rgs.h	/^    ~ascent_nonflat_rgs()$/;"	f	class:ascent_nonflat_rgs	access:public	signature:()
~ascent_rgs	src/comb/ascent-rgs.h	/^    ~ascent_rgs()$/;"	f	class:ascent_rgs	access:public	signature:()
~ascent_rgs	src/comb/attic/ascent-rgs.h	/^    virtual ~ascent_rgs()$/;"	f	class:ascent_rgs	access:public	signature:()
~ascent_rgs_subset_lex	src/comb/ascent-rgs-subset-lex.h	/^    ~ascent_rgs_subset_lex()$/;"	f	class:ascent_rgs_subset_lex	access:public	signature:()
~balanced_ordered_tree_lev_seq	src/comb/balanced-ordered-tree-lev-seq.h	/^    ~balanced_ordered_tree_lev_seq()$/;"	f	class:balanced_ordered_tree_lev_seq	access:public	signature:()
~binary_debruijn	src/comb/attic/binarydebruijn.h	/^    ~binary_debruijn()$/;"	f	class:binary_debruijn	access:public	signature:()
~binary_debruijn	src/comb/binary-debruijn.h	/^    ~binary_debruijn()  { ; }$/;"	f	class:binary_debruijn	access:public	signature:()
~binary_huffman	src/comb/binary-huffman.h	/^    ~binary_huffman()$/;"	f	class:binary_huffman	access:public	signature:()
~binary_necklace	src/comb/binary-necklace.h	/^    ~binary_necklace()$/;"	f	class:binary_necklace	access:public	signature:()
~binary_sl_gray	src/comb/binary-sl-gray.h	/^    ~binary_sl_gray()$/;"	f	class:binary_sl_gray	access:public	signature:()
~bit_comb_shifts	src/bits/bitcombshifts.h	/^    ~bit_comb_shifts()  { ; }$/;"	f	class:bit_comb_shifts	access:public	signature:()
~bit_fibgray	src/bits/bitfibgray.h	/^    ~bit_fibgray()  { ; }$/;"	f	class:bit_fibgray	access:public	signature:()
~bit_necklace	src/bits/bit-necklace.h	/^    ~bit_necklace()  { ; }$/;"	f	class:bit_necklace	access:public	signature:()
~bit_sl_gray	src/bits/bit-sl-gray.h	/^    ~bit_sl_gray()  { ; }$/;"	f	class:bit_sl_gray	access:public	signature:()
~bit_subset	src/bits/bitsubset.h	/^    ~bit_subset()  { ; }$/;"	f	class:bit_subset	access:public	signature:()
~bit_subset_gray	src/bits/bitsubset-gray.h	/^    ~bit_subset_gray()  { ; }$/;"	f	class:bit_subset_gray	access:public	signature:()
~bitarray	src/ds/bitarray.h	/^    ~bitarray()$/;"	f	class:bitarray	access:public	signature:()
~catalan	src/comb/catalan.h	/^    ~catalan()$/;"	f	class:catalan	access:public	signature:()
~catalan_path_lex	src/comb/catalan-path-lex.h	/^    ~catalan_path_lex()$/;"	f	class:catalan_path_lex	access:public	signature:()
~catalan_rgs	src/comb/catalan-rgs.h	/^    ~catalan_rgs()$/;"	f	class:catalan_rgs	access:public	signature:()
~catalan_rgs_gray	src/comb/catalan-rgs-gray.h	/^    ~catalan_rgs_gray()$/;"	f	class:catalan_rgs_gray	access:public	signature:()
~catalan_rgs_gslex	src/comb/catalan-rgs-gslex.h	/^    ~catalan_rgs_gslex()$/;"	f	class:catalan_rgs_gslex	access:public	signature:()
~catalan_rgs_subset_lex	src/comb/catalan-rgs-subset-lex.h	/^    ~catalan_rgs_subset_lex()$/;"	f	class:catalan_rgs_subset_lex	access:public	signature:()
~catalan_step_rgs_colex	src/comb/catalan-step-rgs-colex.h	/^    ~catalan_step_rgs_colex()$/;"	f	class:catalan_step_rgs_colex	access:public	signature:()
~catalan_step_rgs_lex	src/comb/catalan-step-rgs-lex.h	/^    ~catalan_step_rgs_lex()$/;"	f	class:catalan_step_rgs_lex	access:public	signature:()
~catalan_step_rgs_subset_lexrev	src/comb/catalan-step-rgs-subset-lexrev.h	/^    ~catalan_step_rgs_subset_lexrev()$/;"	f	class:catalan_step_rgs_subset_lexrev	access:public	signature:()
~cayley_perm	src/comb/cayley-perm.h	/^    ~cayley_perm()$/;"	f	class:cayley_perm	access:public	signature:()
~centered_array2d	src/ds/centered-array2d.h	/^    ~centered_array2d()  {;}$/;"	f	class:centered_array2d	access:public	signature:()
~centered_array3d	src/ds/centered-array3d.h	/^    ~centered_array3d()  {;}$/;"	f	class:centered_array3d	access:public	signature:()
~change_rgs	src/comb/change-rgs.h	/^    ~change_rgs()$/;"	f	class:change_rgs	access:public	signature:()
~check_kpermgen	src/comb/check-kpermgen.h	/^    ~check_kpermgen()$/;"	f	class:check_kpermgen	access:public	signature:()
~check_mixedradix	src/comb/check-mixedradix.h	/^    ~check_mixedradix()  {;}$/;"	f	class:check_mixedradix	access:public	signature:()
~check_permgen	src/comb/check-permgen.h	/^    ~check_permgen()$/;"	f	class:check_permgen	access:public	signature:()
~comb_colex	src/comb/attic/combcolex.h	/^    ~comb_colex()  { delete [] x_; }$/;"	f	class:comb_colex	access:public	signature:()
~comb_lex	src/comb/attic/comblex.h	/^    ~comb_lex()  { delete [] x_; }$/;"	f	class:comb_lex	access:public	signature:()
~comb_minchange	src/comb/attic/combminchange.cc	/^comb_minchange::~comb_minchange()$/;"	f	class:comb_minchange	signature:()
~comb_minchange	src/comb/attic/combminchange.h	/^    ~comb_minchange();$/;"	p	class:comb_minchange	access:public	signature:()
~comb_rec	src/comb/combination-rec.h	/^    ~comb_rec()$/;"	f	class:comb_rec	access:public	signature:()
~combination_altminchange	src/comb/attic/combination-altminchange.h	/^    ~combination_altminchange()$/;"	f	class:combination_altminchange	access:public	signature:()
~combination_chase	src/comb/combination-chase.h	/^    ~combination_chase()$/;"	f	class:combination_chase	access:public	signature:()
~combination_colex	src/comb/combination-colex.h	/^    ~combination_colex()  { delete [] x_; }$/;"	f	class:combination_colex	access:public	signature:()
~combination_emk	src/comb/combination-emk.h	/^    ~combination_emk()$/;"	f	class:combination_emk	access:public	signature:()
~combination_endo	src/comb/combination-endo.h	/^    ~combination_endo()$/;"	f	class:combination_endo	access:public	signature:()
~combination_enup	src/comb/combination-enup.h	/^    ~combination_enup()$/;"	f	class:combination_enup	access:public	signature:()
~combination_lex	src/comb/combination-lex.h	/^    ~combination_lex()  { delete [] x_; }$/;"	f	class:combination_lex	access:public	signature:()
~combination_minchange	src/comb/attic/combination-minchange.h	/^    ~combination_minchange()  { delete [] x_; }$/;"	f	class:combination_minchange	access:public	signature:()
~combination_mod	src/comb/combination-mod.h	/^    ~combination_mod()$/;"	f	class:combination_mod	access:public	signature:()
~combination_pref	src/comb/combination-pref.h	/^    ~combination_pref()$/;"	f	class:combination_pref	access:public	signature:()
~combination_revdoor	src/comb/combination-revdoor.h	/^    ~combination_revdoor()  { delete [] c_; }$/;"	f	class:combination_revdoor	access:public	signature:()
~composition_alt	src/comb/attic/compositionalt.h	/^    ~composition_alt() { delete [] x_; }$/;"	f	class:composition_alt	access:public	signature:()
~composition_chase	src/comb/attic/composition-chase.h	/^    ~composition_chase()$/;"	f	class:composition_chase	access:public	signature:()
~composition_colex	src/comb/composition-colex.h	/^    ~composition_colex()$/;"	f	class:composition_colex	access:public	signature:()
~composition_colex2	src/comb/composition-colex2.h	/^    ~composition_colex2()$/;"	f	class:composition_colex2	access:public	signature:()
~composition_dist_unimodal	src/comb/composition-dist-unimodal.h	/^    ~composition_dist_unimodal()$/;"	f	class:composition_dist_unimodal	access:public	signature:()
~composition_ex_colex	src/comb/composition-ex-colex.h	/^    ~composition_ex_colex()$/;"	f	class:composition_ex_colex	access:public	signature:()
~composition_ex_lex	src/comb/composition-ex-lex.h	/^    ~composition_ex_lex()$/;"	f	class:composition_ex_lex	access:public	signature:()
~composition_nz	src/comb/composition-nz.h	/^    ~composition_nz()$/;"	f	class:composition_nz	access:public	signature:()
~composition_nz_binary	src/comb/composition-nz-binary.h	/^    ~composition_nz_binary()$/;"	f	class:composition_nz_binary	access:public	signature:()
~composition_nz_carlitz	src/comb/composition-nz-carlitz.h	/^    ~composition_nz_carlitz()$/;"	f	class:composition_nz_carlitz	access:public	signature:()
~composition_nz_first_max	src/comb/composition-nz-first-max.h	/^    ~composition_nz_first_max()$/;"	f	class:composition_nz_first_max	access:public	signature:()
~composition_nz_gray	src/comb/composition-nz-gray.h	/^    ~composition_nz_gray()$/;"	f	class:composition_nz_gray	access:public	signature:()
~composition_nz_gray2	src/comb/composition-nz-gray2.h	/^    ~composition_nz_gray2()$/;"	f	class:composition_nz_gray2	access:public	signature:()
~composition_nz_i_smooth	src/comb/composition-nz-i-smooth.h	/^    ~composition_nz_i_smooth()$/;"	f	class:composition_nz_i_smooth	access:public	signature:()
~composition_nz_left_2smooth	src/comb/composition-nz-left-2smooth.h	/^    ~composition_nz_left_2smooth()$/;"	f	class:composition_nz_left_2smooth	access:public	signature:()
~composition_nz_left_smooth	src/comb/composition-nz-left-smooth.h	/^    ~composition_nz_left_smooth()$/;"	f	class:composition_nz_left_smooth	access:public	signature:()
~composition_nz_max	src/comb/composition-nz-max.h	/^    ~composition_nz_max()$/;"	f	class:composition_nz_max	access:public	signature:()
~composition_nz_min	src/comb/composition-nz-min.h	/^    ~composition_nz_min()$/;"	f	class:composition_nz_min	access:public	signature:()
~composition_nz_minc	src/comb/composition-nz-minc.h	/^    ~composition_nz_minc()$/;"	f	class:composition_nz_minc	access:public	signature:()
~composition_nz_numparts	src/comb/composition-nz-numparts.h	/^    ~composition_nz_numparts()  { delete [] x_; }$/;"	f	class:composition_nz_numparts	access:public	signature:()
~composition_nz_odd	src/comb/composition-nz-odd.h	/^    ~composition_nz_odd()$/;"	f	class:composition_nz_odd	access:public	signature:()
~composition_nz_odd_subset_lex	src/comb/composition-nz-odd-subset-lex.h	/^    ~composition_nz_odd_subset_lex()$/;"	f	class:composition_nz_odd_subset_lex	access:public	signature:()
~composition_nz_restrpref	src/comb/composition-nz-restrpref.h	/^    ~composition_nz_restrpref()$/;"	f	class:composition_nz_restrpref	access:public	signature:()
~composition_nz_rl	src/comb/composition-nz-rl.h	/^    ~composition_nz_rl()$/;"	f	class:composition_nz_rl	access:public	signature:()
~composition_nz_smooth	src/comb/composition-nz-smooth.h	/^    ~composition_nz_smooth()$/;"	f	class:composition_nz_smooth	access:public	signature:()
~composition_nz_sorts	src/comb/composition-nz-sorts.h	/^    ~composition_nz_sorts()$/;"	f	class:composition_nz_sorts	access:public	signature:()
~composition_nz_sorts2	src/comb/composition-nz-sorts2.h	/^    ~composition_nz_sorts2()$/;"	f	class:composition_nz_sorts2	access:public	signature:()
~composition_nz_sorts2_pp	src/comb/composition-nz-sorts2-pp.h	/^    ~composition_nz_sorts2_pp()$/;"	f	class:composition_nz_sorts2_pp	access:public	signature:()
~composition_nz_subset_lex	src/comb/composition-nz-subset-lex.h	/^    ~composition_nz_subset_lex()$/;"	f	class:composition_nz_subset_lex	access:public	signature:()
~composition_nz_superdiagonal	src/comb/composition-nz-superdiagonal.h	/^    ~composition_nz_superdiagonal()$/;"	f	class:composition_nz_superdiagonal	access:public	signature:()
~composition_nz_upstep	src/comb/composition-nz-upstep.h	/^    ~composition_nz_upstep()$/;"	f	class:composition_nz_upstep	access:public	signature:()
~composition_nz_weakly_unimodal	src/comb/composition-nz-weakly-unimodal.h	/^    ~composition_nz_weakly_unimodal()$/;"	f	class:composition_nz_weakly_unimodal	access:public	signature:()
~composition_rank	src/comb/composition-rank.h	/^    ~composition_rank()$/;"	f	class:composition_rank	access:public	signature:()
~composition_unimodal	src/comb/composition-unimodal.h	/^    ~composition_unimodal()$/;"	f	class:composition_unimodal	access:public	signature:()
~coroutine	src/ds/attic/coroutine.h	/^    ~coroutine()$/;"	f	class:coroutine	access:public	signature:()
~crc32	src/bits/crc32.h	/^    ~crc32()  {;}$/;"	f	class:crc32	access:public	signature:()
~crc64	src/bits/crc64.h	/^    ~crc64()  {;}$/;"	f	class:crc64	access:public	signature:()
~cycles	src/perm/attic/cycles.cc	/^cycles::~cycles()$/;"	f	class:cycles	signature:()
~cycles	src/perm/attic/cycles.h	/^    ~cycles();$/;"	p	class:cycles	access:public	signature:()
~cyclic_perm	src/comb/cyclic-perm.h	/^    ~cyclic_perm()$/;"	f	class:cyclic_perm	access:public	signature:()
~debruijn	src/comb/debruijn.h	/^    ~debruijn()  { ; }$/;"	f	class:debruijn	access:public	signature:()
~debruijn_cycles	src/graph/attic/debruijngraph.h	/^    ~debruijn_cycles()$/;"	f	class:debruijn_cycles	access:public	signature:()
~debruijn_graph	src/graph/attic/debruijngraph.h	/^    ~debruijn_graph()$/;"	f	class:debruijn_graph	access:public	signature:()
~deque	src/ds/deque.h	/^    ~deque()  { delete [] x_; }$/;"	f	class:deque	access:public	signature:()
~descent_rgs	src/comb/descent-rgs.h	/^    ~descent_rgs()$/;"	f	class:descent_rgs	access:public	signature:()
~digraph	src/graph/digraph.h	/^    ~digraph()$/;"	f	class:digraph	access:public	signature:()
~digraph_paths	src/graph/digraph-paths.cc	/^digraph_paths::~digraph_paths()$/;"	f	class:digraph_paths	signature:()
~digraph_paths	src/graph/digraph-paths.h	/^    ~digraph_paths();$/;"	p	class:digraph_paths	access:public	signature:()
~divisors	src/mod/divisors.h	/^    ~divisors()$/;"	f	class:divisors	access:public	signature:()
~dyck_gray	src/comb/dyck-gray.h	/^    ~dyck_gray()$/;"	f	class:dyck_gray	access:public	signature:()
~dyck_gray2	src/comb/dyck-gray2.h	/^    ~dyck_gray2()$/;"	f	class:dyck_gray2	access:public	signature:()
~dyck_pref	src/comb/dyck-pref.h	/^    ~dyck_pref()$/;"	f	class:dyck_pref	access:public	signature:()
~dyck_pref2	src/comb/dyck-pref2.h	/^    ~dyck_pref2()$/;"	f	class:dyck_pref2	access:public	signature:()
~dyck_rgs	src/comb/dyck-rgs.h	/^    ~dyck_rgs()$/;"	f	class:dyck_rgs	access:public	signature:()
~dyck_rgs_subset_lex	src/comb/dyck-rgs-subset-lex.h	/^    ~dyck_rgs_subset_lex()$/;"	f	class:dyck_rgs_subset_lex	access:public	signature:()
~factorization	src/mod/factor.cc	/^factorization::~factorization()$/;"	f	class:factorization	signature:()
~factorization	src/mod/factor.h	/^    ~factorization();$/;"	p	class:factorization	access:public	signature:()
~fcsr	src/bpol/fcsr.h	/^    ~fcsr()  { ; }$/;"	f	class:fcsr	access:public	signature:()
~funcemu	src/aux0/attic/funcemu.h	/^    ~funcemu()$/;"	f	class:funcemu	access:public	signature:()
~gray_cycle_leaders	src/comb/gray-cycle-leaders.h	/^    ~gray_cycle_leaders() {;}$/;"	f	class:gray_cycle_leaders	access:public	signature:()
~hilbert_ndim	src/comb/hilbert-ndim.h	/^    ~hilbert_ndim()  { ; }$/;"	f	class:hilbert_ndim	access:public	signature:()
~hilbert_ndim_rec	src/comb/hilbert-ndim-rec.h	/^    ~hilbert_ndim_rec()  { ; }$/;"	f	class:hilbert_ndim_rec	access:public	signature:()
~id_tree_lev_seq	src/comb/id-tree-lev-seq.h	/^    ~id_tree_lev_seq()$/;"	f	class:id_tree_lev_seq	access:public	signature:()
~init_perfpow	src/mod/perfpow.cc	/^    ~init_perfpow()$/;"	f	class:init_perfpow	access:public	signature:()
~init_small_primes	src/mod/primes.cc	/^    ~init_small_primes()$/;"	f	class:init_small_primes	access:public	signature:()
~involution_zero_map_rgs	src/comb/involution-zero-map-rgs.h	/^    ~involution_zero_map_rgs()$/;"	f	class:involution_zero_map_rgs	access:public	signature:()
~isoscent_rgs	src/comb/isoscent-rgs.h	/^    ~isoscent_rgs()$/;"	f	class:isoscent_rgs	access:public	signature:()
~kperm_gray	src/comb/kperm-gray.h	/^    ~kperm_gray()$/;"	f	class:kperm_gray	access:public	signature:()
~kperm_lex	src/comb/kperm-lex.h	/^    ~kperm_lex()$/;"	f	class:kperm_lex	access:public	signature:()
~ksubset_gray	src/comb/ksubset-gray.h	/^    ~ksubset_gray()  { delete [] S_; }$/;"	f	class:ksubset_gray	access:public	signature:()
~ksubset_lex	src/comb/ksubset-lex.h	/^    ~ksubset_lex()$/;"	f	class:ksubset_lex	access:public	signature:()
~ksubset_rec	src/comb/ksubset-rec.h	/^    ~ksubset_rec()$/;"	f	class:ksubset_rec	access:public	signature:()
~ksubset_twoclose	src/comb/ksubset-twoclose.h	/^    ~ksubset_twoclose()$/;"	f	class:ksubset_twoclose	access:public	signature:()
~left_right_array	src/ds/left-right-array.h	/^    ~left_right_array()$/;"	f	class:left_right_array	access:public	signature:()
~lfsr	src/bpol/lfsr.h	/^    ~lfsr()  {;}$/;"	f	class:lfsr	access:public	signature:()
~lfsr64	src/bpol/lfsr64.h	/^    ~lfsr64()  { ; }$/;"	f	class:lfsr64	access:public	signature:()
~lyndon_gray	src/graph/lyndon-gray.h	/^    ~lyndon_gray()$/;"	f	class:lyndon_gray	access:public	signature:()
~lyndon_words	src/comb/lyndon-words.h	/^    ~lyndon_words()  { delete [] W; }$/;"	f	class:lyndon_words	access:public	signature:()
~lyngray_dat	src/graph/mk-lyndon-gray-digraph.cc	/^lyngray_dat::~lyngray_dat()$/;"	f	class:lyngray_dat	signature:()
~lyngray_dat	src/graph/mk-special-digraphs.h	/^    ~lyngray_dat();$/;"	p	class:lyngray_dat	access:public	signature:()
~map23_rgs	src/comb/map23-rgs.h	/^    ~map23_rgs()$/;"	f	class:map23_rgs	access:public	signature:()
~matrix	src/matrix/matrix.h	/^    ~matrix()  { }$/;"	f	class:matrix	access:public	signature:()
~mersenne_coprime	src/bpol/mersenne-coprime.h	/^    ~mersenne_coprime()  {;}$/;"	f	class:mersenne_coprime	access:public	signature:()
~mixedradix_colex	src/comb/mixedradix-colex.h	/^    ~mixedradix_colex()$/;"	f	class:mixedradix_colex	access:public	signature:()
~mixedradix_endo	src/comb/mixedradix-endo.h	/^    ~mixedradix_endo()$/;"	f	class:mixedradix_endo	access:public	signature:()
~mixedradix_endo_gray	src/comb/mixedradix-endo-gray.h	/^    ~mixedradix_endo_gray()$/;"	f	class:mixedradix_endo_gray	access:public	signature:()
~mixedradix_gray	src/comb/mixedradix-gray.h	/^    ~mixedradix_gray()$/;"	f	class:mixedradix_gray	access:public	signature:()
~mixedradix_gray2	src/comb/mixedradix-gray2.h	/^    ~mixedradix_gray2()$/;"	f	class:mixedradix_gray2	access:public	signature:()
~mixedradix_gslex	src/comb/mixedradix-gslex.h	/^    ~mixedradix_gslex()$/;"	f	class:mixedradix_gslex	access:public	signature:()
~mixedradix_gslex2	src/comb/mixedradix-gslex2.h	/^    ~mixedradix_gslex2()$/;"	f	class:mixedradix_gslex2	access:public	signature:()
~mixedradix_gslex_alt	src/comb/mixedradix-gslex-alt.h	/^    ~mixedradix_gslex_alt()$/;"	f	class:mixedradix_gslex_alt	access:public	signature:()
~mixedradix_gslex_alt2	src/comb/mixedradix-gslex-alt2.h	/^    ~mixedradix_gslex_alt2()$/;"	f	class:mixedradix_gslex_alt2	access:public	signature:()
~mixedradix_lex	src/comb/mixedradix-lex.h	/^    ~mixedradix_lex()$/;"	f	class:mixedradix_lex	access:public	signature:()
~mixedradix_modular_gray	src/comb/mixedradix-modular-gray.h	/^    ~mixedradix_modular_gray()$/;"	f	class:mixedradix_modular_gray	access:public	signature:()
~mixedradix_modular_gray2	src/comb/mixedradix-modular-gray2.h	/^    ~mixedradix_modular_gray2()$/;"	f	class:mixedradix_modular_gray2	access:public	signature:()
~mixedradix_naf	src/comb/mixedradix-naf.h	/^    ~mixedradix_naf()$/;"	f	class:mixedradix_naf	access:public	signature:()
~mixedradix_naf_gray	src/comb/mixedradix-naf-gray.h	/^    ~mixedradix_naf_gray()$/;"	f	class:mixedradix_naf_gray	access:public	signature:()
~mixedradix_naf_subset_lex	src/comb/mixedradix-naf-subset-lex.h	/^    ~mixedradix_naf_subset_lex()$/;"	f	class:mixedradix_naf_subset_lex	access:public	signature:()
~mixedradix_restrpref	src/comb/mixedradix-restrpref.h	/^    ~mixedradix_restrpref()$/;"	f	class:mixedradix_restrpref	access:public	signature:()
~mixedradix_rfact	src/comb/mixedradix-rfact.h	/^    ~mixedradix_rfact()$/;"	f	class:mixedradix_rfact	access:public	signature:()
~mixedradix_sl_gray	src/comb/mixedradix-sl-gray.h	/^    ~mixedradix_sl_gray()$/;"	f	class:mixedradix_sl_gray	access:public	signature:()
~mixedradix_sod_lex	src/comb/mixedradix-sod-lex.h	/^    ~mixedradix_sod_lex()$/;"	f	class:mixedradix_sod_lex	access:public	signature:()
~mixedradix_subset_lex	src/comb/mixedradix-subset-lex.h	/^    ~mixedradix_subset_lex()$/;"	f	class:mixedradix_subset_lex	access:public	signature:()
~mixedradix_subset_lexrev	src/comb/mixedradix-subset-lexrev.h	/^    ~mixedradix_subset_lexrev()$/;"	f	class:mixedradix_subset_lexrev	access:public	signature:()
~mod	src/mod/mod.h	/^    ~mod()  { ; }$/;"	f	class:mod	access:public	signature:()
~motzkin_nonflat_rgs_lex	src/comb/motzkin-nonflat-rgs-lex.h	/^    ~motzkin_nonflat_rgs_lex()$/;"	f	class:motzkin_nonflat_rgs_lex	access:public	signature:()
~motzkin_path_lex	src/comb/motzkin-path-lex.h	/^    ~motzkin_path_lex()$/;"	f	class:motzkin_path_lex	access:public	signature:()
~motzkin_rgs_lex	src/comb/motzkin-rgs-lex.h	/^    ~motzkin_rgs_lex()$/;"	f	class:motzkin_rgs_lex	access:public	signature:()
~motzkin_step_rgs_lex	src/comb/motzkin-step-rgs-lex.h	/^    ~motzkin_step_rgs_lex()$/;"	f	class:motzkin_step_rgs_lex	access:public	signature:()
~mpartition	src/comb/mpartition.h	/^    ~mpartition()$/;"	f	class:mpartition	access:public	signature:()
~mpartition2	src/comb/mpartition2.h	/^    ~mpartition2()$/;"	f	class:mpartition2	access:public	signature:()
~mset_perm_gray	src/comb/mset-perm-gray.h	/^    ~mset_perm_gray()$/;"	f	class:mset_perm_gray	access:public	signature:()
~mset_perm_lex	src/comb/mset-perm-lex.h	/^    ~mset_perm_lex()$/;"	f	class:mset_perm_lex	access:public	signature:()
~mset_perm_lex_rec	src/comb/mset-perm-lex-rec.h	/^    ~mset_perm_lex_rec()$/;"	f	class:mset_perm_lex_rec	access:public	signature:()
~mset_perm_pref	src/comb/mset-perm-pref.h	/^    ~mset_perm_pref()$/;"	f	class:mset_perm_pref	access:public	signature:()
~necklace	src/comb/necklace.h	/^    ~necklace()$/;"	f	class:necklace	access:public	signature:()
~necklace2bitpol	src/bpol/necklace2bitpol.h	/^    ~necklace2bitpol()  { ; }$/;"	f	class:necklace2bitpol	access:public	signature:()
~num_compositions	src/comb/num-compositions.h	/^    ~num_compositions()$/;"	f	class:num_compositions	access:public	signature:()
~ordered_rarray	src/ds/attic/orderedrarray.h	/^    ~ordered_rarray()  { ; }$/;"	f	class:ordered_rarray	access:public	signature:()
~ordered_tree_branches	src/comb/ordered-tree-branches.h	/^    ~ordered_tree_branches()$/;"	f	class:ordered_tree_branches	access:public	signature:()
~ordered_tree_branching_seq	src/comb/ordered-tree-branching-seq.h	/^    ~ordered_tree_branching_seq()$/;"	f	class:ordered_tree_branching_seq	access:public	signature:()
~ordered_tree_lev_seq	src/comb/ordered-tree-lev-seq.h	/^    ~ordered_tree_lev_seq()$/;"	f	class:ordered_tree_lev_seq	access:public	signature:()
~paren	src/comb/paren.h	/^    ~paren()$/;"	f	class:paren	access:public	signature:()
~paren	src/ds/attic/coroutine-paren-demo.cc	/^    ~paren();$/;"	p	class:paren	file:	access:public	signature:()
~paren	src/ds/attic/coroutine-paren-demo.cc	/^paren::~paren()$/;"	f	class:paren	signature:()
~paren_gray	src/comb/paren-gray.h	/^    ~paren_gray()$/;"	f	class:paren_gray	access:public	signature:()
~paren_lex	src/comb/paren-lex.h	/^    ~paren_lex()$/;"	f	class:paren_lex	access:public	signature:()
~paren_pref	src/comb/paren-pref.h	/^    ~paren_pref()$/;"	f	class:paren_pref	access:public	signature:()
~partition	src/comb/partition.h	/^    ~partition()$/;"	f	class:partition	access:public	signature:()
~partition	src/perm/attic/partition.cc	/^partition::~partition()$/;"	f	class:partition	signature:()
~partition	src/perm/attic/partition.h	/^    ~partition();$/;"	p	class:partition	access:public	signature:()
~partition_2fall_asc	src/comb/partition-2fall-asc.h	/^    ~partition_2fall_asc()$/;"	f	class:partition_2fall_asc	access:public	signature:()
~partition_2fall_asc_subset_lex	src/comb/partition-2fall-asc-subset-lex.h	/^    ~partition_2fall_asc_subset_lex()$/;"	f	class:partition_2fall_asc_subset_lex	access:public	signature:()
~partition_2fall_desc	src/comb/partition-2fall-desc.h	/^    ~partition_2fall_desc()$/;"	f	class:partition_2fall_desc	access:public	signature:()
~partition_asc	src/comb/partition-asc.h	/^    ~partition_asc()$/;"	f	class:partition_asc	access:public	signature:()
~partition_asc_2rep	src/comb/partition-asc-2rep.h	/^    ~partition_asc_2rep()$/;"	f	class:partition_asc_2rep	access:public	signature:()
~partition_asc_2rep_subset_lex	src/comb/partition-asc-2rep-subset-lex.h	/^    ~partition_asc_2rep_subset_lex()$/;"	f	class:partition_asc_2rep_subset_lex	access:public	signature:()
~partition_asc_perim	src/comb/partition-asc-perim.h	/^    ~partition_asc_perim()$/;"	f	class:partition_asc_perim	access:public	signature:()
~partition_asc_sorts	src/comb/partition-asc-sorts.h	/^    ~partition_asc_sorts()$/;"	f	class:partition_asc_sorts	access:public	signature:()
~partition_asc_sorts2	src/comb/partition-asc-sorts2.h	/^    ~partition_asc_sorts2()$/;"	f	class:partition_asc_sorts2	access:public	signature:()
~partition_asc_sorts2_pp	src/comb/partition-asc-sorts2-pp.h	/^    ~partition_asc_sorts2_pp()$/;"	f	class:partition_asc_sorts2_pp	access:public	signature:()
~partition_asc_subset_lex	src/comb/partition-asc-subset-lex.h	/^    ~partition_asc_subset_lex()$/;"	f	class:partition_asc_subset_lex	access:public	signature:()
~partition_asc_subset_lex_csh	src/comb/partition-asc-subset-lex-csh.h	/^    ~partition_asc_subset_lex_csh()$/;"	f	class:partition_asc_subset_lex_csh	access:public	signature:()
~partition_binary_asc	src/comb/partition-binary-asc.h	/^    ~partition_binary_asc()$/;"	f	class:partition_binary_asc	access:public	signature:()
~partition_binary_desc	src/comb/partition-binary-desc.h	/^    ~partition_binary_desc()$/;"	f	class:partition_binary_desc	access:public	signature:()
~partition_desc	src/comb/partition-desc.h	/^    ~partition_desc()$/;"	f	class:partition_desc	access:public	signature:()
~partition_desc_bb	src/comb/partition-desc-bb.h	/^    ~partition_desc_bb()$/;"	f	class:partition_desc_bb	access:public	signature:()
~partition_dist_asc	src/comb/partition-dist-asc.h	/^    ~partition_dist_asc()$/;"	f	class:partition_dist_asc	access:public	signature:()
~partition_dist_asc_len	src/comb/partition-dist-asc-len.h	/^    ~partition_dist_asc_len()$/;"	f	class:partition_dist_asc_len	access:public	signature:()
~partition_dist_asc_subset_lex	src/comb/partition-dist-asc-subset-lex.h	/^    ~partition_dist_asc_subset_lex()$/;"	f	class:partition_dist_asc_subset_lex	access:public	signature:()
~partition_dist_d_asc	src/comb/partition-dist-d-asc.h	/^    ~partition_dist_d_asc()$/;"	f	class:partition_dist_d_asc	access:public	signature:()
~partition_dist_desc	src/comb/partition-dist-desc.h	/^    ~partition_dist_desc()$/;"	f	class:partition_dist_desc	access:public	signature:()
~partition_gen	src/comb/partition-gen.h	/^    ~partition_gen()$/;"	f	class:partition_gen	access:public	signature:()
~partition_nonsquashing_desc	src/comb/partition-nonsquashing-desc.h	/^    ~partition_nonsquashing_desc()$/;"	f	class:partition_nonsquashing_desc	access:public	signature:()
~partition_odd_asc	src/comb/partition-odd-asc.h	/^    ~partition_odd_asc()$/;"	f	class:partition_odd_asc	access:public	signature:()
~partition_odd_asc_subset_lex	src/comb/partition-odd-asc-subset-lex.h	/^    ~partition_odd_asc_subset_lex()$/;"	f	class:partition_odd_asc_subset_lex	access:public	signature:()
~partition_odd_asc_subset_lex_csh	src/comb/partition-odd-asc-subset-lex-csh.h	/^    ~partition_odd_asc_subset_lex_csh()$/;"	f	class:partition_odd_asc_subset_lex_csh	access:public	signature:()
~partition_odd_desc	src/comb/partition-odd-desc.h	/^    ~partition_odd_desc()$/;"	f	class:partition_odd_desc	access:public	signature:()
~partition_odd_nonsquashing_desc	src/comb/partition-odd-nonsquashing-desc.h	/^    ~partition_odd_nonsquashing_desc()$/;"	f	class:partition_odd_nonsquashing_desc	access:public	signature:()
~partition_rgs_lex	src/comb/partition-rgs-lex.h	/^    ~partition_rgs_lex()$/;"	f	class:partition_rgs_lex	access:public	signature:()
~partition_s_desc	src/comb/partition-s-desc.h	/^    ~partition_s_desc()$/;"	f	class:partition_s_desc	access:public	signature:()
~partition_strongly_decr_desc	src/comb/partition-strongly-decr-desc.h	/^    ~partition_strongly_decr_desc()$/;"	f	class:partition_strongly_decr_desc	access:public	signature:()
~pcrc64	src/bits/pcrc64.h	/^    ~pcrc64()  { ; }$/;"	f	class:pcrc64	access:public	signature:()
~perm_colex	src/comb/perm-colex.h	/^    ~perm_colex()$/;"	f	class:perm_colex	access:public	signature:()
~perm_derange	src/comb/perm-derange.h	/^    ~perm_derange()$/;"	f	class:perm_derange	access:public	signature:()
~perm_gray_ffact	src/comb/perm-gray-ffact.h	/^    ~perm_gray_ffact()$/;"	f	class:perm_gray_ffact	access:public	signature:()
~perm_gray_ffact2	src/comb/perm-gray-ffact2.h	/^    ~perm_gray_ffact2()$/;"	f	class:perm_gray_ffact2	access:public	signature:()
~perm_gray_lipski	src/comb/perm-gray-lipski.h	/^    ~perm_gray_lipski()$/;"	f	class:perm_gray_lipski	access:public	signature:()
~perm_gray_rfact	src/comb/perm-gray-rfact.h	/^    ~perm_gray_rfact()$/;"	f	class:perm_gray_rfact	access:public	signature:()
~perm_gray_rot1	src/comb/perm-gray-rot1.h	/^    ~perm_gray_rot1()$/;"	f	class:perm_gray_rot1	access:public	signature:()
~perm_gray_wells	src/comb/perm-gray-wells.h	/^    ~perm_gray_wells()$/;"	f	class:perm_gray_wells	access:public	signature:()
~perm_heap	src/comb/perm-heap.h	/^    ~perm_heap()$/;"	f	class:perm_heap	access:public	signature:()
~perm_heap2	src/comb/perm-heap2.h	/^    ~perm_heap2()$/;"	f	class:perm_heap2	access:public	signature:()
~perm_heap2_swaps	src/comb/perm-heap2-swaps.h	/^    ~perm_heap2_swaps()$/;"	f	class:perm_heap2_swaps	access:public	signature:()
~perm_involution	src/comb/perm-involution.h	/^    ~perm_involution()$/;"	f	class:perm_involution	access:public	signature:()
~perm_ives	src/comb/perm-ives.h	/^    ~perm_ives()$/;"	f	class:perm_ives	access:public	signature:()
~perm_lex	src/comb/perm-lex.h	/^    ~perm_lex()$/;"	f	class:perm_lex	access:public	signature:()
~perm_lex2	src/comb/perm-lex2.h	/^    ~perm_lex2()$/;"	f	class:perm_lex2	access:public	signature:()
~perm_lex_inv	src/comb/perm-lex-inv.h	/^    ~perm_lex_inv()$/;"	f	class:perm_lex_inv	access:public	signature:()
~perm_minchange	src/comb/attic/perm-minchange.h	/^    ~perm_minchange()$/;"	f	class:perm_minchange	access:public	signature:()
~perm_mv0	src/comb/perm-mv0.h	/^    ~perm_mv0()$/;"	f	class:perm_mv0	access:public	signature:()
~perm_pref	src/comb/perm-pref.h	/^    ~perm_pref()$/;"	f	class:perm_pref	access:public	signature:()
~perm_rec	src/comb/perm-rec.h	/^    ~perm_rec()$/;"	f	class:perm_rec	access:public	signature:()
~perm_restrpref	src/comb/perm-restrpref.h	/^    ~perm_restrpref()$/;"	f	class:perm_restrpref	access:public	signature:()
~perm_rev	src/comb/perm-rev.h	/^    ~perm_rev()$/;"	f	class:perm_rev	access:public	signature:()
~perm_rev2	src/comb/perm-rev2.h	/^    ~perm_rev2()$/;"	f	class:perm_rev2	access:public	signature:()
~perm_rot	src/comb/perm-rot.h	/^    ~perm_rot()$/;"	f	class:perm_rot	access:public	signature:()
~perm_st	src/comb/perm-st.h	/^    ~perm_st()$/;"	f	class:perm_st	access:public	signature:()
~perm_st_gray	src/comb/perm-st-gray.h	/^    ~perm_st_gray()$/;"	f	class:perm_st_gray	access:public	signature:()
~perm_st_pref	src/comb/perm-st-pref.h	/^    ~perm_st_pref()$/;"	f	class:perm_st_pref	access:public	signature:()
~perm_star	src/comb/perm-star.h	/^    ~perm_star()$/;"	f	class:perm_star	access:public	signature:()
~perm_star_swaps	src/comb/perm-star-swaps.h	/^    ~perm_star_swaps()$/;"	f	class:perm_star_swaps	access:public	signature:()
~perm_trotter	src/comb/attic/perm-trotter.h	/^    ~perm_trotter()$/;"	f	class:perm_trotter	access:public	signature:()
~perm_trotter	src/comb/perm-trotter.h	/^    ~perm_trotter()$/;"	f	class:perm_trotter	access:public	signature:()
~perm_trotter_lg	src/comb/perm-trotter-lg.h	/^    ~perm_trotter_lg()$/;"	f	class:perm_trotter_lg	access:public	signature:()
~perm_visit	src/comb/attic/permvisit.cc	/^perm_visit::~perm_visit()$/;"	f	class:perm_visit	signature:()
~perm_visit	src/comb/attic/permvisit.h	/^    ~perm_visit();$/;"	p	class:perm_visit	access:public	signature:()
~priority_queue	src/ds/priorityqueue.h	/^    ~priority_queue()$/;"	f	class:priority_queue	access:public	signature:()
~priority_queue1	src/ds/attic/priorityqueue1.h	/^    ~priority_queue1()$/;"	f	class:priority_queue1	access:public	signature:()
~queue	src/ds/queue.h	/^    ~queue()  { delete [] x_; }$/;"	f	class:queue	access:public	signature:()
~rarray	src/ds/attic/rarray.h	/^    ~rarray()  { delete [] x_; }$/;"	f	class:rarray	access:public	signature:()
~rgs_fincr	src/comb/rgs-fincr.h	/^    ~rgs_fincr()$/;"	f	class:rgs_fincr	access:public	signature:()
~rgs_kincr	src/comb/rgs-kincr.h	/^    ~rgs_kincr()$/;"	f	class:rgs_kincr	access:public	signature:()
~rgs_maxincr	src/comb/rgs-maxincr.h	/^    ~rgs_maxincr()$/;"	f	class:rgs_maxincr	access:public	signature:()
~ringbuffer	src/ds/ringbuffer.h	/^    ~ringbuffer()  { delete [] x_; }$/;"	f	class:ringbuffer	access:public	signature:()
~rset	src/ds/attic/rset.h	/^    ~rset()  { delete [] x_; }$/;"	f	class:rset	access:public	signature:()
~ruler_func	src/comb/ruler-func.h	/^    ~ruler_func()$/;"	f	class:ruler_func	access:public	signature:()
~ruler_func1	src/comb/ruler-func1.h	/^    ~ruler_func1()  { ; }$/;"	f	class:ruler_func1	access:public	signature:()
~ruler_func_s	src/comb/ruler-func-s.h	/^    ~ruler_func_s()  { ; }$/;"	f	class:ruler_func_s	access:public	signature:()
~schroeder_path_lex	src/comb/schroeder-path-lex.h	/^    ~schroeder_path_lex()$/;"	f	class:schroeder_path_lex	access:public	signature:()
~schroeder_rgs_lex	src/comb/schroeder-rgs-lex.h	/^    ~schroeder_rgs_lex()$/;"	f	class:schroeder_rgs_lex	access:public	signature:()
~score_sequence	src/comb/score-sequence.h	/^    ~score_sequence()$/;"	f	class:score_sequence	access:public	signature:()
~setpart	src/comb/setpart.h	/^    ~setpart()$/;"	f	class:setpart	access:public	signature:()
~setpart_ccf_rgs_lex	src/comb/setpart-ccf-rgs-lex.h	/^    ~setpart_ccf_rgs_lex()$/;"	f	class:setpart_ccf_rgs_lex	access:public	signature:()
~setpart_ck_rgs	src/comb/setpart-ck-rgs.h	/^    ~setpart_ck_rgs()$/;"	f	class:setpart_ck_rgs	access:public	signature:()
~setpart_p_rgs_lex	src/comb/setpart-p-rgs-lex.h	/^    ~setpart_p_rgs_lex()$/;"	f	class:setpart_p_rgs_lex	access:public	signature:()
~setpart_rgs_gray	src/comb/setpart-rgs-gray.h	/^    ~setpart_rgs_gray()$/;"	f	class:setpart_rgs_gray	access:public	signature:()
~setpart_rgs_lex	src/comb/setpart-rgs-lex.h	/^    ~setpart_rgs_lex()$/;"	f	class:setpart_rgs_lex	access:public	signature:()
~setpart_rgs_subset_lex	src/comb/setpart-rgs-subset-lex.h	/^    ~setpart_rgs_subset_lex()$/;"	f	class:setpart_rgs_subset_lex	access:public	signature:()
~setpart_s_zero_map_rgs	src/comb/setpart-s-zero-map-rgs.h	/^    ~setpart_s_zero_map_rgs()$/;"	f	class:setpart_s_zero_map_rgs	access:public	signature:()
~setpart_zero_map_rgs	src/comb/setpart-zero-map-rgs.h	/^    ~setpart_zero_map_rgs()$/;"	f	class:setpart_zero_map_rgs	access:public	signature:()
~skew_binary	src/comb/skew-binary.h	/^    ~skew_binary()$/;"	f	class:skew_binary	access:public	signature:()
~smooth_rfact_rgs	src/comb/smooth-rfact-rgs.h	/^    ~smooth_rfact_rgs()$/;"	f	class:smooth_rfact_rgs	access:public	signature:()
~stack	src/ds/stack.h	/^    ~stack()  { delete [] x_; }$/;"	f	class:stack	access:public	signature:()
~string_subst	src/comb/attic/stringsubst.h	/^    ~string_subst()$/;"	f	class:string_subst	access:public	signature:()
~string_subst	src/comb/string-subst.h	/^    ~string_subst()$/;"	f	class:string_subst	access:public	signature:()
~subset_debruijn	src/comb/attic/subsetdebruijn.h	/^    ~subset_debruijn()  { delete [] x;}$/;"	f	class:subset_debruijn	access:public	signature:()
~subset_debruijn	src/comb/subset-debruijn.h	/^    ~subset_debruijn()  { delete [] x; }$/;"	f	class:subset_debruijn	access:public	signature:()
~subset_deltalex	src/comb/subset-deltalex.h	/^    ~subset_deltalex()$/;"	f	class:subset_deltalex	access:public	signature:()
~subset_gray	src/comb/subset-gray.h	/^    ~subset_gray()$/;"	f	class:subset_gray	access:public	signature:()
~subset_gray_delta	src/comb/subset-gray-delta.h	/^    ~subset_gray_delta()$/;"	f	class:subset_gray_delta	access:public	signature:()
~subset_lex	src/comb/subset-lex.h	/^    ~subset_lex()$/;"	f	class:subset_lex	access:public	signature:()
~subset_monotone	src/comb/attic/subset-monotone.h	/^    virtual ~subset_monotone()  { delete [] x; }$/;"	f	class:subset_monotone	access:public	signature:()
~tcrc64	src/bits/tcrc64.h	/^    ~tcrc64()  {;}$/;"	f	class:tcrc64	access:public	signature:()
~thue_morse	src/bits/thue-morse.h	/^    ~thue_morse()  { ; }$/;"	f	class:thue_morse	access:public	signature:()
~tree_lev_seq	src/comb/tree-lev-seq.h	/^    ~tree_lev_seq()$/;"	f	class:tree_lev_seq	access:public	signature:()
~trigrec	src/aux0/attic/trigrec.h	/^    ~trigrec()  {;}$/;"	f	class:trigrec	access:public	signature:()
~vector	src/matrix/vector.h	/^    ~vector()$/;"	f	class:vector	access:public	signature:()
~wavelet_filter	src/wavelet/waveletfilter.h	/^    ~wavelet_filter()$/;"	f	class:wavelet_filter	access:public	signature:()
~weakly_unimodal_rgs_lex	src/comb/weakly-unimodal-rgs-lex.h	/^    ~weakly_unimodal_rgs_lex()$/;"	f	class:weakly_unimodal_rgs_lex	access:public	signature:()
~wfl_cell	src/comb/wfl-hilbert.h	/^    ~wfl_cell()  { ; }$/;"	f	class:wfl_cell	access:public	signature:()
~wfl_hilbert	src/comb/wfl-hilbert.h	/^    ~wfl_hilbert()  { ; }$/;"	f	class:wfl_hilbert	access:public	signature:()
~word_stats	src/comb/word-stats.h	/^    ~word_stats()  { delete [] h; }$/;"	f	class:word_stats	access:public	signature:()
~young_tab_rgs	src/comb/young-tab-rgs.h	/^    ~young_tab_rgs()$/;"	f	class:young_tab_rgs	access:public	signature:()
~young_tab_rgs_subset_lex	src/comb/young-tab-rgs-subset-lex.h	/^    ~young_tab_rgs_subset_lex()$/;"	f	class:young_tab_rgs_subset_lex	access:public	signature:()
